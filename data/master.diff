diff --git a/Bundles/Acl/composer.json b/Bundles/Acl/composer.json
index 1f7945e..d4f8a9a 100644
--- a/Bundles/Acl/composer.json
+++ b/Bundles/Acl/composer.json
@@ -6,22 +6,25 @@
     }
   },
   "require": {
-    "spryker/application": "^2.4.4",
     "spryker/config": "^2.0.0",
     "spryker/gui": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/silex": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/url": "^2.0.0",
-    "spryker/user": "^2.0.0"
+    "spryker/user": "^2.0.0",
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer.",
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Acl bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/AclDependencyProvider.php b/Bundles/Acl/src/Spryker/Zed/Acl/AclDependencyProvider.php
index 31dd5d3..ebb2470 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/AclDependencyProvider.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/AclDependencyProvider.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Acl;
 
 use Spryker\Zed\Acl\Dependency\Facade\AclToUserBridge;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 
@@ -31,8 +30,8 @@ class AclDependencyProvider extends AbstractBundleDependencyProvider
         $container = $this->addFacadeUser($container);
         $container = $this->addAclQueryContainer($container);
 
-        $container[self::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        $container[self::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
         return $container;
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/GroupController.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/GroupController.php
index c15524d..97b5474 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/GroupController.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/GroupController.php
@@ -11,7 +11,7 @@ use Generated\Shared\Transfer\RolesTransfer;
 use Generated\Shared\Transfer\RoleTransfer;
 use Spryker\Zed\Acl\Business\Exception\UserAndGroupNotFoundException;
 use Spryker\Zed\Acl\Communication\Form\GroupForm;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
 
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/IndexController.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/IndexController.php
index 43abe6f..41a6636 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/IndexController.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Acl\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Acl\Communication\AclCommunicationFactory getFactory()
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RoleController.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RoleController.php
index 5d49938..a527f79 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RoleController.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RoleController.php
@@ -12,7 +12,7 @@ use Generated\Shared\Transfer\RuleTransfer;
 use Spryker\Zed\Acl\Business\Exception\RoleNameExistsException;
 use Spryker\Zed\Acl\Business\Exception\RootNodeModificationException;
 use Spryker\Zed\Acl\Communication\Form\RoleForm;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RulesetController.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RulesetController.php
index 3dd2058..4b100b6 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RulesetController.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Controller/RulesetController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Acl\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
 
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/AclInstallerPlugin.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/AclInstallerPlugin.php
new file mode 100644
index 0000000..18f44dd
--- /dev/null
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/AclInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Acl\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Acl\Business\AclFacade getFacade()
+ * @method \Spryker\Zed\Acl\Communication\AclCommunicationFactory getFactory()
+ */
+class AclInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/GroupPlugin.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/GroupPlugin.php
new file mode 100644
index 0000000..17a4789
--- /dev/null
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/GroupPlugin.php
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Acl\Communication\Plugin;
+
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\User\Dependency\Plugin\GroupPluginInterface;
+
+/**
+ * @method \Spryker\Zed\Acl\Business\AclFacade getFacade()
+ * @method \Spryker\Zed\Acl\Communication\AclCommunicationFactory getFactory()
+ */
+class GroupPlugin extends AbstractPlugin implements GroupPluginInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getAllGroups()
+    {
+        return $this->getFacade()->getAllGroups();
+    }
+
+    /**
+     * @param int $idUser
+     *
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getUserGroups($idUser)
+    {
+        return $this->getFacade()->getUserGroups($idUser);
+    }
+
+    /**
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return void
+     */
+    public function addUserToGroup($idUser, $idGroup)
+    {
+        $this->getFacade()->addUserToGroup($idUser, $idGroup);
+    }
+
+    /**
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return void
+     */
+    public function removeUserFromGroup($idUser, $idGroup)
+    {
+        $this->getFacade()->removeUserFromGroup($idUser, $idGroup);
+    }
+
+}
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/Installer.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/Installer.php
deleted file mode 100644
index 3a661ca..0000000
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Acl\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Acl\Business\AclFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install();
-    }
-
-}
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/GroupTable.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/GroupTable.php
index 52f60c8..9455de6 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/GroupTable.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/GroupTable.php
@@ -9,8 +9,8 @@ namespace Spryker\Zed\Acl\Communication\Table;
 
 use Orm\Zed\Acl\Persistence\Map\SpyAclGroupTableMap;
 use Orm\Zed\Acl\Persistence\SpyAclGroupQuery;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
@@ -27,18 +27,18 @@ class GroupTable extends AbstractTable
     protected $aclGroupQuery;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Orm\Zed\Acl\Persistence\SpyAclGroupQuery $aclGroupQuery
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(SpyAclGroupQuery $aclGroupQuery, DateFormatterInterface $dateFormatter)
+    public function __construct(SpyAclGroupQuery $aclGroupQuery, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->aclGroupQuery = $aclGroupQuery;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -84,7 +84,7 @@ class GroupTable extends AbstractTable
         foreach ($groupCollection as $group) {
             $groups[] = [
                 SpyAclGroupTableMap::COL_NAME => $group[SpyAclGroupTableMap::COL_NAME],
-                SpyAclGroupTableMap::COL_CREATED_AT => $this->dateFormatter->dateTime($group[SpyAclGroupTableMap::COL_CREATED_AT]),
+                SpyAclGroupTableMap::COL_CREATED_AT => $this->utilDateTimeService->formatDateTime($group[SpyAclGroupTableMap::COL_CREATED_AT]),
                 self::ROLES => $this->createRoleUrl($group),
                 self::EDIT => $this->createEditUrl($group),
             ];
diff --git a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/RoleTable.php b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/RoleTable.php
index 6daaffc..be858aa 100644
--- a/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/RoleTable.php
+++ b/Bundles/Acl/src/Spryker/Zed/Acl/Communication/Table/RoleTable.php
@@ -8,9 +8,9 @@
 namespace Spryker\Zed\Acl\Communication\Table;
 
 use Orm\Zed\Acl\Persistence\Map\SpyAclRoleTableMap;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Acl\AclConstants;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
 use Spryker\Zed\Acl\Persistence\AclQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
@@ -29,18 +29,18 @@ class RoleTable extends AbstractTable
     protected $aclQueryContainer;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Spryker\Zed\Acl\Persistence\AclQueryContainerInterface $aclQueryContainer
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(AclQueryContainerInterface $aclQueryContainer, DateFormatterInterface $dateFormatter)
+    public function __construct(AclQueryContainerInterface $aclQueryContainer, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->aclQueryContainer = $aclQueryContainer;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -83,7 +83,7 @@ class RoleTable extends AbstractTable
         $results = [];
         foreach ($queryResults as $rule) {
             $results[] = [
-                SpyAclRoleTableMap::COL_CREATED_AT => $this->dateFormatter->dateTime($rule[SpyAclRoleTableMap::COL_CREATED_AT]),
+                SpyAclRoleTableMap::COL_CREATED_AT => $this->utilDateTimeService->formatDateTime($rule[SpyAclRoleTableMap::COL_CREATED_AT]),
                 SpyAclRoleTableMap::COL_NAME => $rule[SpyAclRoleTableMap::COL_NAME],
                 self::ACTION => implode(' ', $this->createTableActions($rule)),
             ];
diff --git a/Bundles/Application/composer.json b/Bundles/Application/composer.json
index fbbc677..1e03dd0 100644
--- a/Bundles/Application/composer.json
+++ b/Bundles/Application/composer.json
@@ -1,41 +1,17 @@
 {
   "name": "spryker/application",
-  "autoload": {
-    "psr-0": {
-      "Spryker": "src/"
-    }
-  },
-  "autoload-dev": {
-    "psr-0": {
-      "Acceptance": "tests/",
-      "Functional": "tests/",
-      "Unit": "tests/"
-    },
-    "psr-4": {
-      "Application\\Module\\": "tests/_support/Module"
-    }
-  },
   "require": {
-    "spryker/assertion": "^2.0.0",
-    "spryker/auth": "^2.0.2",
     "spryker/config": "^2.2.0",
-    "spryker/console": "^2.0.0",
-    "spryker/gui": "^2.0.0",
-    "spryker/guzzle": "^2.1.0",
     "spryker/kernel": "^2.5.0",
-    "spryker/library": "^2.0.0",
     "spryker/log": "^2.0.0",
     "spryker/monolog": "^2.0.0",
-    "spryker/new-relic": "^2.1.0",
-    "spryker/propel": "^2.3.1",
-    "spryker/session": "^2.1.2",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^1.0.0 || ^2.0.0",
     "spryker/twig": "^2.1.0",
-    "spryker/url": "^2.0.0",
-    "spryker/zed-request": "^2.0.0",
-    "spryker/zend": "^2.0.0"
+    "spryker/util-encoding": "^1.0.0",
+    "spryker/util-network": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
@@ -45,6 +21,21 @@
   "license": "proprietary",
   "minimum-stability": "dev",
   "prefer-stable": true,
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Acceptance": "tests/",
+      "Functional": "tests/",
+      "Unit": "tests/"
+    },
+    "psr-4": {
+      "Application\\Module\\": "tests/_support/Module"
+    }
+  },
   "extra": {
     "branch-alias": {
       "dev-master": "2.0.x-dev"
diff --git a/Bundles/Application/config/config_default-test.php b/Bundles/Application/config/config_default-test.php
index 1884c22..560ff47 100755
--- a/Bundles/Application/config/config_default-test.php
+++ b/Bundles/Application/config/config_default-test.php
@@ -1,27 +1,19 @@
 <?php
 
 use Spryker\Shared\Application\ApplicationConstants;
+use Spryker\Shared\ErrorHandler\ErrorHandlerConstants;
+use Spryker\Shared\Kernel\KernelConstants;
 
-$config[ApplicationConstants::PROJECT_NAMESPACES] = [
+$config[KernelConstants::PROJECT_NAMESPACES] = [
     'Pyz',
 ];
-$config[ApplicationConstants::CORE_NAMESPACES] = [
+$config[KernelConstants::CORE_NAMESPACES] = [
     'Spryker',
 ];
 
 $config[ApplicationConstants::PROJECT_TIMEZONE] = 'UTC';
-$config[ApplicationConstants::PROJECT_NAMESPACE] = 'Pyz';
+$config[KernelConstants::PROJECT_NAMESPACE] = 'Pyz';
 
-$config[ApplicationConstants::ERROR_LEVEL] = E_ALL;
+$config[ErrorHandlerConstants::ERROR_LEVEL] = E_ALL;
 
-/* Customer */
-$config[ApplicationConstants::APPLICATION_SPRYKER_ROOT] = APPLICATION_ROOT_DIR . '/../';
-$config[ApplicationConstants::ZED_TWIG_OPTIONS] = [
-    'cache' => \Spryker\Shared\Library\DataDirectory::getLocalStoreSpecificPath('cache/Zed/twig'),
-];
-
-// Why this?
 $config[ApplicationConstants::YVES_SSL_ENABLED] = false;
-$config[ApplicationConstants::NAVIGATION_CACHE_ENABLED] = false;
-
-$config[ApplicationConstants::NAVIGATION_ENABLED] = false;
diff --git a/Bundles/Application/src/Spryker/Shared/Application/ApplicationConstants.php b/Bundles/Application/src/Spryker/Shared/Application/ApplicationConstants.php
index 7317684..d835847 100644
--- a/Bundles/Application/src/Spryker/Shared/Application/ApplicationConstants.php
+++ b/Bundles/Application/src/Spryker/Shared/Application/ApplicationConstants.php
@@ -7,28 +7,21 @@
 
 namespace Spryker\Shared\Application;
 
-use Spryker\Shared\Session\SessionConstants;
+use Spryker\Shared\Kernel\KernelConstants;
 
 interface ApplicationConstants
 {
 
-    const ALLOW_INTEGRATION_CHECKS = 'ALLOW_INTEGRATION_CHECKS';
     const COUCHBASE_BUCKET_PREFIX = 'COUCHBASE_BUCKET_PREFIX';
     const DISPLAY_ERRORS = 'DISPLAY_ERRORS';
 
     const ENABLE_APPLICATION_DEBUG = 'ENABLE_APPLICATION_DEBUG';
     const ENABLE_WEB_PROFILER = 'ENABLE_WEB_PROFILER';
-    const NAVIGATION_CACHE_ENABLED = 'navigation cache enabled';
-    const NAVIGATION_ENABLED = 'NAVIGATION_ENABLED';
-    const SET_REPEAT_DATA = 'SET_REPEAT_DATA';
+
     const SHOW_SYMFONY_TOOLBAR = 'SHOW_SYMFONY_TOOLBAR'; //deprecated
     const STORE_PREFIX = 'STORE_PREFIX';
     const BACKTRACE_USER_PATH = 'BACKTRACE_USER_PATH';
 
-    // see http://twig.sensiolabs.org/doc/api.html#environment-options
-    const YVES_TWIG_OPTIONS = 'YVES_TWIG_OPTIONS';
-    const ZED_TWIG_OPTIONS = 'ZED_TWIG_OPTIONS';
-
     const YVES_THEME = 'YVES_THEME';
     const YVES_TRUSTED_PROXIES = 'YVES_TRUSTED_PROXIES';
     const YVES_TRUSTED_HOSTS = 'YVES_TRUSTED_HOSTS';
@@ -38,142 +31,21 @@ interface ApplicationConstants
     const YVES_COMPLETE_SSL_ENABLED = 'YVES_COMPLETE_SSL_ENABLED';
     const YVES_SSL_EXCLUDED = 'YVES_SSL_EXCLUDED';
 
-    /**
-     * @deprecated Use Session bundle SessionConstants::YVES_SESSION_SAVE_HANDLER instead.
-     */
-    const YVES_SESSION_SAVE_HANDLER = 'YVES_SESSION_SAVE_HANDLER';
-    /**
-     * @deprecated Use Session bundle SessionConstants::YVES_SESSION_COOKIE_NAME instead.
-     */
-    const YVES_SESSION_NAME = 'YVES_SESSION_NAME';
-    /**
-     * @deprecated Use Session bundle SessionConstants::YVES_SESSION_COOKIE_DOMAIN instead.
-     */
-    const YVES_SESSION_COOKIE_DOMAIN = 'YVES_SESSION_COOKIE_DOMAIN';
-    /**
-     * @deprecated Use Session bundle SessionConstants class constants instead.
-     */
-    const YVES_COOKIE_DOMAIN = 'YVES_COOKIE_DOMAIN';
-    /**
-     * @deprecated Use Session bundle SessionConstants class constants instead.
-     */
-    const YVES_COOKIE_SECURE = 'YVES_COOKIE_SECURE';
-
     const YVES_COOKIE_VISITOR_ID_NAME = 'YVES_COOKIE_VISITOR_ID_NAME';
     const YVES_COOKIE_VISITOR_ID_VALID_FOR = 'YVES_COOKIE_VISITOR_ID_VALID_FOR';
     const YVES_COOKIE_DEVICE_ID_NAME = 'YVES_COOKIE_DEVICE_ID_NAME';
     const YVES_COOKIE_DEVICE_ID_VALID_FOR = 'YVES_COOKIE_DEVICE_ID_VALID_FOR';
 
-    /**
-     * @deprecated Use ErrorHandlerConstants::YVES_ERROR_PAGE instead.
-     */
-    const YVES_ERROR_PAGE = 'YVES_ERROR_PAGE';
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ERROR_RENDERER to choose renderer.
-     */
-    const YVES_SHOW_EXCEPTION_STACK_TRACE = 'YVES_SHOW_EXCEPTION_STACK_TRACE';
-
-    const TRANSFER_USERNAME = 'TRANSFER_USERNAME';
-    const TRANSFER_PASSWORD = 'TRANSFER_PASSWORD';
-    const TRANSFER_SSL = 'TRANSFER_SSL';
-    const TRANSFER_DEBUG_SESSION_FORWARD_ENABLED = 'TRANSFER_DEBUG_SESSION_FORWARD_ENABLED';
-    const TRANSFER_DEBUG_SESSION_NAME = 'TRANSFER_DEBUG_SESSION_NAME';
-
     const YVES_AUTH_SETTINGS = 'YVES_AUTH_SETTINGS';
 
-    const PROJECT_NAMESPACES = 'PROJECT_NAMESPACES';
-    const CORE_NAMESPACES = 'CORE_NAMESPACES';
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_PROTOCOL = SessionConstants::YVES_SESSION_REDIS_PROTOCOL;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_PASSWORD = SessionConstants::YVES_SESSION_REDIS_PASSWORD;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_HOST = SessionConstants::YVES_SESSION_REDIS_HOST;
-
     /**
-     * @deprecated Use Session bundle SessionConstants class constant.
+     * @deprecated Use `KernelConstants::PROJECT_NAMESPACES` instead
      */
-    const YVES_STORAGE_SESSION_REDIS_PORT = SessionConstants::YVES_SESSION_REDIS_PORT;
-
+    const PROJECT_NAMESPACES = KernelConstants::PROJECT_NAMESPACES;
     /**
-     * @deprecated Use Session bundle SessionConstants class constant.
+     * @deprecated Use `KernelConstants::CORE_NAMESPACES` instead
      */
-    const YVES_STORAGE_SESSION_REDIS_DATABASE = SessionConstants::YVES_SESSION_REDIS_DATABASE;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_FILE_PATH = SessionConstants::YVES_SESSION_FILE_PATH;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_PERSISTENT_CONNECTION = SessionConstants::YVES_SESSION_PERSISTENT_CONNECTION;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_TIME_TO_LIVE = SessionConstants::YVES_SESSION_TIME_TO_LIVE;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_REDIS_PROTOCOL = SessionConstants::ZED_SESSION_REDIS_PROTOCOL;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_REDIS_HOST = SessionConstants::ZED_SESSION_REDIS_HOST;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_REDIS_PORT = SessionConstants::ZED_SESSION_REDIS_PORT;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_REDIS_PASSWORD = SessionConstants::ZED_SESSION_REDIS_PASSWORD;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_REDIS_DATABASE = SessionConstants::ZED_SESSION_REDIS_DATABASE;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_FILE_PATH = SessionConstants::ZED_SESSION_FILE_PATH;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_PERSISTENT_CONNECTION = SessionConstants::ZED_SESSION_PERSISTENT_CONNECTION;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_TIME_TO_LIVE = SessionConstants::ZED_SESSION_TIME_TO_LIVE;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_COOKIE_NAME = SessionConstants::ZED_SESSION_COOKIE_NAME;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const ZED_STORAGE_SESSION_COOKIE_SECURE = SessionConstants::ZED_SESSION_COOKIE_SECURE;
+    const CORE_NAMESPACES = KernelConstants::CORE_NAMESPACES;
 
     const ELASTICA_PARAMETER__HOST = 'ELASTICA_PARAMETER__HOST';
     const ELASTICA_PARAMETER__PORT = 'ELASTICA_PARAMETER__PORT';
@@ -182,84 +54,15 @@ interface ApplicationConstants
     const ELASTICA_PARAMETER__AUTH_HEADER = 'ELASTICA_PARAMETER__AUTH_HEADER';
     const ELASTICA_PARAMETER__DOCUMENT_TYPE = 'ELASTICA_PARAMETER__DOCUMENT_TYPE';
 
-    const JENKINS_BASE_URL = 'JENKINS_BASE_URL';
-    const JENKINS_DIRECTORY = 'JENKINS_DIRECTORY';
-
-    /**
-     * @deprecated Use Session bundle SessionConstants::ZED_SESSION_SAVE_HANDLER instead.
-     */
-    const ZED_SESSION_SAVE_HANDLER = 'ZED_SESSION_SAVE_HANDLER';
-
     /**
      * SSL
      */
     const ZED_SSL_ENABLED = 'ZED_SSL_ENABLED';
     const ZED_SSL_EXCLUDED = 'ZED_SSL_EXCLUDED';
-    const ZED_API_SSL_ENABLED = 'ZED_API_SSL_ENABLED';
     const ZED_HTTP_STRICT_TRANSPORT_SECURITY_ENABLED = 'ZED_HTTP_STRICT_TRANSPORT_SECURITY_ENABLED';
     const ZED_HTTP_STRICT_TRANSPORT_SECURITY_CONFIG = 'ZED_HTTP_STRICT_TRANSPORT_SECURITY_CONFIG';
 
     /**
-     * @deprecated Use PropelConstants::PROPEL instead
-     */
-    const PROPEL = 'PROPEL';
-
-    /**
-     * @deprecated Use PropelConstants::PROPEL_DEBUG instead
-     */
-    const PROPEL_DEBUG = 'PROPEL_DEBUG';
-
-    /**
-     * @deprecated Use PropelConstants::PROPEL_SHOW_EXTENDED_EXCEPTION instead
-     */
-    const PROPEL_SHOW_EXTENDED_EXCEPTION = 'PROPEL_SHOW_EXTENDED_EXCEPTION';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_USERNAME instead
-     */
-    const ZED_DB_USERNAME = 'ZED_DB_USERNAME';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_PASSWORD instead
-     */
-    const ZED_DB_PASSWORD = 'ZED_DB_PASSWORD';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_DATABASE instead
-     */
-    const ZED_DB_DATABASE = 'ZED_DB_DATABASE';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_HOST instead
-     */
-    const ZED_DB_HOST = 'ZED_DB_HOST';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_PORT instead
-     */
-    const ZED_DB_PORT = 'ZED_DB_PORT';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_ENGINE instead
-     */
-    const ZED_DB_ENGINE = 'ZED_DB_ENGINE';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_ENGINE_MYSQL instead
-     */
-    const ZED_DB_ENGINE_MYSQL = 'ZED_DB_ENGINE_MYSQL';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_ENGINE_PGSQL instead
-     */
-    const ZED_DB_ENGINE_PGSQL = 'ZED_DB_ENGINE_PGSQL';
-
-    /**
-     * @deprecated Use PropelConstants::ZED_DB_SUPPORTED_ENGINES instead
-     */
-    const ZED_DB_SUPPORTED_ENGINES = 'ZED_DB_SUPPORTED_ENGINES';
-
-    /**
      * RabbitMQ
      */
     const ZED_RABBITMQ_USERNAME = 'ZED_RABBITMQ_USERNAME';
@@ -272,7 +75,11 @@ interface ApplicationConstants
      * Global timezone used to for underlying data, timezones for presentation layer can be changed in stores configuration
      */
     const PROJECT_TIMEZONE = 'PROJECT_TIMEZONE';
-    const PROJECT_NAMESPACE = 'PROJECT_NAMESPACE';
+
+    /**
+     * @deprecated Use `KernelConstants::PROJECT_NAMESPACE` instead
+     */
+    const PROJECT_NAMESPACE = KernelConstants::PROJECT_NAMESPACE;
 
     /**
      * Cloud
@@ -298,33 +105,6 @@ interface ApplicationConstants
     const HOST_SSL_STATIC_ASSETS = 'HOST_SSL_STATIC_ASSETS';
     const HOST_SSL_STATIC_MEDIA = 'HOST_SSL_STATIC_MEDIA';
 
-    /**
-     * @deprecated Use LogConstants::LOG_LEVEL instead
-     */
-    const LOG_LEVEL = 'LOG_LEVEL';
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ERROR_LEVEL instead
-     */
-    const ERROR_LEVEL = 'ERROR_LEVEL';
-
-    /**
-     * @deprecated Use StorageConstants::STORAGE_KV_SOURCE instead
-     */
-    const STORAGE_KV_SOURCE = 'STORAGE_KV_SOURCE';
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ZED_ERROR_PAGE instead.
-     */
-    const ZED_ERROR_PAGE = 'ZED_ERROR_PAGE';
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ERROR_RENDERER to choose renderer.
-     */
-    const ZED_SHOW_EXCEPTION_STACK_TRACE = 'ZED_SHOW_EXCEPTION_STACK_TRACE';
-
-    const APPLICATION_SPRYKER_ROOT = 'APPLICATION_SPRYKER_ROOT';
-
     const FORM_FACTORY = 'FORM_FACTORY';
 
 }
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Communication/Application.php b/Bundles/Application/src/Spryker/Shared/Application/Communication/Application.php
deleted file mode 100644
index fda6efd..0000000
--- a/Bundles/Application/src/Spryker/Shared/Application/Communication/Application.php
+++ /dev/null
@@ -1,87 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Application\Communication;
-
-use Silex\Application as SilexApplication;
-use Silex\Application\TranslationTrait;
-use Silex\Application\TwigTrait;
-use Silex\Application\UrlGeneratorTrait;
-use Spryker\Shared\Gui\Form\AbstractForm;
-use Symfony\Cmf\Component\Routing\ChainRouter;
-use Symfony\Component\Routing\RouterInterface;
-
-class Application extends SilexApplication
-{
-
-    use TranslationTrait;
-    use TwigTrait;
-    use UrlGeneratorTrait;
-
-    const REQUEST = 'request';
-    const ROUTERS = 'routers';
-    const REQUEST_STACK = 'request_stack';
-
-    /**
-     * Returns a form.
-     *
-     * Ensure that you registered `Spryker\Shared\Application\ServiceProvider\FormFactoryServiceProvider`
-     *
-     * @see createBuilder()
-     *
-     * @deprecated Create forms inside your bundle's factory with getting the form factory,
-     * e.g. FooBundleFactory.php: $this->getProvidedDependency(ApplicationConstants::FORM_FACTORY)->create(FooFormType::class);
-     *
-     * @param string|\Symfony\Component\Form\FormTypeInterface $type The type of the form
-     * @param mixed $data The initial data
-     * @param array $options The options
-     *
-     * @return \Symfony\Component\Form\FormInterface The form named after the type
-     */
-    public function createForm($type = 'form', $data = null, array $options = [])
-    {
-        /** @var \Symfony\Component\Form\FormInterface $form */
-        $form = $this['form.factory']->create($type, $data, $options);
-        $request = ($this[self::REQUEST_STACK]) ? $this[self::REQUEST_STACK]->getCurrentRequest() : $this[self::REQUEST];
-        $form->handleRequest($request);
-
-        return $form;
-    }
-
-    /**
-     * @deprecated Create forms inside your bundle's factory with getting the form factory,
-     * e.g. FooBundleFactory.php: $this->getFormFactory()->create(new FooFormType());
-     *
-     * @param \Spryker\Shared\Gui\Form\AbstractForm $form
-     * @param array $options The options
-     *
-     * @return \Symfony\Component\Form\FormInterface The form named after the type
-     */
-    public function buildForm(AbstractForm $form, array $options = [])
-    {
-        return $this['form.factory']->create($form, $form->populateFormFields(), $options);
-    }
-
-    /**
-     * Adds a router to the list of routers.
-     *
-     * @param \Symfony\Component\Routing\RouterInterface $router The router
-     * @param int $priority The priority of the router
-     *
-     * @return void
-     */
-    public function addRouter(RouterInterface $router, $priority = 0)
-    {
-        /** @var \Pimple $this */
-        $this[self::ROUTERS] = $this->share($this->extend(self::ROUTERS, function (ChainRouter $chainRouter) use ($router, $priority) {
-            $chainRouter->add($router, $priority);
-
-            return $chainRouter;
-        }));
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Config/SprykerLoggerConfig.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Config/SprykerLoggerConfig.php
index c603307..cec418c 100644
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Config/SprykerLoggerConfig.php
+++ b/Bundles/Application/src/Spryker/Shared/Application/Log/Config/SprykerLoggerConfig.php
@@ -17,7 +17,6 @@ use Spryker\Shared\Application\Log\Processor\GuzzleBodyProcessor;
 use Spryker\Shared\Application\Log\Processor\RequestProcessor;
 use Spryker\Shared\Application\Log\Processor\ResponseProcessor;
 use Spryker\Shared\Application\Log\Processor\ServerProcessor;
-use Spryker\Shared\Application\Log\Processor\TransferSanitizerProcessor;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Log\Config\LoggerConfigInterface;
 use Spryker\Shared\Log\LogConstants;
@@ -58,7 +57,6 @@ class SprykerLoggerConfig implements LoggerConfigInterface
 
         return [
             new PsrLogMessageProcessor(),
-            new TransferSanitizerProcessor($sanitizer),
             new EntitySanitizerProcessor($sanitizer),
             new EnvironmentProcessor(),
             new ServerProcessor(),
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/GuzzleBodyProcessor.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/GuzzleBodyProcessor.php
index c1de39a..fe05afe 100644
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/GuzzleBodyProcessor.php
+++ b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/GuzzleBodyProcessor.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\Application\Log\Processor;
 
-use Spryker\Shared\Library\Json;
+use Spryker\Service\UtilEncoding\Model\Json;
 use Spryker\Shared\Log\Sanitizer\SanitizerInterface;
 
 class GuzzleBodyProcessor
@@ -55,7 +55,8 @@ class GuzzleBodyProcessor
     protected function prepareBody($body)
     {
         if ($this->isJson($body)) {
-            $body = Json::decode($body, true);
+            $jsonUtil = new Json();
+            $body = $jsonUtil->decode($body, true);
         }
 
         if (is_array($body)) {
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/RequestProcessor.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/RequestProcessor.php
index 44fc07a..1dfd283 100644
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/RequestProcessor.php
+++ b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/RequestProcessor.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\Application\Log\Processor;
 
-use Spryker\Shared\Application\Log\Request\RequestId;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
 use Spryker\Shared\Log\Sanitizer\SanitizerInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -63,9 +63,9 @@ class RequestProcessor
      */
     public function getData(array $record)
     {
-        $requestIdHelper = new RequestId();
+        $utilNetworkService = new UtilNetworkService();
         $fields = [
-            static::REQUEST_ID => $requestIdHelper->getRequestId(),
+            static::REQUEST_ID => $utilNetworkService->getRequestId(),
             static::REQUEST_TYPE => $this->getSapi(),
             static::REQUEST_PARAMS => $this->getRequestParams(),
         ];
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/ServerProcessor.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/ServerProcessor.php
index d897938..da5ccf2 100644
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/ServerProcessor.php
+++ b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/ServerProcessor.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\Application\Log\Processor;
 
-use Spryker\Shared\Library\System;
+use Spryker\Service\UtilNetwork\Model\Host;
 
 class ServerProcessor
 {
@@ -92,7 +92,9 @@ class ServerProcessor
      */
     protected function getHost()
     {
-        return isset($_SERVER['COMPUTERNAME']) ? $_SERVER['COMPUTERNAME'] : System::getHostname();
+        $utilNetworkHost = new Host();
+
+        return isset($_SERVER['COMPUTERNAME']) ? $_SERVER['COMPUTERNAME'] : $utilNetworkHost->getHostname();
     }
 
     /**
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessor.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessor.php
deleted file mode 100644
index 61a3e47..0000000
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessor.php
+++ /dev/null
@@ -1,97 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Application\Log\Processor;
-
-use ArrayObject;
-use Spryker\Shared\Log\Sanitizer\SanitizerInterface;
-use Spryker\Shared\Transfer\TransferInterface;
-
-class TransferSanitizerProcessor
-{
-
-    const EXTRA = 'transfer';
-    const CONTEXT_KEY = 'transfer';
-    const RECORD_EXTRA = 'extra';
-    const RECORD_CONTEXT = 'context';
-
-    /**
-     * @var \Spryker\Shared\Log\Sanitizer\SanitizerInterface
-     */
-    protected $sanitizer;
-
-    /**
-     * @param \Spryker\Shared\Log\Sanitizer\SanitizerInterface $sanitizer
-     */
-    public function __construct(SanitizerInterface $sanitizer)
-    {
-        $this->sanitizer = $sanitizer;
-    }
-
-    /**
-     * @param array $record
-     *
-     * @return array
-     */
-    public function __invoke(array $record)
-    {
-        $transfer = $this->findTransfer((array)$record[static::RECORD_CONTEXT]);
-        if (!($transfer instanceof TransferInterface)) {
-            return $record;
-        }
-        unset($record[static::RECORD_CONTEXT][static::CONTEXT_KEY]);
-
-        $contextData = $this->transferToArray($transfer);
-        $contextData['class'] = get_class($transfer);
-        $sanitizedData = $this->sanitizer->sanitize($contextData);
-        $record[static::RECORD_EXTRA][static::EXTRA] = $sanitizedData;
-
-        return $record;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
-     *
-     * @return array
-     */
-    protected function transferToArray(TransferInterface $transfer)
-    {
-        $transferArray = $transfer->toArray();
-
-        foreach ($transferArray as $key => $value) {
-            if ($value instanceof ArrayObject) {
-                $data[$key] = [];
-            }
-
-            if (is_array($value) && (current($value) instanceof TransferInterface)) {
-                foreach ($value as $position => $transfer) {
-                    $value[$position] = $this->transferToArray($transfer);
-                }
-            }
-        }
-
-        return $transferArray;
-    }
-
-    /**
-     * @param array $context
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    protected function findTransfer(array $context)
-    {
-        if (!empty($context[static::CONTEXT_KEY])) {
-            return $context[static::CONTEXT_KEY];
-        }
-        if (current($context) instanceof TransferInterface) {
-            return current($context);
-        }
-
-        return null;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Shared/Application/Log/Request/RequestId.php b/Bundles/Application/src/Spryker/Shared/Application/Log/Request/RequestId.php
deleted file mode 100644
index 0596e2d..0000000
--- a/Bundles/Application/src/Spryker/Shared/Application/Log/Request/RequestId.php
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Application\Log\Request;
-
-use Spryker\Zed\Library\Generator\StringGenerator;
-
-class RequestId
-{
-
-    const REQUEST_ID_HEADER_KEY = 'HTTP_X_REQUEST_ID';
-
-    /**
-     * @var string
-     */
-    protected static $requestId;
-
-    /**
-     * @return string
-     */
-    public function getRequestId()
-    {
-        if (!static::$requestId) {
-            static::$requestId = $this->createRequestId();
-        }
-
-        return static::$requestId;
-    }
-
-    /**
-     * @return string
-     */
-    protected function createRequestId()
-    {
-        if (isset($_SERVER[static::REQUEST_ID_HEADER_KEY])) {
-            return $_SERVER[static::REQUEST_ID_HEADER_KEY];
-        }
-
-        $stringGenerator = new StringGenerator();
-        $requestId = $stringGenerator
-            ->setLength(8)
-            ->generateRandomString();
-
-        return $requestId;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Application.php b/Bundles/Application/src/Spryker/Yves/Application/Application.php
deleted file mode 100644
index 8d16833..0000000
--- a/Bundles/Application/src/Spryker/Yves/Application/Application.php
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Application;
-
-use Spryker\Shared\Application\Communication\Application as SharedApplication;
-use Spryker\Yves\Library\Session\TransferSession;
-
-class Application extends SharedApplication
-{
-
-    /**
-     * @return \Symfony\Component\HttpFoundation\Session\Session
-     */
-    public function getSession()
-    {
-        return $this['session'];
-    }
-
-    /**
-     * @return \Spryker\Yves\Library\Session\TransferSession
-     */
-    public function getTransferSession()
-    {
-        return new TransferSession($this['session']);
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface
-     */
-    public function getStorageKeyValue()
-    {
-        return $this['storage.keyValue'];
-    }
-
-    /**
-     * @return \Elastica\Client
-     */
-    public function getStorageElasticsearch()
-    {
-        return $this['storage.elasticsearch'];
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/ApplicationFactory.php b/Bundles/Application/src/Spryker/Yves/Application/ApplicationFactory.php
index a7b9224..b7f87b8 100644
--- a/Bundles/Application/src/Spryker/Yves/Application/ApplicationFactory.php
+++ b/Bundles/Application/src/Spryker/Yves/Application/ApplicationFactory.php
@@ -11,7 +11,6 @@ use Spryker\Shared\Application\EventListener\KernelLogListener;
 use Spryker\Shared\Log\LoggerTrait;
 use Spryker\Yves\Application\Plugin\Provider\ExceptionService\DefaultExceptionHandler;
 use Spryker\Yves\Application\Plugin\Provider\ExceptionService\ExceptionHandlerDispatcher;
-use Spryker\Yves\Application\Plugin\ZedRequestHeaderMiddleware;
 use Spryker\Yves\Kernel\AbstractFactory;
 use Symfony\Component\HttpFoundation\Response;
 
@@ -46,12 +45,4 @@ class ApplicationFactory extends AbstractFactory
         return new KernelLogListener($this->getLogger());
     }
 
-    /**
-     * @return \Spryker\Yves\Application\Plugin\ZedRequestHeaderMiddleware
-     */
-    public function createZedRequestHeaderMiddleware()
-    {
-        return new ZedRequestHeaderMiddleware();
-    }
-
 }
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Controller/AbstractController.php b/Bundles/Application/src/Spryker/Yves/Application/Controller/AbstractController.php
deleted file mode 100644
index 3642588..0000000
--- a/Bundles/Application/src/Spryker/Yves/Application/Controller/AbstractController.php
+++ /dev/null
@@ -1,334 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Application\Controller;
-
-use LogicException;
-use Spryker\Client\Kernel\ClassResolver\Client\ClientResolver;
-use Spryker\Shared\Gui\Form\AbstractForm;
-use Spryker\Yves\Application\Application;
-use Spryker\Yves\Kernel\ClassResolver\Factory\FactoryResolver;
-use Spryker\Yves\Kernel\Locator;
-use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpFoundation\Request;
-
-abstract class AbstractController
-{
-
-    /**
-     * @var \Spryker\Yves\Application\Application
-     */
-    private $application;
-
-    /**
-     * @var \Spryker\Yves\Kernel\AbstractFactory
-     */
-    private $factory;
-
-    /**
-     * @var \Spryker\Client\Kernel\AbstractClient
-     */
-    private $client;
-
-    /**
-     * @return void
-     */
-    public function initialize()
-    {
-    }
-
-    /**
-     * @param \Spryker\Yves\Application\Application $application
-     *
-     * @return $this
-     */
-    public function setApplication(Application $application)
-    {
-        $this->application = $application;
-    }
-
-    /**
-     * @param string $path
-     * @param array $parameters
-     * @param int $code
-     *
-     * @return \Symfony\Component\HttpFoundation\RedirectResponse
-     */
-    protected function redirectResponseInternal($path, $parameters = [], $code = 302)
-    {
-        return new RedirectResponse($this->getApplication()->path($path, $parameters), $code);
-    }
-
-    /**
-     * @return \Spryker\Yves\Application\Application
-     */
-    protected function getApplication()
-    {
-        return $this->application;
-    }
-
-    /**
-     * @return string
-     */
-    protected function getLocale()
-    {
-        return $this->getApplication()['locale'];
-    }
-
-    /**
-     * @param string $absoluteUrl
-     * @param int $code
-     *
-     * @return \Symfony\Component\HttpFoundation\RedirectResponse
-     */
-    protected function redirectResponseExternal($absoluteUrl, $code = 302)
-    {
-        return new RedirectResponse($absoluteUrl, $code);
-    }
-
-    /**
-     * @param mixed|null $data
-     * @param int $status
-     * @param array $headers
-     *
-     * @return \Symfony\Component\HttpFoundation\JsonResponse
-     */
-    protected function jsonResponse($data = null, $status = 200, $headers = [])
-    {
-        return new JsonResponse($data, $status, $headers);
-    }
-
-    /**
-     * @param array $data
-     *
-     * @return array
-     */
-    protected function viewResponse(array $data = [])
-    {
-        return $data;
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return $this
-     */
-    protected function addSuccessMessage($message)
-    {
-        $this->getFlashMessenger()->addSuccessMessage($message);
-
-        return $this;
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return $this
-     */
-    protected function addInfoMessage($message)
-    {
-        $this->getFlashMessenger()->addInfoMessage($message);
-
-        return $this;
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return $this
-     */
-    protected function addErrorMessage($message)
-    {
-        $this->getFlashMessenger()->addErrorMessage($message);
-
-        return $this;
-    }
-
-    /**
-     * @param \Spryker\Shared\Gui\Form\AbstractForm $form
-     * @param array $options
-     *
-     * @return \Symfony\Component\Form\FormInterface
-     */
-    protected function buildForm(AbstractForm $form, array $options = [])
-    {
-        return $this->getApplication()->buildForm($form, $options);
-    }
-
-    /**
-     * @TODO rethink
-     *
-     * @param string $role
-     *
-     * @throws \LogicException
-     *
-     * @return bool
-     */
-    protected function isGranted($role)
-    {
-        $security = $this->getApplication()['security'];
-        if ($security) {
-            return $security->isGranted($role);
-        }
-
-        throw new LogicException('Security is not enabled!');
-    }
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     *
-     * @return string
-     */
-    protected function getSecurityError(Request $request)
-    {
-        $app = $this->getApplication();
-
-        return $app['security.last_error']($request);
-    }
-
-    /**
-     * @return bool
-     */
-    protected function hasUser()
-    {
-        $securityContext = $this->getSecurityContext();
-        $token = $securityContext->getToken();
-
-        return $token === null;
-    }
-
-    /**
-     * @throws \LogicException
-     *
-     * @return mixed
-     */
-    protected function getSecurityContext()
-    {
-        $securityContext = $this->getApplication()['security'];
-        if ($securityContext === null) {
-            throw new LogicException('Security is not enabled!');
-        }
-
-        return $securityContext;
-    }
-
-    /**
-     * @return string
-     */
-    protected function getUsername()
-    {
-        $user = $this->getUser();
-        if (is_string($user)) {
-            return $user;
-        }
-
-        return $user->getUsername();
-    }
-
-    /**
-     * @throws \LogicException
-     *
-     * @return mixed
-     */
-    protected function getUser()
-    {
-        $securityContext = $this->getSecurityContext();
-        $token = $securityContext->getToken();
-        if ($token === null) {
-            throw new LogicException('No logged in user found.');
-        }
-
-        return $token->getUser();
-    }
-
-    /**
-     * @param string $viewPath
-     * @param array $parameters
-     *
-     * @return \Symfony\Component\HttpFoundation\Response
-     */
-    protected function renderView($viewPath, array $parameters = [])
-    {
-        return $this->getApplication()->render($viewPath, $parameters);
-    }
-
-    /**
-     * @deprecated Use DependencyProvider instead
-     *
-     * @return \Generated\Client\Ide\AutoCompletion
-     */
-    protected function getLocator()
-    {
-        return Locator::getInstance();
-    }
-
-    /**
-     * @return \Spryker\Client\Kernel\AbstractClient
-     */
-    protected function getClient()
-    {
-        if ($this->client === null) {
-            $this->client = $this->resolveClient();
-        }
-
-        return $this->client;
-    }
-
-    /**
-     * @return \Spryker\Client\Kernel\AbstractClient
-     */
-    private function resolveClient()
-    {
-        return $this->getClientResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Client\Kernel\ClassResolver\Client\ClientResolver
-     */
-    private function getClientResolver()
-    {
-        return new ClientResolver();
-    }
-
-    /**
-     * @return \Spryker\Yves\Kernel\AbstractFactory
-     */
-    protected function getFactory()
-    {
-        if ($this->factory === null) {
-            $this->factory = $this->resolveFactory();
-        }
-
-        return $this->factory;
-    }
-
-    /**
-     * @return \Spryker\Yves\Kernel\AbstractFactory
-     */
-    private function resolveFactory()
-    {
-        return $this->getFactoryResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Yves\Kernel\ClassResolver\Factory\FactoryResolver
-     */
-    private function getFactoryResolver()
-    {
-        return new FactoryResolver();
-    }
-
-    /**
-     * @return \Spryker\Yves\Messenger\FlashMessenger\FlashMessengerInterface
-     */
-    private function getFlashMessenger()
-    {
-        return $this->application['flash_messenger'];
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/CookieServiceProvider.php b/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/CookieServiceProvider.php
index 721a1aa..65a2622 100644
--- a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/CookieServiceProvider.php
+++ b/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/CookieServiceProvider.php
@@ -17,7 +17,7 @@ class CookieServiceProvider implements ServiceProviderInterface
 {
 
     /**
-     * @var \Spryker\Yves\Application\Application
+     * @var \Spryker\Yves\Kernel\Application
      */
     private $app;
 
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/ExceptionService/SubRequestExceptionHandler.php b/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/ExceptionService/SubRequestExceptionHandler.php
index f195972..2835112 100644
--- a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/ExceptionService/SubRequestExceptionHandler.php
+++ b/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/ExceptionService/SubRequestExceptionHandler.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\Application\Plugin\Provider\ExceptionService;
 
-use Spryker\Shared\Application\Communication\Application;
+use Spryker\Shared\Kernel\Communication\Application;
 use Symfony\Component\Debug\Exception\FlattenException;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
@@ -18,7 +18,7 @@ class SubRequestExceptionHandler implements ExceptionHandlerInterface
     const DEFAULT_URL_NAME_PREFIX = 'error/';
 
     /**
-     * @var \Spryker\Shared\Application\Communication\Application
+     * @var \Spryker\Shared\Kernel\Communication\Application
      */
     protected $application;
 
@@ -28,7 +28,7 @@ class SubRequestExceptionHandler implements ExceptionHandlerInterface
     protected $errorPageNamePrefix;
 
     /**
-     * @param \Spryker\Shared\Application\Communication\Application $application
+     * @param \Spryker\Shared\Kernel\Communication\Application $application
      * @param string $errorPageNamePrefix
      */
     public function __construct(Application $application, $errorPageNamePrefix = self::DEFAULT_URL_NAME_PREFIX)
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/MonologServiceProvider.php b/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/MonologServiceProvider.php
deleted file mode 100644
index 2e8342b..0000000
--- a/Bundles/Application/src/Spryker/Yves/Application/Plugin/Provider/MonologServiceProvider.php
+++ /dev/null
@@ -1,85 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Application\Plugin\Provider;
-
-use Monolog\Handler\StreamHandler;
-use Monolog\Logger;
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\Log;
-use Spryker\Shared\Library\Monolog\EventJournalHandler;
-
-/**
- * @deprecated Use Spryker\Shared\Log\LoggerTrait where ever you need to log something with monolog
- * instead of using the silex monolog service.
- */
-class MonologServiceProvider implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        if ((int)Config::get(ApplicationConstants::LOG_LEVEL) === 0) {
-            return;
-        }
-
-        $app['logger'] = function () use ($app) {
-            return $app['monolog'];
-        };
-
-        $app['monolog.logger.class'] = 'Monolog\Logger';
-
-        $app['monolog'] = $app->share(function ($app) {
-            $log = new $app['monolog.logger.class']($app['monolog.name']);
-
-            $log->pushHandler($app['monolog.handler']);
-
-            if ($app['debug']) {
-                $log->pushHandler($app['monolog.handler.debug']);
-            }
-
-            return $log;
-        });
-
-        $app['monolog.logfile'] = function () {
-            return Log::getFilePath('message.log');
-        };
-
-        $app['monolog.handler.debug'] = function () use ($app) {
-            return new StreamHandler($app['monolog.logfile'], $app['monolog.level']);
-        };
-
-        $app['monolog.handler'] = function () use ($app) {
-            return new EventJournalHandler($app['monolog.level']);
-        };
-
-        $app['monolog.level'] = function () {
-            return Logger::INFO;
-        };
-
-        $app['monolog.name'] = 'yves';
-    }
-
-    /**
-     * @codeCoverageIgnore
-     *
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php b/Bundles/Application/src/Spryker/Yves/Application/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php
deleted file mode 100644
index 214c792..0000000
--- a/Bundles/Application/src/Spryker/Yves/Application/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Application\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\ZedRequest\Client\HandlerStack\HandlerStackContainer;
-use Spryker\Yves\Kernel\AbstractPlugin;
-
-/**
- * @method \Spryker\Yves\Application\ApplicationFactory getFactory()
- */
-class ZedRequestHeaderServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-        $handlerStackContainer = new HandlerStackContainer();
-        $handlerStackContainer->addMiddleware(
-            $this->getFactory()->createZedRequestHeaderMiddleware()
-        );
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Plugin/ZedRequestHeaderMiddleware.php b/Bundles/Application/src/Spryker/Yves/Application/Plugin/ZedRequestHeaderMiddleware.php
deleted file mode 100644
index 8dc3059..0000000
--- a/Bundles/Application/src/Spryker/Yves/Application/Plugin/ZedRequestHeaderMiddleware.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Application\Plugin;
-
-use GuzzleHttp\Middleware;
-use Psr\Http\Message\RequestInterface;
-use Spryker\Shared\Application\Log\Request\RequestId;
-use Spryker\Shared\ZedRequest\Client\Middleware\MiddlewareInterface;
-
-class ZedRequestHeaderMiddleware implements MiddlewareInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getName()
-    {
-        return static::class;
-    }
-
-    /**
-     * @return callable
-     */
-    public function getCallable()
-    {
-        return Middleware::mapRequest(function (RequestInterface $request) {
-            if ($request->hasHeader('X-Yves-Host')) {
-                $requestId = new RequestId();
-                $request = $request->withAddedHeader('X-Request-ID', $requestId->getRequestId());
-            }
-
-            return $request;
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Yves/Application/Routing/Helper.php b/Bundles/Application/src/Spryker/Yves/Application/Routing/Helper.php
index ee5a013..11fc828 100644
--- a/Bundles/Application/src/Spryker/Yves/Application/Routing/Helper.php
+++ b/Bundles/Application/src/Spryker/Yves/Application/Routing/Helper.php
@@ -9,8 +9,8 @@ namespace Spryker\Yves\Application\Routing;
 
 use LogicException;
 use Silex\Application;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Filter\CamelCaseToSeparatorFilter;
 
 class Helper
 {
@@ -47,11 +47,11 @@ class Helper
         }
         list($namespace, $application, $bundle, $layer, $controllerName) = explode('\\', $controllerNamespaceName);
 
-        $filter = new CamelCaseToSeparatorFilter('-');
-
         $bundle = str_replace(Store::getInstance()->getStoreName(), '', $bundle);
-        $controller = $filter->filter(str_replace('Controller', '', $controllerName));
-        $action = $filter->filter(str_replace('Action', '', $actionName));
+
+        $utilTextService = new UtilTextService();
+        $controller = $utilTextService->camelCaseToSeparator(str_replace('Controller', '', $controllerName));
+        $action = $utilTextService->camelCaseToSeparator((str_replace('Action', '', $actionName)));
 
         return $bundle . '/' . $controller . '/' . $action;
     }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/ApplicationConfig.php b/Bundles/Application/src/Spryker/Zed/Application/ApplicationConfig.php
index 42b6e4e..57a70a7 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/ApplicationConfig.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/ApplicationConfig.php
@@ -7,78 +7,8 @@
 
 namespace Spryker\Zed\Application;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
 
 class ApplicationConfig extends AbstractBundleConfig
 {
-
-    const MAX_LEVEL_COUNT = 3;
-
-    /**
-     * @return int
-     */
-    public function getMaxMenuLevelCount()
-    {
-        return self::MAX_LEVEL_COUNT;
-    }
-
-    /**
-     * @return array
-     */
-    public function getNavigationSchemaPathPattern()
-    {
-        return [
-            $this->getBundlesDirectory() . '/*/src/*/Zed/*/Communication',
-        ];
-    }
-
-    /**
-     * @return string
-     */
-    public function getNavigationSchemaFileNamePattern()
-    {
-        return 'navigation.xml';
-    }
-
-    /**
-     * @return string
-     */
-    public function getRootNavigationSchema()
-    {
-        return APPLICATION_ROOT_DIR . '/config/Zed/' . $this->getNavigationSchemaFileNamePattern();
-    }
-
-    /**
-     * @return string
-     */
-    public function getCacheFile()
-    {
-        return APPLICATION_ROOT_DIR . '/src/Generated/navigation.cache';
-    }
-
-    /**
-     * @return bool
-     */
-    public function isNavigationCacheEnabled()
-    {
-        return $this->get(ApplicationConstants::NAVIGATION_CACHE_ENABLED, true);
-    }
-
-    /**
-     * @return string
-     */
-    public function getBundlesDirectory()
-    {
-        return $this->get(ApplicationConstants::APPLICATION_SPRYKER_ROOT);
-    }
-
-    /**
-     * @return bool
-     */
-    public function isNavigationEnabled()
-    {
-        return $this->get(ApplicationConstants::NAVIGATION_ENABLED, true);
-    }
-
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/ApplicationDependencyProvider.php b/Bundles/Application/src/Spryker/Zed/Application/ApplicationDependencyProvider.php
index bfc9962..52c8280 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/ApplicationDependencyProvider.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/ApplicationDependencyProvider.php
@@ -12,11 +12,8 @@ use Silex\Provider\HttpFragmentServiceProvider;
 use Silex\Provider\ServiceControllerServiceProvider;
 use Silex\Provider\ValidatorServiceProvider;
 use Spryker\Shared\Application\ServiceProvider\HeadersSecurityServiceProvider;
-use Spryker\Shared\Url\UrlBuilder;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\DateFormatterServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\HeaderServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\MvcRoutingServiceProvider;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\NavigationServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\RequestServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\RoutingServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\SilexRoutingServiceProvider;
@@ -24,20 +21,13 @@ use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\SslServiceProvi
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\SubRequestServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\TranslationServiceProvider;
 use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\UrlGeneratorServiceProvider;
-use Spryker\Zed\Auth\Communication\Plugin\Bootstrap\AuthBootstrapProvider;
-use Spryker\Zed\Auth\Communication\Plugin\ServiceProvider\RedirectAfterLoginProvider;
-use Spryker\Zed\Gui\Communication\Plugin\ServiceProvider\GuiTwigExtensionServiceProvider;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
-use Spryker\Zed\Kernel\Communication\Plugin\GatewayControllerListenerPlugin;
-use Spryker\Zed\Kernel\Communication\Plugin\GatewayServiceProviderPlugin;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\NewRelic\Communication\Plugin\ServiceProvider\NewRelicRequestTransactionServiceProvider;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class ApplicationDependencyProvider extends AbstractBundleDependencyProvider
 {
 
-    const URL_BUILDER = 'URL_BUILDER';
+    const SERVICE_ENCODING = 'util encoding service';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -46,8 +36,8 @@ class ApplicationDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideBusinessLayerDependencies(Container $container)
     {
-        $container[self::URL_BUILDER] = function () {
-            return new UrlBuilder();
+        $container[static::SERVICE_ENCODING] = function (Container $container) {
+            return $container->getLocator()->utilEncoding()->service();
         };
 
         return $container;
@@ -61,25 +51,17 @@ class ApplicationDependencyProvider extends AbstractBundleDependencyProvider
     protected function getServiceProvider(Container $container)
     {
         $providers = [
-            new NewRelicRequestTransactionServiceProvider(),
-            new RedirectAfterLoginProvider(),
             new RequestServiceProvider(),
             new SslServiceProvider(),
             new ServiceControllerServiceProvider(),
-            new AuthBootstrapProvider(),
-            new PropelServiceProvider(),
             new RoutingServiceProvider(),
             new MvcRoutingServiceProvider(),
             new SilexRoutingServiceProvider(),
             new ValidatorServiceProvider(),
             new FormServiceProvider(),
             new UrlGeneratorServiceProvider(),
-            new NewRelicRequestTransactionServiceProvider(),
             new HttpFragmentServiceProvider(),
             new HeaderServiceProvider(),
-            new NavigationServiceProvider(),
-            new GuiTwigExtensionServiceProvider(),
-            new DateFormatterServiceProvider(),
             new TranslationServiceProvider(),
             new SubRequestServiceProvider(),
             new HeadersSecurityServiceProvider(),
@@ -88,16 +70,4 @@ class ApplicationDependencyProvider extends AbstractBundleDependencyProvider
         return $providers;
     }
 
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\Plugin\GatewayServiceProviderPlugin
-     */
-    protected function getGatewayServiceProvider()
-    {
-        $controllerListener = new GatewayControllerListenerPlugin();
-        $serviceProvider = new GatewayServiceProviderPlugin();
-        $serviceProvider->setControllerListener($controllerListener);
-
-        return $serviceProvider;
-    }
-
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationBusinessFactory.php b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationBusinessFactory.php
index aecf114..d5e8e57 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationBusinessFactory.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationBusinessFactory.php
@@ -7,25 +7,6 @@
 
 namespace Spryker\Zed\Application\Business;
 
-use Psr\Log\LoggerInterface;
-use Spryker\Zed\Application\ApplicationDependencyProvider;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\CodeCeption;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\DeleteDatabase;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\DeleteGeneratedDirectory;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ExportSearch;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ExportStorage;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ImportDemoData;
-use Spryker\Zed\Application\Business\Model\ApplicationCheckStep\SetupInstall;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCache;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheBuilder;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\Decorator\NavigationCollectorCacheDecorator;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollector;
-use Spryker\Zed\Application\Business\Model\Navigation\Extractor\PathExtractor;
-use Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatter;
-use Spryker\Zed\Application\Business\Model\Navigation\NavigationBuilder;
-use Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinder;
-use Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelValidator;
-use Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueValidator;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 
 /**
@@ -33,262 +14,4 @@ use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
  */
 class ApplicationBusinessFactory extends AbstractBusinessFactory
 {
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\AbstractApplicationCheckStep[]
-     */
-    public function getCheckSteps(LoggerInterface $logger = null)
-    {
-        return [
-            $this->createCheckStepDeleteDatabase($logger),
-            $this->createCheckStepDeleteGeneratedDirectory($logger),
-            $this->createCheckStepSetupInstall($logger),
-            $this->createCheckStepCodeCeption($logger),
-
-            $this->createCheckStepDeleteGeneratedDirectory($logger),
-            $this->createCheckStepDeleteDatabase($logger),
-            $this->createCheckStepSetupInstall($logger),
-            $this->createCheckStepImportDemoData($logger),
-
-            $this->createCheckStepStorageValue($logger),
-            $this->createCheckStepExportSearch($logger),
-        ];
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\CodeCeption
-     */
-    public function createCheckStepCodeCeption(LoggerInterface $logger = null)
-    {
-        $checkStep = new CodeCeption();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\DeleteDatabase
-     */
-    public function createCheckStepDeleteDatabase(LoggerInterface $logger = null)
-    {
-        $checkStep = new DeleteDatabase();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\DeleteGeneratedDirectory
-     */
-    public function createCheckStepDeleteGeneratedDirectory(LoggerInterface $logger = null)
-    {
-        $checkStep = new DeleteGeneratedDirectory();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ImportDemoData
-     */
-    public function createCheckStepImportDemoData(LoggerInterface $logger = null)
-    {
-        $checkStep = new ImportDemoData();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\SetupInstall
-     */
-    public function createCheckStepSetupInstall(LoggerInterface $logger = null)
-    {
-        $checkStep = new SetupInstall();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ExportStorage
-     */
-    public function createCheckStepStorageValue(LoggerInterface $logger = null)
-    {
-        $checkStep = new ExportStorage();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Business\Model\ApplicationCheckStep\ExportSearch
-     */
-    public function createCheckStepExportSearch(LoggerInterface $logger = null)
-    {
-        $checkStep = new ExportSearch();
-        if ($logger !== null) {
-            $checkStep->setLogger($logger);
-        }
-
-        return $checkStep;
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\NavigationBuilder
-     */
-    public function createNavigationBuilder()
-    {
-        return new NavigationBuilder(
-            $this->createCachedNavigationCollector(),
-            $this->createMenuFormatter(),
-            $this->createPathExtractor()
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheBuilder
-     */
-    public function createNavigationCacheBuilder()
-    {
-        return new NavigationCacheBuilder(
-            $this->createNavigationCollector(),
-            $this->createNavigationCache()
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatterInterface
-     */
-    protected function createMenuFormatter()
-    {
-        $urlBuilder = $this->getUrlBuilder();
-        $urlUniqueValidator = $this->createUrlUniqueValidator();
-        $menuLevelValidator = $this->createMenuLevelValidator();
-
-        return new MenuFormatter(
-            $urlUniqueValidator,
-            $menuLevelValidator,
-            $urlBuilder
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinderInterface
-     */
-    protected function createNavigationSchemaFinder()
-    {
-        return new NavigationSchemaFinder(
-            $this->getConfig()->getNavigationSchemaPathPattern(),
-            $this->getConfig()->getNavigationSchemaFileNamePattern()
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface
-     */
-    protected function createNavigationCollector()
-    {
-        return new NavigationCollector(
-            $this->createNavigationSchemaFinder(),
-            $this->getConfig()->getRootNavigationSchema()
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Extractor\PathExtractorInterface
-     */
-    protected function createPathExtractor()
-    {
-        return new PathExtractor();
-    }
-
-    /**
-     * @deprecated Use getUrlBuilder() instead.
-     *
-     * @return \Spryker\Shared\Url\UrlBuilderInterface
-     */
-    protected function createUrlBuilder()
-    {
-        trigger_error('Deprecated, use getUrlBuilder() instead.', E_USER_DEPRECATED);
-
-        return $this->getUrlBuilder();
-    }
-
-    /**
-     * @return \Spryker\Shared\Url\UrlBuilderInterface
-     */
-    protected function getUrlBuilder()
-    {
-        return $this->getProvidedDependency(ApplicationDependencyProvider::URL_BUILDER);
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueValidatorInterface
-     */
-    protected function createUrlUniqueValidator()
-    {
-        return new UrlUniqueValidator();
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelValidatorInterface
-     */
-    protected function createMenuLevelValidator()
-    {
-        $maxMenuCount = $this->getConfig()->getMaxMenuLevelCount();
-
-        return new MenuLevelValidator($maxMenuCount);
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface
-     */
-    protected function createNavigationCache()
-    {
-        return new NavigationCache(
-            $this->getConfig()->getCacheFile(),
-            $this->getConfig()->isNavigationCacheEnabled()
-        );
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface
-     */
-    protected function createCachedNavigationCollector()
-    {
-        return new NavigationCollectorCacheDecorator(
-            $this->createNavigationCollector(),
-            $this->createNavigationCache()
-        );
-    }
-
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacade.php b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacade.php
index 3fed3b0..398d294 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacade.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacade.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Application\Business;
 
-use Psr\Log\LoggerInterface;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
 
 /**
@@ -15,123 +14,4 @@ use Spryker\Zed\Kernel\Business\AbstractFacade;
  */
 class ApplicationFacade extends AbstractFacade implements ApplicationFacadeInterface
 {
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Communication\Console\ApplicationCheckStep\AbstractApplicationCheckStep[]
-     */
-    public function getCheckSteps(LoggerInterface $logger = null)
-    {
-        return $this->getFactory()->getCheckSteps($logger);
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepCodeCeption(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepCodeCeption($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepDeleteDatabase(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepDeleteDatabase($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepDeleteGeneratedDirectory(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepDeleteGeneratedDirectory($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepExportStorage(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepStorageValue($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepExportSearch(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepExportSearch($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepImportDemoData(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepImportDemoData($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepSetupInstall(LoggerInterface $logger = null)
-    {
-        $this->getFactory()->createCheckStepSetupInstall($logger)->run();
-    }
-
-    /**
-     * @api
-     *
-     * @param string $pathInfo
-     *
-     * @return array
-     */
-    public function buildNavigation($pathInfo)
-    {
-        return $this->getFactory()->createNavigationBuilder()->build($pathInfo);
-    }
-
-    /**
-     * @api
-     *
-     * @return void
-     */
-    public function writeNavigationCache()
-    {
-        $this->getFactory()->createNavigationCacheBuilder()->writeNavigationCache();
-    }
-
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacadeInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacadeInterface.php
index c53e472..090ba25 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacadeInterface.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Business/ApplicationFacadeInterface.php
@@ -7,97 +7,6 @@
 
 namespace Spryker\Zed\Application\Business;
 
-use Psr\Log\LoggerInterface;
-
 interface ApplicationFacadeInterface
 {
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return \Spryker\Zed\Application\Communication\Console\ApplicationCheckStep\AbstractApplicationCheckStep[]
-     */
-    public function getCheckSteps(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepCodeCeption(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepDeleteDatabase(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepDeleteGeneratedDirectory(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepExportStorage(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepExportSearch(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepImportDemoData(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param \Psr\Log\LoggerInterface|null $logger
-     *
-     * @return void
-     */
-    public function runCheckStepSetupInstall(LoggerInterface $logger = null);
-
-    /**
-     * @api
-     *
-     * @param string $pathInfo
-     *
-     * @return array
-     */
-    public function buildNavigation($pathInfo);
-
-    /**
-     * @api
-     *
-     * @return void
-     */
-    public function writeNavigationCache();
-
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/AbstractNavigationCacheException.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/AbstractNavigationCacheException.php
deleted file mode 100644
index f5ee2e3..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/AbstractNavigationCacheException.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Exception;
-
-use Exception;
-use Spryker\Zed\Application\Communication\Console\BuildNavigationConsole;
-
-abstract class AbstractNavigationCacheException extends Exception
-{
-
-    const MESSAGE = 'To create a navigation cache run:' . PHP_EOL
-        . PHP_EOL . '$ vendor/bin/console ' . BuildNavigationConsole::COMMAND_NAME;
-
-    /**
-     * @param string $message
-     * @param int $code
-     * @param \Exception|null $previous = null
-     */
-    public function __construct($message = '', $code = 0, Exception $previous = null)
-    {
-        $message .= PHP_EOL . PHP_EOL . self::MESSAGE;
-
-        parent::__construct($message, $code, $previous);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheEmptyException.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheEmptyException.php
deleted file mode 100644
index f7bef8d..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheEmptyException.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Exception;
-
-class NavigationCacheEmptyException extends AbstractNavigationCacheException
-{
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheFileDoesNotExistException.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheFileDoesNotExistException.php
deleted file mode 100644
index 284d3fd..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Exception/NavigationCacheFileDoesNotExistException.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Exception;
-
-class NavigationCacheFileDoesNotExistException extends AbstractNavigationCacheException
-{
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/AbstractApplicationCheckStep.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/AbstractApplicationCheckStep.php
deleted file mode 100644
index 6964a76..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/AbstractApplicationCheckStep.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Psr\Log\AbstractLogger;
-use Psr\Log\LoggerAwareInterface;
-use Psr\Log\LoggerAwareTrait;
-use Psr\Log\LoggerInterface;
-
-abstract class AbstractApplicationCheckStep extends AbstractLogger implements LoggerAwareInterface, LoggerInterface
-{
-
-    use LoggerAwareTrait;
-
-    /**
-     * @return void
-     */
-    abstract public function run();
-
-    /**
-     * Logs with an arbitrary level.
-     *
-     * @param mixed $level
-     * @param string $message
-     * @param array $context
-     *
-     * @return void
-     */
-    public function log($level, $message, array $context = [])
-    {
-        if ($this->logger) {
-            $this->logger->log($level, $message, $context);
-        }
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/CodeCeption.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/CodeCeption.php
deleted file mode 100644
index 5bb02a2..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/CodeCeption.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Process\Process;
-
-class CodeCeption extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return bool
-     */
-    public function run()
-    {
-        $command = 'vendor/bin/codecept run';
-
-        $this->info('Run ' . $command);
-
-        $process = new Process($command);
-        $process->setTimeout(600);
-
-        $process->mustRun(function ($type, $buffer) {
-            $this->info($buffer);
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteDatabase.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteDatabase.php
deleted file mode 100644
index 3bb7bc8..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteDatabase.php
+++ /dev/null
@@ -1,95 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use PDO;
-use RuntimeException;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Propel\PropelConstants;
-use Symfony\Component\Process\Process;
-
-class DeleteDatabase extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return bool
-     */
-    public function run()
-    {
-        $this->info('Delete database');
-
-        if (Config::get(PropelConstants::ZED_DB_ENGINE) === Config::get(PropelConstants::ZED_DB_ENGINE_PGSQL)) {
-            $this->deletePostgresDatabaseIfExists();
-        } else {
-            $this->deleteMysqlDatabaseIfExists();
-        }
-    }
-
-    /**
-     * @throws \RuntimeException
-     *
-     * @return void
-     */
-    protected function closePostgresConnections()
-    {
-        $dropDatabaseCommand = sprintf(
-            'psql -U %s -w  -c "SELECT pg_terminate_backend(pg_stat_activity.pid) FROM pg_stat_activity WHERE pid <> pg_backend_pid() AND pg_stat_activity.datname = \'%s\';"',
-            'postgres',
-            Config::get(PropelConstants::ZED_DB_DATABASE)
-        );
-
-        $process = new Process($dropDatabaseCommand);
-        $process->run();
-
-        if (!$process->isSuccessful()) {
-            throw new RuntimeException($process->getErrorOutput());
-        }
-    }
-
-    /**
-     * @throws \RuntimeException
-     *
-     * @return void
-     */
-    protected function deletePostgresDatabaseIfExists()
-    {
-        $this->closePostgresConnections();
-
-        $dropDatabaseCommand = sprintf(
-            'psql -U %s -w  -c "DROP DATABASE IF EXISTS \"%s\";"',
-            'postgres',
-            Config::get(PropelConstants::ZED_DB_DATABASE)
-        );
-
-        $process = new Process($dropDatabaseCommand);
-        $process->run();
-
-        if (!$process->isSuccessful()) {
-            throw new RuntimeException($process->getErrorOutput());
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected function deleteMysqlDatabaseIfExists()
-    {
-        $con = new PDO(
-            Config::get(PropelConstants::ZED_DB_ENGINE)
-            . ':host='
-            . Config::get(PropelConstants::ZED_DB_HOST)
-            . ';port=' . Config::get(PropelConstants::ZED_DB_PORT),
-            Config::get(PropelConstants::ZED_DB_USERNAME),
-            Config::get(PropelConstants::ZED_DB_PASSWORD)
-        );
-
-        $q = 'DROP DATABASE IF EXISTS ' . Config::get(PropelConstants::ZED_DB_DATABASE);
-        $con->exec($q);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteGeneratedDirectory.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteGeneratedDirectory.php
deleted file mode 100644
index f00286b..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/DeleteGeneratedDirectory.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Filesystem\Filesystem;
-
-class DeleteGeneratedDirectory extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return bool
-     */
-    public function run()
-    {
-        $dir = APPLICATION_SOURCE_DIR . DIRECTORY_SEPARATOR . 'Generated';
-        $this->info('Delete "' . $dir . '" directory');
-
-        $filesystem = new Filesystem();
-        $filesystem->remove($dir);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportSearch.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportSearch.php
deleted file mode 100644
index 75b0018..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportSearch.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Process\Process;
-
-class ExportSearch extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $command = 'vendor/bin/console collector:search:export';
-
-        $this->info('Run ' . $command);
-
-        $process = new Process($command);
-        $process->setTimeout(600);
-
-        $process->mustRun(function ($type, $buffer) {
-            $this->info($buffer);
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportStorage.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportStorage.php
deleted file mode 100644
index 79b4fb8..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ExportStorage.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Process\Process;
-
-class ExportStorage extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $command = 'vendor/bin/console collector:storage:export';
-
-        $this->info('Run ' . $command);
-
-        $process = new Process($command);
-        $process->setTimeout(600);
-
-        $process->mustRun(function ($type, $buffer) {
-            $this->info($buffer);
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ImportDemoData.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ImportDemoData.php
deleted file mode 100644
index 8d7ad26..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/ImportDemoData.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Process\Process;
-
-class ImportDemoData extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return bool
-     */
-    public function run()
-    {
-        $command = 'vendor/bin/console import:demo-data';
-
-        $this->info('Run ' . $command);
-
-        $process = new Process($command);
-        $process->setTimeout(600);
-
-        $process->mustRun(function ($type, $buffer) {
-            $this->info($buffer);
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/SetupInstall.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/SetupInstall.php
deleted file mode 100644
index 9e0f635..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/ApplicationCheckStep/SetupInstall.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\ApplicationCheckStep;
-
-use Symfony\Component\Process\Process;
-
-class SetupInstall extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return bool
-     */
-    public function run()
-    {
-        $command = 'vendor/bin/console setup:install';
-
-        $this->info('Run ' . $command);
-
-        $process = new Process($command);
-        $process->setTimeout(600);
-
-        $process->mustRun(function ($type, $buffer) {
-            $this->info($buffer);
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCache.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCache.php
deleted file mode 100644
index b40c406..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCache.php
+++ /dev/null
@@ -1,76 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Cache;
-
-use Spryker\Shared\Library\Json;
-use Spryker\Zed\Application\Business\Exception\NavigationCacheEmptyException;
-use Spryker\Zed\Application\Business\Exception\NavigationCacheFileDoesNotExistException;
-
-class NavigationCache implements NavigationCacheInterface
-{
-
-    /**
-     * @var string
-     */
-    private $cacheFile;
-
-    /**
-     * @var bool
-     */
-    private $isEnabled;
-
-    /**
-     * @param string $cacheFile
-     * @param bool $isEnabled
-     */
-    public function __construct($cacheFile, $isEnabled)
-    {
-        $this->cacheFile = $cacheFile;
-        $this->isEnabled = $isEnabled;
-    }
-
-    /**
-     * @return bool
-     */
-    public function isEnabled()
-    {
-        return $this->isEnabled;
-    }
-
-    /**
-     * @param array $navigation
-     *
-     * @return void
-     */
-    public function setNavigation(array $navigation)
-    {
-        file_put_contents($this->cacheFile, Json::encode($navigation));
-    }
-
-    /**
-     * @throws \Spryker\Zed\Application\Business\Exception\NavigationCacheFileDoesNotExistException
-     * @throws \Spryker\Zed\Application\Business\Exception\NavigationCacheEmptyException
-     *
-     * @return array
-     */
-    public function getNavigation()
-    {
-        if (!file_exists($this->cacheFile)) {
-            throw new NavigationCacheFileDoesNotExistException('Navigation cache is enabled, but there is no cache file.');
-        }
-
-        $content = file_get_contents($this->cacheFile);
-
-        if (empty($content)) {
-            throw new NavigationCacheEmptyException('Navigation cache is enabled, but cache is empty.');
-        }
-
-        return Json::decode($content, true);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilder.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilder.php
deleted file mode 100644
index a9e8bae..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilder.php
+++ /dev/null
@@ -1,44 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Cache;
-
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface;
-
-class NavigationCacheBuilder
-{
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface
-     */
-    private $navigationCollector;
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface
-     */
-    private $navigationCache;
-
-    /**
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface $navigationCollector
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface $navigationCache
-     */
-    public function __construct(NavigationCollectorInterface $navigationCollector, NavigationCacheInterface $navigationCache)
-    {
-        $this->navigationCollector = $navigationCollector;
-        $this->navigationCache = $navigationCache;
-    }
-
-    /**
-     * @return void
-     */
-    public function writeNavigationCache()
-    {
-        $navigation = $this->navigationCollector->getNavigation();
-        $this->navigationCache->setNavigation($navigation);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheInterface.php
deleted file mode 100644
index 40387e7..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheInterface.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Cache;
-
-interface NavigationCacheInterface
-{
-
-    /**
-     * @return bool
-     */
-    public function isEnabled();
-
-    /**
-     * @param array $navigation
-     *
-     * @return void
-     */
-    public function setNavigation(array $navigation);
-
-    /**
-     * @return array
-     */
-    public function getNavigation();
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecorator.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecorator.php
deleted file mode 100644
index c040501..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecorator.php
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Collector\Decorator;
-
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface;
-
-class NavigationCollectorCacheDecorator implements NavigationCollectorInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface
-     */
-    private $navigationCollector;
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface
-     */
-    private $navigationCache;
-
-    /**
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface $navigationCollector
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface $navigationCache
-     */
-    public function __construct(NavigationCollectorInterface $navigationCollector, NavigationCacheInterface $navigationCache)
-    {
-        $this->navigationCollector = $navigationCollector;
-        $this->navigationCache = $navigationCache;
-    }
-
-    /**
-     * @return array
-     */
-    public function getNavigation()
-    {
-        if ($this->navigationCache->isEnabled()) {
-            return $this->navigationCache->getNavigation();
-        }
-
-        return $this->navigationCollector->getNavigation();
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollector.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollector.php
deleted file mode 100644
index 07229f3..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollector.php
+++ /dev/null
@@ -1,62 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Collector;
-
-use ErrorException;
-use Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinderInterface;
-use Zend\Config\Config;
-use Zend\Config\Factory;
-
-class NavigationCollector implements NavigationCollectorInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinderInterface
-     */
-    private $navigationSchemaFinder;
-
-    /**
-     * @var string
-     */
-    private $rootNavigationFile;
-
-    /**
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinderInterface $navigationSchemaFinder
-     * @param string $rootNavigationFile
-     */
-    public function __construct(NavigationSchemaFinderInterface $navigationSchemaFinder, $rootNavigationFile)
-    {
-        $this->navigationSchemaFinder = $navigationSchemaFinder;
-        $this->rootNavigationFile = $rootNavigationFile;
-    }
-
-    /**
-     * @throws \ErrorException
-     *
-     * @return array
-     */
-    public function getNavigation()
-    {
-        try {
-            $navigationDefinition = Factory::fromFile($this->rootNavigationFile, true);
-        } catch (\Exception $e) {
-            $navigationDefinition = new Config([]);
-        }
-
-        foreach ($this->navigationSchemaFinder->getSchemaFiles() as $moduleNavigationFile) {
-            if (!file_exists($moduleNavigationFile->getPathname())) {
-                throw new ErrorException('Navigation-File does not exist: ' . $moduleNavigationFile);
-            }
-            $configFromFile = Factory::fromFile($moduleNavigationFile->getPathname(), true);
-            $navigationDefinition->merge($configFromFile);
-        }
-
-        return $navigationDefinition->toArray();
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollectorInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollectorInterface.php
deleted file mode 100644
index af1464e..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Collector/NavigationCollectorInterface.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Collector;
-
-interface NavigationCollectorInterface
-{
-
-    /**
-     * @return array
-     */
-    public function getNavigation();
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractor.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractor.php
deleted file mode 100644
index de620f3..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractor.php
+++ /dev/null
@@ -1,69 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Extractor;
-
-use Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatter;
-
-class PathExtractor implements PathExtractorInterface
-{
-
-    const URI = 'uri';
-    const LABEL = 'label';
-    const TITLE = 'title';
-
-    /**
-     * @param array $menu
-     *
-     * @return array
-     */
-    public function extractPathFromMenu(array $menu)
-    {
-        $filteredMenu = array_filter($menu, function ($branch) {
-            return isset($branch[MenuFormatter::IS_ACTIVE]);
-        });
-        $path = [];
-        $this->extractActiveNodes($filteredMenu, $path);
-
-        return $path;
-    }
-
-    /**
-     * @param array $nodes
-     * @param array $path
-     *
-     * @return array
-     */
-    protected function extractActiveNodes(array $nodes, array &$path)
-    {
-        foreach ($nodes as $child) {
-            if (isset($child[MenuFormatter::IS_ACTIVE])) {
-                $activeNode = $child;
-                $path[] = $this->formatNode($activeNode);
-                if (isset($child[MenuFormatter::CHILDREN])) {
-                    $this->extractActiveNodes($child[MenuFormatter::CHILDREN], $path);
-                }
-                break;
-            }
-        }
-    }
-
-    /**
-     * @param array $node
-     *
-     * @return array
-     */
-    protected function formatNode(array $node)
-    {
-        return [
-            self::URI => $node[MenuFormatter::URI],
-            self::LABEL => $node[MenuFormatter::LABEL],
-            self::TITLE => $node[MenuFormatter::TITLE],
-        ];
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractorInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractorInterface.php
deleted file mode 100644
index 4701b87..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Extractor/PathExtractorInterface.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Extractor;
-
-interface PathExtractorInterface
-{
-
-    /**
-     * @param array $menu
-     *
-     * @return array
-     */
-    public function extractPathFromMenu(array $menu);
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatter.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatter.php
deleted file mode 100644
index 01fcad7..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatter.php
+++ /dev/null
@@ -1,192 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Formatter;
-
-use Spryker\Shared\Url\UrlBuilderInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelValidatorInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueValidatorInterface;
-
-class MenuFormatter implements MenuFormatterInterface
-{
-
-    const VISIBLE = 'visible';
-    const URI = 'uri';
-    const ID = 'id';
-    const ATTRIBUTES = 'attributes';
-    const LABEL = 'label';
-    const PAGES = 'pages';
-    const CONTROLLER = 'controller';
-    const INDEX = 'index';
-    const ACTION = 'action';
-    const BUNDLE = 'bundle';
-    const CHILDREN = 'children';
-    const TITLE = 'title';
-    const ICON = 'icon';
-    const SHORTCUT = 'shortcut';
-    const IS_ACTIVE = 'is_active';
-    const CHILD_IS_ACTIVE = 'child_is_active';
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueValidatorInterface
-     */
-    protected $urlUniqueValidator;
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelValidatorInterface
-     */
-    protected $menuLevelValidator;
-
-    /**
-     * @var \Spryker\Shared\Url\UrlBuilderInterface
-     */
-    protected $urlBuilder;
-
-    /**
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueValidatorInterface $urlUniqueValidator
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelValidatorInterface $menuLevelValidator
-     * @param \Spryker\Shared\Url\UrlBuilderInterface $urlBuilder
-     */
-    public function __construct(
-        UrlUniqueValidatorInterface $urlUniqueValidator,
-        MenuLevelValidatorInterface $menuLevelValidator,
-        UrlBuilderInterface $urlBuilder
-    ) {
-        $this->urlUniqueValidator = $urlUniqueValidator;
-        $this->menuLevelValidator = $menuLevelValidator;
-        $this->urlBuilder = $urlBuilder;
-    }
-
-    /**
-     * @param array $pages
-     * @param string $pathInfo
-     * @param bool $includeInvisible
-     *
-     * @return array
-     */
-    public function formatMenu(array $pages, $pathInfo, $includeInvisible = false)
-    {
-        $formattedPages = $this->formatPages($pages, $pathInfo, 1, $includeInvisible);
-        unset($formattedPages[self::CHILD_IS_ACTIVE]);
-
-        return $formattedPages;
-    }
-
-    /**
-     * @param array $pages
-     * @param string $pathInfo
-     * @param int $currentLevel
-     * @param bool $includeInvisible
-     *
-     * @return array
-     */
-    protected function formatPages(array $pages, $pathInfo, $currentLevel = 1, $includeInvisible = false)
-    {
-        $formattedPages = [];
-        $currentLevel++;
-        foreach ($pages as $page) {
-            if (!$includeInvisible && isset($page[self::VISIBLE]) && !$page[self::VISIBLE]) {
-                continue;
-            }
-            $formattedPage = $this->formatPage($page);
-            if (isset($page[self::PAGES]) && !empty($page[self::PAGES])) {
-                $this->menuLevelValidator->validate($currentLevel, $page[self::TITLE]);
-                $children = $this->formatPages($page[self::PAGES], $pathInfo, $currentLevel, $includeInvisible);
-            }
-
-            if (isset($children[self::CHILD_IS_ACTIVE]) || $pathInfo === $formattedPage[self::URI]) {
-                $formattedPages[self::CHILD_IS_ACTIVE] = true;
-                $formattedPage[self::IS_ACTIVE] = true;
-            }
-            if (!empty($children)) {
-                unset($children[self::CHILD_IS_ACTIVE]);
-                $formattedPage[self::CHILDREN] = $children;
-                $children = [];
-            }
-            $formattedPages[$formattedPage[self::TITLE]] = $formattedPage;
-        }
-
-        return $formattedPages;
-    }
-
-    /**
-     * @param array $page
-     *
-     * @return string
-     */
-    protected function getUri(array $page)
-    {
-        if (isset($page[self::URI]) && !empty($page[self::URI])) {
-            return $page[self::URI];
-        }
-
-        $action = $this->getPageAction($page);
-        $controller = $this->getPageController($page, $action);
-
-        return $this->urlBuilder->build($page[self::BUNDLE], $controller, $action);
-    }
-
-    /**
-     * @param array $page
-     *
-     * @return array
-     */
-    protected function formatPage(array $page)
-    {
-        $formattedPage = [];
-
-        $url = $this->getUri($page);
-        $formattedPage[self::URI] = $url;
-        $formattedPage[self::LABEL] = $page[self::LABEL];
-        $formattedPage[self::TITLE] = $page[self::TITLE];
-        if (isset($page[self::ICON])) {
-            $formattedPage[self::ICON] = $page[self::ICON];
-        }
-
-        if (isset($page[self::SHORTCUT]) && strlen($page[self::SHORTCUT]) === 1) {
-            $formattedPage[self::SHORTCUT] = $page[self::SHORTCUT];
-        }
-
-        return $formattedPage;
-    }
-
-    /**
-     * @param array $page
-     *
-     * @return mixed|null
-     */
-    protected function getPageAction(array $page)
-    {
-        $pageAction = null;
-        if (isset($page[self::ACTION]) && self::INDEX !== $page[self::ACTION]) {
-            $pageAction = $page[self::ACTION];
-        }
-
-        return $pageAction;
-    }
-
-    /**
-     * @param array $page
-     * @param mixed|null $action
-     *
-     * @return mixed|null
-     */
-    protected function getPageController(array $page, $action)
-    {
-        $pageController = null;
-        if (isset($page[self::CONTROLLER]) &&
-            (
-                self::INDEX !== $page[self::CONTROLLER] || $action !== null
-            )
-        ) {
-            $pageController = $page[self::CONTROLLER];
-        }
-
-        return $pageController;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatterInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatterInterface.php
deleted file mode 100644
index bdb59fc..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Formatter/MenuFormatterInterface.php
+++ /dev/null
@@ -1,22 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Formatter;
-
-interface MenuFormatterInterface
-{
-
-    /**
-     * @param array $pages
-     * @param string $pathInfo
-     * @param bool $includeInvisible
-     *
-     * @return array
-     */
-    public function formatMenu(array $pages, $pathInfo, $includeInvisible = false);
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/NavigationBuilder.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/NavigationBuilder.php
deleted file mode 100644
index fe44e28..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/NavigationBuilder.php
+++ /dev/null
@@ -1,69 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation;
-
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Extractor\PathExtractorInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatterInterface;
-
-class NavigationBuilder
-{
-
-    const MENU = 'menu';
-    const PATH = 'path';
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface
-     */
-    private $navigationCollector;
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatterInterface
-     */
-    private $menuFormatter;
-
-    /**
-     * @var \Spryker\Zed\Application\Business\Model\Navigation\Extractor\PathExtractorInterface
-     */
-    private $pathExtractor;
-
-    /**
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface $navigationCollector
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Formatter\MenuFormatterInterface $menuFormatter
-     * @param \Spryker\Zed\Application\Business\Model\Navigation\Extractor\PathExtractorInterface $pathExtractor
-     */
-    public function __construct(
-        NavigationCollectorInterface $navigationCollector,
-        MenuFormatterInterface $menuFormatter,
-        PathExtractorInterface $pathExtractor
-    ) {
-        $this->navigationCollector = $navigationCollector;
-        $this->menuFormatter = $menuFormatter;
-        $this->pathExtractor = $pathExtractor;
-    }
-
-    /**
-     * @param string $pathInfo
-     *
-     * @return array
-     */
-    public function build($pathInfo)
-    {
-        $navigationPages = $this->navigationCollector->getNavigation();
-
-        $menu = $this->menuFormatter->formatMenu($navigationPages, $pathInfo);
-        $breadcrumb = $this->menuFormatter->formatMenu($navigationPages, $pathInfo, true);
-        $path = $this->pathExtractor->extractPathFromMenu($breadcrumb);
-
-        return [
-            self::MENU => $menu,
-            self::PATH => $path,
-        ];
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinder.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinder.php
deleted file mode 100644
index fc917a0..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinder.php
+++ /dev/null
@@ -1,48 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder;
-
-use Symfony\Component\Finder\Finder;
-
-class NavigationSchemaFinder implements NavigationSchemaFinderInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $pathPattern;
-
-    /**
-     * @var array
-     */
-    protected $fileNamePattern;
-
-    /**
-     * @param array $pathPattern
-     * @param string $fileNamePattern
-     */
-    public function __construct(array $pathPattern, $fileNamePattern)
-    {
-        $this->pathPattern = $pathPattern;
-        $this->fileNamePattern = $fileNamePattern;
-    }
-
-    /**
-     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
-     */
-    public function getSchemaFiles()
-    {
-        $finder = new Finder();
-        $finder
-            ->in($this->pathPattern)
-            ->name($this->fileNamePattern);
-
-        return $finder;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderInterface.php
deleted file mode 100644
index 98e54cb..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderInterface.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder;
-
-interface NavigationSchemaFinderInterface
-{
-
-    /**
-     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
-     */
-    public function getSchemaFiles();
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelException.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelException.php
deleted file mode 100644
index 1eb9c4d..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelException.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-use Exception;
-
-class MenuLevelException extends Exception
-{
-
-    const ERROR_MESSAGE = 'The Menu is only allowed to have %s Sub-Levels per branch. More Levels found in "%s"!';
-
-    /**
-     * @param int $maxLevelCount
-     * @param string $pageTitle
-     */
-    public function __construct($maxLevelCount, $pageTitle)
-    {
-        $errorMessage = sprintf(self::ERROR_MESSAGE, $maxLevelCount, $pageTitle);
-        parent::__construct($errorMessage);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidator.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidator.php
deleted file mode 100644
index ce34f28..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidator.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-class MenuLevelValidator implements MenuLevelValidatorInterface
-{
-
-    /**
-     * @var int
-     */
-    protected $maxLevelCount;
-
-    /**
-     * @param int $maxLevelCount
-     */
-    public function __construct($maxLevelCount)
-    {
-        $this->maxLevelCount = $maxLevelCount;
-    }
-
-    /**
-     * @param int $currentLevel
-     * @param string $pageTitle
-     *
-     * @throws \Spryker\Zed\Application\Business\Model\Navigation\Validator\MenuLevelException
-     *
-     * @return void
-     */
-    public function validate($currentLevel, $pageTitle)
-    {
-        if ($this->maxLevelCount < $currentLevel) {
-            throw new MenuLevelException($this->maxLevelCount, $pageTitle);
-        }
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidatorInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidatorInterface.php
deleted file mode 100644
index b72f65f..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/MenuLevelValidatorInterface.php
+++ /dev/null
@@ -1,23 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-interface MenuLevelValidatorInterface
-{
-
-    /**
-     * @param int $currentLevel
-     * @param string $pageTitle
-     *
-     * @throws \Exception
-     *
-     * @return void
-     */
-    public function validate($currentLevel, $pageTitle);
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueException.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueException.php
deleted file mode 100644
index b0349fd..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueException.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-use Exception;
-
-class UrlUniqueException extends Exception
-{
-
-    const ERROR_MESSAGE = 'The URL "%s" is already used in the Menu!';
-
-    /**
-     * @param string $url
-     */
-    public function __construct($url)
-    {
-        $errorMessage = sprintf(self::ERROR_MESSAGE, $url);
-        parent::__construct($errorMessage);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidator.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidator.php
deleted file mode 100644
index 97544b1..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidator.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-class UrlUniqueValidator implements UrlUniqueValidatorInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $urls = [];
-
-    /**
-     * @param string $url
-     *
-     * @throws \Spryker\Zed\Application\Business\Model\Navigation\Validator\UrlUniqueException
-     *
-     * @return void
-     */
-    public function validate($url)
-    {
-        if (in_array($url, $this->urls)) {
-            throw new UrlUniqueException($url);
-        }
-    }
-
-    /**
-     * @param string $url
-     *
-     * @return void
-     */
-    public function addUrl($url)
-    {
-        $this->urls[] = $url;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidatorInterface.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidatorInterface.php
deleted file mode 100644
index 50d461b..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Navigation/Validator/UrlUniqueValidatorInterface.php
+++ /dev/null
@@ -1,29 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Navigation\Validator;
-
-interface UrlUniqueValidatorInterface
-{
-
-    /**
-     * @param string $url
-     *
-     * @throws \Exception
-     *
-     * @return void
-     */
-    public function validate($url);
-
-    /**
-     * @param string $url
-     *
-     * @return void
-     */
-    public function addUrl($url);
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/EnvironmentInfo.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/EnvironmentInfo.php
index dfb1153..25d9d4f 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/EnvironmentInfo.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/EnvironmentInfo.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Application\Business\Model\Twig;
 
+use Spryker\Service\UtilNetwork\Model\Host;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\System;
 use Spryker\Shared\Twig\TwigFunction;
 
 class EnvironmentInfo extends TwigFunction
@@ -28,6 +28,7 @@ class EnvironmentInfo extends TwigFunction
     protected function getFunction()
     {
         return function ($currentController) {
+            $utilNetworkHost = new Host();
             $html = '<div class="zed:header__environment"><i class="icon-cogs"></i>'
                 . '<span>' . APPLICATION_ENV . '</span>'
                 . '<dl>'
@@ -36,7 +37,7 @@ class EnvironmentInfo extends TwigFunction
                 . '<dt>Store:'
                 . '<dd>' . Store::getInstance()->getStoreName()
                 . '<dt>Server:'
-                . '<dd>' . System::getHostName()
+                . '<dd>' . $utilNetworkHost->getHostName()
                 . '<dt>Controller:'
                 . '<dd>' . $currentController
                 . '</dl></div>';
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/RouteResolver.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/RouteResolver.php
deleted file mode 100644
index f8ea691..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/RouteResolver.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Twig;
-
-use Zend\Filter\Word\CamelCaseToDash;
-
-class RouteResolver
-{
-
-    /**
-     * @param string $controllerServiceName
-     *
-     * @return string
-     */
-    public function buildRouteFromControllerServiceName($controllerServiceName)
-    {
-        list($serviceName, $actionName) = explode(':', $controllerServiceName);
-        $serviceNameParts = explode('.', $serviceName);
-
-        $serviceNameParts[4] = $this->getCamelCaseToDash($serviceNameParts[4]);
-
-        return $serviceNameParts[2] . '/' . $serviceNameParts[3] . '/' . $serviceNameParts[4];
-    }
-
-    /**
-     * @param string $incomingString
-     *
-     * @return string
-     */
-    protected function getCamelCaseToDash($incomingString)
-    {
-        $filter = new CamelCaseToDash();
-
-        return strtolower($filter->filter($incomingString));
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/ZedExtension.php b/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/ZedExtension.php
deleted file mode 100644
index ea6b385..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Business/Model/Twig/ZedExtension.php
+++ /dev/null
@@ -1,69 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Business\Model\Twig;
-
-use Spryker\Shared\Twig\TwigExtension;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\AssetsPathFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Action\BackActionButtonFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Action\CreateActionButtonFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Action\EditActionButtonFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Action\ViewActionButtonFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\FormatPriceFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\ListGroupFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\ModalFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\PanelFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\UrlFunction;
-
-/**
- * @deprecated All bundles which want to add a function or something else to Twig does it now in a separate ServiceProvider of that bundle
- */
-class ZedExtension extends TwigExtension
-{
-
-    /**
-     * Returns the name of the extension.
-     *
-     * @return string The extension name
-     */
-    public function getName()
-    {
-        return 'zed';
-    }
-
-    /**
-     * @return array
-     */
-    public function getFilters()
-    {
-        $filters = [];
-
-        return $filters;
-    }
-
-    /**
-     * @return array
-     */
-    public function getFunctions()
-    {
-        $functions = [
-            new FormatPriceFunction(),
-            new ListGroupFunction(),
-            new ModalFunction(),
-            new PanelFunction(),
-            new AssetsPathFunction(),
-            new BackActionButtonFunction(),
-            new CreateActionButtonFunction(),
-            new ViewActionButtonFunction(),
-            new EditActionButtonFunction(),
-            new UrlFunction(),
-        ];
-
-        return $functions;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/AbstractApplicationCheckStep.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/AbstractApplicationCheckStep.php
deleted file mode 100644
index d150fd9..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/AbstractApplicationCheckStep.php
+++ /dev/null
@@ -1,126 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-use Psr\Log\AbstractLogger;
-use Psr\Log\LoggerAwareInterface;
-use Psr\Log\LoggerAwareTrait;
-use Psr\Log\LoggerInterface;
-use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
-use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
-use Spryker\Zed\Kernel\Container;
-
-abstract class AbstractApplicationCheckStep extends AbstractLogger implements LoggerAwareInterface, LoggerInterface
-{
-
-    use LoggerAwareTrait;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    protected $facade;
-
-    /**
-     * @var \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory
-     */
-    protected $communicationFactory;
-
-    /**
-     * Logs with an arbitrary level.
-     *
-     * @param mixed $level
-     * @param string $message
-     * @param array $context
-     *
-     * @return void
-     */
-    public function log($level, $message, array $context = [])
-    {
-        if ($this->logger) {
-            $this->logger->log($level, $message, $context);
-        }
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory $communicationFactory
-     *
-     * @return void
-     */
-    public function setCommunicationFactory(AbstractCommunicationFactory $communicationFactory)
-    {
-        $this->communicationFactory = $communicationFactory;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return void
-     */
-    public function setExternalDependencies(Container $container)
-    {
-        $communicationFactory = $this->getFactory();
-        if (isset($communicationFactory)) {
-            $this->getFactory()->setContainer($container);
-        }
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    protected function getFactory()
-    {
-        return $this->communicationFactory;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Business\AbstractFacade $facade
-     *
-     * @return $this
-     */
-    public function setFacade(AbstractFacade $facade)
-    {
-        $this->facade = $facade;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    protected function getFacade()
-    {
-        if ($this->facade === null) {
-            $this->facade = $this->resolveFacade();
-        }
-
-        return $this->facade;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    private function resolveFacade()
-    {
-        return $this->getFacadeResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver
-     */
-    private function getFacadeResolver()
-    {
-        return new FacadeResolver();
-    }
-
-    /**
-     * @return void
-     */
-    abstract public function run();
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/CodeCeption.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/CodeCeption.php
deleted file mode 100644
index 71f73fc..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/CodeCeption.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class CodeCeption extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepCodeCeption($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteDatabase.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteDatabase.php
deleted file mode 100644
index 799fd18..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteDatabase.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class DeleteDatabase extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepDeleteDatabase($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteGeneratedDirectory.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteGeneratedDirectory.php
deleted file mode 100644
index ccd2e80..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/DeleteGeneratedDirectory.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class DeleteGeneratedDirectory extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepDeleteGeneratedDirectory($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportSearch.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportSearch.php
deleted file mode 100644
index c4fa12b..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportSearch.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class ExportSearch extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepExportSearch($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportStorage.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportStorage.php
deleted file mode 100644
index 8c5aead..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ExportStorage.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class ExportStorage extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepExportStorage($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ImportDemoData.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ImportDemoData.php
deleted file mode 100644
index 25d8ee7..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/ImportDemoData.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class ImportDemoData extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepImportDemoData($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/SetupInstall.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/SetupInstall.php
deleted file mode 100644
index 37e84c4..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationCheckStep/SetupInstall.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console\ApplicationCheckStep;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class SetupInstall extends AbstractApplicationCheckStep
-{
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        $this->getFacade()->runCheckStepSetupInstall($this->logger);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationIntegrationCheckConsole.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationIntegrationCheckConsole.php
deleted file mode 100644
index b32190a..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/ApplicationIntegrationCheckConsole.php
+++ /dev/null
@@ -1,80 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console;
-
-use Exception;
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Spryker\Zed\Console\Business\Model\Console;
-use Symfony\Component\Console\Input\InputInterface;
-use Symfony\Component\Console\Logger\ConsoleLogger;
-use Symfony\Component\Console\Output\OutputInterface;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class ApplicationIntegrationCheckConsole extends Console
-{
-
-    const COMMAND_NAME = 'application:integration-check';
-    const DESCRIPTION = 'Execute steps to check application';
-
-    /**
-     * @return void
-     */
-    protected function configure()
-    {
-        $this->setName(self::COMMAND_NAME);
-        $this->setDescription(self::DESCRIPTION);
-
-        parent::configure();
-    }
-
-    /**
-     * @param \Symfony\Component\Console\Input\InputInterface $input
-     * @param \Symfony\Component\Console\Output\OutputInterface $output
-     *
-     * @throws \Exception
-     *
-     * @return void
-     */
-    protected function execute(InputInterface $input, OutputInterface $output)
-    {
-        if (!Config::get(ApplicationConstants::ALLOW_INTEGRATION_CHECKS, false)) {
-            throw new Exception('This command is only allowed to run in development environment');
-        }
-
-        $this->checkApplication(
-            $this->getCheckSteps()
-        );
-    }
-
-    /**
-     * @param \Spryker\Zed\Application\Communication\Console\ApplicationCheckStep\AbstractApplicationCheckStep[] $steps
-     *
-     * @return void
-     */
-    private function checkApplication(array $steps)
-    {
-        $consoleLogger = new ConsoleLogger($this->output);
-
-        foreach ($steps as $step) {
-            $step->setLogger($consoleLogger);
-            $step->run();
-        }
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Communication\Console\ApplicationCheckStep\AbstractApplicationCheckStep[]
-     */
-    protected function getCheckSteps()
-    {
-        return $this->getFacade()->getCheckSteps();
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/BuildNavigationConsole.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/BuildNavigationConsole.php
deleted file mode 100644
index 14c4e3c..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Console/BuildNavigationConsole.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Console;
-
-use Spryker\Zed\Console\Business\Model\Console;
-use Symfony\Component\Console\Input\InputInterface;
-use Symfony\Component\Console\Output\OutputInterface;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class BuildNavigationConsole extends Console
-{
-
-    const COMMAND_NAME = 'application:build-navigation-cache';
-    const DESCRIPTION = 'Build the navigation tree';
-
-    /**
-     * @return void
-     */
-    protected function configure()
-    {
-        $this->setName(self::COMMAND_NAME);
-        $this->setDescription(self::DESCRIPTION);
-
-        parent::configure();
-    }
-
-    /**
-     * @param \Symfony\Component\Console\Input\InputInterface $input
-     * @param \Symfony\Component\Console\Output\OutputInterface $output
-     *
-     * @return void
-     */
-    protected function execute(InputInterface $input, OutputInterface $output)
-    {
-        $this->getMessenger()->info('Build navigation cache');
-        $this->getFacade()->writeNavigationCache();
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractController.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractController.php
deleted file mode 100644
index d1d76d1..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractController.php
+++ /dev/null
@@ -1,395 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Controller;
-
-use Generated\Shared\Transfer\MessageTransfer;
-use LogicException;
-use Silex\Application;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
-use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
-use Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver;
-use Spryker\Zed\Kernel\ClassResolver\QueryContainer\QueryContainerResolver;
-use Spryker\Zed\Kernel\Locator;
-use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpFoundation\RedirectResponse;
-use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpFoundation\StreamedResponse;
-
-abstract class AbstractController
-{
-
-    const TWIG_MESSENGER_PLUGIN = 'TwigMessengerPlugin';
-
-    /**
-     * @var \Silex\Application
-     */
-    private $application;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    private $factory;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    private $facade;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
-     */
-    private $queryContainer;
-
-    /**
-     * @var \Spryker\Zed\Messenger\Business\MessengerFacade
-     */
-    private $messengerFacade;
-
-    /**
-     * @return void
-     */
-    public function initialize()
-    {
-    }
-
-    /**
-     * @param \Silex\Application $application
-     *
-     * @return $this
-     */
-    public function setApplication(Application $application)
-    {
-        $this->application = $application;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    protected function getFactory()
-    {
-        if ($this->factory === null) {
-            $this->factory = $this->resolveFactory();
-        }
-
-        return $this->factory;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    private function resolveFactory()
-    {
-        return $this->getFactoryResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver
-     */
-    private function getFactoryResolver()
-    {
-        return new FactoryResolver();
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    protected function getFacade()
-    {
-        if ($this->facade === null) {
-            $this->facade = $this->resolveFacade();
-        }
-
-        return $this->facade;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    private function resolveFacade()
-    {
-        return $this->getFacadeResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver
-     */
-    private function getFacadeResolver()
-    {
-        return new FacadeResolver();
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
-     */
-    protected function getQueryContainer()
-    {
-        if ($this->queryContainer === null) {
-            $this->queryContainer = $this->resolveQueryContainer();
-        }
-
-        return $this->queryContainer;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
-     */
-    private function resolveQueryContainer()
-    {
-        return $this->getQueryContainerResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\QueryContainer\QueryContainerResolver
-     */
-    private function getQueryContainerResolver()
-    {
-        return new QueryContainerResolver();
-    }
-
-    /**
-     * This methods centralizes the way we cast IDs. This is needed to allow the usage of UUIDs in the future.
-     *
-     * @param mixed $id
-     *
-     * @return int
-     */
-    protected function castId($id)
-    {
-        $this->getAssertion()->assertNumericNotZero($id);
-
-        return (int)$id;
-    }
-
-    /**
-     * @param string $url
-     * @param int $status
-     * @param array $headers
-     *
-     * @return \Symfony\Component\HttpFoundation\RedirectResponse
-     */
-    protected function redirectResponse($url, $status = 302, $headers = [])
-    {
-        return new RedirectResponse($url, $status, $headers);
-    }
-
-    /**
-     * @param array|null $data
-     * @param int $status
-     * @param array $headers
-     *
-     * @return \Symfony\Component\HttpFoundation\JsonResponse
-     */
-    protected function jsonResponse($data = null, $status = 200, $headers = [])
-    {
-        return new JsonResponse($data, $status, $headers);
-    }
-
-    /**
-     * @param callable|null $callback
-     * @param int $status
-     * @param array $headers
-     *
-     * @return \Symfony\Component\HttpFoundation\StreamedResponse
-     */
-    protected function streamedResponse($callback = null, $status = 200, $headers = [])
-    {
-        $streamedResponse = new StreamedResponse($callback, $status, $headers);
-        $streamedResponse->send();
-
-        return $streamedResponse;
-    }
-
-    /**
-     * @param array $data
-     *
-     * @return array
-     */
-    protected function viewResponse(array $data = [])
-    {
-        return $data;
-    }
-
-    /**
-     * @param string $message
-     * @param array $data
-     *
-     * @return $this
-     */
-    protected function addSuccessMessage($message, array $data = [])
-    {
-        $this->getMessengerFacade()->addSuccessMessage($this->createMessageTransfer($message, $data));
-
-        return $this;
-    }
-
-    /**
-     * @param string $message
-     * @param array $data
-     *
-     * @return $this
-     */
-    protected function addInfoMessage($message, array $data = [])
-    {
-        $this->getMessengerFacade()->addInfoMessage($this->createMessageTransfer($message, $data));
-
-        return $this;
-    }
-
-    /**
-     * @param string $message
-     * @param array $data
-     *
-     * @return $this
-     */
-    protected function addErrorMessage($message, array $data = [])
-    {
-        $this->getMessengerFacade()->addErrorMessage($this->createMessageTransfer($message, $data));
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Messenger\Business\MessengerFacade
-     */
-    protected function getMessengerFacade()
-    {
-        if ($this->messengerFacade === null) {
-            $this->messengerFacade = $this->getLocator()->messenger()->facade();
-        }
-
-        return $this->messengerFacade;
-    }
-
-    /**
-     * @param string $message
-     * @param array $data
-     *
-     * @return \Generated\Shared\Transfer\MessageTransfer
-     */
-    private function createMessageTransfer($message, array $data = [])
-    {
-        $messageTransfer = new MessageTransfer();
-        $messageTransfer->setValue($message);
-        $messageTransfer->setParameters($data);
-
-        return $messageTransfer;
-    }
-
-    /**
-     * @return void
-     */
-    protected function clearBreadcrumbs()
-    {
-        $this->getTwig()->addGlobal('breadcrumbs', []);
-    }
-
-    /**
-     * @throws \LogicException
-     *
-     * @return \Twig_Environment
-     */
-    private function getTwig()
-    {
-        $twig = $this->getApplication()['twig'];
-        if ($twig === null) {
-            throw new LogicException('Twig environment not set up.');
-        }
-
-        return $twig;
-    }
-
-    /**
-     * @return \Silex\Application
-     */
-    protected function getApplication()
-    {
-        if ($this->application === null) {
-            $pimplePlugin = new Pimple();
-            $this->application = $pimplePlugin->getApplication();
-        }
-
-        return $this->application;
-    }
-
-    /**
-     * @param string $label
-     * @param string $uri
-     *
-     * @return void
-     */
-    protected function addBreadcrumb($label, $uri)
-    {
-        $twig = $this->getTwig();
-        $globals = $twig->getGlobals();
-        $breadcrumbs = $globals['breadcrumbs'];
-
-        if ($breadcrumbs === null) {
-            $breadcrumbs = [];
-        }
-
-        $breadcrumbs[] = [
-            'label' => $label,
-            'uri' => $uri,
-        ];
-
-        $twig->addGlobal('breadcrumbs', $breadcrumbs);
-    }
-
-    /**
-     * @param string $uri
-     *
-     * @return void
-     */
-    protected function setMenuHighlight($uri)
-    {
-        $this->getTwig()->addGlobal('menu_highlight', $uri);
-    }
-
-    /**
-     * @return \Generated\Zed\Ide\AutoCompletion
-     */
-    private function getLocator()
-    {
-        return Locator::getInstance();
-    }
-
-    /**
-     * @return \Spryker\Zed\Assertion\Business\AssertionFacadeInterface
-     */
-    protected function getAssertion()
-    {
-        return $this->getApplication()['assertion'];
-    }
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param string $blockUrl
-     *
-     * @return string|\Symfony\Component\HttpFoundation\RedirectResponse
-     */
-    protected function handleSubRequest(Request $request, $blockUrl)
-    {
-        $blockResponse = $this->getSubrequestHandler()->handleSubRequest($request, $blockUrl);
-        if ($blockResponse instanceof RedirectResponse) {
-            return $blockResponse;
-        }
-
-        return $blockResponse->getContent();
-    }
-
-    /**
-     * @return \Spryker\Zed\Application\Business\Model\Request\SubRequestHandlerInterface
-     */
-    protected function getSubrequestHandler()
-    {
-        return $this->getApplication()['sub_request'];
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractRestController.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractRestController.php
deleted file mode 100644
index e763b43..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/AbstractRestController.php
+++ /dev/null
@@ -1,83 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Controller;
-
-use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpFoundation\Request;
-
-abstract class AbstractRestController
-{
-
-    const GET = 'GET';
-    const POST = 'POST';
-    const PUT = 'PUT';
-    const DELETE = 'DELETE';
-
-    /**
-     * @var \Symfony\Component\HttpFoundation\Request
-     */
-    protected $request;
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     *
-     * @return \Symfony\Component\HttpFoundation\JsonResponse
-     */
-    public function indexAction(Request $request)
-    {
-        $this->request = $request;
-
-        $result = $this->routeRequest();
-
-        return new JsonResponse($result);
-    }
-
-    /**
-     * @return mixed|null
-     */
-    protected function routeRequest()
-    {
-        $result = null;
-        switch ($this->request->getMethod()) {
-            case self::GET:
-                $result = $this->get();
-                break;
-            case self::POST:
-                $result = $this->post();
-                break;
-            case self::PUT:
-                $result = $this->put();
-                break;
-            case self::DELETE:
-                $result = $this->delete();
-        }
-
-        return $result;
-    }
-
-    /**
-     * @return mixed
-     */
-    abstract protected function get();
-
-    /**
-     * @return mixed
-     */
-    abstract protected function post();
-
-    /**
-     * @return mixed
-     */
-    abstract protected function put();
-
-    /**
-     * @return mixed
-     */
-    abstract protected function delete();
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/IndexController.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/IndexController.php
index 67520a8..6d786a6 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/IndexController.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Communication/Controller/IndexController.php
@@ -7,6 +7,8 @@
 
 namespace Spryker\Zed\Application\Communication\Controller;
 
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
+
 class IndexController extends AbstractController
 {
 
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Navigation.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Navigation.php
deleted file mode 100644
index 967a8a8..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Navigation.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin;
-
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- * @method \Spryker\Zed\Application\ApplicationConfig getConfig()
- */
-class Navigation extends AbstractPlugin
-{
-
-    /**
-     * @param string $pathInfo
-     *
-     * @return array
-     */
-    public function buildNavigation($pathInfo)
-    {
-        if (!$this->getConfig()->isNavigationEnabled()) {
-            return [];
-        }
-
-        return $this->getFacade()
-            ->buildNavigation($pathInfo);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Pimple.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Pimple.php
deleted file mode 100644
index ca39c04..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/Pimple.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin;
-
-use Spryker\Shared\Application\Communication\Application;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- */
-class Pimple extends AbstractPlugin
-{
-
-    /**
-     * @var \Spryker\Shared\Application\Communication\Application
-     */
-    protected static $application;
-
-    /**
-     * @param \Spryker\Shared\Application\Communication\Application $application
-     *
-     * @return void
-     */
-    public static function setApplication(Application $application)
-    {
-        self::$application = $application;
-    }
-
-    /**
-     * @return \Spryker\Shared\Application\Communication\Application
-     */
-    public function getApplication()
-    {
-        return self::$application;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/DateFormatterServiceProvider.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/DateFormatterServiceProvider.php
deleted file mode 100644
index 7e719dc..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/DateFormatterServiceProvider.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\Library\Context;
-use Spryker\Shared\Library\DateFormatter;
-use Spryker\Shared\Library\Twig\DateFormatterTwigExtension;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- */
-class DateFormatterServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        $dateFormatter = new DateFormatter(Context::getInstance(Context::CONTEXT_ZED));
-
-        $app['dateFormatter'] = $app->share(function () use ($dateFormatter) {
-            return $dateFormatter;
-        });
-
-        $app['twig'] = $app->share(
-            $app->extend('twig', function (\Twig_Environment $twig) use ($dateFormatter) {
-                $twig->addExtension(new DateFormatterTwigExtension($dateFormatter));
-
-                return $twig;
-            })
-        );
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NavigationServiceProvider.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NavigationServiceProvider.php
deleted file mode 100644
index f664919..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NavigationServiceProvider.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Zed\Application\Communication\Plugin\Navigation;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Symfony\Component\HttpFoundation\Request;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- */
-class NavigationServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        $app['twig.global.variables'] = $app->share(
-            $app->extend('twig.global.variables', function (array $variables) {
-                $navigation = $this->getNavigation();
-                $breadcrumbs = $navigation['path'];
-
-                $variables['navigation'] = $navigation;
-                $variables['breadcrumbs'] = $breadcrumbs;
-
-                return $variables;
-            })
-        );
-    }
-
-    /**
-     * @return string
-     */
-    protected function getNavigation()
-    {
-        $request = Request::createFromGlobals();
-
-        return (new Navigation())
-            ->buildNavigation($request->getPathInfo());
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NewRelicServiceProvider.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NewRelicServiceProvider.php
deleted file mode 100644
index d0c7b07..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/NewRelicServiceProvider.php
+++ /dev/null
@@ -1,64 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Symfony\Component\HttpFoundation\Request;
-
-/**
- * @deprecated Use NewRelicServiceProvider from NewRelic bundle instead
- *
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- */
-class NewRelicServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-        $app->before(function (Request $request) {
-            $module = $request->attributes->get('module');
-            $controller = $request->attributes->get('controller');
-            $action = $request->attributes->get('action');
-            $transactionName = $module . '/' . $controller . '/' . $action;
-
-            $requestUri = array_key_exists('REQUEST_URI', $_SERVER) ? $_SERVER['REQUEST_URI'] : 'unknown';
-
-            $host = isset($_SERVER['COMPUTERNAME']) ? $_SERVER['COMPUTERNAME'] : System::getHostname();
-
-            $store = Store::getInstance();
-
-            $newRelicApi = new NewRelicApi();
-            $newRelicApi->setNameOfTransaction($transactionName);
-            $newRelicApi->addCustomParameter('request_uri', $requestUri);
-            $newRelicApi->addCustomParameter('host', $host);
-            $newRelicApi->addCustomParameter('store', $store->getStoreName());
-            $newRelicApi->addCustomParameter('locale', $store->getCurrentLocale());
-        });
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/TwigServiceProvider.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/TwigServiceProvider.php
deleted file mode 100644
index b381b85..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/TwigServiceProvider.php
+++ /dev/null
@@ -1,188 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\ServiceProvider;
-
-use FilesystemIterator;
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Zed\Application\Business\Model\Twig\RouteResolver;
-use Spryker\Zed\Gui\Communication\Form\Type\Extension\NoValidateTypeExtension;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Spryker\Zed\Library\Twig\Loader\Filesystem;
-use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
-use Symfony\Component\HttpKernel\KernelEvents;
-use Twig_Loader_Chain;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- * @method \Spryker\Zed\Application\ApplicationConfig getConfig()
- */
-class TwigServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @var \Spryker\Yves\Application\Application
-     */
-    private $app;
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        $this->app = $app;
-
-        $this->provideFormTypeExtension();
-        $this->provideFormTypeTemplates();
-
-        $app['twig.loader.zed'] = $app->share(function () {
-            $namespaces = Config::get(ApplicationConstants::PROJECT_NAMESPACES);
-
-            $storeName = Store::getInstance()->getStoreName();
-
-            $paths = [];
-            foreach ($namespaces as $namespace) {
-                $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Zed/%s' . $storeName . '/Presentation/';
-                $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Zed/%s/Presentation/';
-            }
-            $paths[] = $this->getConfig()->getBundlesDirectory() . '/%2$s/src/Spryker/Zed/%1$s/Presentation/';
-
-            return new Filesystem($paths);
-        });
-
-        $app['twig.loader'] = $app->share(function ($app) {
-            return new Twig_Loader_Chain(
-                [
-                    $app['twig.loader.zed'],
-                    $app['twig.loader.filesystem'],
-                ]
-            );
-        });
-
-        $app['twig.options'] = Config::get(ApplicationConstants::ZED_TWIG_OPTIONS);
-
-        $app['twig.global.variables'] = $app->share(function () {
-            return [];
-        });
-
-        $app['twig'] = $app->share(
-            $app->extend(
-                'twig',
-                function (\Twig_Environment $twig) use ($app) {
-                    foreach ($app['twig.global.variables'] as $name => $value) {
-                        $twig->addGlobal($name, $value);
-                    }
-
-                    return $twig;
-                }
-            )
-        );
-    }
-
-    /**
-     * Handles string responses.
-     *
-     * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event The event to handle
-     *
-     * @return void
-     */
-    public function onKernelView(GetResponseForControllerResultEvent $event)
-    {
-        $response = $event->getControllerResult();
-
-        if (empty($response) || is_array($response)) {
-            $response = $this->render((array)$response);
-            if ($response instanceof Response) {
-                $event->setResponse($response);
-            }
-        }
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-        $app['dispatcher']->addListener(KernelEvents::VIEW, [$this, 'onKernelView']);
-    }
-
-    /**
-     * Renders the template for the current controller/action
-     *
-     * @param array $parameters
-     *
-     * @return \Symfony\Component\HttpFoundation\Response
-     */
-    protected function render(array $parameters = [])
-    {
-        $request = $this->app['request_stack']->getCurrentRequest();
-        $controller = $request->attributes->get('_controller');
-
-        if (!is_string($controller) || empty($controller)) {
-            return;
-        }
-
-        if (isset($parameters['alternativeRoute'])) {
-            $route = (string)$parameters['alternativeRoute'];
-        } else {
-            $route = (new RouteResolver())
-                ->buildRouteFromControllerServiceName($controller);
-        }
-
-        return $this->app->render('@' . $route . '.twig', $parameters);
-    }
-
-    /**
-     * @return void
-     */
-    protected function provideFormTypeExtension()
-    {
-        $this->app['form.type.extensions'] = $this->app->share(function () {
-            return [
-                new NoValidateTypeExtension(),
-            ];
-        });
-    }
-
-    /**
-     * @return void
-     */
-    protected function provideFormTypeTemplates()
-    {
-        $guiDirectory = $path = $this->getConfig()->getBundlesDirectory() . '/Gui';
-        if (!is_dir($guiDirectory)) {
-            $guiDirectory = $path = $this->getConfig()->getBundlesDirectory() . '/gui';
-        }
-        $path = $guiDirectory . '/src/Spryker/Zed/Gui/Presentation/Form/Type';
-
-        $this->app['twig.loader.filesystem']->addPath(
-            $path
-        );
-
-        $files = new FilesystemIterator($path, FilesystemIterator::SKIP_DOTS | FilesystemIterator::KEY_AS_PATHNAME);
-
-        $typeTemplates = [];
-        foreach ($files as $file) {
-            $typeTemplates[] = $file->getFilename();
-        }
-
-        $this->app['twig.form.templates'] = array_merge([
-            'bootstrap_3_layout.html.twig',
-        ], $typeTemplates);
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/ZedExtensionServiceProvider.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/ZedExtensionServiceProvider.php
deleted file mode 100644
index 3479c84..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/ServiceProvider/ZedExtensionServiceProvider.php
+++ /dev/null
@@ -1,49 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Zed\Application\Business\Model\Twig\ZedExtension;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @deprecated All bundles which want to add a function or something else to twig does it now in a separate ServiceProvider of that bundle
- *
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- */
-class ZedExtensionServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        $app['twig'] = $app->share(
-            $app->extend('twig', function (\Twig_Environment $twig) {
-                $twig->addExtension(new ZedExtension());
-
-                return $twig;
-            })
-        );
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/Repeater.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/Repeater.php
deleted file mode 100644
index f65ef81..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/Repeater.php
+++ /dev/null
@@ -1,78 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\TransferObject;
-
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\Log;
-use Spryker\Shared\ZedRequest\Client\RequestInterface;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Symfony\Component\HttpFoundation\Request as HttpRequest;
-
-/**
- * @method \Spryker\Zed\Application\Business\ApplicationFacade getFacade()
- * @method \Spryker\Zed\Application\Communication\ApplicationCommunicationFactory getFactory()
- */
-class Repeater extends AbstractPlugin
-{
-
-    /**
-     * @var bool
-     */
-    protected $isRepeatInProgress = false;
-
-    /**
-     * @param string|null $mvc
-     *
-     * @return string
-     */
-    public function getRepeatData($mvc = null)
-    {
-        $this->isRepeatInProgress = true;
-        if ($mvc !== null) {
-            return Log::getFlashInFile('last_yves_request_' . $mvc . '.log');
-        } else {
-            return Log::getFlashInFile('last_yves_request.log');
-        }
-    }
-
-    /**
-     * @param \Spryker\Shared\ZedRequest\Client\RequestInterface $transferObject
-     * @param \Symfony\Component\HttpFoundation\Request $httpRequest
-     *
-     * @return void
-     */
-    public function setRepeatData(RequestInterface $transferObject, HttpRequest $httpRequest)
-    {
-        if ($this->isRepeatInProgress) {
-            return;
-        }
-
-        if (Config::get(ApplicationConstants::SET_REPEAT_DATA, false) === false) {
-            return;
-        }
-
-        $repeatData = [
-            'module' => $httpRequest->attributes->get('module'),
-            'controller' => $httpRequest->attributes->get('controller'),
-            'action' => $httpRequest->attributes->get('action'),
-            'params' => $transferObject->toArray(false),
-        ];
-
-        $mvc = sprintf(
-            '%s_%s_%s',
-            $httpRequest->attributes->get('module'),
-            $httpRequest->attributes->get('controller'),
-            $httpRequest->attributes->get('action')
-        );
-
-        Log::setFlashInFile($repeatData, 'last_yves_request_' . $mvc . '.log');
-        Log::setFlashInFile($repeatData, 'last_yves_request.log');
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/TransferServer.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/TransferServer.php
deleted file mode 100644
index 8557c33..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/Plugin/TransferObject/TransferServer.php
+++ /dev/null
@@ -1,157 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Application\Communication\Plugin\TransferObject;
-
-use LogicException;
-use Spryker\Shared\ZedRequest\Client\ResponseInterface;
-use Spryker\Zed\ZedRequest\Business\Client\Request;
-use Symfony\Component\HttpFoundation\JsonResponse;
-use Symfony\Component\HttpFoundation\Request as HttpRequest;
-use Symfony\Component\HttpFoundation\Response;
-
-class TransferServer
-{
-
-    /**
-     * @var self
-     */
-    protected static $instance;
-
-    /**
-     * @var bool
-     */
-    protected $repeatIsActive = false;
-
-    /**
-     * @var \Spryker\Shared\ZedRequest\Client\RequestInterface
-     */
-    private $request;
-
-    /**
-     * @var \Symfony\Component\HttpFoundation\Request
-     */
-    private $httpRequest;
-
-    /**
-     * @var \Spryker\Shared\ZedRequest\Client\ResponseInterface|\Spryker\Shared\Library\Communication\Response
-     */
-    protected $response;
-
-    /**
-     * @var \Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater
-     */
-    private $repeater;
-
-    /**
-     * @param \Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater $repeater
-     */
-    private function __construct(Repeater $repeater)
-    {
-        $this->repeater = $repeater;
-    }
-
-    /**
-     * @param \Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater|null $repeater
-     *
-     * @return $this
-     */
-    public static function getInstance(Repeater $repeater = null)
-    {
-        if (self::$instance) {
-            return self::$instance;
-        }
-
-        if ($repeater === null) {
-            $repeater = new Repeater();
-        }
-
-        self::$instance = new static($repeater);
-
-        return self::$instance;
-    }
-
-    /**
-     * @return void
-     */
-    public function activateRepeating()
-    {
-        $this->repeatIsActive = true;
-    }
-
-    /**
-     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
-     */
-    public function getRequest()
-    {
-        if (!$this->request) {
-            if ($this->repeatIsActive) {
-                $this->request = new Request(
-                    $this->repeater->getRepeatData($this->getHttpRequest()->query->get('mvc'))['params']
-                );
-            } else {
-                $transferValues = json_decode($this->getHttpRequest()->getContent(), true);
-                $this->request = new Request($transferValues);
-                $this->repeater->setRepeatData($this->request, $this->httpRequest);
-            }
-        }
-
-        return $this->request;
-    }
-
-    /**
-     * @throws \LogicException
-     *
-     * @return \Symfony\Component\HttpFoundation\Request
-     */
-    private function getHttpRequest()
-    {
-        if ($this->httpRequest === null) {
-            throw new LogicException('No Http Request found in TransferServer. Maybe you try to access data from it before the request object is injected.');
-        }
-
-        return $this->httpRequest;
-    }
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Request $httpRequest
-     *
-     * @return $this
-     */
-    public function setRequest(HttpRequest $httpRequest)
-    {
-        $this->httpRequest = $httpRequest;
-
-        return $this;
-    }
-
-    /**
-     * @param \Spryker\Shared\ZedRequest\Client\ResponseInterface $response
-     *
-     * @return $this
-     */
-    public function setResponse(ResponseInterface $response)
-    {
-        $this->response = $response;
-
-        return $this;
-    }
-
-    /**
-     * @return \Symfony\Component\HttpFoundation\JsonResponse
-     */
-    public function send()
-    {
-        $jsonResponse = new JsonResponse($this->response->toArray(), Response::HTTP_OK, ['X-Zed-Host' => 1]);
-        if ($this->repeatIsActive) {
-            $jsonResponse->setEncodingOptions(JSON_PRETTY_PRINT);
-        }
-
-        return $jsonResponse;
-    }
-
-}
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Communication/ZedBootstrap.php b/Bundles/Application/src/Spryker/Zed/Application/Communication/ZedBootstrap.php
index 90dc513..2eec82e 100644
--- a/Bundles/Application/src/Spryker/Zed/Application/Communication/ZedBootstrap.php
+++ b/Bundles/Application/src/Spryker/Zed/Application/Communication/ZedBootstrap.php
@@ -8,14 +8,13 @@
 namespace Spryker\Zed\Application\Communication;
 
 use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Application\Communication\Application;
-use Spryker\Shared\Auth\AuthConstants;
 use Spryker\Shared\Config\Config;
+use Spryker\Shared\Kernel\Communication\Application;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\DataDirectory;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\BundleDependencyProviderResolverAwareTrait;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Kernel\ControllerResolver\ZedFragmentControllerResolver;
 use Spryker\Zed\Kernel\Dependency\Injector\DependencyInjector;
@@ -27,7 +26,7 @@ class ZedBootstrap
     use BundleDependencyProviderResolverAwareTrait;
 
     /**
-     * @var \Spryker\Shared\Application\Communication\Application
+     * @var \Spryker\Shared\Kernel\Communication\Application
      */
     protected $application;
 
@@ -37,15 +36,16 @@ class ZedBootstrap
     }
 
     /**
-     * @return \Spryker\Shared\Application\Communication\Application
+     * @return \Spryker\Shared\Kernel\Communication\Application
      */
     public function boot()
     {
+        $store = Store::getInstance();
         $this->application['debug'] = Config::get(ApplicationConstants::ENABLE_APPLICATION_DEBUG, false);
-        $this->application['locale'] = Store::getInstance()->getCurrentLocale();
+        $this->application['locale'] = $store->getCurrentLocale();
 
         if (Config::get(ApplicationConstants::ENABLE_WEB_PROFILER, false)) {
-            $this->application['profiler.cache_dir'] = DataDirectory::getLocalStoreSpecificPath('cache/profiler');
+            $this->application['profiler.cache_dir'] = APPLICATION_ROOT_DIR . '/data/' . $store->getCurrentCountry() . '/cache/profiler';
         }
 
         $this->optimizeApp();
@@ -131,7 +131,7 @@ class ZedBootstrap
     }
 
     /**
-     * @return \Spryker\Shared\Application\Communication\Application
+     * @return \Spryker\Shared\Kernel\Communication\Application
      */
     protected function getBaseApplication()
     {
@@ -145,7 +145,7 @@ class ZedBootstrap
     }
 
     /**
-     * @param \Spryker\Shared\Application\Communication\Application $application
+     * @param \Spryker\Shared\Kernel\Communication\Application $application
      *
      * @return void
      */
@@ -187,7 +187,7 @@ class ZedBootstrap
                 $variables += [
                     'environment' => APPLICATION_ENV,
                     'store' => Store::getInstance()->getStoreName(),
-                    'title' => Config::get(ApplicationConstants::PROJECT_NAMESPACE) . ' | Zed | ' . ucfirst(APPLICATION_ENV),
+                    'title' => Config::get(KernelConstants::PROJECT_NAMESPACE) . ' | Zed | ' . ucfirst(APPLICATION_ENV),
                     'currentController' => get_class($this),
                 ];
 
@@ -231,11 +231,17 @@ class ZedBootstrap
     }
 
     /**
+     * For performance reasons you can disable this in your project
+     * Set `AuthConstants::AUTH_ZED_ENABLED` in your config to false
+     * if you don't need authentication enabled.
+     *
+     * If set to false only a subset of ServiceProvider will be added.
+     *
      * @return bool
      */
     protected function isAuthenticationEnabled()
     {
-        return Config::get(AuthConstants::AUTH_ZED_ENABLED, true);
+        return true;
     }
 
 }
diff --git a/Bundles/Application/src/Spryker/Zed/Application/Presentation/Layout/Partials/menu.twig b/Bundles/Application/src/Spryker/Zed/Application/Presentation/Layout/Partials/menu.twig
deleted file mode 100644
index 70bd5fe..0000000
--- a/Bundles/Application/src/Spryker/Zed/Application/Presentation/Layout/Partials/menu.twig
+++ /dev/null
@@ -1,54 +0,0 @@
-{%- macro leaf(node) -%}
-    {%- if node is defined %}
-        {%- if menu_highlight is defined -%}
-            {%- if menu_highlight == node.uri -%}
-                <li class="item active">
-            {%- else -%}
-                <li class="item">
-            {%- endif -%}
-        {%- else-%}
-        <li class="item{{ node.is_active is defined and node.is_active ? " active" : "" }}">
-        {%- endif -%}
-            <a
-                href="{{ node.uri }}"
-                {% if node.shortcut is defined %}data-hotkey="{{ node.shortcut }}"{% endif %}
-            >{{ node.label }}</a>
-        </li>
-    {% endif -%}
-{%- endmacro -%}
-
-{%- macro branch(node) -%}
-    {%- import _self as menu -%}
-
-    {%- if node is defined %}
-        <li class="group{{ node.is_active is defined and node.is_active ? " active" : "" }}">
-            <span>{{ node.label }}</span>
-
-            <ul>
-                {{ menu.tree(node.children) }}
-            </ul>
-        </li>
-    {% endif -%}
-{%- endmacro -%}
-
-{%- macro tree(root) -%}
-    {%- import _self as menu -%}
-
-    {%- for child in root -%}
-        {%- if child.children is defined and child.children is not empty -%}
-            {{ menu.branch(child) }}
-        {%- else -%}
-            {{ menu.leaf(child) }}
-        {%- endif -%}
-    {%- endfor -%}
-{%- endmacro -%}
-
-
-{%- import _self as menu -%}
-
-
-<nav class="spy-page-nav">
-    <ul tabindex="0">
-        {{ menu.tree(navigation.menu) }}
-    </ul>
-</nav>
\ No newline at end of file
diff --git a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/ComplexTransfer.php b/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/ComplexTransfer.php
deleted file mode 100644
index f689a54..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/ComplexTransfer.php
+++ /dev/null
@@ -1,157 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Application\Log\Processor\Fixtures;
-
-use Spryker\Shared\Transfer\AbstractTransfer;
-use Spryker\Shared\Transfer\TransferInterface;
-
-class ComplexTransfer extends AbstractTransfer implements TransferInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $array = ['foo', 'bar'];
-
-    /**
-     * @var \ArrayObject
-     */
-    protected $emptyTransfer;
-
-    /**
-     * @var \Unit\Spryker\Shared\Application\Log\Processor\Fixtures\SimpleTransfer
-     */
-    protected $innerTransfer;
-
-    /**
-     * @var \Unit\Spryker\Shared\Application\Log\Processor\Fixtures\SimpleTransfer[]
-     */
-    protected $transferCollection;
-
-    /**
-     * @var array
-     */
-    protected $transferMetadata = [
-        'array' => [
-            'type' => 'array',
-            'name_underscore' => 'array',
-            'is_collection' => true,
-            'is_transfer' => false,
-        ],
-        'emptyTransfer' => [
-            'type' => '\Unit\Spryker\Shared\Application\Log\Processor\Fixtures\SimpleTransfer',
-            'name_underscore' => 'empty_transfer',
-            'is_collection' => false,
-            'is_transfer' => true,
-        ],
-        'innerTransfer' => [
-            'type' => '\Unit\Spryker\Shared\Application\Log\Processor\Fixtures\SimpleTransfer',
-            'name_underscore' => 'inner_transfer',
-            'is_collection' => false,
-            'is_transfer' => true,
-        ],
-        'transferCollection' => [
-            'type' => '\Unit\Spryker\Shared\Application\Log\Processor\Fixtures\SimpleTransfer',
-            'name_underscore' => 'transfer_collection',
-            'is_collection' => true,
-            'is_transfer' => true,
-        ],
-    ];
-
-    public function __construct()
-    {
-        parent::__construct();
-        $this->emptyTransfer = new \ArrayObject();
-        $this->innerTransfer = new SimpleTransfer();
-        $this->transferCollection = [
-            new SimpleTransfer(),
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public function getArray()
-    {
-        return $this->array;
-    }
-
-    /**
-     * @param array $array
-     *
-     * @return $this
-     */
-    public function setArray($array)
-    {
-        $this->array = $array;
-
-        return $this;
-    }
-
-    /**
-     * @return \ArrayObject
-     */
-    public function getEmptyTransfer()
-    {
-        return $this->emptyTransfer;
-    }
-
-    /**
-     * @param \ArrayObject $emptyTransfer
-     *
-     * @return $this
-     */
-    public function setEmptyTransfer($emptyTransfer)
-    {
-        $this->emptyTransfer = $emptyTransfer;
-
-        return $this;
-    }
-
-    /**
-     * @return \Unit\Spryker\Shared\Application\Log\Processor\SimpleTransfer
-     */
-    public function getInnerTransfer()
-    {
-        return $this->innerTransfer;
-    }
-
-    /**
-     * @param \Unit\Spryker\Shared\Application\Log\Processor\SimpleTransfer $innerTransfer
-     *
-     * @return $this
-     */
-    public function setInnerTransfer($innerTransfer)
-    {
-        $this->innerTransfer = $innerTransfer;
-
-        return $this;
-    }
-
-    /**
-     * @return \Unit\Spryker\Shared\Application\Log\Processor\SimpleTransfer[]
-     */
-    public function getTransferCollection()
-    {
-        return $this->transferCollection;
-    }
-
-    /**
-     * @param \Unit\Spryker\Shared\Application\Log\Processor\SimpleTransfer[] $transferCollection
-     *
-     * @return $this
-     */
-    public function setTransferCollection($transferCollection)
-    {
-        $this->transferCollection = $transferCollection;
-
-        return $this;
-    }
-
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/SimpleTransfer.php b/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/SimpleTransfer.php
deleted file mode 100644
index 2ae7989..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/Fixtures/SimpleTransfer.php
+++ /dev/null
@@ -1,113 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Application\Log\Processor\Fixtures;
-
-use Spryker\Shared\Transfer\AbstractTransfer;
-use Spryker\Shared\Transfer\TransferInterface;
-
-class SimpleTransfer extends AbstractTransfer implements TransferInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $array = ['foo' => 'bar'];
-
-    /**
-     * @var string
-     */
-    protected $string = 'baz';
-
-    /**
-     * @var string
-     */
-    protected $notSanitized = 'baz';
-
-    /**
-     * @var array
-     */
-    protected $transferMetadata = [
-        'array' => [
-            'type' => 'array',
-            'name_underscore' => 'array',
-            'is_collection' => true,
-            'is_transfer' => false,
-        ],
-        'string' => [
-            'type' => 'string',
-            'name_underscore' => 'string',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-        'notSanitized' => [
-            'type' => 'string',
-            'name_underscore' => 'not_sanitized',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-    ];
-
-    /**
-     * @return array
-     */
-    public function getArray()
-    {
-        return $this->array;
-    }
-
-    /**
-     * @param array $array
-     * @return self
-     */
-    public function setArray($array)
-    {
-        $this->array = $array;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getString()
-    {
-        return $this->string;
-    }
-
-    /**
-     * @param string $string
-     * @return self
-     */
-    public function setString($string)
-    {
-        $this->string = $string;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getNotSanitized()
-    {
-        return $this->notSanitized;
-    }
-
-    /**
-     * @param string $notSanitized
-     *
-     * @return $this
-     */
-    public function setNotSanitized($notSanitized)
-    {
-        $this->notSanitized = $notSanitized;
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessorTest.php b/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessorTest.php
deleted file mode 100644
index 27ab9a3..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Processor/TransferSanitizerProcessorTest.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Application\Log\Processor;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Application\Log\Processor\TransferSanitizerProcessor;
-use Spryker\Shared\Log\Sanitizer\Sanitizer;
-use Unit\Spryker\Shared\Application\Log\Processor\Fixtures\ComplexTransfer;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Application
- * @group Log
- * @group Processor
- * @group TransferSanitizerProcessorTest
- */
-class TransferSanitizerProcessorTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @dataProvider getContext
-     *
-     * @param array $context
-     *
-     * @return void
-     */
-    public function testInvokeShouldAddSanitizedTransferToRecordsExtra(array $context)
-    {
-        $record = ['message' => 'message', 'context' => $context];
-        $filterFields = [
-            'foo',
-            'string',
-        ];
-        $sanitizer = new Sanitizer($filterFields, '***');
-        $processor = new TransferSanitizerProcessor($sanitizer);
-        $result = $processor($record);
-
-        $this->assertArrayHasKey('transfer', $result['extra']);
-    }
-
-    /**
-     * @return array
-     */
-    public function getContext()
-    {
-        $transfer = new ComplexTransfer();
-
-        return [
-            [[$transfer]],
-            [['transfer' => $transfer]],
-        ];
-    }
-
-    /**
-     * @return void
-     */
-    public function testIfContextDoesNotContainTransferDoNothing()
-    {
-        $record = ['message' => 'message', 'context' => ''];
-        $sanitizer = new Sanitizer([], '***');
-        $processor = new TransferSanitizerProcessor($sanitizer);
-        $result = $processor($record);
-
-        $this->assertSame($record, $result);
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Request/RequestIdTest.php b/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Request/RequestIdTest.php
deleted file mode 100644
index 4da493d..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Shared/Application/Log/Request/RequestIdTest.php
+++ /dev/null
@@ -1,69 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Application\Log\Request;
-
-use PHPUnit_Framework_TestCase;
-use ReflectionClass;
-use Spryker\Shared\Application\Log\Request\RequestId;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Application
- * @group Log
- * @group Request
- * @group RequestIdTest
- */
-class RequestIdTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function setUp()
-    {
-        $this->resetRequestIdHandler();
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetRequestIdShouldReturnSameRequestId()
-    {
-        $this->assertSame(
-            (new RequestId())->getRequestId(),
-            (new RequestId())->getRequestId()
-        );
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetRequestIdShouldReturnGivenRequestId()
-    {
-        $_SERVER[RequestId::REQUEST_ID_HEADER_KEY] = 'requestId';
-
-        $this->assertSame(
-            'requestId',
-            (new RequestId())->getRequestId()
-        );
-    }
-
-    /**
-     * @return void
-     */
-    protected function resetRequestIdHandler()
-    {
-        $reflectionClass = new ReflectionClass(RequestId::class);
-        $reflectionProperty = $reflectionClass->getProperty('requestId');
-        $reflectionProperty->setAccessible(true);
-        $reflectionProperty->setValue(null);
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/ApplicationConfigTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/ApplicationConfigTest.php
deleted file mode 100644
index e5dbcd9..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/ApplicationConfigTest.php
+++ /dev/null
@@ -1,81 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\ApplicationConfig;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group ApplicationConfigTest
- */
-class ApplicationConfigTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return \Spryker\Zed\Application\ApplicationConfig
-     */
-    private function getConfig()
-    {
-        return new ApplicationConfig();
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetMaxMenuLevelCountShouldReturnInteger()
-    {
-        $this->assertInternalType('integer', $this->getConfig()->getMaxMenuLevelCount());
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetNavigationSchemaPathPatternShouldReturnArrayWithOneEntry()
-    {
-        $navigationSchemaPathPatterns = $this->getConfig()->getNavigationSchemaPathPattern();
-        $this->assertInternalType('array', $navigationSchemaPathPatterns);
-        $this->assertCount(1, $navigationSchemaPathPatterns);
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetNavigationSchemaFileNamePatternShouldReturnString()
-    {
-        $this->assertInternalType('string', $this->getConfig()->getNavigationSchemaFileNamePattern());
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetRootNavigationSchemaShouldReturnString()
-    {
-        $this->assertInternalType('string', $this->getConfig()->getRootNavigationSchema());
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetCacheFileShouldReturnString()
-    {
-        $this->assertInternalType('string', $this->getConfig()->getCacheFile());
-    }
-
-    /**
-     * @return void
-     */
-    public function testIsNavigationCacheEnabledShouldReturnBool()
-    {
-        $this->assertInternalType('bool', $this->getConfig()->isNavigationCacheEnabled());
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationBusinessFactoryTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationBusinessFactoryTest.php
deleted file mode 100644
index ccb2b22..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationBusinessFactoryTest.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\ApplicationBusinessFactory;
-use Spryker\Zed\Application\Business\Model\Navigation\NavigationBuilder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group ApplicationBusinessFactoryTest
- */
-class ApplicationBusinessFactoryTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return \Spryker\Zed\Application\Business\ApplicationBusinessFactory
-     */
-    private function getFactory()
-    {
-        return new ApplicationBusinessFactory();
-    }
-
-    /**
-     * @return void
-     */
-    public function testCreateNavigationBuilderShouldReturnFullyConfiguredInstance()
-    {
-        $instance = $this->getFactory()->createNavigationBuilder();
-
-        $this->assertInstanceOf(NavigationBuilder::class, $instance);
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationFacadeTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationFacadeTest.php
deleted file mode 100644
index db6db85..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/ApplicationFacadeTest.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\ApplicationFacade;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group ApplicationFacadeTest
- */
-class ApplicationFacadeTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return \Spryker\Zed\Application\Business\ApplicationFacadeInterface
-     */
-    private function getFacade()
-    {
-        return new ApplicationFacade();
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildNavigationShouldReturnArrayWithMenuAsKey()
-    {
-        $navigation = $this->getFacade()->buildNavigation('');
-
-        $this->assertArrayHasKey('menu', $navigation);
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilderTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilderTest.php
deleted file mode 100644
index b6d651a..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheBuilderTest.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business\Model\Navigation\Cache;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheBuilder;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group Model
- * @group Navigation
- * @group Cache
- * @group NavigationCacheBuilderTest
- */
-class NavigationCacheBuilderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testWriteNavigationCacheMustReadNavigationFromCollectorAndPassItToTheCache()
-    {
-        $navigationCacheMock = $this->getMockBuilder(NavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
-        $navigationCacheMock->expects($this->once())
-            ->method('setNavigation');
-
-        $navigationCollectorMock = $this->getMockBuilder(NavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
-        $navigationCollectorMock->expects($this->once())
-            ->method('getNavigation')
-            ->will($this->returnValue([]));
-
-        $navigationCacheBuilder = new NavigationCacheBuilder($navigationCollectorMock, $navigationCacheMock);
-        $navigationCacheBuilder->writeNavigationCache();
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheTest.php
deleted file mode 100644
index ffcb0ab..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Cache/NavigationCacheTest.php
+++ /dev/null
@@ -1,156 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business\Model\Navigation\Cache;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\Json;
-use Spryker\Zed\Application\Business\Exception\NavigationCacheEmptyException;
-use Spryker\Zed\Application\Business\Exception\NavigationCacheFileDoesNotExistException;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCache;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group Model
- * @group Navigation
- * @group Cache
- * @group NavigationCacheTest
- */
-class NavigationCacheTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function tearDown()
-    {
-        parent::tearDown();
-
-        $cacheFile = $this->getCacheFile();
-        if (file_exists($cacheFile)) {
-            unlink($cacheFile);
-        }
-    }
-
-    /**
-     * @return string
-     */
-    private function getCacheFile()
-    {
-        $pathToFile = __DIR__ . DIRECTORY_SEPARATOR . 'navigation.cache';
-
-        if (!file_exists($pathToFile)) {
-            touch($pathToFile);
-        }
-
-        return $pathToFile;
-    }
-
-    /**
-     * @return void
-     */
-    public function testIsNavigationCacheEnabledMustReturnFalseIfItIsNotEnabled()
-    {
-        $isEnabled = false;
-        $navigationCache = new NavigationCache('', $isEnabled);
-
-        $this->assertFalse($navigationCache->isEnabled());
-    }
-
-    /**
-     * @return void
-     */
-    public function testIsNavigationCacheEnabledMustReturnTrueIfEnabled()
-    {
-        $isEnabled = true;
-        $navigationCache = new NavigationCache(__FILE__, $isEnabled);
-
-        $this->assertTrue($navigationCache->isEnabled());
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetMustSerializeGivenNavigationDataIntoFile()
-    {
-        $cacheFile = $this->getCacheFile();
-        $isEnabled = true;
-
-        $navigationCache = new NavigationCache($cacheFile, $isEnabled);
-
-        $navigationData = ['foo' => 'bar'];
-        $navigationCache->setNavigation($navigationData);
-
-        $this->assertTrue($navigationCache->isEnabled());
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetMustReturnUnSerializedNavigationDataFromFile()
-    {
-        $cacheFile = $this->getCacheFile();
-        $isEnabled = true;
-
-        $navigationCache = new NavigationCache($cacheFile, $isEnabled);
-        $navigationData = ['foo' => 'bar'];
-        $navigationCache->setNavigation($navigationData);
-
-        $cachedNavigationData = $navigationCache->getNavigation();
-        $this->assertSame($navigationData, $cachedNavigationData);
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetMustThrowExceptionIfCacheEnabledButCacheFileDoesNotExists()
-    {
-        $this->expectException(NavigationCacheFileDoesNotExistException::class);
-
-        $isEnabled = true;
-        $navigationCache = new NavigationCache('', $isEnabled);
-        $navigationCache->getNavigation();
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetMustThrowExceptionIfCacheEnabledCacheFileGivenButEmpty()
-    {
-        $this->expectException(NavigationCacheEmptyException::class);
-
-        $cacheFile = $this->getCacheFile();
-        $isEnabled = true;
-        $navigationCache = new NavigationCache($cacheFile, $isEnabled);
-        $navigationCache->getNavigation();
-    }
-
-    /**
-     * Checks, that JSON serialization is used in the cache.
-     *
-     * @return void
-     */
-    public function testCacheShouldNotUseSerialize()
-    {
-        $cacheFile = $this->getCacheFile();
-        $isEnabled = true;
-
-        $navigationCache = new NavigationCache($cacheFile, $isEnabled);
-
-        $navigationData = ['foo' => 'bar'];
-        $navigationCache->setNavigation($navigationData);
-
-        $rawData = file_get_contents($cacheFile);
-        $this->assertEquals($navigationData, Json::decode($rawData, true));
-        $this->assertEquals($rawData, Json::encode($navigationData));
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecoratorTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecoratorTest.php
deleted file mode 100644
index edf95b9..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/Collector/Decorator/NavigationCollectorCacheDecoratorTest.php
+++ /dev/null
@@ -1,80 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business\Model\Navigation\Collector\Decorator;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\Model\Navigation\Cache\NavigationCacheInterface;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\Decorator\NavigationCollectorCacheDecorator;
-use Spryker\Zed\Application\Business\Model\Navigation\Collector\NavigationCollectorInterface;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group Model
- * @group Navigation
- * @group Collector
- * @group Decorator
- * @group NavigationCollectorCacheDecoratorTest
- */
-class NavigationCollectorCacheDecoratorTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testIfCacheIsNotEnabledGetNavigationMustReturnNavigationFromCollector()
-    {
-        $navigationCacheMock = $this->getMockBuilder(NavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
-        $navigationCacheMock->expects($this->once())
-            ->method('isEnabled')
-            ->will($this->returnValue(false));
-        $navigationCacheMock->expects($this->never())
-            ->method('getNavigation');
-
-        $navigationCollectorMock = $this->getMockBuilder(NavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
-        $navigationCollectorMock->expects($this->once())
-            ->method('getNavigation')
-            ->will($this->returnValue([]));
-
-        $navigationCollectorCacheDecorator = new NavigationCollectorCacheDecorator($navigationCollectorMock, $navigationCacheMock);
-
-        $this->assertInternalType(
-            'array',
-            $navigationCollectorCacheDecorator->getNavigation()
-        );
-    }
-
-    /**
-     * @return void
-     */
-    public function testIfCacheIsEnabledGetNavigationMustReturnNavigationFromCache()
-    {
-        $navigationCacheMock = $this->getMockBuilder(NavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
-        $navigationCacheMock->expects($this->once())
-            ->method('isEnabled')
-            ->will($this->returnValue(true));
-        $navigationCacheMock->expects($this->once())
-            ->method('getNavigation')
-            ->will($this->returnValue([]));
-
-        $navigationCollectorMock = $this->getMockBuilder(NavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
-        $navigationCollectorMock->expects($this->never())
-            ->method('getNavigation');
-
-        $navigationCollectorCacheDecorator = new NavigationCollectorCacheDecorator($navigationCollectorMock, $navigationCacheMock);
-
-        $this->assertInternalType(
-            'array',
-            $navigationCollectorCacheDecorator->getNavigation()
-        );
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderTest.php
deleted file mode 100644
index 42d921f..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Navigation/SchemaFinder/NavigationSchemaFinderTest.php
+++ /dev/null
@@ -1,66 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\Model\Navigation\SchemaFinder\NavigationSchemaFinder;
-use Symfony\Component\Filesystem\Filesystem;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group Model
- * @group Navigation
- * @group SchemaFinder
- * @group NavigationSchemaFinderTest
- */
-class NavigationSchemaFinderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function setUp()
-    {
-        mkdir($this->getFixtureDirectory());
-    }
-
-    /**
-     * @return void
-     */
-    public function tearDown()
-    {
-        $fileSystem = new Filesystem();
-        $fileSystem->remove($this->getFixtureDirectory());
-    }
-
-    /**
-     * @return string
-     */
-    private function getFixtureDirectory()
-    {
-        return __DIR__ . DIRECTORY_SEPARATOR . 'Fixtures';
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetSchemasShouldReturnIterateableFileCollection()
-    {
-        $schemaFinder = new NavigationSchemaFinder(
-            [$this->getFixtureDirectory()],
-            'file name pattern'
-        );
-
-        $this->assertInstanceOf('Symfony\Component\Finder\Finder', $schemaFinder->getSchemaFiles());
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Twig/RouteResolverTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Twig/RouteResolverTest.php
deleted file mode 100644
index e25f193..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Business/Model/Twig/RouteResolverTest.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Business\Model\Twig;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Application\Business\Model\Twig\RouteResolver;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Business
- * @group Model
- * @group Twig
- * @group RouteResolverTest
- */
-class RouteResolverTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testBuildRouteFromControllerServiceNameShouldReturnUri()
-    {
-        $routeResolver = new RouteResolver();
-        $incomingString = 'controller.service.DummyBundle.Index.camelCase:camelCaseAction';
-
-        $this->assertEquals(
-            'DummyBundle/Index/camel-case',
-            $routeResolver->buildRouteFromControllerServiceName($incomingString)
-        );
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildRouteFromControllerServiceNameReturnUriFail()
-    {
-        $routeResolver = new RouteResolver();
-        $incomingString = 'controller.service.DummyBundle.Index.camelCase:camelCaseAction';
-
-        $this->assertNotEquals(
-            'DummyBundle/Index/camelCase',
-            $routeResolver->buildRouteFromControllerServiceName($incomingString)
-        );
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/AbstractControllerTest.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/AbstractControllerTest.php
deleted file mode 100644
index a98c0bb..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/AbstractControllerTest.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Communication\Controller;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Assertion\Business\Exception\InvalidArgumentException;
-use Unit\Spryker\Zed\Application\Communication\Controller\Fixtures\MockController;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Application
- * @group Communication
- * @group Controller
- * @group AbstractControllerTest
- */
-class AbstractControllerTest extends PHPUnit_Framework_TestCase
-{
-
-    const EXPECTED_INTERNAL_TYPE = 'int';
-
-    /**
-     * @dataProvider getTestData()
-     *
-     * @param mixed $input
-     * @param int $expected
-     * @param bool $isValid
-     *
-     * @return void
-     */
-    public function testCastInt($input, $expected, $isValid)
-    {
-        $controller = new MockController();
-
-        if (!$isValid) {
-            $this->expectException(InvalidArgumentException::class);
-        }
-
-        $result = $controller->indexAction($input);
-
-        $this->assertSame($expected, $result);
-        $this->assertInternalType(self::EXPECTED_INTERNAL_TYPE, $result);
-    }
-
-    /**
-     * @return array
-     */
-    public function getTestData()
-    {
-        return [
-            ['1', 1, true],
-            [1, 1, true],
-            [1.5, 1, true],
-            [true, 1, false],
-            [false, 0, false],
-            ['string', 0, false],
-            [[], 0, false],
-        ];
-    }
-
-}
diff --git a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/Fixtures/MockController.php b/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/Fixtures/MockController.php
deleted file mode 100644
index 42b66ce..0000000
--- a/Bundles/Application/tests/Unit/Spryker/Zed/Application/Communication/Controller/Fixtures/MockController.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Application\Communication\Controller\Fixtures;
-
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
-use Spryker\Zed\Assertion\Business\AssertionFacade;
-
-class MockController extends AbstractController
-{
-
-    /**
-     * @param mixed $id
-     *
-     * @return int
-     */
-    public function indexAction($id)
-    {
-        return $this->castId($id);
-    }
-
-    /**
-     * @return \Spryker\Zed\Assertion\Business\AssertionFacade
-     */
-    protected function getAssertion()
-    {
-        return new AssertionFacade();
-    }
-
-}
diff --git a/Bundles/Assertion/composer.json b/Bundles/Assertion/composer.json
index 51115f5..3efa3cb 100644
--- a/Bundles/Assertion/composer.json
+++ b/Bundles/Assertion/composer.json
@@ -6,13 +6,16 @@
     }
   },
   "require": {
-    "spryker/kernel": "^2.0.0",
-    "spryker/silex": "^2.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Assertion bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Auth/composer.json b/Bundles/Auth/composer.json
index 734d007..5deb0c1 100644
--- a/Bundles/Auth/composer.json
+++ b/Bundles/Auth/composer.json
@@ -6,20 +6,21 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/config": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/session": "^2.0.0",
-    "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/url": "^2.0.0",
-    "spryker/user": "^2.0.0"
+    "spryker/user": "^2.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/config": "*",
+    "spryker/propel-orm": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Auth bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Auth/src/Spryker/Client/Auth/AuthClient.php b/Bundles/Auth/src/Spryker/Client/Auth/AuthClient.php
index 0010d79..d5b129c 100644
--- a/Bundles/Auth/src/Spryker/Client/Auth/AuthClient.php
+++ b/Bundles/Auth/src/Spryker/Client/Auth/AuthClient.php
@@ -14,38 +14,4 @@ use Spryker\Client\Kernel\AbstractClient;
  */
 class AuthClient extends AbstractClient implements AuthClientInterface
 {
-
-    /**
-     * @api
-     *
-     * @param string $rawToken
-     *
-     * @return string
-     */
-    public function generateToken($rawToken)
-    {
-        return $this->getTokenService()->generate($rawToken);
-    }
-
-    /**
-     * @api
-     *
-     * @param string $rawToken
-     * @param string $hash
-     *
-     * @return bool
-     */
-    public function checkToken($rawToken, $hash)
-    {
-        return $this->getTokenService()->check($rawToken, $hash);
-    }
-
-    /**
-     * @return \Spryker\Client\Auth\Token\TokenService
-     */
-    private function getTokenService()
-    {
-        return $this->getFactory()->createTokenService();
-    }
-
 }
diff --git a/Bundles/Auth/src/Spryker/Client/Auth/AuthClientInterface.php b/Bundles/Auth/src/Spryker/Client/Auth/AuthClientInterface.php
index 178fc6d..c9e380b 100644
--- a/Bundles/Auth/src/Spryker/Client/Auth/AuthClientInterface.php
+++ b/Bundles/Auth/src/Spryker/Client/Auth/AuthClientInterface.php
@@ -9,24 +9,4 @@ namespace Spryker\Client\Auth;
 
 interface AuthClientInterface
 {
-
-    /**
-     * @api
-     *
-     * @param string $rawToken
-     *
-     * @return string
-     */
-    public function generateToken($rawToken);
-
-    /**
-     * @api
-     *
-     * @param string $rawToken
-     * @param string $token
-     *
-     * @return bool
-     */
-    public function checkToken($rawToken, $token);
-
 }
diff --git a/Bundles/Auth/src/Spryker/Client/Auth/AuthFactory.php b/Bundles/Auth/src/Spryker/Client/Auth/AuthFactory.php
index 2085297..b470141 100644
--- a/Bundles/Auth/src/Spryker/Client/Auth/AuthFactory.php
+++ b/Bundles/Auth/src/Spryker/Client/Auth/AuthFactory.php
@@ -7,18 +7,8 @@
 
 namespace Spryker\Client\Auth;
 
-use Spryker\Client\Auth\Token\TokenService;
 use Spryker\Client\Kernel\AbstractFactory;
 
 class AuthFactory extends AbstractFactory
 {
-
-    /**
-     * @return \Spryker\Client\Auth\Token\TokenService
-     */
-    public function createTokenService()
-    {
-        return new TokenService();
-    }
-
 }
diff --git a/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenService.php b/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenService.php
deleted file mode 100644
index d3ee97f..0000000
--- a/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenService.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Client\Auth\Token;
-
-class TokenService implements TokenServiceInterface
-{
-
-    /**
-     * @param string $rawToken
-     *
-     * @return string
-     */
-    public function generate($rawToken)
-    {
-        return base64_encode(password_hash($rawToken, PASSWORD_DEFAULT));
-    }
-
-    /**
-     * @param string $rawToken
-     * @param string $hash
-     *
-     * @return bool
-     */
-    public function check($rawToken, $hash)
-    {
-        return password_verify($rawToken, base64_decode($hash));
-    }
-
-}
diff --git a/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenServiceInterface.php b/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenServiceInterface.php
deleted file mode 100644
index a532309..0000000
--- a/Bundles/Auth/src/Spryker/Client/Auth/Token/TokenServiceInterface.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Client\Auth\Token;
-
-interface TokenServiceInterface
-{
-
-    /**
-     * @param string $rawToken
-     *
-     * @return string
-     */
-    public function generate($rawToken);
-
-    /**
-     * @param string $rawToken
-     * @param string $token
-     *
-     * @return bool
-     */
-    public function check($rawToken, $token);
-
-}
diff --git a/Bundles/Auth/src/Spryker/Zed/Auth/Business/Model/PasswordReset.php b/Bundles/Auth/src/Spryker/Zed/Auth/Business/Model/PasswordReset.php
index 6b08cd6..aeb35e6 100644
--- a/Bundles/Auth/src/Spryker/Zed/Auth/Business/Model/PasswordReset.php
+++ b/Bundles/Auth/src/Spryker/Zed/Auth/Business/Model/PasswordReset.php
@@ -12,11 +12,11 @@ use DateTime;
 use Generated\Shared\Transfer\UserTransfer;
 use Orm\Zed\Auth\Persistence\Map\SpyResetPasswordTableMap;
 use Orm\Zed\Auth\Persistence\SpyResetPassword;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Zed\Auth\AuthConfig;
 use Spryker\Zed\Auth\Dependency\Facade\AuthToUserInterface;
 use Spryker\Zed\Auth\Dependency\Plugin\AuthPasswordResetSenderInterface;
 use Spryker\Zed\Auth\Persistence\AuthQueryContainerInterface;
-use Spryker\Zed\Library\Generator\StringGenerator;
 use Spryker\Zed\User\Business\Exception\UserNotFoundException;
 
 class PasswordReset
@@ -155,11 +155,9 @@ class PasswordReset
      */
     protected function generateToken()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator
-            ->setLength(self::LENGTH)
-            ->generateRandomString();
+        return $utilTextService->generateRandomString(8);
     }
 
     /**
diff --git a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LoginController.php b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LoginController.php
index 10b4a93..f63e761 100644
--- a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LoginController.php
+++ b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LoginController.php
@@ -8,9 +8,9 @@
 namespace Spryker\Zed\Auth\Communication\Controller;
 
 use Spryker\Shared\Auth\AuthConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Auth\AuthConfig;
 use Spryker\Zed\Auth\Communication\Form\LoginForm;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LogoutController.php b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LogoutController.php
index d6f3432..92d6443 100644
--- a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LogoutController.php
+++ b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/LogoutController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Auth\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Auth\Communication\AuthCommunicationFactory getFactory()
diff --git a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/PasswordController.php b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/PasswordController.php
index 7ecce74..a553662 100644
--- a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/PasswordController.php
+++ b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Controller/PasswordController.php
@@ -7,9 +7,9 @@
 
 namespace Spryker\Zed\Auth\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Auth\Communication\Form\ResetPasswordForm;
 use Spryker\Zed\Auth\Communication\Form\ResetPasswordRequestForm;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Plugin/ServiceProvider/RedirectAfterLoginProvider.php b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Plugin/ServiceProvider/RedirectAfterLoginProvider.php
index 61f8ade..5498b2a 100644
--- a/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Plugin/ServiceProvider/RedirectAfterLoginProvider.php
+++ b/Bundles/Auth/src/Spryker/Zed/Auth/Communication/Plugin/ServiceProvider/RedirectAfterLoginProvider.php
@@ -9,8 +9,8 @@ namespace Spryker\Zed\Auth\Communication\Plugin\ServiceProvider;
 
 use Silex\Application;
 use Silex\ServiceProviderInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Auth\AuthConstants;
-use Spryker\Shared\Url\Url;
 use Spryker\Zed\Auth\AuthConfig;
 use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 use Symfony\Component\HttpFoundation\RedirectResponse;
diff --git a/Bundles/Auth/tests/ClientUnit.suite.yml b/Bundles/Auth/tests/ClientUnit.suite.yml
deleted file mode 100644
index e3731a3..0000000
--- a/Bundles/Auth/tests/ClientUnit.suite.yml
+++ /dev/null
@@ -1,4 +0,0 @@
-class_name: ClientTester
-modules:
-    enabled:
-        - Asserts
diff --git a/Bundles/Auth/tests/ClientUnit/Spryker/Client/Auth/Token/TokenServiceTest.php b/Bundles/Auth/tests/ClientUnit/Spryker/Client/Auth/Token/TokenServiceTest.php
deleted file mode 100644
index e9e2e63..0000000
--- a/Bundles/Auth/tests/ClientUnit/Spryker/Client/Auth/Token/TokenServiceTest.php
+++ /dev/null
@@ -1,59 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace ClientUnit\Spryker\Client\Auth\Token;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Client\Auth\Token\TokenService;
-
-/**
- * @group Spryker
- * @group Client
- * @group Service
- * @group AuthClient
- */
-class TokenServiceTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testGenerateTokenMustReturnString()
-    {
-        $tokenService = new TokenService();
-        $token = $tokenService->generate('token');
-
-        $this->assertInternalType('string', $token);
-    }
-
-    /**
-     * @return void
-     */
-    public function testCheckTokenMustReturnTrueIfTokenIsValid()
-    {
-        $tokenService = new TokenService();
-        $rawToken = 'token';
-        $token = $tokenService->generate($rawToken);
-
-        $isValid = $tokenService->check($rawToken, $token);
-        $this->assertTrue($isValid);
-    }
-
-    /**
-     * @return void
-     */
-    public function testCheckTokenMustReturnFalseIfTokenIsInValid()
-    {
-        $tokenService = new TokenService();
-        $rawToken = 'token';
-        $token = $tokenService->generate($rawToken);
-
-        $isValid = $tokenService->check('wrong' . $rawToken, $token);
-        $this->assertFalse($isValid);
-    }
-
-}
diff --git a/Bundles/Auth/tests/ClientUnit/_bootstrap.php b/Bundles/Auth/tests/ClientUnit/_bootstrap.php
deleted file mode 100644
index 93a70e0..0000000
--- a/Bundles/Auth/tests/ClientUnit/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_CLIENT);
diff --git a/Bundles/Auth/tests/Functional/Spryker/Zed/Auth/AuthTest.php b/Bundles/Auth/tests/Functional/Spryker/Zed/Auth/AuthTest.php
index 808f38c..af7121e 100644
--- a/Bundles/Auth/tests/Functional/Spryker/Zed/Auth/AuthTest.php
+++ b/Bundles/Auth/tests/Functional/Spryker/Zed/Auth/AuthTest.php
@@ -11,10 +11,10 @@ use Codeception\TestCase\Test;
 use Spryker\Client\Session\SessionClient;
 use Spryker\Shared\Auth\AuthConstants;
 use Spryker\Shared\Config\Config;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Auth\AuthConfig;
 use Spryker\Zed\Auth\Business\AuthFacade;
 use Spryker\Zed\Auth\Business\Client\StaticToken;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\User\Business\UserFacade;
 
 /**
diff --git a/Bundles/Auth/tests/Unit/Spryker/Zed/Auth/Business/Model/AuthTest.php b/Bundles/Auth/tests/Unit/Spryker/Zed/Auth/Business/Model/AuthTest.php
index b05babc..cf254b5 100644
--- a/Bundles/Auth/tests/Unit/Spryker/Zed/Auth/Business/Model/AuthTest.php
+++ b/Bundles/Auth/tests/Unit/Spryker/Zed/Auth/Business/Model/AuthTest.php
@@ -11,11 +11,11 @@ use Generated\Shared\Transfer\UserTransfer;
 use PHPUnit_Framework_MockObject_MockObject;
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\Session\SessionClient;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Auth\AuthConfig;
 use Spryker\Zed\Auth\Business\Client\StaticToken;
 use Spryker\Zed\Auth\Business\Model\Auth;
 use Spryker\Zed\Auth\Dependency\Facade\AuthToUserBridge;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\User\Business\UserFacade;
 
 /**
diff --git a/Bundles/AuthMailConnector/composer.json b/Bundles/AuthMailConnector/composer.json
index 97e3e94..59e5984 100644
--- a/Bundles/AuthMailConnector/composer.json
+++ b/Bundles/AuthMailConnector/composer.json
@@ -13,6 +13,9 @@
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/auth": "If you want to use Auth plugins you need to install spryker/auth."
+  },
   "description": "AuthMailConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Availability/composer.json b/Bundles/Availability/composer.json
index 8778e27..67c0253 100644
--- a/Bundles/Availability/composer.json
+++ b/Bundles/Availability/composer.json
@@ -6,24 +6,28 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/collector": "^3.0.0 || ^4.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/oms": "^4.0.0 || ^5.0.0",
     "spryker/product": "^2.0.0 || ^3.0.0 || ^4.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/stock": "^2.0.0 || ^3.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/touch": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Availability bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Availability/src/Spryker/Client/Availability/AvailabilityFactory.php b/Bundles/Availability/src/Spryker/Client/Availability/AvailabilityFactory.php
index 0eaa198..fa784a7 100644
--- a/Bundles/Availability/src/Spryker/Client/Availability/AvailabilityFactory.php
+++ b/Bundles/Availability/src/Spryker/Client/Availability/AvailabilityFactory.php
@@ -36,7 +36,7 @@ class AvailabilityFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createKeyBuilder()
     {
diff --git a/Bundles/Availability/src/Spryker/Client/Availability/KeyBuilder/AvailabilityResourceKeyBuilder.php b/Bundles/Availability/src/Spryker/Client/Availability/KeyBuilder/AvailabilityResourceKeyBuilder.php
index fe879dd..2e9a94d 100644
--- a/Bundles/Availability/src/Spryker/Client/Availability/KeyBuilder/AvailabilityResourceKeyBuilder.php
+++ b/Bundles/Availability/src/Spryker/Client/Availability/KeyBuilder/AvailabilityResourceKeyBuilder.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Availability\KeyBuilder;
 
 use Spryker\Shared\Availability\AvailabilityConfig;
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 
 class AvailabilityResourceKeyBuilder extends SharedResourceKeyBuilder
 {
diff --git a/Bundles/Availability/src/Spryker/Client/Availability/Storage/AvailabilityStorage.php b/Bundles/Availability/src/Spryker/Client/Availability/Storage/AvailabilityStorage.php
index df21d4f..02c8c59 100644
--- a/Bundles/Availability/src/Spryker/Client/Availability/Storage/AvailabilityStorage.php
+++ b/Bundles/Availability/src/Spryker/Client/Availability/Storage/AvailabilityStorage.php
@@ -9,7 +9,7 @@ namespace Spryker\Client\Availability\Storage;
 
 use Generated\Shared\Transfer\StorageAvailabilityTransfer;
 use Spryker\Client\Availability\Dependency\Client\AvailabilityToStorageInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class AvailabilityStorage implements AvailabilityStorageInterface
 {
@@ -20,7 +20,7 @@ class AvailabilityStorage implements AvailabilityStorageInterface
     private $storageClient;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     private $keyBuilder;
 
@@ -31,7 +31,7 @@ class AvailabilityStorage implements AvailabilityStorageInterface
 
     /**
      * @param \Spryker\Client\Availability\Dependency\Client\AvailabilityToStorageInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param string $localeName
      */
     public function __construct(AvailabilityToStorageInterface $storage, KeyBuilderInterface $keyBuilder, $localeName)
diff --git a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Controller/IndexController.php b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Controller/IndexController.php
index 996bab5..cb90233 100644
--- a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Controller/IndexController.php
+++ b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Controller/IndexController.php
@@ -7,9 +7,9 @@
 namespace Spryker\Zed\Availability\Communication\Controller;
 
 use Generated\Shared\Transfer\AvailabilityStockTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Availability\Communication\Table\AvailabilityAbstractTable;
 use Spryker\Zed\Availability\Communication\Table\AvailabilityTable;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityAbstractTable.php b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityAbstractTable.php
index 334cb35..39d4e32 100644
--- a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityAbstractTable.php
+++ b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityAbstractTable.php
@@ -10,7 +10,7 @@ use Orm\Zed\Availability\Persistence\Map\SpyAvailabilityAbstractTableMap;
 use Orm\Zed\Product\Persistence\Map\SpyProductAbstractTableMap;
 use Orm\Zed\Product\Persistence\SpyProductAbstract;
 use Orm\Zed\Product\Persistence\SpyProductAbstractQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Availability\Persistence\AvailabilityQueryContainer;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityTable.php b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityTable.php
index a0c36ba..06cffc0 100644
--- a/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityTable.php
+++ b/Bundles/Availability/src/Spryker/Zed/Availability/Communication/Table/AvailabilityTable.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Availability\Communication\Table;
 use Orm\Zed\Product\Persistence\Map\SpyProductLocalizedAttributesTableMap;
 use Orm\Zed\Product\Persistence\Map\SpyProductTableMap;
 use Orm\Zed\Product\Persistence\SpyProductAbstractQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Availability\Persistence\AvailabilityQueryContainer;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/AvailabilityCartConnector/composer.json b/Bundles/AvailabilityCartConnector/composer.json
index be69a6b..cb9eb59 100644
--- a/Bundles/AvailabilityCartConnector/composer.json
+++ b/Bundles/AvailabilityCartConnector/composer.json
@@ -13,6 +13,9 @@
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/cart": "If you want to use Cart plugins you need to install spryker/cart."
+  },
   "description": "AvailabilityCartConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Braintree/composer.json b/Bundles/Braintree/composer.json
index 86d2616..dabbb88 100644
--- a/Bundles/Braintree/composer.json
+++ b/Bundles/Braintree/composer.json
@@ -22,27 +22,27 @@
   },
   "require": {
     "braintree/braintree_php": "~3.15.0",
-    "spryker/application": "^2.4.4",
     "spryker/checkout": "^2.1.3",
     "spryker/config": "^2.0.0",
-    "spryker/country": "^2.0.0",
     "spryker/currency": "^1.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/money": "^1.0.0",
     "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
     "spryker/payment": "^2.0.0",
-    "spryker/propel": "^2.3.1",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/refund": "^3.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/step-engine": "^1.0.1",
     "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/customer": "^2.0.0 || ^3.0.0",
+    "spryker/country": "*",
+    "spryker/customer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Braintree bundle",
diff --git a/Bundles/Braintree/config/config.dist.php b/Bundles/Braintree/config/config.dist.php
index 1b3f529..44a8aa8 100644
--- a/Bundles/Braintree/config/config.dist.php
+++ b/Bundles/Braintree/config/config.dist.php
@@ -3,7 +3,6 @@
  * Copy over the following configs to your config
  */
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Braintree\BraintreeConstants;
 use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Shared\Oms\OmsConstants;
@@ -48,7 +47,7 @@ $config[KernelConstants::DEPENDENCY_INJECTOR_ZED] = [
 
 $config[OmsConstants::PROCESS_LOCATION] = [
     OmsConfig::DEFAULT_PROCESS_LOCATION,
-    $config[ApplicationConstants::APPLICATION_SPRYKER_ROOT] . '/Braintree/config/Zed/Oms',
+    $config[KernelConstants::SPRYKER_ROOT] . '/Braintree/config/Zed/Oms',
 ];
 
 $config[OmsConstants::ACTIVE_PROCESSES] = [
diff --git a/Bundles/Braintree/dependency.json b/Bundles/Braintree/dependency.json
deleted file mode 100644
index 7051164..0000000
--- a/Bundles/Braintree/dependency.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "exclude-dev": {
-    "Customer": "Required by tests and declared as require-dev right now"
-  }
-}
diff --git a/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/CreditCardDataProvider.php b/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/CreditCardDataProvider.php
index da1064b..a5737c7 100644
--- a/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/CreditCardDataProvider.php
+++ b/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/CreditCardDataProvider.php
@@ -9,16 +9,16 @@ namespace Spryker\Yves\Braintree\Form\DataProvider;
 
 use Generated\Shared\Transfer\BraintreePaymentTransfer;
 use Generated\Shared\Transfer\PaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
 class CreditCardDataProvider implements StepEngineFormDataProviderInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -32,7 +32,7 @@ class CreditCardDataProvider implements StepEngineFormDataProviderInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/PayPalDataProvider.php b/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/PayPalDataProvider.php
index 3f21aa3..018bc59 100644
--- a/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/PayPalDataProvider.php
+++ b/Bundles/Braintree/src/Spryker/Yves/Braintree/Form/DataProvider/PayPalDataProvider.php
@@ -9,16 +9,16 @@ namespace Spryker\Yves\Braintree\Form\DataProvider;
 
 use Generated\Shared\Transfer\BraintreePaymentTransfer;
 use Generated\Shared\Transfer\PaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
 class PayPalDataProvider implements StepEngineFormDataProviderInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -32,7 +32,7 @@ class PayPalDataProvider implements StepEngineFormDataProviderInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/Braintree/src/Spryker/Yves/Braintree/Plugin/BraintreeHandlerPlugin.php b/Bundles/Braintree/src/Spryker/Yves/Braintree/Plugin/BraintreeHandlerPlugin.php
index c0959ae..a8bf3ac 100644
--- a/Bundles/Braintree/src/Spryker/Yves/Braintree/Plugin/BraintreeHandlerPlugin.php
+++ b/Bundles/Braintree/src/Spryker/Yves/Braintree/Plugin/BraintreeHandlerPlugin.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\Braintree\Plugin;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\Kernel\AbstractPlugin;
 use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -20,7 +20,7 @@ class BraintreeHandlerPlugin extends AbstractPlugin implements StepHandlerPlugin
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return void
      */
diff --git a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/DetailsController.php b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/DetailsController.php
index 86fcb46..a9cdc9c 100644
--- a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/DetailsController.php
+++ b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/DetailsController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Braintree\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
diff --git a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/IndexController.php b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/IndexController.php
index 054ebf2..fe69277 100644
--- a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/IndexController.php
+++ b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Braintree\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Braintree\Communication\BraintreeCommunicationFactory getFactory()
diff --git a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Table/Payments.php b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Table/Payments.php
index d919921..47987c4 100644
--- a/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Table/Payments.php
+++ b/Bundles/Braintree/src/Spryker/Zed/Braintree/Communication/Table/Payments.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Braintree\Communication\Table;
 
 use Orm\Zed\Braintree\Persistence\Map\SpyPaymentBraintreeTableMap;
 use Orm\Zed\Braintree\Persistence\SpyPaymentBraintreeQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
diff --git a/Bundles/Cache/composer.json b/Bundles/Cache/composer.json
index 8a46e8b..04b779a 100644
--- a/Bundles/Cache/composer.json
+++ b/Bundles/Cache/composer.json
@@ -6,7 +6,6 @@
     }
   },
   "require": {
-    "spryker/console": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/symfony": "^2.0.0"
   },
diff --git a/Bundles/Cache/src/Spryker/Zed/Cache/Business/Model/CacheDelete.php b/Bundles/Cache/src/Spryker/Zed/Cache/Business/Model/CacheDelete.php
index 7a08a40..b401db2 100644
--- a/Bundles/Cache/src/Spryker/Zed/Cache/Business/Model/CacheDelete.php
+++ b/Bundles/Cache/src/Spryker/Zed/Cache/Business/Model/CacheDelete.php
@@ -35,14 +35,17 @@ class CacheDelete
     {
         $rootDirectory = $this->config->getCachePath();
         $stores = $this->config->getAllowedStores();
-        $dirs = [];
+        $directories = [];
         foreach ($stores as $store) {
-            $dirs[] = str_replace('{STORE}', $store, $rootDirectory);
+            $directory = str_replace('{STORE}', $store, $rootDirectory);
+            if (is_dir($directory)) {
+                $directories[] = $directory;
+            }
         }
         $filesystem = new Filesystem();
-        $filesystem->remove($dirs);
+        $filesystem->remove($directories);
 
-        return $dirs;
+        return $directories;
     }
 
 }
diff --git a/Bundles/Cache/src/Spryker/Zed/Cache/Communication/Console/DeleteAllCachesConsole.php b/Bundles/Cache/src/Spryker/Zed/Cache/Communication/Console/DeleteAllCachesConsole.php
index 141c4ae..343ecf4 100644
--- a/Bundles/Cache/src/Spryker/Zed/Cache/Communication/Console/DeleteAllCachesConsole.php
+++ b/Bundles/Cache/src/Spryker/Zed/Cache/Communication/Console/DeleteAllCachesConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Cache\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Calculation/composer.json b/Bundles/Calculation/composer.json
index d928ed8..c771377 100644
--- a/Bundles/Calculation/composer.json
+++ b/Bundles/Calculation/composer.json
@@ -6,16 +6,17 @@
     }
   },
   "require": {
-    "spryker/checkout": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/transfer": "^2.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Calculation bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationDependencyProvider.php b/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationDependencyProvider.php
index 42b7e8c..8e4bcea 100644
--- a/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationDependencyProvider.php
+++ b/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationDependencyProvider.php
@@ -8,7 +8,37 @@
 namespace Spryker\Client\Calculation;
 
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class CalculationDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_ZED_REQUEST = 'zed request client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addZedRequestClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addZedRequestClient(Container $container)
+    {
+        $container[static::CLIENT_ZED_REQUEST] = function (Container $container) {
+            return $container->getLocator()->zedRequest()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationFactory.php b/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationFactory.php
index 2f8956d..e8c7b27 100644
--- a/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationFactory.php
+++ b/Bundles/Calculation/src/Spryker/Client/Calculation/CalculationFactory.php
@@ -21,4 +21,12 @@ class CalculationFactory extends AbstractFactory
         return new CalculationStub($this->getZedRequestClient());
     }
 
+    /**
+     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    protected function getZedRequestClient()
+    {
+        return $this->getProvidedDependency(CalculationDependencyProvider::CLIENT_ZED_REQUEST);
+    }
+
 }
diff --git a/Bundles/Calculation/src/Spryker/Client/Calculation/Zed/CalculationStub.php b/Bundles/Calculation/src/Spryker/Client/Calculation/Zed/CalculationStub.php
index 6ca20e8..44d6f36 100644
--- a/Bundles/Calculation/src/Spryker/Client/Calculation/Zed/CalculationStub.php
+++ b/Bundles/Calculation/src/Spryker/Client/Calculation/Zed/CalculationStub.php
@@ -8,9 +8,9 @@
 namespace Spryker\Client\Calculation\Zed;
 
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Client\ZedRequest\Stub\BaseStub;
+use Spryker\Client\ZedRequest\Stub\ZedRequestStub;
 
-class CalculationStub extends BaseStub
+class CalculationStub extends ZedRequestStub
 {
 
     /**
diff --git a/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculator.php b/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculator.php
index 2a66169..8f7bb8b 100644
--- a/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculator.php
+++ b/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculator.php
@@ -8,7 +8,8 @@
 namespace Spryker\Zed\Calculation\Business\Model\Calculator;
 
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Shared\Library\Hash\Hash;
+use Spryker\Service\UtilText\Model\Hash;
+use Spryker\Service\UtilText\UtilTextService;
 
 class GrandTotalTotalsCalculator implements CalculatorInterface
 {
@@ -55,7 +56,9 @@ class GrandTotalTotalsCalculator implements CalculatorInterface
      */
     protected function generateTotalsHash($grandTotal)
     {
-        return Hash::hashValue(Hash::SHA256, $grandTotal);
+        $utilTextService = new UtilTextService();
+
+        return $utilTextService->hashValue($grandTotal, Hash::SHA256);
     }
 
 }
diff --git a/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/CheckoutGrandTotalPreCondition.php b/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/CheckoutGrandTotalPreCondition.php
index 20e576c..12cc71e 100644
--- a/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/CheckoutGrandTotalPreCondition.php
+++ b/Bundles/Calculation/src/Spryker/Zed/Calculation/Business/Model/CheckoutGrandTotalPreCondition.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Calculation\Business\Model;
 use Generated\Shared\Transfer\CheckoutErrorTransfer;
 use Generated\Shared\Transfer\CheckoutResponseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Shared\Checkout\CheckoutConstants;
+use Spryker\Zed\Calculation\CalculationConfig;
 
 class CheckoutGrandTotalPreCondition implements CheckoutGrandTotalPreConditionInterface
 {
@@ -45,7 +45,7 @@ class CheckoutGrandTotalPreCondition implements CheckoutGrandTotalPreConditionIn
         if ($totalsBefore !== $totalsAfter) {
             $error = $this->createCheckoutErrorTransfer();
             $error
-                ->setErrorCode(CheckoutConstants::ERROR_CODE_CART_AMOUNT_DIFFERENT)
+                ->setErrorCode(CalculationConfig::ERROR_CODE_CART_AMOUNT_DIFFERENT)
                 ->setMessage('Checkout grand total changed.');
 
             $checkoutResponseTransfer->addError($error);
diff --git a/Bundles/Calculation/src/Spryker/Zed/Calculation/CalculationConfig.php b/Bundles/Calculation/src/Spryker/Zed/Calculation/CalculationConfig.php
index be7debe..f0cf290 100644
--- a/Bundles/Calculation/src/Spryker/Zed/Calculation/CalculationConfig.php
+++ b/Bundles/Calculation/src/Spryker/Zed/Calculation/CalculationConfig.php
@@ -11,4 +11,7 @@ use Spryker\Zed\Kernel\AbstractBundleConfig;
 
 class CalculationConfig extends AbstractBundleConfig
 {
+
+    const ERROR_CODE_CART_AMOUNT_DIFFERENT = '4003';
+
 }
diff --git a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseGrossSumAmountCalculatorTest.php b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseGrossSumAmountCalculatorTest.php
index df019ac..d3da1ba 100644
--- a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseGrossSumAmountCalculatorTest.php
+++ b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseGrossSumAmountCalculatorTest.php
@@ -10,7 +10,7 @@ namespace Unit\Spryker\Zed\Calculation\Business\Model\Calculator;
 use Generated\Shared\Transfer\ExpenseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\Calculation\Business\Model\Calculator\ExpenseGrossSumAmountCalculator;
 
 /**
diff --git a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseTotalsCalculatorTest.php b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseTotalsCalculatorTest.php
index 83254c2..5b5c8f4 100644
--- a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseTotalsCalculatorTest.php
+++ b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ExpenseTotalsCalculatorTest.php
@@ -11,7 +11,7 @@ use Generated\Shared\Transfer\ExpenseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\TotalsTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\Calculation\Business\Model\Calculator\ExpenseTotalsCalculator;
 
 /**
diff --git a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculatorTest.php b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculatorTest.php
index 9315d42..503c2d1 100644
--- a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculatorTest.php
+++ b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/GrandTotalTotalsCalculatorTest.php
@@ -10,7 +10,7 @@ namespace Unit\Spryker\Zed\Calculation\Business\Model\Calculator;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\TotalsTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\Calculation\Business\Model\Calculator\GrandTotalTotalsCalculator;
 
 /**
diff --git a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ItemGrossAmountsCalculatorTest.php b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ItemGrossAmountsCalculatorTest.php
index f4257d0..1c6e152 100644
--- a/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ItemGrossAmountsCalculatorTest.php
+++ b/Bundles/Calculation/tests/Unit/Spryker/Zed/Calculation/Business/Model/Calculator/ItemGrossAmountsCalculatorTest.php
@@ -11,7 +11,7 @@ use Generated\Shared\Transfer\ItemTransfer;
 use Generated\Shared\Transfer\ProductOptionTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\Calculation\Business\Model\Calculator\ItemGrossAmountsCalculator;
 
 /**
diff --git a/Bundles/Cart/composer.json b/Bundles/Cart/composer.json
index 2fad97d..239e259 100644
--- a/Bundles/Cart/composer.json
+++ b/Bundles/Cart/composer.json
@@ -7,15 +7,18 @@
   },
   "require": {
     "spryker/calculation": "^2.0.0",
+    "spryker/quote": "^1.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/messenger": "^2.0.0",
-    "spryker/symfony": "^2.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/price": "^2.0.0 || ^3.0.0",
-    "spryker/product": "^2.0.0 || ^3.0.0 || ^4.0.0",
+    "spryker/price": "*",
+    "spryker/product": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Cart bundle",
diff --git a/Bundles/Cart/dependency.json b/Bundles/Cart/dependency.json
deleted file mode 100644
index e352225..0000000
--- a/Bundles/Cart/dependency.json
+++ /dev/null
@@ -1,7 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "exclude-dev": {
-    "Price": "Required by tests and declared as require-dev right now",
-    "Product": "Required by tests and declared as require-dev right now"
-  }
-}
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/CartClient.php b/Bundles/Cart/src/Spryker/Client/Cart/CartClient.php
index 2b77e97..8f30f19 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/CartClient.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/CartClient.php
@@ -29,7 +29,7 @@ class CartClient extends AbstractClient implements CartClientInterface
      */
     public function getQuote()
     {
-        return $this->getSession()->getQuote();
+        return $this->getQuoteClient()->getQuote();
     }
 
     /**
@@ -41,19 +41,7 @@ class CartClient extends AbstractClient implements CartClientInterface
      */
     public function clearQuote()
     {
-        $this->getSession()->clearQuote();
-    }
-
-    /**
-     * Returns number of items in quote
-     *
-     * @api
-     *
-     * @return int
-     */
-    public function getItemCount()
-    {
-        return $this->getSession()->getItemCount();
+        $this->getQuoteClient()->clearQuote();
     }
 
     /**
@@ -67,7 +55,7 @@ class CartClient extends AbstractClient implements CartClientInterface
      */
     public function storeQuote(QuoteTransfer $quoteTransfer)
     {
-        $this->getSession()->setQuote($quoteTransfer);
+        $this->getQuoteClient()->setQuote($quoteTransfer);
     }
 
     /**
@@ -148,7 +136,7 @@ class CartClient extends AbstractClient implements CartClientInterface
         $delta = abs($itemTransfer->getQuantity() - $quantity);
 
         if ($delta === 0) {
-            return $this->getSession()->getQuote();
+            return $this->getQuoteClient()->getQuote();
         }
 
         if ($itemTransfer->getQuantity() > $quantity) {
@@ -203,7 +191,7 @@ class CartClient extends AbstractClient implements CartClientInterface
      */
     protected function createCartChangeTransfer()
     {
-        $quoteTransfer = $this->getSession()->getQuote();
+        $quoteTransfer = $this->getQuoteClient()->getQuote();
         $items = $quoteTransfer->getItems();
 
         if (count($items) === 0) {
@@ -230,19 +218,21 @@ class CartClient extends AbstractClient implements CartClientInterface
     }
 
     /**
+     * @api
+     *
      * @return \Spryker\Client\Cart\Zed\CartStubInterface
      */
-    protected function getZedStub()
+    public function getZedStub()
     {
         return $this->getFactory()->createZedStub();
     }
 
     /**
-     * @return \Spryker\Client\Cart\Session\QuoteSessionInterface
+     * @return \Spryker\Client\Cart\Dependency\Client\CartToQuoteInterface
      */
-    protected function getSession()
+    protected function getQuoteClient()
     {
-        return $this->getFactory()->createSession();
+        return $this->getFactory()->getQuoteClient();
     }
 
 }
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/CartClientInterface.php b/Bundles/Cart/src/Spryker/Client/Cart/CartClientInterface.php
index 41ef2ed..967f678 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/CartClientInterface.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/CartClientInterface.php
@@ -30,13 +30,6 @@ interface CartClientInterface
     /**
      * @api
      *
-     * @return int
-     */
-    public function getItemCount();
-
-    /**
-     * @api
-     *
      * @param \Generated\Shared\Transfer\ItemTransfer $itemTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/CartDependencyProvider.php b/Bundles/Cart/src/Spryker/Client/Cart/CartDependencyProvider.php
index adae8fb..0a2fb84 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/CartDependencyProvider.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/CartDependencyProvider.php
@@ -7,8 +7,55 @@
 
 namespace Spryker\Client\Cart;
 
+use Spryker\Client\Cart\Dependency\Client\CartToQuoteBridge;
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class CartDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_QUOTE = 'quote client';
+    const CLIENT_ZED_REQUEST = 'zed request client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addQuoteClient($container);
+        $container = $this->addZedRequestClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addQuoteClient(Container $container)
+    {
+        $container[static::CLIENT_QUOTE] = function (Container $container) {
+            return new CartToQuoteBridge($container->getLocator()->quote()->client());
+        };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addZedRequestClient(Container $container)
+    {
+        $container[static::CLIENT_ZED_REQUEST] = function (Container $container) {
+            return $container->getLocator()->zedRequest()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/CartFactory.php b/Bundles/Cart/src/Spryker/Client/Cart/CartFactory.php
index 3dd5e40..221db0e 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/CartFactory.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/CartFactory.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Client\Cart;
 
-use Spryker\Client\Cart\Session\QuoteSession;
 use Spryker\Client\Cart\Zed\CartStub;
 use Spryker\Client\Kernel\AbstractFactory;
 
@@ -15,11 +14,11 @@ class CartFactory extends AbstractFactory
 {
 
     /**
-     * @return \Symfony\Component\HttpFoundation\Session\SessionInterface
+     * @return \Spryker\Client\Cart\Dependency\Client\CartToQuoteInterface
      */
-    public function createSession()
+    public function getQuoteClient()
     {
-        return new QuoteSession($this->getSessionClient());
+        return $this->getProvidedDependency(CartDependencyProvider::CLIENT_QUOTE);
     }
 
     /**
@@ -30,4 +29,12 @@ class CartFactory extends AbstractFactory
         return new CartStub($this->getZedRequestClient());
     }
 
+    /**
+     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    protected function getZedRequestClient()
+    {
+        return $this->getProvidedDependency(CartDependencyProvider::CLIENT_ZED_REQUEST);
+    }
+
 }
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteBridge.php b/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteBridge.php
new file mode 100644
index 0000000..b4d9741
--- /dev/null
+++ b/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteBridge.php
@@ -0,0 +1,54 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Cart\Dependency\Client;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+class CartToQuoteBridge implements CartToQuoteInterface
+{
+
+    /**
+     * @var \Spryker\Client\Quote\QuoteClientInterface
+     */
+    protected $quoteClient;
+
+    /**
+     * @param \Spryker\Client\Quote\QuoteClientInterface $quoteClient
+     */
+    public function __construct($quoteClient)
+    {
+        $this->quoteClient = $quoteClient;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote()
+    {
+        return $this->quoteClient->getQuote();
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer)
+    {
+        $this->quoteClient->setQuote($quoteTransfer);
+    }
+
+    /**
+     * @return void
+     */
+    public function clearQuote()
+    {
+        $this->quoteClient->clearQuote();
+    }
+
+}
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteInterface.php b/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteInterface.php
new file mode 100644
index 0000000..f1f76ea
--- /dev/null
+++ b/Bundles/Cart/src/Spryker/Client/Cart/Dependency/Client/CartToQuoteInterface.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Cart\Dependency\Client;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+interface CartToQuoteInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote();
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer);
+
+    /**
+     * @return void
+     */
+    public function clearQuote();
+
+}
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSession.php b/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSession.php
deleted file mode 100644
index 387a908..0000000
--- a/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSession.php
+++ /dev/null
@@ -1,90 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Client\Cart\Session;
-
-use Generated\Shared\Transfer\QuoteTransfer;
-use Symfony\Component\HttpFoundation\Session\SessionInterface;
-
-class QuoteSession implements QuoteSessionInterface
-{
-
-    const QUOTE_SESSION_IDENTIFIER = 'quote session identifier';
-    const QUOTE_SESSION_ITEM_COUNT_IDENTIFIER = 'quote item count session identifier';
-
-    /**
-     * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
-     */
-    private $session;
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
-     */
-    public function __construct(SessionInterface $session)
-    {
-        $this->session = $session;
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\QuoteTransfer
-     */
-    public function getQuote()
-    {
-        $quoteTransfer = new QuoteTransfer();
-
-        if ($this->session->has(self::QUOTE_SESSION_IDENTIFIER)) {
-            return $this->session->get(self::QUOTE_SESSION_IDENTIFIER, $quoteTransfer);
-        }
-
-        return $quoteTransfer;
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return \Spryker\Client\Cart\Session\QuoteSession
-     */
-    public function setQuote(QuoteTransfer $quoteTransfer)
-    {
-        $this->session->set(self::QUOTE_SESSION_IDENTIFIER, $quoteTransfer);
-
-        return $this;
-    }
-
-    /**
-     * @return int
-     */
-    public function getItemCount()
-    {
-        if (!$this->session->has(self::QUOTE_SESSION_ITEM_COUNT_IDENTIFIER)) {
-            return 0;
-        }
-
-        return $this->session->get(self::QUOTE_SESSION_ITEM_COUNT_IDENTIFIER);
-    }
-
-    /**
-     * @param int $itemCount
-     *
-     * @return \Spryker\Client\Cart\Session\QuoteSession
-     */
-    public function setItemCount($itemCount)
-    {
-        $this->session->set(self::QUOTE_SESSION_ITEM_COUNT_IDENTIFIER, $itemCount);
-
-        return $this;
-    }
-
-    /**
-     * @return void
-     */
-    public function clearQuote()
-    {
-        $this->setItemCount(0)->setQuote(new QuoteTransfer());
-    }
-
-}
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSessionInterface.php b/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSessionInterface.php
deleted file mode 100644
index 491cd0d..0000000
--- a/Bundles/Cart/src/Spryker/Client/Cart/Session/QuoteSessionInterface.php
+++ /dev/null
@@ -1,44 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Client\Cart\Session;
-
-use Generated\Shared\Transfer\QuoteTransfer;
-
-interface QuoteSessionInterface
-{
-
-    /**
-     * @return \Generated\Shared\Transfer\QuoteTransfer
-     */
-    public function getQuote();
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return $this
-     */
-    public function setQuote(QuoteTransfer $quoteTransfer);
-
-    /**
-     * @return int
-     */
-    public function getItemCount();
-
-    /**
-     * @param int $itemCount
-     *
-     * @return $this
-     */
-    public function setItemCount($itemCount);
-
-    /**
-     * @return void
-     */
-    public function clearQuote();
-
-}
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStub.php b/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStub.php
index b4d1cf9..8ae4e79 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStub.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStub.php
@@ -8,13 +8,13 @@
 namespace Spryker\Client\Cart\Zed;
 
 use Generated\Shared\Transfer\CartChangeTransfer;
-use Spryker\Client\ZedRequest\Stub\BaseStub;
+use Spryker\Client\ZedRequest\Stub\ZedRequestStub;
 
-class CartStub extends BaseStub implements CartStubInterface
+class CartStub extends ZedRequestStub implements CartStubInterface
 {
 
     /**
-     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Transfer\TransferInterface $cartChangeTransfer
+     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Kernel\Transfer\TransferInterface $cartChangeTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
@@ -24,7 +24,7 @@ class CartStub extends BaseStub implements CartStubInterface
     }
 
     /**
-     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Transfer\TransferInterface $changeTransfer
+     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Kernel\Transfer\TransferInterface $changeTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
diff --git a/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStubInterface.php b/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStubInterface.php
index f8cf44c..d86fdbb 100644
--- a/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStubInterface.php
+++ b/Bundles/Cart/src/Spryker/Client/Cart/Zed/CartStubInterface.php
@@ -13,14 +13,14 @@ interface CartStubInterface
 {
 
     /**
-     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Transfer\TransferInterface $cartChangeTransfer
+     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Kernel\Transfer\TransferInterface $cartChangeTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
     public function addItem(CartChangeTransfer $cartChangeTransfer);
 
     /**
-     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Transfer\TransferInterface $cartChangeTransfer
+     * @param \Generated\Shared\Transfer\CartChangeTransfer|\Spryker\Shared\Kernel\Transfer\TransferInterface $cartChangeTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
diff --git a/Bundles/Cart/tests/ClientUnit/Spryker/Client/Cart/CartClientTest.php b/Bundles/Cart/tests/ClientUnit/Spryker/Client/Cart/CartClientTest.php
index 2d925f6..de5021a 100644
--- a/Bundles/Cart/tests/ClientUnit/Spryker/Client/Cart/CartClientTest.php
+++ b/Bundles/Cart/tests/ClientUnit/Spryker/Client/Cart/CartClientTest.php
@@ -11,7 +11,7 @@ use Generated\Shared\Transfer\ItemTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\Cart\CartClient;
-use Spryker\Client\Cart\Session\QuoteSessionInterface;
+use Spryker\Client\Cart\Dependency\Client\CartToQuoteInterface;
 use Spryker\Client\Cart\Zed\CartStubInterface;
 use Spryker\Client\Kernel\AbstractFactory;
 
@@ -31,12 +31,12 @@ class CartClientTest extends PHPUnit_Framework_TestCase
     public function testGetCartMustReturnInstanceOfQuoteTransfer()
     {
         $quoteTransfer = new QuoteTransfer();
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->once())
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->once())
             ->method('getQuote')
             ->will($this->returnValue($quoteTransfer));
 
-        $factoryMock = $this->getFactoryMock($sessionMock);
+        $factoryMock = $this->getFactoryMock($quoteMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $this->assertSame($quoteTransfer, $cartClientMock->getQuote());
@@ -47,12 +47,12 @@ class CartClientTest extends PHPUnit_Framework_TestCase
      */
     public function testClearCartMustSetItemCountInSessionToZero()
     {
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->once())
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->once())
             ->method('clearQuote')
-            ->will($this->returnValue($sessionMock));
+            ->will($this->returnValue($quoteMock));
 
-        $factoryMock = $this->getFactoryMock($sessionMock);
+        $factoryMock = $this->getFactoryMock($quoteMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $cartClientMock->clearQuote();
@@ -63,12 +63,12 @@ class CartClientTest extends PHPUnit_Framework_TestCase
      */
     public function testClearCartMustSetCartTransferInSessionToAnEmptyInstance()
     {
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->once())
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->once())
             ->method('clearQuote')
-            ->will($this->returnValue($sessionMock));
+            ->will($this->returnValue($quoteMock));
 
-        $factoryMock = $this->getFactoryMock($sessionMock);
+        $factoryMock = $this->getFactoryMock($quoteMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $cartClientMock->clearQuote();
@@ -77,28 +77,12 @@ class CartClientTest extends PHPUnit_Framework_TestCase
     /**
      * @return void
      */
-    public function testGetItemCountMustReturnItemCountFromSession()
-    {
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->once())
-            ->method('getItemCount')
-            ->will($this->returnValue(0));
-
-        $factoryMock = $this->getFactoryMock($sessionMock);
-        $cartClientMock = $this->getCartClientMock($factoryMock);
-
-        $this->assertSame(0, $cartClientMock->getItemCount());
-    }
-
-    /**
-     * @return void
-     */
     public function testAddItemMustOnlyExceptTransferInterfaceAsArgument()
     {
         $itemTransfer = new ItemTransfer();
         $quoteTransfer = new QuoteTransfer();
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->once())
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->once())
             ->method('getQuote')
             ->will($this->returnValue($quoteTransfer));
 
@@ -107,7 +91,7 @@ class CartClientTest extends PHPUnit_Framework_TestCase
             ->method('addItem')
             ->will($this->returnValue($quoteTransfer));
 
-        $factoryMock = $this->getFactoryMock($sessionMock, $stubMock);
+        $factoryMock = $this->getFactoryMock($quoteMock, $stubMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $quoteTransfer = $cartClientMock->addItem($itemTransfer);
@@ -127,8 +111,8 @@ class CartClientTest extends PHPUnit_Framework_TestCase
         $quoteTransfer = new QuoteTransfer();
         $quoteTransfer->addItem($itemTransfer);
 
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->exactly(3))
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->exactly(3))
             ->method('getQuote')
             ->will($this->returnValue($quoteTransfer));
 
@@ -140,7 +124,7 @@ class CartClientTest extends PHPUnit_Framework_TestCase
             ->method('addItem')
             ->will($this->returnValue($quoteTransfer));
 
-        $factoryMock = $this->getFactoryMock($sessionMock, $stubMock);
+        $factoryMock = $this->getFactoryMock($quoteMock, $stubMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $itemTransfer = new ItemTransfer();
@@ -163,8 +147,8 @@ class CartClientTest extends PHPUnit_Framework_TestCase
         $quoteTransfer = new QuoteTransfer();
         $quoteTransfer->addItem($itemTransfer);
 
-        $sessionMock = $this->getSessionMock();
-        $sessionMock->expects($this->exactly(3))
+        $quoteMock = $this->getQuoteMock();
+        $quoteMock->expects($this->exactly(3))
             ->method('getQuote')
             ->will($this->returnValue($quoteTransfer));
 
@@ -177,7 +161,7 @@ class CartClientTest extends PHPUnit_Framework_TestCase
             ->method('addItem')
             ->will($this->returnValue($quoteTransfer));
 
-        $factoryMock = $this->getFactoryMock($sessionMock, $stubMock);
+        $factoryMock = $this->getFactoryMock($quoteMock, $stubMock);
         $cartClientMock = $this->getCartClientMock($factoryMock);
 
         $itemTransfer = new ItemTransfer();
@@ -189,21 +173,21 @@ class CartClientTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @param \Spryker\Client\Cart\Session\QuoteSessionInterface|null $cartSession
+     * @param \Spryker\Client\Cart\Dependency\Client\CartToQuoteInterface|null $quote
      * @param \Spryker\Client\Cart\Zed\CartStubInterface|null $cartStub
      *
      * @return \PHPUnit_Framework_MockObject_MockObject
      */
     private function getFactoryMock(
-        QuoteSessionInterface $cartSession = null,
+        CartToQuoteInterface $quote = null,
         CartStubInterface $cartStub = null
     ) {
-        $factoryMock = $this->getMockBuilder(AbstractFactory::class)->setMethods(['createSession', 'createZedStub'])->disableOriginalConstructor()->getMock();
+        $factoryMock = $this->getMockBuilder(AbstractFactory::class)->setMethods(['getQuoteClient', 'createZedStub'])->disableOriginalConstructor()->getMock();
 
-        if ($cartSession !== null) {
+        if ($quote !== null) {
             $factoryMock->expects($this->any())
-                ->method('createSession')
-                ->will($this->returnValue($cartSession));
+                ->method('getQuoteClient')
+                ->will($this->returnValue($quote));
         }
         if ($cartStub !== null) {
             $factoryMock->expects($this->any())
@@ -233,17 +217,15 @@ class CartClientTest extends PHPUnit_Framework_TestCase
     /**
      * @return \PHPUnit_Framework_MockObject_MockObject
      */
-    private function getSessionMock()
+    private function getQuoteMock()
     {
-        $sessionMock = $this->getMockBuilder(QuoteSessionInterface::class)->setMethods([
+        $quoteMock = $this->getMockBuilder(CartToQuoteInterface::class)->setMethods([
             'getQuote',
             'setQuote',
-            'getItemCount',
-            'setItemCount',
             'clearQuote',
         ])->getMock();
 
-        return $sessionMock;
+        return $quoteMock;
     }
 
     /**
@@ -254,7 +236,6 @@ class CartClientTest extends PHPUnit_Framework_TestCase
         return $this->getMockBuilder(CartStubInterface::class)->setMethods([
             'addItem',
             'removeItem',
-            'storeQuote',
         ])->getMock();
     }
 
diff --git a/Bundles/Cart/tests/Unit/Spryker/Zed/Cart/Business/StorageProvider/NonPersistentProviderTest.php b/Bundles/Cart/tests/Unit/Spryker/Zed/Cart/Business/StorageProvider/NonPersistentProviderTest.php
index 3f035f0..1ec644a 100644
--- a/Bundles/Cart/tests/Unit/Spryker/Zed/Cart/Business/StorageProvider/NonPersistentProviderTest.php
+++ b/Bundles/Cart/tests/Unit/Spryker/Zed/Cart/Business/StorageProvider/NonPersistentProviderTest.php
@@ -288,7 +288,7 @@ class NonPersistentProviderTest extends PHPUnit_Framework_TestCase
      * @param string $itemId
      * @param int $itemQuantity
      *
-     * @return \Generated\Shared\Transfer\ItemTransfer|\Generated\Shared\Transfer\ItemTransfer|\Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Generated\Shared\Transfer\ItemTransfer|\Generated\Shared\Transfer\ItemTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function createItem($itemId, $itemQuantity)
     {
diff --git a/Bundles/Catalog/composer.json b/Bundles/Catalog/composer.json
index 92fd9dd..f225b9c 100644
--- a/Bundles/Catalog/composer.json
+++ b/Bundles/Catalog/composer.json
@@ -6,8 +6,6 @@
     }
   },
   "require": {
-    "spryker/config": "^2.0.0",
-    "spryker/elastica": "^3.0.0",
     "spryker/kernel": "^2.4.0",
     "spryker/search": "^5.2.0"
   },
@@ -15,6 +13,10 @@
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/elastica": "If you want to use Elastica plugins you need to install spryker/elastica.",
+    "spryker/config": "If you want to use Elastica plugins you need to install spryker/config."
+  },
   "description": "Catalog bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Category/composer.json b/Bundles/Category/composer.json
index 6c22b24..faf7537 100644
--- a/Bundles/Category/composer.json
+++ b/Bundles/Category/composer.json
@@ -17,18 +17,20 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/graph": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/locale": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/touch": "^2.0.0",
-    "spryker/url": "^2.2.0"
+    "spryker/url": "^2.2.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Category bundle",
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Business/CategoryFacade.php b/Bundles/Category/src/Spryker/Zed/Category/Business/CategoryFacade.php
index 25b045b..587c745 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Business/CategoryFacade.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Business/CategoryFacade.php
@@ -206,7 +206,7 @@ class CategoryFacade extends AbstractFacade implements CategoryFacadeInterface
      * @param \Generated\Shared\Transfer\CategoryTransfer $categoryTransfer
      *
      * @throws \Spryker\Zed\Category\Business\Exception\CategoryUrlExistsException
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return void
      */
@@ -246,7 +246,7 @@ class CategoryFacade extends AbstractFacade implements CategoryFacadeInterface
      * @throws \Spryker\Zed\Category\Business\Exception\MissingCategoryException
      * @throws \Spryker\Zed\Category\Business\Exception\MissingCategoryNodeException
      * @throws \Spryker\Zed\Category\Business\Exception\CategoryUrlExistsException
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return void
      */
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/CreateController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/CreateController.php
index e68a1a6..5a1e110 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/CreateController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/CreateController.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\Category\Communication\Controller;
 
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Category\Business\Exception\CategoryUrlExistsException;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/DeleteController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/DeleteController.php
index 42b2171..842a9f5 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/DeleteController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/DeleteController.php
@@ -10,7 +10,7 @@ use Generated\Shared\Transfer\CategoryTransfer;
 use Generated\Shared\Transfer\NodeTransfer;
 use Orm\Zed\Category\Persistence\SpyCategory;
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/EditController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/EditController.php
index 5208b34..9821ae3 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/EditController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/EditController.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\Category\Communication\Controller;
 
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Category\Business\Exception\CategoryUrlExistsException;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/IndexController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/IndexController.php
index 5659026..acafc98 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/IndexController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/IndexController.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Category\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/NodeController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/NodeController.php
index e9150f5..70352ea 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/NodeController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/NodeController.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Category\Communication\Controller;
 
 use Generated\Shared\Transfer\NodeTransfer;
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/ReSortController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/ReSortController.php
index 833e776..50933f0 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/ReSortController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/ReSortController.php
@@ -7,7 +7,7 @@
 namespace Spryker\Zed\Category\Communication\Controller;
 
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/RootController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/RootController.php
index b7dff8f..0ac0b8a 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/RootController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/RootController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Category\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Category\Business\CategoryFacade getFacade()
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/TreeController.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/TreeController.php
index c0bf0cb..12ac26b 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/TreeController.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Controller/TreeController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Category\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Form/DataProvider/CategoryEditDataProvider.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Form/DataProvider/CategoryEditDataProvider.php
index 03c8106..cf92d82 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Form/DataProvider/CategoryEditDataProvider.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Form/DataProvider/CategoryEditDataProvider.php
@@ -13,7 +13,7 @@ use Spryker\Zed\Category\Business\CategoryFacadeInterface;
 use Spryker\Zed\Category\Communication\Form\CategoryType;
 use Spryker\Zed\Category\Dependency\Facade\CategoryToLocaleInterface;
 use Spryker\Zed\Category\Persistence\CategoryQueryContainerInterface;
-use Spryker\Zed\Propel\Business\Runtime\ActiveQuery\Criteria;
+use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
 use Symfony\Component\HttpFoundation\Request;
 
 class CategoryEditDataProvider
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Communication/Table/RootNodeTable.php b/Bundles/Category/src/Spryker/Zed/Category/Communication/Table/RootNodeTable.php
index d79f2af..ab36c2f 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Communication/Table/RootNodeTable.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Communication/Table/RootNodeTable.php
@@ -7,8 +7,8 @@
 namespace Spryker\Zed\Category\Communication\Table;
 
 use Orm\Zed\Category\Persistence\Map\SpyCategoryAttributeTableMap;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Category\CategoryConstants;
-use Spryker\Shared\Url\Url;
 use Spryker\Zed\Category\Persistence\CategoryQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Category/src/Spryker/Zed/Category/Persistence/CategoryQueryContainer.php b/Bundles/Category/src/Spryker/Zed/Category/Persistence/CategoryQueryContainer.php
index 9d99926..a653306 100644
--- a/Bundles/Category/src/Spryker/Zed/Category/Persistence/CategoryQueryContainer.php
+++ b/Bundles/Category/src/Spryker/Zed/Category/Persistence/CategoryQueryContainer.php
@@ -17,7 +17,7 @@ use Propel\Runtime\ActiveQuery\Criteria;
 use Propel\Runtime\ActiveQuery\Join;
 use Propel\Runtime\ActiveQuery\ModelCriteria;
 use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 
 /**
  * @method \Spryker\Zed\Category\Persistence\CategoryPersistenceFactory getFactory()
diff --git a/Bundles/Category/tests/Functional.suite.yml b/Bundles/Category/tests/Functional.suite.yml
deleted file mode 100644
index f955845..0000000
--- a/Bundles/Category/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - \Testify\Module\Environment
-        - \Category\Module\Functional
diff --git a/Bundles/Category/tests/Functional/_bootstrap.php b/Bundles/Category/tests/Functional/_bootstrap.php
deleted file mode 100644
index b3d9bbc..0000000
--- a/Bundles/Category/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1 +0,0 @@
-<?php
diff --git a/Bundles/Category/tests/_support/FunctionalTester.php b/Bundles/Category/tests/_support/FunctionalTester.php
deleted file mode 100644
index 71f4d43..0000000
--- a/Bundles/Category/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-namespace Category;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-}
diff --git a/Bundles/Category/tests/_support/Module/Functional.php b/Bundles/Category/tests/_support/Module/Functional.php
deleted file mode 100644
index c41d360..0000000
--- a/Bundles/Category/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Category\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/CategoryExporter/composer.json b/Bundles/CategoryExporter/composer.json
index 437ff73..00fbfb4 100644
--- a/Bundles/CategoryExporter/composer.json
+++ b/Bundles/CategoryExporter/composer.json
@@ -7,8 +7,8 @@
   },
   "require": {
     "spryker/category": "^2.0.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/kernel": "^2.4.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/storage": "^2.0.0"
   },
   "require-dev": {
diff --git a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Builder/CategoryTreeBuilder.php b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Builder/CategoryTreeBuilder.php
index 185d3dc..de65c41 100644
--- a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Builder/CategoryTreeBuilder.php
+++ b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Builder/CategoryTreeBuilder.php
@@ -9,7 +9,7 @@ namespace Spryker\Client\CategoryExporter\Builder;
 
 use Spryker\Client\Storage\StorageClientInterface;
 use Spryker\Shared\CategoryExporter\Business\CategoryNodeKeyInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class CategoryTreeBuilder
 {
@@ -23,13 +23,13 @@ class CategoryTreeBuilder
     protected $kvReader;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
     /**
      * @param \Spryker\Client\Storage\StorageClientInterface $kvReader
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      */
     public function __construct(StorageClientInterface $kvReader, KeyBuilderInterface $keyBuilder)
     {
diff --git a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterDependencyProvider.php b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterDependencyProvider.php
index de1269a..a197b3a 100644
--- a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterDependencyProvider.php
+++ b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterDependencyProvider.php
@@ -8,7 +8,37 @@
 namespace Spryker\Client\CategoryExporter;
 
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class CategoryExporterDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_STORAGE = 'storage client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addStorageClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addStorageClient(Container $container)
+    {
+        $container[static::CLIENT_STORAGE] = function (Container $container) {
+            return $container->getLocator()->storage()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterFactory.php b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterFactory.php
index c774a58..3966f70 100644
--- a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterFactory.php
+++ b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/CategoryExporterFactory.php
@@ -28,6 +28,14 @@ class CategoryExporterFactory extends AbstractFactory
     }
 
     /**
+     * @return \Spryker\Client\Storage\StorageClientInterface
+     */
+    protected function getStorageClient()
+    {
+        return $this->getProvidedDependency(CategoryExporterDependencyProvider::CLIENT_STORAGE);
+    }
+
+    /**
      * @return \Spryker\Client\CategoryExporter\Builder\CategoryTreeBuilder
      */
     public function createCategoryTreeBuilder()
@@ -47,7 +55,7 @@ class CategoryExporterFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createResourceKeyBuilder()
     {
diff --git a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Model/Navigation.php b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Model/Navigation.php
index 8c4b132..e44835c 100644
--- a/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Model/Navigation.php
+++ b/Bundles/CategoryExporter/src/Spryker/Client/CategoryExporter/Model/Navigation.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\CategoryExporter\Model;
 
 use Spryker\Client\Storage\StorageClientInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class Navigation
 {
@@ -19,13 +19,13 @@ class Navigation
     private $keyValueReader;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     private $urlBuilder;
 
     /**
      * @param \Spryker\Client\Storage\StorageClientInterface $keyValueReader
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $urlBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $urlBuilder
      */
     public function __construct(StorageClientInterface $keyValueReader, KeyBuilderInterface $urlBuilder)
     {
diff --git a/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/NavigationKeyBuilder.php b/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/NavigationKeyBuilder.php
index e9f69c1..0f3caf9 100644
--- a/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/NavigationKeyBuilder.php
+++ b/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/NavigationKeyBuilder.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Shared\CategoryExporter\Code\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 
 abstract class NavigationKeyBuilder implements KeyBuilderInterface
 {
diff --git a/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/SharedCategoryResourceKeyBuilder.php b/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/SharedCategoryResourceKeyBuilder.php
index d34f142..dd5eb7b 100644
--- a/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/SharedCategoryResourceKeyBuilder.php
+++ b/Bundles/CategoryExporter/src/Spryker/Shared/CategoryExporter/Code/KeyBuilder/SharedCategoryResourceKeyBuilder.php
@@ -8,7 +8,7 @@
 namespace Spryker\Shared\CategoryExporter\Code\KeyBuilder;
 
 use Spryker\Shared\CategoryExporter\CategoryExporterConstants;
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 
 abstract class SharedCategoryResourceKeyBuilder extends SharedResourceKeyBuilder
 {
diff --git a/Bundles/Checkout/composer.json b/Bundles/Checkout/composer.json
index 938a8a0..94f7fe0 100644
--- a/Bundles/Checkout/composer.json
+++ b/Bundles/Checkout/composer.json
@@ -6,26 +6,26 @@
     }
   },
   "require": {
-    "spryker/availability": "^2.0.0 || ^3.0.0",
-    "spryker/cart": "^2.0.0",
-    "spryker/country": "^2.0.0",
-    "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/locale": "^2.0.0",
-    "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/sales": "^2.0.0 || ^3.0.0",
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/quote": "^1.0.0",
     "spryker/step-engine": "^1.1.0",
-    "spryker/stock": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^2.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
+    "spryker/availability": "*",
     "spryker/code-sniffer": "*",
-    "spryker/library": "^2.0.0",
-    "spryker/product": "^2.0.0 || ^3.0.0 || ^4.0.0",
-    "spryker/sequence-number": "^2.0.0",
+    "spryker/country": "*",
+    "spryker/customer": "*",
+    "spryker/locale": "*",
+    "spryker/oms": "*",
+    "spryker/product": "*",
+    "spryker/propel": "*",
+    "spryker/sales": "*",
+    "spryker/sequence-number": "*",
+    "spryker/stock": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Checkout bundle",
diff --git a/Bundles/Checkout/dependency.json b/Bundles/Checkout/dependency.json
deleted file mode 100644
index 0479d38..0000000
--- a/Bundles/Checkout/dependency.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "exclude-dev": {
-    "Product": "Required by tests and declared as require-dev right now"
-  }
-}
diff --git a/Bundles/Checkout/src/Spryker/Shared/Checkout/CheckoutConstants.php b/Bundles/Checkout/src/Spryker/Shared/Checkout/CheckoutConstants.php
index a252b8b..d01e38b 100644
--- a/Bundles/Checkout/src/Spryker/Shared/Checkout/CheckoutConstants.php
+++ b/Bundles/Checkout/src/Spryker/Shared/Checkout/CheckoutConstants.php
@@ -7,17 +7,6 @@
 
 namespace Spryker\Shared\Checkout;
 
-/**
- * @TODO https://github.com/spryker/spryker/issues/1219
- */
 class CheckoutConstants
 {
-
-    const ERROR_CODE_CUSTOMER_ALREADY_REGISTERED = 4001;
-    const ERROR_CODE_PRODUCT_UNAVAILABLE = 4002;
-    const ERROR_CODE_CART_AMOUNT_DIFFERENT = 4003;
-    const ERROR_CODE_UNKNOWN_ERROR = 5000;
-
-    const ERROR_MESSAGE_INTERNAL_ERROR = 'Internal error';
-
 }
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/CheckoutDependencyProvider.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/CheckoutDependencyProvider.php
index df23443..c9e539a 100644
--- a/Bundles/Checkout/src/Spryker/Yves/Checkout/CheckoutDependencyProvider.php
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/CheckoutDependencyProvider.php
@@ -7,6 +7,7 @@
 
 namespace Spryker\Yves\Checkout;
 
+use Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteBridge;
 use Spryker\Yves\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Yves\Kernel\Container;
 use Spryker\Yves\StepEngine\Dependency\Plugin\Form\SubFormPluginCollection;
@@ -20,7 +21,7 @@ class CheckoutDependencyProvider extends AbstractBundleDependencyProvider
 
     const PLUGIN_APPLICATION = 'application plugin';
 
-    const CLIENT_CART = 'cart client';
+    const CLIENT_QUOTE = 'cart client';
 
     /**
      * @param \Spryker\Yves\Kernel\Container $container
@@ -60,8 +61,8 @@ class CheckoutDependencyProvider extends AbstractBundleDependencyProvider
      */
     protected function provideClients(Container $container)
     {
-        $container[self::CLIENT_CART] = function () use ($container) {
-            return $container->getLocator()->cart()->client();
+        $container[self::CLIENT_QUOTE] = function () use ($container) {
+            return new CheckoutToQuoteBridge($container->getLocator()->quote()->client());
         };
 
         return $container;
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/DataContainer/DataContainer.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/DataContainer/DataContainer.php
index 12e39ec..b3bb8ac 100644
--- a/Bundles/Checkout/src/Spryker/Yves/Checkout/DataContainer/DataContainer.php
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/DataContainer/DataContainer.php
@@ -7,17 +7,17 @@
 
 namespace Spryker\Yves\Checkout\DataContainer;
 
-use Spryker\Client\Cart\CartClientInterface;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
+use Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteInterface;
 use Spryker\Yves\StepEngine\Dependency\DataContainer\DataContainerInterface;
 
 class DataContainer implements DataContainerInterface
 {
 
     /**
-     * @var \Spryker\Client\Cart\CartClientInterface
+     * @var \Spryker\Client\Quote\QuoteClientInterface
      */
-    protected $cartClient;
+    protected $quoteClient;
 
     /**
      * @var \Generated\Shared\Transfer\QuoteTransfer
@@ -25,11 +25,11 @@ class DataContainer implements DataContainerInterface
     protected $quoteTransfer;
 
     /**
-     * @param \Spryker\Client\Cart\CartClientInterface $cartClient
+     * @param \Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteInterface $quoteClient
      */
-    public function __construct(CartClientInterface $cartClient)
+    public function __construct(CheckoutToQuoteInterface $quoteClient)
     {
-        $this->cartClient = $cartClient;
+        $this->quoteClient = $quoteClient;
     }
 
     /**
@@ -38,20 +38,20 @@ class DataContainer implements DataContainerInterface
     public function get()
     {
         if (!$this->quoteTransfer) {
-            $this->quoteTransfer = $this->cartClient->getQuote();
+            $this->quoteTransfer = $this->quoteClient->getQuote();
         }
 
         return $this->quoteTransfer;
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $dataTransfer
      *
      * @return void
      */
     public function set(AbstractTransfer $dataTransfer)
     {
-        $this->cartClient->storeQuote($dataTransfer);
+        $this->quoteClient->setQuote($dataTransfer);
     }
 
 }
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteBridge.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteBridge.php
new file mode 100644
index 0000000..28a9021
--- /dev/null
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteBridge.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Checkout\Dependency\Client;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+class CheckoutToQuoteBridge implements CheckoutToQuoteInterface
+{
+
+    /**
+     * @var \Spryker\Client\Quote\QuoteClientInterface
+     */
+    protected $quoteClient;
+
+    /**
+     * @param \Spryker\Client\Quote\QuoteClientInterface $quoteClient
+     */
+    public function __construct($quoteClient)
+    {
+        $this->quoteClient = $quoteClient;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote()
+    {
+        return $this->quoteClient->getQuote();
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer)
+    {
+        $this->quoteClient->setQuote($quoteTransfer);
+    }
+
+}
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteInterface.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteInterface.php
new file mode 100644
index 0000000..553df5b
--- /dev/null
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/Dependency/Client/CheckoutToQuoteInterface.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Checkout\Dependency\Client;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+interface CheckoutToQuoteInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote();
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer);
+
+}
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/StepFactory.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/StepFactory.php
index 3801c9c..c6563f9 100644
--- a/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/StepFactory.php
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/StepFactory.php
@@ -39,15 +39,15 @@ class StepFactory extends AbstractFactory
      */
     protected function createDataContainer()
     {
-        return new DataContainer($this->getCartClient());
+        return new DataContainer($this->getQuoteClient());
     }
 
     /**
-     * @return \Spryker\Client\Cart\CartClientInterface
+     * @return \Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteInterface
      */
-    protected function getCartClient()
+    protected function getQuoteClient()
     {
-        return $this->getProvidedDependency(CheckoutDependencyProvider::CLIENT_CART);
+        return $this->getProvidedDependency(CheckoutDependencyProvider::CLIENT_QUOTE);
     }
 
 }
diff --git a/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/Steps/AbstractPlaceOrderStep.php b/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/Steps/AbstractPlaceOrderStep.php
index 85dbce9..dfd1412 100644
--- a/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/Steps/AbstractPlaceOrderStep.php
+++ b/Bundles/Checkout/src/Spryker/Yves/Checkout/Process/Steps/AbstractPlaceOrderStep.php
@@ -9,7 +9,7 @@ namespace Spryker\Yves\Checkout\Process\Steps;
 
 use Generated\Shared\Transfer\CheckoutResponseTransfer;
 use Spryker\Client\Checkout\CheckoutClientInterface;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\AbstractBaseStep;
 use Spryker\Yves\StepEngine\Dependency\Step\StepWithExternalRedirectInterface;
 use Spryker\Yves\StepEngine\Dependency\Step\StepWithPostConditionErrorRouteInterface;
@@ -62,7 +62,7 @@ abstract class AbstractPlaceOrderStep extends AbstractBaseStep implements StepWi
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return bool
      */
@@ -73,9 +73,9 @@ abstract class AbstractPlaceOrderStep extends AbstractBaseStep implements StepWi
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function execute(Request $request, AbstractTransfer $quoteTransfer)
     {
@@ -96,7 +96,7 @@ abstract class AbstractPlaceOrderStep extends AbstractBaseStep implements StepWi
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return bool
      */
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/CheckoutBusinessFactory.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/CheckoutBusinessFactory.php
index 30bfa27..4ac8497 100644
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/CheckoutBusinessFactory.php
+++ b/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/CheckoutBusinessFactory.php
@@ -25,8 +25,7 @@ class CheckoutBusinessFactory extends AbstractBusinessFactory
         return new CheckoutWorkflow(
             $this->getProvidedDependency(CheckoutDependencyProvider::CHECKOUT_PRE_CONDITIONS),
             $this->getProvidedDependency(CheckoutDependencyProvider::CHECKOUT_ORDER_SAVERS),
-            $this->getProvidedDependency(CheckoutDependencyProvider::CHECKOUT_POST_HOOKS),
-            $this->getProvidedDependency(CheckoutDependencyProvider::FACADE_OMS)
+            $this->getProvidedDependency(CheckoutDependencyProvider::CHECKOUT_POST_HOOKS)
         );
     }
 
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/Workflow/CheckoutWorkflow.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/Workflow/CheckoutWorkflow.php
index 8726737..51d9860 100644
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/Workflow/CheckoutWorkflow.php
+++ b/Bundles/Checkout/src/Spryker/Zed/Checkout/Business/Workflow/CheckoutWorkflow.php
@@ -11,7 +11,6 @@ use Generated\Shared\Transfer\CheckoutResponseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\SaveOrderTransfer;
 use Propel\Runtime\Propel;
-use Spryker\Zed\Checkout\Dependency\Facade\CheckoutToOmsInterface;
 
 class CheckoutWorkflow implements CheckoutWorkflowInterface
 {
@@ -32,26 +31,18 @@ class CheckoutWorkflow implements CheckoutWorkflowInterface
     protected $postSaveHookStack;
 
     /**
-     * @var \Spryker\Zed\Checkout\Dependency\Facade\CheckoutToOmsInterface
-     */
-    protected $omsFacade;
-
-    /**
      * @param \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutPreConditionInterface[] $preConditionStack
      * @param \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutSaveOrderInterface[] $saveOrderStack
      * @param \Spryker\Zed\Checkout\Dependency\Plugin\CheckoutPostSaveHookInterface[] $postSaveHookStack
-     * @param \Spryker\Zed\Checkout\Dependency\Facade\CheckoutToOmsInterface $omsFacade
      */
     public function __construct(
         array $preConditionStack,
         array $saveOrderStack,
-        array $postSaveHookStack,
-        CheckoutToOmsInterface $omsFacade
+        array $postSaveHookStack
     ) {
         $this->preConditionStack = $preConditionStack;
         $this->postSaveHookStack = $postSaveHookStack;
         $this->saveOrderStack = $saveOrderStack;
-        $this->omsFacade = $omsFacade;
     }
 
     /**
@@ -69,7 +60,6 @@ class CheckoutWorkflow implements CheckoutWorkflowInterface
         if (!$this->hasErrors($checkoutResponse)) {
             $quoteTransfer = $this->doSaveOrder($quoteTransfer, $checkoutResponse);
             if (!$this->hasErrors($checkoutResponse)) {
-                $this->triggerStateMachine($checkoutResponse);
                 $this->executePostHooks($quoteTransfer, $checkoutResponse);
 
                 $isSuccess = !$this->hasErrors($checkoutResponse);
@@ -128,22 +118,6 @@ class CheckoutWorkflow implements CheckoutWorkflowInterface
     }
 
     /**
-     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
-     *
-     * @return void
-     */
-    protected function triggerStateMachine(CheckoutResponseTransfer $checkoutResponseTransfer)
-    {
-        $salesOrderItemIds = [];
-
-        foreach ($checkoutResponseTransfer->getSaveOrder()->getOrderItems() as $item) {
-            $salesOrderItemIds[] = $item->getIdSalesOrderItem();
-        }
-
-        $this->omsFacade->triggerEventForNewOrderItems($salesOrderItemIds);
-    }
-
-    /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponse
      *
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutConfig.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutConfig.php
index 93a4e57..783b5b8 100644
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutConfig.php
+++ b/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutConfig.php
@@ -11,4 +11,9 @@ use Spryker\Zed\Kernel\AbstractBundleConfig;
 
 class CheckoutConfig extends AbstractBundleConfig
 {
+
+    const ERROR_CODE_CUSTOMER_ALREADY_REGISTERED = 4001;
+    const ERROR_CODE_PRODUCT_UNAVAILABLE = 4002;
+    const ERROR_CODE_CART_AMOUNT_DIFFERENT = '4003';
+
 }
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutDependencyProvider.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutDependencyProvider.php
index 5e82e3c..87bf805 100644
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutDependencyProvider.php
+++ b/Bundles/Checkout/src/Spryker/Zed/Checkout/CheckoutDependencyProvider.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Checkout;
 
-use Spryker\Zed\Checkout\Dependency\Facade\CheckoutToOmsBridge;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 
@@ -18,8 +17,6 @@ class CheckoutDependencyProvider extends AbstractBundleDependencyProvider
     const CHECKOUT_POST_HOOKS = 'checkout_post_hooks';
     const CHECKOUT_ORDER_SAVERS = 'checkout_order_savers';
 
-    const FACADE_OMS = 'oms facade';
-
     /**
      * @param \Spryker\Zed\Kernel\Container $container
      *
@@ -39,10 +36,6 @@ class CheckoutDependencyProvider extends AbstractBundleDependencyProvider
             return $this->getCheckoutPostHooks($container);
         };
 
-        $container[self::FACADE_OMS] = function (Container $container) {
-            return new CheckoutToOmsBridge($container->getLocator()->oms()->facade());
-        };
-
         return $container;
     }
 
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsBridge.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsBridge.php
deleted file mode 100644
index 7b9d068..0000000
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsBridge.php
+++ /dev/null
@@ -1,37 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Checkout\Dependency\Facade;
-
-class CheckoutToOmsBridge implements CheckoutToOmsInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Oms\Business\OmsFacadeInterface
-     */
-    protected $omsFacade;
-
-    /**
-     * @param \Spryker\Zed\Oms\Business\OmsFacadeInterface $omsFacade
-     */
-    public function __construct($omsFacade)
-    {
-        $this->omsFacade = $omsFacade;
-    }
-
-    /**
-     * @param array $orderItemIds
-     * @param array $data
-     *
-     * @return array
-     */
-    public function triggerEventForNewOrderItems(array $orderItemIds, array $data = [])
-    {
-        return $this->omsFacade->triggerEventForNewOrderItems($orderItemIds, $data);
-    }
-
-}
diff --git a/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsInterface.php b/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsInterface.php
deleted file mode 100644
index 63f753d..0000000
--- a/Bundles/Checkout/src/Spryker/Zed/Checkout/Dependency/Facade/CheckoutToOmsInterface.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Checkout\Dependency\Facade;
-
-interface CheckoutToOmsInterface
-{
-
-    /**
-     * @param array $orderItemIds
-     * @param array $data
-     *
-     * @return array
-     */
-    public function triggerEventForNewOrderItems(array $orderItemIds, array $data = []);
-
-}
diff --git a/Bundles/Checkout/tests/Functional/Spryker/Zed/Checkout/Business/CheckoutFacadeTest.php b/Bundles/Checkout/tests/Functional/Spryker/Zed/Checkout/Business/CheckoutFacadeTest.php
index c7b05d5..440bce0 100644
--- a/Bundles/Checkout/tests/Functional/Spryker/Zed/Checkout/Business/CheckoutFacadeTest.php
+++ b/Bundles/Checkout/tests/Functional/Spryker/Zed/Checkout/Business/CheckoutFacadeTest.php
@@ -24,14 +24,13 @@ use Orm\Zed\Product\Persistence\SpyProductAbstract;
 use Orm\Zed\Sales\Persistence\SpySalesOrderItemQuery;
 use Orm\Zed\Stock\Persistence\SpyStock;
 use Orm\Zed\Stock\Persistence\SpyStockProduct;
-use Spryker\Shared\Checkout\CheckoutConstants;
 use Spryker\Shared\Kernel\Store;
 use Spryker\Shared\Oms\OmsConstants;
 use Spryker\Zed\Availability\Communication\Plugin\ProductsAvailableCheckoutPreConditionPlugin;
 use Spryker\Zed\Checkout\Business\CheckoutBusinessFactory;
 use Spryker\Zed\Checkout\Business\CheckoutFacade;
+use Spryker\Zed\Checkout\CheckoutConfig;
 use Spryker\Zed\Checkout\CheckoutDependencyProvider;
-use Spryker\Zed\Checkout\Dependency\Facade\CheckoutToOmsBridge;
 use Spryker\Zed\Customer\Business\CustomerBusinessFactory;
 use Spryker\Zed\Customer\Business\CustomerFacade;
 use Spryker\Zed\Customer\Communication\Plugin\CustomerPreConditionCheckerPlugin;
@@ -40,6 +39,7 @@ use Spryker\Zed\Customer\CustomerDependencyProvider;
 use Spryker\Zed\Customer\Dependency\Facade\CustomerToMailInterface;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Locale\Persistence\LocaleQueryContainer;
+use Spryker\Zed\Oms\Communication\Plugin\Checkout\OmsPostSaveHookPlugin;
 use Spryker\Zed\Sales\Business\SalesBusinessFactory;
 use Spryker\Zed\Sales\Business\SalesFacade;
 use Spryker\Zed\Sales\Communication\Plugin\SalesOrderSaverPlugin;
@@ -137,7 +137,7 @@ class CheckoutFacadeTest extends Test
 
         $this->assertFalse($result->getIsSuccess());
         $this->assertEquals(1, count($result->getErrors()));
-        $this->assertEquals(CheckoutConstants::ERROR_CODE_CUSTOMER_ALREADY_REGISTERED, $result->getErrors()[0]->getErrorCode());
+        $this->assertEquals(CheckoutConfig::ERROR_CODE_CUSTOMER_ALREADY_REGISTERED, $result->getErrors()[0]->getErrorCode());
     }
 
     /**
@@ -202,7 +202,7 @@ class CheckoutFacadeTest extends Test
 
         $this->assertFalse($result->getIsSuccess());
         $this->assertEquals(1, count($result->getErrors()));
-        $this->assertEquals(CheckoutConstants::ERROR_CODE_PRODUCT_UNAVAILABLE, $result->getErrors()[0]->getErrorCode());
+        $this->assertEquals(CheckoutConfig::ERROR_CODE_PRODUCT_UNAVAILABLE, $result->getErrors()[0]->getErrorCode());
     }
 
     /**
@@ -376,11 +376,9 @@ class CheckoutFacadeTest extends Test
         };
 
         $container[CheckoutDependencyProvider::CHECKOUT_POST_HOOKS] = function (Container $container) {
-            return [];
-        };
-
-        $container[CheckoutDependencyProvider::FACADE_OMS] = function (Container $container) {
-            return new CheckoutToOmsBridge($container->getLocator()->oms()->facade());
+            return [
+                new OmsPostSaveHookPlugin()
+            ];
         };
 
         $container[CustomerDependencyProvider::QUERY_CONTAINER_LOCALE] = new LocaleQueryContainer();
diff --git a/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/DataContainer/DataContainerTest.php b/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/DataContainer/DataContainerTest.php
index 92fdcfb..54ab445 100644
--- a/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/DataContainer/DataContainerTest.php
+++ b/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/DataContainer/DataContainerTest.php
@@ -9,8 +9,8 @@ namespace Unit\Spryker\Yves\Checkout\DataContainer;
 
 use Generated\Shared\Transfer\QuoteTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Client\Cart\CartClientInterface;
 use Spryker\Yves\Checkout\DataContainer\DataContainer;
+use Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteInterface;
 
 /**
  * @group Unit
@@ -28,10 +28,10 @@ class DataContainerTest extends PHPUnit_Framework_TestCase
      */
     public function testGetShouldCallClientToGetQuoteTransferIfNotSet()
     {
-        $cartClientMock = $this->getCartClientMock();
-        $cartClientMock->expects($this->once())->method('getQuote')->willReturn(new QuoteTransfer());
+        $quoteClientMock = $this->getQuoteClientMock();
+        $quoteClientMock->expects($this->once())->method('getQuote')->willReturn(new QuoteTransfer());
 
-        $dataContainer = new DataContainer($cartClientMock);
+        $dataContainer = new DataContainer($quoteClientMock);
 
         $this->assertInstanceOf(QuoteTransfer::class, $dataContainer->get());
     }
@@ -41,7 +41,7 @@ class DataContainerTest extends PHPUnit_Framework_TestCase
      */
     public function testGetShouldNotCallClientToGetQuoteTransferIfSet()
     {
-        $cartClientMock = $this->getCartClientMock();
+        $cartClientMock = $this->getQuoteClientMock();
         $cartClientMock->expects($this->once())->method('getQuote')->willReturn(new QuoteTransfer());
         $dataContainer = new DataContainer($cartClientMock);
         $dataContainer->get();
@@ -55,18 +55,18 @@ class DataContainerTest extends PHPUnit_Framework_TestCase
      */
     public function testSetShouldCallClientToStoreQuoteTransfer()
     {
-        $cartClientMock = $this->getCartClientMock();
-        $cartClientMock->expects($this->once())->method('storeQuote');
+        $cartClientMock = $this->getQuoteClientMock();
+        $cartClientMock->expects($this->once())->method('setQuote');
         $dataContainer = new DataContainer($cartClientMock);
         $dataContainer->set(new QuoteTransfer());
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Client\Cart\CartClientInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Yves\Checkout\Dependency\Client\CheckoutToQuoteInterface
      */
-    private function getCartClientMock()
+    private function getQuoteClientMock()
     {
-        return $this->getMockBuilder(CartClientInterface::class)->getMock();
+        return $this->getMockBuilder(CheckoutToQuoteInterface::class)->getMock();
     }
 
 }
diff --git a/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/Process/StepFactoryTest.php b/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/Process/StepFactoryTest.php
index 3b5d13e..ff4454f 100644
--- a/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/Process/StepFactoryTest.php
+++ b/Bundles/Checkout/tests/Unit/Spryker/Yves/Checkout/Process/StepFactoryTest.php
@@ -11,7 +11,6 @@ use PHPUnit_Framework_TestCase;
 use Spryker\Yves\Checkout\CheckoutDependencyProvider;
 use Spryker\Yves\Checkout\Process\StepFactory;
 use Spryker\Yves\Kernel\Container;
-use Spryker\Yves\StepEngine\Dependency\DataContainer\DataContainerInterface;
 use Spryker\Yves\StepEngine\Process\StepCollection;
 use Spryker\Yves\StepEngine\Process\StepEngineInterface;
 use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
@@ -64,12 +63,4 @@ class StepFactoryTest extends PHPUnit_Framework_TestCase
         return $this->getMockBuilder(UrlGeneratorInterface::class)->getMock();
     }
 
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Client\Cart\CartClientInterface
-     */
-    private function getDataContainerMock()
-    {
-        return $this->getMockBuilder(DataContainerInterface::class)->getMock();
-    }
-
 }
diff --git a/Bundles/Cms/composer.json b/Bundles/Cms/composer.json
index 4807fdf..86bc4ff 100644
--- a/Bundles/Cms/composer.json
+++ b/Bundles/Cms/composer.json
@@ -6,21 +6,23 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/category": "^2.2.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/glossary": "^2.2.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.1.6",
     "spryker/touch": "^2.0.0",
-    "spryker/url": "^2.3.0"
+    "spryker/url": "^2.3.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Cms bundle",
diff --git a/Bundles/Cms/src/Spryker/Client/Cms/CmsFactory.php b/Bundles/Cms/src/Spryker/Client/Cms/CmsFactory.php
index 6123243..fbc7c7c 100644
--- a/Bundles/Cms/src/Spryker/Client/Cms/CmsFactory.php
+++ b/Bundles/Cms/src/Spryker/Client/Cms/CmsFactory.php
@@ -34,7 +34,7 @@ class CmsFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createKeyBuilder()
     {
diff --git a/Bundles/Cms/src/Spryker/Client/Cms/KeyBuilder/CmsBlockKeyBuilder.php b/Bundles/Cms/src/Spryker/Client/Cms/KeyBuilder/CmsBlockKeyBuilder.php
index 579e7fc..88e1415 100644
--- a/Bundles/Cms/src/Spryker/Client/Cms/KeyBuilder/CmsBlockKeyBuilder.php
+++ b/Bundles/Cms/src/Spryker/Client/Cms/KeyBuilder/CmsBlockKeyBuilder.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Cms\KeyBuilder;
 
 use Spryker\Shared\Cms\CmsConstants;
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 
 class CmsBlockKeyBuilder extends SharedResourceKeyBuilder
 {
diff --git a/Bundles/Cms/src/Spryker/Client/Cms/Storage/CmsBlockStorage.php b/Bundles/Cms/src/Spryker/Client/Cms/Storage/CmsBlockStorage.php
index 1d38dc6..63868b9 100644
--- a/Bundles/Cms/src/Spryker/Client/Cms/Storage/CmsBlockStorage.php
+++ b/Bundles/Cms/src/Spryker/Client/Cms/Storage/CmsBlockStorage.php
@@ -18,13 +18,13 @@ class CmsBlockStorage implements CmsBlockStorageInterface
     private $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface KeyBuilderInterface
      */
     private $keyBuilder;
 
     /**
      * @param \Spryker\Client\Storage\StorageClientInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface KeyBuilderInterface $keyBuilder
      */
     public function __construct($storage, $keyBuilder)
     {
diff --git a/Bundles/Cms/src/Spryker/Shared/Cms/CmsConstants.php b/Bundles/Cms/src/Spryker/Shared/Cms/CmsConstants.php
index 6415030..3c7ad49 100644
--- a/Bundles/Cms/src/Spryker/Shared/Cms/CmsConstants.php
+++ b/Bundles/Cms/src/Spryker/Shared/Cms/CmsConstants.php
@@ -7,18 +7,18 @@
 
 namespace Spryker\Shared\Cms;
 
-use Spryker\Shared\Application\ApplicationConstants;
+use Spryker\Shared\Kernel\KernelConstants;
 
 interface CmsConstants
 {
 
-    const PROJECT_NAMESPACE = ApplicationConstants::PROJECT_NAMESPACE;
+    const PROJECT_NAMESPACE = KernelConstants::PROJECT_NAMESPACE;
 
     const RESOURCE_TYPE_PAGE = 'page';
     const RESOURCE_TYPE_BLOCK = 'block';
     const RESOURCE_TYPE_CATEGORY_NODE = 'category';
     const RESOURCE_TYPE_STATIC = 'static';
 
-    const YVES_THEME = ApplicationConstants::YVES_THEME;
+    const YVES_THEME = 'YVES_THEME';
 
 }
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/CmsDependencyProvider.php b/Bundles/Cms/src/Spryker/Zed/Cms/CmsDependencyProvider.php
index 5b4af72..5d406fa 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/CmsDependencyProvider.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/CmsDependencyProvider.php
@@ -7,13 +7,13 @@
 
 namespace Spryker\Zed\Cms;
 
+use Propel\Runtime\Propel;
 use Spryker\Zed\Cms\Dependency\Facade\CmsToGlossaryBridge;
 use Spryker\Zed\Cms\Dependency\Facade\CmsToLocaleBridge;
 use Spryker\Zed\Cms\Dependency\Facade\CmsToTouchBridge;
 use Spryker\Zed\Cms\Dependency\Facade\CmsToUrlBridge;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Propel\Communication\Plugin\Connection;
 
 class CmsDependencyProvider extends AbstractBundleDependencyProvider
 {
@@ -59,7 +59,7 @@ class CmsDependencyProvider extends AbstractBundleDependencyProvider
     public function provideBusinessLayerDependencies(Container $container)
     {
         $container[self::PLUGIN_PROPEL_CONNECTION] = function (Container $container) {
-            return (new Connection())->get();
+            return Propel::getConnection();
         };
 
         $container[self::FACADE_TOUCH] = function (Container $container) {
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/BlockController.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/BlockController.php
index 8fe249d..e8a6083 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/BlockController.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/BlockController.php
@@ -9,11 +9,11 @@ namespace Spryker\Zed\Cms\Communication\Controller;
 
 use Generated\Shared\Transfer\CmsBlockTransfer;
 use Generated\Shared\Transfer\PageTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Cms\Communication\Form\CmsBlockForm;
 use Spryker\Zed\Cms\Communication\Form\CmsPageForm;
 use Spryker\Zed\Cms\Communication\Table\CmsBlockTable;
 use Spryker\Zed\Cms\Communication\Table\CmsPageTable;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/GlossaryController.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/GlossaryController.php
index b133a5e..893eb06 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/GlossaryController.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/GlossaryController.php
@@ -15,12 +15,12 @@ use Generated\Shared\Transfer\PageTransfer;
 use Orm\Zed\Cms\Persistence\SpyCmsBlock;
 use Orm\Zed\Cms\Persistence\SpyCmsPage;
 use Spryker\Shared\Cms\CmsConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Cms\Business\Exception\MissingPageException;
 use Spryker\Zed\Cms\Communication\Form\CmsGlossaryForm;
 use Spryker\Zed\Cms\Communication\Table\CmsGlossaryTable;
 use Spryker\Zed\Cms\Communication\Table\CmsPageTable;
 use Spryker\Zed\Cms\Persistence\CmsQueryContainer;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
 
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/PageController.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/PageController.php
index 3f0657e..18b5521 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/PageController.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/PageController.php
@@ -12,9 +12,9 @@ use Generated\Shared\Transfer\LocaleTransfer;
 use Generated\Shared\Transfer\PageTransfer;
 use Generated\Shared\Transfer\UrlTransfer;
 use Orm\Zed\Glossary\Persistence\Map\SpyGlossaryKeyTableMap;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Cms\Communication\Form\CmsPageForm;
 use Spryker\Zed\Cms\Communication\Table\CmsPageTable;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/RedirectController.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/RedirectController.php
index b2ae75b..21ea960 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/RedirectController.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Controller/RedirectController.php
@@ -10,8 +10,8 @@ namespace Spryker\Zed\Cms\Communication\Controller;
 use Generated\Shared\Transfer\RedirectTransfer;
 use Generated\Shared\Transfer\UrlRedirectTransfer;
 use Generated\Shared\Transfer\UrlTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Cms\Communication\Form\CmsRedirectForm;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException;
 
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsBlockTable.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsBlockTable.php
index c318001..8e1370e 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsBlockTable.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsBlockTable.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Cms\Communication\Table;
 use Orm\Zed\Category\Persistence\Map\SpyCategoryAttributeTableMap;
 use Orm\Zed\Cms\Persistence\Map\SpyCmsBlockTableMap;
 use Orm\Zed\Cms\Persistence\SpyCmsBlockQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Cms\Persistence\CmsQueryContainer;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsGlossaryTable.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsGlossaryTable.php
index da13001..552be09 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsGlossaryTable.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsGlossaryTable.php
@@ -12,7 +12,7 @@ use Orm\Zed\Cms\Persistence\Map\SpyCmsPageTableMap;
 use Orm\Zed\Cms\Persistence\SpyCmsGlossaryKeyMappingQuery;
 use Orm\Zed\Glossary\Persistence\Map\SpyGlossaryKeyTableMap;
 use Orm\Zed\Glossary\Persistence\Map\SpyGlossaryTranslationTableMap;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Cms\Persistence\CmsQueryContainer;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsPageTable.php b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsPageTable.php
index 53a3b21..a82cb28 100644
--- a/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsPageTable.php
+++ b/Bundles/Cms/src/Spryker/Zed/Cms/Communication/Table/CmsPageTable.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Cms\Communication\Table;
 
 use Orm\Zed\Cms\Persistence\Map\SpyCmsPageTableMap;
 use Orm\Zed\Cms\Persistence\SpyCmsPageQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Cms\Persistence\CmsQueryContainer;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Collector/composer.json b/Bundles/Collector/composer.json
index 4ee32f9..abd1448 100644
--- a/Bundles/Collector/composer.json
+++ b/Bundles/Collector/composer.json
@@ -12,17 +12,20 @@
   },
   "require": {
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/elastica": "^2.0.0 || ^3.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.4.0",
-    "spryker/library": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/propel": "^2.3.1",
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/redis": "^2.0.0",
+    "spryker/search": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
     "spryker/sql-criteria-builder": "^1.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/touch": "^2.0.0"
+    "spryker/touch": "^2.0.0",
+    "spryker/util-data-reader": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/Collector/src/Spryker/Client/Collector/CollectorDependencyProvider.php b/Bundles/Collector/src/Spryker/Client/Collector/CollectorDependencyProvider.php
index 241f30b..2a47ca9 100644
--- a/Bundles/Collector/src/Spryker/Client/Collector/CollectorDependencyProvider.php
+++ b/Bundles/Collector/src/Spryker/Client/Collector/CollectorDependencyProvider.php
@@ -8,7 +8,37 @@
 namespace Spryker\Client\Collector;
 
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class CollectorDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_STORAGE = 'storage client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addStorageClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addStorageClient(Container $container)
+    {
+        $container[static::CLIENT_STORAGE] = function (Container $container) {
+            return $container->getLocator()->storage()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/Collector/src/Spryker/Client/Collector/CollectorFactory.php b/Bundles/Collector/src/Spryker/Client/Collector/CollectorFactory.php
index 5932fa9..96cd44a 100644
--- a/Bundles/Collector/src/Spryker/Client/Collector/CollectorFactory.php
+++ b/Bundles/Collector/src/Spryker/Client/Collector/CollectorFactory.php
@@ -26,6 +26,14 @@ class CollectorFactory extends AbstractFactory
     }
 
     /**
+     * @return \Spryker\Client\Storage\StorageClientInterface
+     */
+    protected function getStorageClient()
+    {
+        return $this->getProvidedDependency(CollectorDependencyProvider::CLIENT_STORAGE);
+    }
+
+    /**
      * @return \Spryker\Client\Collector\KeyBuilder\UrlKeyBuilder
      */
     protected function createUrlKeyBuilder()
diff --git a/Bundles/Collector/src/Spryker/Client/Collector/Matcher/UrlMatcher.php b/Bundles/Collector/src/Spryker/Client/Collector/Matcher/UrlMatcher.php
index d4c97bc..b5f8560 100644
--- a/Bundles/Collector/src/Spryker/Client/Collector/Matcher/UrlMatcher.php
+++ b/Bundles/Collector/src/Spryker/Client/Collector/Matcher/UrlMatcher.php
@@ -8,13 +8,13 @@
 namespace Spryker\Client\Collector\Matcher;
 
 use Spryker\Client\Storage\StorageClientInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class UrlMatcher implements UrlMatcherInterface
 {
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $urlKeyBuilder;
 
@@ -24,7 +24,7 @@ class UrlMatcher implements UrlMatcherInterface
     protected $keyValueReader;
 
     /**
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $urlKeyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $urlKeyBuilder
      * @param \Spryker\Client\Storage\StorageClientInterface $keyValueReader
      */
     public function __construct(KeyBuilderInterface $urlKeyBuilder, StorageClientInterface $keyValueReader)
diff --git a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderInterface.php b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderInterface.php
deleted file mode 100644
index 1678cb9..0000000
--- a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderInterface.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Collector\Code\KeyBuilder;
-
-interface KeyBuilderInterface
-{
-
-    /**
-     * @param mixed $data
-     * @param string $localeName
-     *
-     * @return string
-     */
-    public function generateKey($data, $localeName);
-
-}
diff --git a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderTrait.php b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderTrait.php
deleted file mode 100644
index ff58aaa..0000000
--- a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/KeyBuilderTrait.php
+++ /dev/null
@@ -1,73 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Collector\Code\KeyBuilder;
-
-use Spryker\Shared\Kernel\Store;
-
-trait KeyBuilderTrait
-{
-
-    /**
-     * @var string
-     */
-    protected $keySeparator = '.';
-
-    /**
-     * @param mixed $data
-     * @param string $localeName
-     *
-     * @return array
-     */
-    protected function getKeyParts($data, $localeName)
-    {
-        return [
-            Store::getInstance()->getStoreName(),
-            $localeName,
-            $this->getBundleName(),
-            $this->buildKey($data),
-        ];
-    }
-
-    /**
-     * @param mixed $data
-     * @param string $localeName
-     *
-     * @return string
-     */
-    public function generateKey($data, $localeName)
-    {
-        $keyParts = $this->getKeyParts($data, $localeName);
-
-        return $this->escapeKey(implode($this->keySeparator, $keyParts));
-    }
-
-    /**
-     * @return string
-     */
-    abstract public function getBundleName();
-
-    /**
-     * @param mixed $data
-     *
-     * @return string
-     */
-    abstract protected function buildKey($data);
-
-    /**
-     * @param string $key
-     *
-     * @return string
-     */
-    protected function escapeKey($key)
-    {
-        $charsToReplace = ['"', "'", ' ', "\0", "\n", "\r"];
-
-        return str_replace($charsToReplace, '-', mb_strtolower(trim($key)));
-    }
-
-}
diff --git a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/SharedResourceKeyBuilder.php b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/SharedResourceKeyBuilder.php
index a680ab7..ea55837 100644
--- a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/SharedResourceKeyBuilder.php
+++ b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/SharedResourceKeyBuilder.php
@@ -7,6 +7,9 @@
 
 namespace Spryker\Shared\Collector\Code\KeyBuilder;
 
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
+
 abstract class SharedResourceKeyBuilder implements KeyBuilderInterface
 {
 
diff --git a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/UrlKeyBuilder.php b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/UrlKeyBuilder.php
index 9e2455a..0ecd9d3 100644
--- a/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/UrlKeyBuilder.php
+++ b/Bundles/Collector/src/Spryker/Shared/Collector/Code/KeyBuilder/UrlKeyBuilder.php
@@ -7,6 +7,9 @@
 
 namespace Spryker\Shared\Collector\Code\KeyBuilder;
 
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
+
 class UrlKeyBuilder implements KeyBuilderInterface
 {
 
diff --git a/Bundles/Collector/src/Spryker/Shared/Collector/Code/Reader/KeyValue/RedisReader.php b/Bundles/Collector/src/Spryker/Shared/Collector/Code/Reader/KeyValue/RedisReader.php
index 909550c..e37bf2c 100644
--- a/Bundles/Collector/src/Spryker/Shared/Collector/Code/Reader/KeyValue/RedisReader.php
+++ b/Bundles/Collector/src/Spryker/Shared/Collector/Code/Reader/KeyValue/RedisReader.php
@@ -8,18 +8,18 @@
 namespace Spryker\Shared\Collector\Code\Reader\KeyValue;
 
 use Spryker\Shared\Collector\Code\Reader\ReaderInterface;
-use Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface;
+use Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface;
 
 class RedisReader implements ReaderInterface
 {
 
     /**
-     * @var \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface
+     * @var \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface
      */
     protected $redis;
 
     /**
-     * @param \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface $kvAdapter
+     * @param \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface $kvAdapter
      */
     public function __construct(ReadWriteInterface $kvAdapter)
     {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractCollector.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractCollector.php
index e40d7a8..8f3b0a5 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractCollector.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractCollector.php
@@ -13,8 +13,8 @@ use Orm\Zed\Touch\Persistence\Map\SpyTouchTableMap;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
 use PDO;
 use Propel\Runtime\Formatter\StatementFormatter;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
 use Spryker\Shared\Gui\ProgressBar\ProgressBarBuilder;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 use Spryker\Zed\Collector\Business\Exporter\Exception\DependencyException;
 use Spryker\Zed\Collector\Business\Exporter\Writer\Storage\TouchUpdaterSet;
 use Spryker\Zed\Collector\CollectorConfig;
@@ -61,7 +61,7 @@ abstract class AbstractCollector
     abstract protected function collectResourceType();
 
     /**
-     * @return \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
      */
     abstract protected function generateBatchIterator();
 
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractDatabaseCollector.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractDatabaseCollector.php
index e6a2bcc..7438f76 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractDatabaseCollector.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractDatabaseCollector.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Collector\Business\Collector;
 
 use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
-use Spryker\Shared\Library\BatchIterator\CountableIteratorInterface;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface;
 use Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface;
 use Spryker\Zed\Collector\Business\Exporter\Writer\Storage\TouchUpdaterSet;
 use Spryker\Zed\Collector\Business\Exporter\Writer\TouchUpdaterInterface;
@@ -26,7 +26,7 @@ abstract class AbstractDatabaseCollector extends AbstractCollector implements Da
      * @param \Orm\Zed\Touch\Persistence\SpyTouchQuery $touchQuery
      * @param \Generated\Shared\Transfer\LocaleTransfer $locale
      *
-     * @return \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
      */
     public function collectDataFromDatabase(SpyTouchQuery $touchQuery, LocaleTransfer $locale)
     {
@@ -37,7 +37,7 @@ abstract class AbstractDatabaseCollector extends AbstractCollector implements Da
     }
 
     /**
-     * @param \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface $batchCollection
+     * @param \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface $batchCollection
      * @param \Spryker\Zed\Collector\Business\Exporter\Writer\TouchUpdaterInterface $touchUpdater
      * @param \Spryker\Zed\Collector\Business\Model\BatchResultInterface $batchResult
      * @param \Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface $storeReader
@@ -109,7 +109,7 @@ abstract class AbstractDatabaseCollector extends AbstractCollector implements Da
     }
 
     /**
-     * @param \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface $batchCollection
+     * @param \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface $batchCollection
      * @param \Spryker\Zed\Collector\Business\Model\BatchResultInterface $batchResult
      * @param \Symfony\Component\Console\Output\OutputInterface $output
      *
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPdoCollector.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPdoCollector.php
index 0183084..8f01aee 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPdoCollector.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPdoCollector.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Collector\Business\Collector;
 
 use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
-use Spryker\Shared\Library\BatchIterator\PdoBatchIterator;
+use Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface;
 use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
 use Spryker\Zed\Collector\Business\Exporter\Exception\DependencyException;
 use Spryker\Zed\Collector\CollectorConfig;
@@ -29,6 +29,19 @@ abstract class AbstractPdoCollector extends AbstractDatabaseCollector
     protected $criteriaBuilder;
 
     /**
+     * @var \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface
+     */
+    protected $utilDataReaderService;
+
+    /**
+     * @param \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface $utilDataReaderService
+     */
+    public function __construct(UtilDataReaderServiceInterface $utilDataReaderService)
+    {
+        $this->utilDataReaderService = $utilDataReaderService;
+    }
+
+    /**
      * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
      *
      * @return void
@@ -62,11 +75,11 @@ abstract class AbstractPdoCollector extends AbstractDatabaseCollector
     }
 
     /**
-     * @return \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\PdoBatchIterator
      */
     protected function generateBatchIterator()
     {
-        return new PdoBatchIterator($this->criteriaBuilder, $this->touchQueryContainer, $this->chunkSize);
+        return $this->utilDataReaderService->getPdoBatchIterator($this->criteriaBuilder, $this->touchQueryContainer, $this->chunkSize);
     }
 
     /**
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPropelCollector.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPropelCollector.php
index d0563e7..b64823f 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPropelCollector.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/AbstractPropelCollector.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Collector\Business\Collector;
 
 use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
-use Spryker\Shared\Library\BatchIterator\PropelBatchIterator;
+use Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface;
 use Spryker\Zed\Collector\Business\Exporter\Exception\DependencyException;
 use Spryker\Zed\Collector\Persistence\Collector\AbstractPropelCollectorQuery;
 
@@ -22,6 +22,19 @@ abstract class AbstractPropelCollector extends AbstractDatabaseCollector
     protected $queryBuilder;
 
     /**
+     * @var \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface
+     */
+    protected $utilDataReaderService;
+
+    /**
+     * @param \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface $utilDataReaderService
+     */
+    public function __construct(UtilDataReaderServiceInterface $utilDataReaderService)
+    {
+        $this->utilDataReaderService = $utilDataReaderService;
+    }
+
+    /**
      * @throws \Spryker\Zed\Collector\Business\Exporter\Exception\DependencyException
      *
      * @return void
@@ -39,11 +52,11 @@ abstract class AbstractPropelCollector extends AbstractDatabaseCollector
     }
 
     /**
-     * @return \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
      */
     protected function generateBatchIterator()
     {
-        return new PropelBatchIterator($this->queryBuilder->getTouchQuery(), $this->chunkSize);
+        return $this->utilDataReaderService->getPropelBatchIterator($this->queryBuilder->getTouchQuery(), $this->chunkSize);
     }
 
     /**
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/DatabaseCollectorInterface.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/DatabaseCollectorInterface.php
index 42d2d00..0c43666 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/DatabaseCollectorInterface.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Collector/DatabaseCollectorInterface.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Collector\Business\Collector;
 
 use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
-use Spryker\Shared\Library\BatchIterator\CountableIteratorInterface;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface;
 use Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface;
 use Spryker\Zed\Collector\Business\Exporter\Writer\TouchUpdaterInterface;
 use Spryker\Zed\Collector\Business\Exporter\Writer\WriterInterface;
@@ -23,7 +23,7 @@ interface DatabaseCollectorInterface
      * @param \Orm\Zed\Touch\Persistence\SpyTouchQuery $touchQuery
      * @param \Generated\Shared\Transfer\LocaleTransfer $locale
      *
-     * @return \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
      */
     public function collectDataFromDatabase(
         SpyTouchQuery $touchQuery,
@@ -31,7 +31,7 @@ interface DatabaseCollectorInterface
     );
 
     /**
-     * @param \Spryker\Shared\Library\BatchIterator\CountableIteratorInterface $batchCollection
+     * @param \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface $batchCollection
      * @param \Spryker\Zed\Collector\Business\Exporter\Writer\TouchUpdaterInterface $touchUpdater
      * @param \Spryker\Zed\Collector\Business\Model\BatchResultInterface $batchResult
      * @param \Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface $storeReader
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/CollectorBusinessFactory.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/CollectorBusinessFactory.php
index e738977..adb79fc 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/CollectorBusinessFactory.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/CollectorBusinessFactory.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Collector\Business;
 
-use Spryker\Shared\Library\Storage\StorageInstanceBuilder;
 use Spryker\Zed\Collector\Business\Exporter\CollectorExporter;
 use Spryker\Zed\Collector\Business\Exporter\ExportMarker;
 use Spryker\Zed\Collector\Business\Exporter\KeyBuilder\KvMarkerKeyBuilder;
@@ -28,6 +27,7 @@ use Spryker\Zed\Collector\Business\Manager\CollectorManager;
 use Spryker\Zed\Collector\Business\Model\BatchResult;
 use Spryker\Zed\Collector\Business\Model\BulkTouchQueryBuilder;
 use Spryker\Zed\Collector\Business\Model\FailedResult;
+use Spryker\Zed\Collector\Business\Storage\StorageInstanceBuilder;
 use Spryker\Zed\Collector\CollectorDependencyProvider;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/AbstractExporter.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/AbstractExporter.php
index b66820b..062f33e 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/AbstractExporter.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/AbstractExporter.php
@@ -17,7 +17,7 @@ use Spryker\Zed\Collector\Business\Model\BatchResultInterface;
 use Spryker\Zed\Collector\Business\Model\FailedResultInterface;
 use Spryker\Zed\Collector\CollectorConfig;
 use Spryker\Zed\Collector\Dependency\Plugin\CollectorPluginInterface;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 use Spryker\Zed\Touch\Persistence\TouchQueryContainerInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/ExportMarker.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/ExportMarker.php
index be7efc7..24f667f 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/ExportMarker.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/ExportMarker.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Collector\Business\Exporter;
 
 use DateTime;
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 use Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface;
 use Spryker\Zed\Collector\Business\Exporter\Writer\WriterInterface;
 
@@ -27,14 +27,14 @@ class ExportMarker implements MarkerInterface
     protected $reader;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
     /**
      * @param \Spryker\Zed\Collector\Business\Exporter\Writer\WriterInterface $writer
      * @param \Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface $reader
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      */
     public function __construct(WriterInterface $writer, ReaderInterface $reader, KeyBuilderInterface $keyBuilder)
     {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/KvMarkerKeyBuilder.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/KvMarkerKeyBuilder.php
index 5b6fb88..987cf68 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/KvMarkerKeyBuilder.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/KvMarkerKeyBuilder.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Collector\Business\Exporter\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 
 class KvMarkerKeyBuilder implements KeyBuilderInterface
 {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/SearchMarkerKeyBuilder.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/SearchMarkerKeyBuilder.php
index bc94aaa..3ded05a 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/SearchMarkerKeyBuilder.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/KeyBuilder/SearchMarkerKeyBuilder.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Collector\Business\Exporter\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 
 class SearchMarkerKeyBuilder implements KeyBuilderInterface
 {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Reader/Storage/RedisReader.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Reader/Storage/RedisReader.php
index 9ab29cc..33a70f5 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Reader/Storage/RedisReader.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Reader/Storage/RedisReader.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Collector\Business\Exporter\Reader\Storage;
 
-use Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface;
 use Spryker\Zed\Collector\Business\Exporter\Reader\ReaderInterface;
+use Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface;
 
 class RedisReader implements ReaderInterface
 {
@@ -16,12 +16,12 @@ class RedisReader implements ReaderInterface
     const READER_NAME = 'redis-reader';
 
     /**
-     * @var \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface
+     * @var \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface
      */
     protected $redis;
 
     /**
-     * @param \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface $redis
+     * @param \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface $redis
      */
     public function __construct(ReadInterface $redis)
     {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Writer/Storage/RedisWriter.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Writer/Storage/RedisWriter.php
index 9ac66a2..c8ccd06 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Writer/Storage/RedisWriter.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Exporter/Writer/Storage/RedisWriter.php
@@ -7,19 +7,19 @@
 
 namespace Spryker\Zed\Collector\Business\Exporter\Writer\Storage;
 
-use Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface;
 use Spryker\Zed\Collector\Business\Exporter\Writer\WriterInterface;
+use Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface;
 
 class RedisWriter implements WriterInterface
 {
 
     /**
-     * @var \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface|\Spryker\Shared\Library\Storage\Adapter\KeyValue\RedisReadWrite
+     * @var \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface|\Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\RedisReadWrite
      */
     protected $redis;
 
     /**
-     * @param \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface $kvAdapter
+     * @param \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface $kvAdapter
      */
     public function __construct(ReadWriteInterface $kvAdapter)
     {
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Manager/CollectorManager.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Manager/CollectorManager.php
index e7369ee..ee4d288 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Manager/CollectorManager.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Manager/CollectorManager.php
@@ -42,7 +42,6 @@ class CollectorManager implements CollectorManagerInterface
         TouchUpdaterInterface $touchUpdater,
         OutputInterface $output
     ) {
-
         $itemType = $baseQuery->get(SpyTouchTableMap::COL_ITEM_TYPE);
         $collector->deleteDataFromStore($touchUpdater, $dataWriter, $itemType);
         $batchCollection = $collector->collectDataFromDatabase($baseQuery, $locale);
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadInterface.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadInterface.php
new file mode 100644
index 0000000..44ce693
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadInterface.php
@@ -0,0 +1,52 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue;
+
+interface ReadInterface
+{
+
+    /**
+     * @param string $key
+     *
+     * @return mixed
+     */
+    public function get($key);
+
+    /**
+     * @param array $keys
+     *
+     * @return array
+     */
+    public function getMulti(array $keys);
+
+    /**
+     * @return array
+     */
+    public function getStats();
+
+    /**
+     * @return array
+     */
+    public function getAllKeys();
+
+    /**
+     * @return void
+     */
+    public function resetAccessStats();
+
+    /**
+     * @return array
+     */
+    public function getAccessStats();
+
+    /**
+     * @return int
+     */
+    public function getCountItems();
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadWriteInterface.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadWriteInterface.php
new file mode 100644
index 0000000..9fac7af
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/ReadWriteInterface.php
@@ -0,0 +1,50 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue;
+
+interface ReadWriteInterface extends ReadInterface
+{
+
+    /**
+     * @param string $key
+     * @param mixed $value
+     *
+     * @return void
+     */
+    public function set($key, $value);
+
+    /**
+     * @param array $items
+     * @param string $prefix
+     *
+     * @return bool|mixed
+     */
+    public function setMulti(array $items, $prefix = RedisRead::KV_PREFIX);
+
+    /**
+     * @param string $key
+     * @param string $prefix
+     *
+     * @return bool|mixed
+     */
+    public function delete($key, $prefix = RedisRead::KV_PREFIX);
+
+    /**
+     * @param array $keys
+     * @param string $prefix
+     *
+     * @return bool|mixed
+     */
+    public function deleteMulti(array $keys, $prefix = RedisRead::KV_PREFIX);
+
+    /**
+     * @return mixed
+     */
+    public function deleteAll();
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/Redis.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/Redis.php
new file mode 100644
index 0000000..7520534
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/Redis.php
@@ -0,0 +1,250 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue;
+
+use Predis\Client;
+use Predis\Connection\ConnectionException;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\Storage\StorageConstants;
+
+abstract class Redis
+{
+
+    /**
+     * @var array
+     */
+    protected $accessStats;
+
+    /**
+     * @var array
+     */
+    protected $config;
+
+    /**
+     * @var \Predis\Client
+     */
+    protected $resource;
+
+    /**
+     * @var bool
+     */
+    protected $debug;
+
+    /**
+     * @param array $config
+     * @param bool $debug
+     */
+    public function __construct(array $config, $debug = false)
+    {
+        $this->config = $config;
+        $this->debug = $debug;
+        $this->resetAccessStats();
+    }
+
+    /**
+     * @param array $config
+     *
+     * @return $this
+     */
+    public function setConfig(array $config)
+    {
+        $this->config = $config;
+
+        return $this;
+    }
+
+    /**
+     * @return array
+     */
+    public function getConfig()
+    {
+        return $this->config;
+    }
+
+    /**
+     * @param resource $resource
+     *
+     * @return $this
+     */
+    protected function setResource($resource)
+    {
+        $this->resource = $resource;
+
+        return $this;
+    }
+
+    /**
+     * @return mixed
+     */
+    protected function getResource()
+    {
+        if (!$this->resource) {
+            $this->connect();
+        }
+
+        return $this->resource;
+    }
+
+    /**
+     * @return bool
+     */
+    public function getDebug()
+    {
+        return $this->debug;
+    }
+
+    /**
+     * @param bool $debug
+     *
+     * @return $this
+     */
+    public function setDebug($debug)
+    {
+        $this->debug = $debug;
+
+        return $this;
+    }
+
+    /**
+     * set read write stats array
+     *
+     * @return void
+     */
+    public function resetAccessStats()
+    {
+        $this->accessStats = [
+            'count' => [
+                'read' => 0,
+                'write' => 0,
+                'delete' => 0,
+            ],
+            'keys' => [
+                'read' => [],
+                'write' => [],
+                'delete' => [],
+            ],
+        ];
+    }
+
+    /**
+     * @return array
+     */
+    public function getAccessStats()
+    {
+        return $this->accessStats;
+    }
+
+    /**
+     * @param string $key
+     *
+     * @return void
+     */
+    protected function addReadAccessStats($key)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['read']++;
+            $this->accessStats['keys']['read'][] = $key;
+        }
+    }
+
+    /**
+     * @param array $keys
+     *
+     * @return void
+     */
+    protected function addMultiReadAccessStats(array $keys)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['read'] += count($keys);
+            $this->accessStats['keys']['read'] = $this->accessStats['keys']['read'] + $keys;
+        }
+    }
+
+    /**
+     * @param string $key
+     *
+     * @return void
+     */
+    protected function addWriteAccessStats($key)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['write']++;
+            $this->accessStats['keys']['write'][] = $key;
+        }
+    }
+
+    /**
+     * @param array $items
+     *
+     * @return void
+     */
+    protected function addMultiWriteAccessStats(array $items)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['write'] += count($items);
+            $this->accessStats['keys']['write'] = $this->accessStats['keys']['write'] + array_keys($items);
+        }
+    }
+
+    /**
+     * @param string $key
+     *
+     * @return void
+     */
+    protected function addDeleteAccessStats($key)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['delete']++;
+            $this->accessStats['keys']['delete'][] = $key;
+        }
+    }
+
+    /**
+     * @param array $keys
+     *
+     * @return void
+     */
+    protected function addMultiDeleteAccessStats(array $keys)
+    {
+        if ($this->debug) {
+            $this->accessStats['count']['delete'] += count($keys);
+            $this->accessStats['keys']['delete'] = $this->accessStats['keys']['delete'] + $keys;
+        }
+    }
+
+    /**
+     * @throws \Predis\Connection\ConnectionException
+     *
+     * @return void
+     */
+    public function connect()
+    {
+        if (!$this->resource) {
+            $resource = new Client($this->config);
+
+            if (!$resource) {
+                throw new ConnectionException($resource, 'Could not connect to redis server');
+            }
+
+            $this->resource = $resource;
+        }
+    }
+
+    /**
+     * close redis connection
+     */
+    public function __destruct()
+    {
+        $isPersistent = (bool)Config::get(StorageConstants::STORAGE_PERSISTENT_CONNECTION, false);
+
+        if (!$isPersistent && $this->resource) {
+            $this->resource->disconnect();
+        }
+    }
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisRead.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisRead.php
new file mode 100644
index 0000000..b732719
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisRead.php
@@ -0,0 +1,106 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue;
+
+class RedisRead extends Redis implements ReadInterface
+{
+
+    const KV_PREFIX = 'kv:';
+
+    /**
+     * @param string $key
+     * @param string $prefix
+     *
+     * @return mixed|string
+     */
+    public function get($key, $prefix = self::KV_PREFIX)
+    {
+        $key = $this->getKeyName($key, $prefix);
+        $value = $this->getResource()->get($key);
+        $this->addReadAccessStats($key);
+
+        $result = json_decode($value, true);
+
+        if (json_last_error() === \JSON_ERROR_SYNTAX) {
+            return $value;
+        }
+
+        return $result;
+    }
+
+    /**
+     * @param array $keys
+     * @param string $prefix
+     *
+     * @return array
+     */
+    public function getMulti(array $keys, $prefix = self::KV_PREFIX)
+    {
+        $transformedKeys = [];
+        foreach ($keys as $key) {
+            $transformedKeys[] = $this->getKeyName($key, $prefix);
+        }
+
+        $values = array_combine($transformedKeys, $this->getResource()->mget($transformedKeys));
+        $this->addMultiReadAccessStats($keys);
+
+        return $values;
+    }
+
+    /**
+     * @param string|null $section
+     *
+     * @return array
+     */
+    public function getStats($section = null)
+    {
+        return $this->getResource()->info($section);
+    }
+
+    /**
+     * @param string|null $prefix
+     *
+     * @return array
+     */
+    public function getAllKeys($prefix = self::KV_PREFIX)
+    {
+        return $this->getResource()->keys($this->getSearchPattern($prefix));
+    }
+
+    /**
+     * @param string|null $prefix
+     *
+     * @return int
+     */
+    public function getCountItems($prefix = self::KV_PREFIX)
+    {
+        return count($this->getResource()->keys($this->getSearchPattern($prefix)));
+    }
+
+    /**
+     * @param string|null $prefix
+     *
+     * @return string
+     */
+    protected function getSearchPattern($prefix = self::KV_PREFIX)
+    {
+        return $prefix ? $prefix . '*' : '*';
+    }
+
+    /**
+     * @param string $key
+     * @param string $prefix
+     *
+     * @return string
+     */
+    protected function getKeyName($key, $prefix = self::KV_PREFIX)
+    {
+        return $prefix ? $prefix . $key : $key;
+    }
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisReadWrite.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisReadWrite.php
new file mode 100644
index 0000000..2cb8088
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/Adapter/KeyValue/RedisReadWrite.php
@@ -0,0 +1,121 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue;
+
+use Exception;
+
+class RedisReadWrite extends RedisRead implements ReadWriteInterface
+{
+
+    /**
+     * @param string $key
+     * @param mixed $value
+     * @param string $prefix
+     *
+     * @throws \Exception
+     *
+     * @return mixed
+     */
+    public function set($key, $value, $prefix = self::KV_PREFIX)
+    {
+        $key = $this->getKeyName($key, $prefix);
+        $result = $this->getResource()->set($key, $value);
+        $this->addWriteAccessStats($key);
+        if (!$result) {
+            throw new Exception(
+                'could not set redisKey: "' . $key . '" with value: "' . json_encode($value) . '"'
+            );
+        }
+
+        return $result;
+    }
+
+    /**
+     * @param array $items
+     * @param string $prefix
+     *
+     * @throws \Exception
+     *
+     * @return bool|mixed
+     */
+    public function setMulti(array $items, $prefix = self::KV_PREFIX)
+    {
+        $data = [];
+
+        foreach ($items as $key => $value) {
+            $dataKey = $this->getKeyName($key, $prefix);
+
+            if (!is_scalar($value)) {
+                $value = json_encode($value);
+            }
+
+            $data[$dataKey] = $value;
+        }
+
+        if (count($data) === 0) {
+            return false;
+        }
+
+        $result = $this->getResource()->mset($data);
+        $this->addMultiWriteAccessStats($data);
+
+        if (!$result) {
+            throw new Exception(
+                'could not set redisKeys for items: "[' . implode(',', array_keys($items)) . ']" with values: "[' . implode(',', array_values($items)) . ']"'
+            );
+        }
+
+        return $result;
+    }
+
+    /**
+     * @param string $key
+     * @param string|null $prefix
+     *
+     * @return int
+     */
+    public function delete($key, $prefix = self::KV_PREFIX)
+    {
+        $key = $this->getKeyName($key, $prefix);
+        $result = $this->getResource()->del([$key]);
+        $this->addDeleteAccessStats($key);
+
+        return $result;
+    }
+
+    /**
+     * @param array $keys
+     * @param string $prefix
+     *
+     * @return void
+     */
+    public function deleteMulti(array $keys, $prefix = self::KV_PREFIX)
+    {
+        $items = [];
+        foreach ($keys as $key => $value) {
+            $dataKey = $this->getKeyName($key, $prefix);
+            $items[] = $dataKey;
+        }
+
+        $this->getResource()->del($items);
+        $this->addMultiDeleteAccessStats($items);
+    }
+
+    /**
+     * @return int
+     */
+    public function deleteAll()
+    {
+        $keys = $this->getAllKeys();
+        $deleteCount = count($keys);
+        $this->deleteMulti($keys);
+
+        return $deleteCount;
+    }
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/StorageInstanceBuilder.php b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/StorageInstanceBuilder.php
new file mode 100644
index 0000000..adb7ac0
--- /dev/null
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Business/Storage/StorageInstanceBuilder.php
@@ -0,0 +1,168 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Collector\Business\Storage;
+
+use Elastica\Client;
+use ErrorException;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\Search\SearchConstants;
+use Spryker\Shared\Storage\StorageConstants;
+
+class StorageInstanceBuilder
+{
+
+    const KV_NAMESPACE = 'Spryker\\Zed\\Collector\\Business\\Storage\\Adapter\\KeyValue\\';
+    const ADAPTER_READ_WRITE = 'ReadWrite';
+    const ADAPTER_READ = 'Read';
+
+    const KV_ADAPTER_REDIS = 'redis';
+    const SEARCH_ELASTICA_ADAPTER = 'elastica';
+
+    const DEFAULT_REDIS_DATABASE = 0;
+
+    /**
+     * @var \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface[]|\Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface[]
+     */
+    protected static $storageInstances = [];
+
+    /**
+     * @var array
+     */
+    protected static $searchInstances = [];
+
+    /**
+     * @return \Elastica\Client
+     */
+    public static function getElasticsearchInstance()
+    {
+        $adapterName = self::SEARCH_ELASTICA_ADAPTER;
+
+        if (array_key_exists($adapterName, self::$searchInstances) === false) {
+            $config = [
+                'transport' => ucfirst(Config::get(SearchConstants::ELASTICA_PARAMETER__TRANSPORT)),
+                'port' => Config::get(SearchConstants::ELASTICA_PARAMETER__PORT),
+                'host' => Config::get(SearchConstants::ELASTICA_PARAMETER__HOST),
+            ];
+
+            if (Config::hasValue(SearchConstants::ELASTICA_PARAMETER__AUTH_HEADER)) {
+                $config['headers'] = [
+                    'Authorization' => 'Basic ' . Config::get(SearchConstants::ELASTICA_PARAMETER__AUTH_HEADER),
+                ];
+            }
+
+            self::$searchInstances[$adapterName] = new Client($config);
+        }
+
+        return self::$searchInstances[$adapterName];
+    }
+
+    /**
+     * @param bool $debug
+     *
+     * @return \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface
+     */
+    public static function getStorageReadWriteInstance($debug = false)
+    {
+        return self::getStorageInstance(self::ADAPTER_READ_WRITE, $debug);
+    }
+
+    /**
+     * @param bool $debug
+     *
+     * @return \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface
+     */
+    public static function getStorageReadInstance($debug = false)
+    {
+        return self::getStorageInstance(self::ADAPTER_READ, $debug);
+    }
+
+    /**
+     * @param string $type
+     * @param bool $debug
+     *
+     * @return \Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadInterface|\Spryker\Zed\Collector\Business\Storage\Adapter\KeyValue\ReadWriteInterface
+     */
+    protected static function getStorageInstance($type, $debug = false)
+    {
+        $kvAdapter = Config::get(StorageConstants::STORAGE_KV_SOURCE);
+
+        $storageAdapter = self::createStorageAdapterName($type, $kvAdapter);
+        $configArray = self::createAdapterConfig($kvAdapter);
+
+        $storage = new $storageAdapter($configArray, $debug);
+        self::$storageInstances[$storageAdapter] = $storage;
+
+        return self::$storageInstances[$storageAdapter];
+    }
+
+    /**
+     * @param string $kvAdapter
+     *
+     * @throws \ErrorException
+     *
+     * @return array
+     */
+    protected static function createAdapterConfig($kvAdapter)
+    {
+        $config = null;
+
+        switch ($kvAdapter) {
+            case static::KV_ADAPTER_REDIS:
+                $config = [
+                    'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL),
+                    'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT),
+                    'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST),
+                    'database' => Config::get(StorageConstants::STORAGE_REDIS_DATABASE, static::DEFAULT_REDIS_DATABASE),
+                ];
+
+                if (Config::hasKey(StorageConstants::STORAGE_REDIS_PASSWORD)) {
+                    $config['password'] = Config::get(StorageConstants::STORAGE_REDIS_PASSWORD);
+                }
+
+                $config['persistent'] = false;
+                if (Config::hasKey(StorageConstants::STORAGE_PERSISTENT_CONNECTION)) {
+                    $config['persistent'] = (bool)Config::get(StorageConstants::STORAGE_PERSISTENT_CONNECTION);
+                }
+                break;
+
+            case static::SEARCH_ELASTICA_ADAPTER:
+                $config = [
+                    'transport' => ucfirst(Config::get(SearchConstants::ELASTICA_PARAMETER__TRANSPORT)),
+                    'port' => Config::get(SearchConstants::ELASTICA_PARAMETER__PORT),
+                    'host' => Config::get(SearchConstants::ELASTICA_PARAMETER__HOST),
+                ];
+
+                if (Config::hasValue(SearchConstants::ELASTICA_PARAMETER__AUTH_HEADER)) {
+                    $config['headers'] = [
+                        'Authorization' => 'Basic ' . Config::get(SearchConstants::ELASTICA_PARAMETER__AUTH_HEADER),
+                    ];
+                }
+                break;
+        }
+
+        if ($config === null) {
+            throw new ErrorException('Missing implementation for adapter ' . $kvAdapter);
+        }
+
+        return $config;
+    }
+
+    /**
+     * @param string $type
+     * @param string $kvAdapter
+     *
+     * @return string
+     */
+    protected static function createStorageAdapterName($type, $kvAdapter)
+    {
+        $storageAdapter = self::KV_NAMESPACE . ucfirst(strtolower($kvAdapter)) . $type;
+
+        return $storageAdapter;
+    }
+
+}
diff --git a/Bundles/Collector/src/Spryker/Zed/Collector/Communication/Console/AbstractCollectorConsole.php b/Bundles/Collector/src/Spryker/Zed/Collector/Communication/Console/AbstractCollectorConsole.php
index f9ed111..b62e0ac 100644
--- a/Bundles/Collector/src/Spryker/Zed/Collector/Communication/Console/AbstractCollectorConsole.php
+++ b/Bundles/Collector/src/Spryker/Zed/Collector/Communication/Console/AbstractCollectorConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Collector\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 
 abstract class AbstractCollectorConsole extends Console
 {
diff --git a/Bundles/CollectorSearchConnector/.coveralls.yml b/Bundles/CollectorSearchConnector/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/CollectorSearchConnector/.gitattributes b/Bundles/CollectorSearchConnector/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/CollectorSearchConnector/.gitignore b/Bundles/CollectorSearchConnector/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/CollectorSearchConnector/.travis.yml b/Bundles/CollectorSearchConnector/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/CollectorSearchConnector/CHANGELOG.md b/Bundles/CollectorSearchConnector/CHANGELOG.md
new file mode 100644
index 0000000..484d598
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/CHANGELOG.md
@@ -0,0 +1,3 @@
+# CollectorSearchConnector Changelog
+
+[Release Changelog](https://github.com/spryker/CollectorSearchConnector/releases)
diff --git a/Bundles/CollectorSearchConnector/LICENSE b/Bundles/CollectorSearchConnector/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/CollectorSearchConnector/README.md b/Bundles/CollectorSearchConnector/README.md
new file mode 100644
index 0000000..e55e301
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/README.md
@@ -0,0 +1,14 @@
+# CollectorSearchConnector Bundle
+[![Build Status](https://travis-ci.org/spryker/CollectorSearchConnector.svg)](https://travis-ci.org/spryker/CollectorSearchConnector)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/CollectorSearchConnector/badge.svg)](https://coveralls.io/github/spryker/CollectorSearchConnector)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/CollectorSearchConnector/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/CollectorSearchConnector/?branch=master)
+
+## Installation
+
+```
+composer require spryker/collector-storage-connector
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/CollectorSearchConnector/composer.json b/Bundles/CollectorSearchConnector/composer.json
new file mode 100644
index 0000000..62702d1
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/composer.json
@@ -0,0 +1,35 @@
+{
+  "name": "spryker/collector-search-connector",
+  "require": {
+    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
+    "spryker/kernel": "^2.0.0",
+    "spryker/search": "???"
+  },
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "description": "CollectorSearchConnector bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "repositories": [
+    {
+      "type": "composer",
+      "url": "https://code.spryker.com/repo/private"
+    }
+  ],
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/CollectorSearchConnectorDependencyProvider.php b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/CollectorSearchConnectorDependencyProvider.php
new file mode 100644
index 0000000..5ab51d9
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/CollectorSearchConnectorDependencyProvider.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorSearchConnector;
+
+use Spryker\Zed\CollectorSearchConnector\Dependency\Facade\CollectorSearchConnectorToCollectorBridge;
+use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Container;
+
+class CollectorSearchConnectorDependencyProvider extends AbstractBundleDependencyProvider
+{
+
+    const FACADE_COLLECTOR = 'collector facade';
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    public function provideCommunicationLayerDependencies(Container $container)
+    {
+        $container = $this->addCollectorFacade($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    private function addCollectorFacade(Container $container)
+    {
+        $container[self::FACADE_COLLECTOR] = function (Container $container) {
+            return new CollectorSearchConnectorToCollectorBridge($container->getLocator()->collector()->facade());
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/CollectorSearchConnectorCommunicationFactory.php b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/CollectorSearchConnectorCommunicationFactory.php
new file mode 100644
index 0000000..cf4f2a8
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/CollectorSearchConnectorCommunicationFactory.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorSearchConnector\Communication;
+
+use Spryker\Zed\CollectorSearchConnector\CollectorSearchConnectorDependencyProvider;
+use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+
+class CollectorSearchConnectorCommunicationFactory extends AbstractCommunicationFactory
+{
+
+    /**
+     * @return \Spryker\Zed\CollectorSearchConnector\Dependency\Facade\CollectorSearchConnectorToCollectorInterface
+     */
+    public function getCollectorFacade()
+    {
+        return $this->getProvidedDependency(CollectorSearchConnectorDependencyProvider::FACADE_COLLECTOR);
+    }
+
+}
diff --git a/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/Controller/MaintenanceController.php b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/Controller/MaintenanceController.php
new file mode 100644
index 0000000..c14ee67
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Communication/Controller/MaintenanceController.php
@@ -0,0 +1,29 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorSearchConnector\Communication\Controller;
+
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
+use Spryker\Zed\Search\Communication\Controller\MaintenanceController as SearchMaintenanceController;
+
+/**
+ * @method \Spryker\Zed\CollectorSearchConnector\Communication\CollectorSearchConnectorCommunicationFactory getFactory()
+ */
+class MaintenanceController extends AbstractController
+{
+
+    /**
+     * @return \Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    public function dropTimestampsAction()
+    {
+        $this->getFactory()->getCollectorFacade()->deleteSearchTimestamps();
+
+        return $this->redirectResponse(SearchMaintenanceController::URL_SEARCH_MAINTENANCE);
+    }
+
+}
diff --git a/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorBridge.php b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorBridge.php
new file mode 100644
index 0000000..edbc6cf
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorBridge.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorSearchConnector\Dependency\Facade;
+
+class CollectorSearchConnectorToCollectorBridge implements CollectorSearchConnectorToCollectorInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Collector\Business\CollectorFacadeInterface
+     */
+    protected $collectorFacade;
+
+    /**
+     * @param \Spryker\Zed\Collector\Business\CollectorFacadeInterface $collectorFacade
+     */
+    public function __construct($collectorFacade)
+    {
+        $this->collectorFacade = $collectorFacade;
+    }
+
+    /**
+     * @param array $timestamps
+     *
+     * @return void
+     */
+    public function deleteSearchTimestamps(array $timestamps = [])
+    {
+        $this->collectorFacade->deleteSearchTimestamps($timestamps);
+    }
+
+}
diff --git a/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorInterface.php b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorInterface.php
new file mode 100644
index 0000000..f744509
--- /dev/null
+++ b/Bundles/CollectorSearchConnector/src/Spryker/Zed/CollectorSearchConnector/Dependency/Facade/CollectorSearchConnectorToCollectorInterface.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorSearchConnector\Dependency\Facade;
+
+interface CollectorSearchConnectorToCollectorInterface
+{
+
+    /**
+     * @param array $timestamps
+     *
+     * @return void
+     */
+    public function deleteSearchTimestamps(array $timestamps = []);
+
+}
diff --git a/Bundles/CollectorStorageConnector/.coveralls.yml b/Bundles/CollectorStorageConnector/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/CollectorStorageConnector/.gitattributes b/Bundles/CollectorStorageConnector/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/CollectorStorageConnector/.gitignore b/Bundles/CollectorStorageConnector/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/CollectorStorageConnector/.travis.yml b/Bundles/CollectorStorageConnector/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/CollectorStorageConnector/CHANGELOG.md b/Bundles/CollectorStorageConnector/CHANGELOG.md
new file mode 100644
index 0000000..c54644e
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/CHANGELOG.md
@@ -0,0 +1,3 @@
+# CollectorStorageConnector Changelog
+
+[Release Changelog](https://github.com/spryker/CollectorStorageConnector/releases)
diff --git a/Bundles/CollectorStorageConnector/LICENSE b/Bundles/CollectorStorageConnector/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/CollectorStorageConnector/README.md b/Bundles/CollectorStorageConnector/README.md
new file mode 100644
index 0000000..3fc7ba3
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/README.md
@@ -0,0 +1,14 @@
+# CollectorStorageConnector Bundle
+[![Build Status](https://travis-ci.org/spryker/CollectorStorageConnector.svg)](https://travis-ci.org/spryker/CollectorStorageConnector)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/CollectorStorageConnector/badge.svg)](https://coveralls.io/github/spryker/CollectorStorageConnector)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/CollectorStorageConnector/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/CollectorStorageConnector/?branch=master)
+
+## Installation
+
+```
+composer require spryker/collector-storage-connector
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/CollectorStorageConnector/composer.json b/Bundles/CollectorStorageConnector/composer.json
new file mode 100644
index 0000000..bce1d88
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/composer.json
@@ -0,0 +1,35 @@
+{
+  "name": "spryker/collector-storage-connector",
+  "require": {
+    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
+    "spryker/kernel": "^2.0.0",
+    "spryker/storage": "^3.0.0"
+  },
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "description": "CollectorStorageConnector bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "repositories": [
+    {
+      "type": "composer",
+      "url": "https://code.spryker.com/repo/private"
+    }
+  ],
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/CollectorStorageConnectorDependencyProvider.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/CollectorStorageConnectorDependencyProvider.php
new file mode 100644
index 0000000..0d78a11
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/CollectorStorageConnectorDependencyProvider.php
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector;
+
+use Spryker\Zed\CollectorStorageConnector\Dependency\Facade\CollectorStorageConnectorToCollectorBridge;
+use Spryker\Zed\CollectorStorageConnector\Dependency\Facade\CollectorStorageConnectorToStorageBridge;
+use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Container;
+
+class CollectorStorageConnectorDependencyProvider extends AbstractBundleDependencyProvider
+{
+
+    const FACADE_STORAGE = 'storage facade';
+    const FACADE_COLLECTOR = 'collector facade';
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    public function provideCommunicationLayerDependencies(Container $container)
+    {
+        $container = $this->addStorageFacade($container);
+        $container = $this->addCollectorFacade($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    private function addStorageFacade(Container $container)
+    {
+        $container[self::FACADE_STORAGE] = function (Container $container) {
+            return new CollectorStorageConnectorToStorageBridge($container->getLocator()->storage()->facade());
+        };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    private function addCollectorFacade(Container $container)
+    {
+        $container[self::FACADE_COLLECTOR] = function (Container $container) {
+            return new CollectorStorageConnectorToCollectorBridge($container->getLocator()->collector()->facade());
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/CollectorStorageConnectorCommunicationFactory.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/CollectorStorageConnectorCommunicationFactory.php
new file mode 100644
index 0000000..ee4d83b
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/CollectorStorageConnectorCommunicationFactory.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Communication;
+
+use Spryker\Zed\CollectorStorageConnector\CollectorStorageConnectorDependencyProvider;
+use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+
+class CollectorStorageConnectorCommunicationFactory extends AbstractCommunicationFactory
+{
+
+    /**
+     * @return \Spryker\Zed\CollectorStorageConnector\Dependency\Facade\CollectorStorageConnectorToCollectorInterface
+     */
+    public function getCollectorFacade()
+    {
+        return $this->getProvidedDependency(CollectorStorageConnectorDependencyProvider::FACADE_COLLECTOR);
+    }
+
+    /**
+     * @return \Spryker\Zed\CollectorStorageConnector\Dependency\Facade\CollectorStorageConnectorToStorageInterface
+     */
+    public function getStorageFacade()
+    {
+        return $this->getProvidedDependency(CollectorStorageConnectorDependencyProvider::FACADE_STORAGE);
+    }
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/Controller/MaintenanceController.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/Controller/MaintenanceController.php
new file mode 100644
index 0000000..ab6383f
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Communication/Controller/MaintenanceController.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Communication\Controller;
+
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
+use Spryker\Zed\Storage\Communication\Controller\MaintenanceController as StorageMaintenanceController;
+
+/**
+ * @method \Spryker\Zed\CollectorStorageConnector\Communication\CollectorStorageConnectorCommunicationFactory getFactory()
+ */
+class MaintenanceController extends AbstractController
+{
+
+    /**
+     * @return \Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    public function dropTimestampsAction()
+    {
+        $timestamps = $this->getFactory()->getStorageFacade()->getTimestamps();
+        $this->getFactory()->getCollectorFacade()->deleteStorageTimestamps(array_keys($timestamps));
+
+        return $this->redirectResponse(StorageMaintenanceController::URL_STORAGE_MAINTENANCE);
+    }
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorBridge.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorBridge.php
new file mode 100644
index 0000000..403a71a
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorBridge.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Dependency\Facade;
+
+class CollectorStorageConnectorToCollectorBridge implements CollectorStorageConnectorToCollectorInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Collector\Business\CollectorFacadeInterface
+     */
+    protected $collectorFacade;
+
+    /**
+     * @param \Spryker\Zed\Collector\Business\CollectorFacadeInterface $collectorFacade
+     */
+    public function __construct($collectorFacade)
+    {
+        $this->collectorFacade = $collectorFacade;
+    }
+
+    /**
+     * @param array $timestamps
+     *
+     * @return void
+     */
+    public function deleteStorageTimestamps(array $timestamps)
+    {
+        $this->collectorFacade->deleteStorageTimestamps($timestamps);
+    }
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorInterface.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorInterface.php
new file mode 100644
index 0000000..68030ae
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToCollectorInterface.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Dependency\Facade;
+
+interface CollectorStorageConnectorToCollectorInterface
+{
+
+    /**
+     * @param array $timestamps
+     *
+     * @return void
+     */
+    public function deleteStorageTimestamps(array $timestamps);
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageBridge.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageBridge.php
new file mode 100644
index 0000000..302328c
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageBridge.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Dependency\Facade;
+
+class CollectorStorageConnectorToStorageBridge implements CollectorStorageConnectorToStorageInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Storage\Business\StorageFacadeInterface
+     */
+    protected $storageFacade;
+
+    /**
+     * @param \Spryker\Zed\Storage\Business\StorageFacadeInterface $storageFacade
+     */
+    public function __construct($storageFacade)
+    {
+        $this->storageFacade = $storageFacade;
+    }
+
+    /**
+     * @return array
+     */
+    public function getTimestamps()
+    {
+        return $this->storageFacade->getTimestamps();
+    }
+
+}
diff --git a/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageInterface.php b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageInterface.php
new file mode 100644
index 0000000..a5f60d6
--- /dev/null
+++ b/Bundles/CollectorStorageConnector/src/Spryker/Zed/CollectorStorageConnector/Dependency/Facade/CollectorStorageConnectorToStorageInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\CollectorStorageConnector\Dependency\Facade;
+
+interface CollectorStorageConnectorToStorageInterface
+{
+
+    /**
+     * @return array
+     */
+    public function getTimestamps();
+
+}
diff --git a/Bundles/Config/composer.json b/Bundles/Config/composer.json
index 69dcc30..e8cdd94 100644
--- a/Bundles/Config/composer.json
+++ b/Bundles/Config/composer.json
@@ -12,11 +12,11 @@
     ]
   },
   "require": {
-    "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/symfony": "*",
     "spryker/testify": "*"
   },
   "description": "Config bundle",
diff --git a/Bundles/Config/src/Spryker/Shared/Config/Application/Environment.php b/Bundles/Config/src/Spryker/Shared/Config/Application/Environment.php
new file mode 100644
index 0000000..809e587
--- /dev/null
+++ b/Bundles/Config/src/Spryker/Shared/Config/Application/Environment.php
@@ -0,0 +1,185 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Config\Application;
+
+use Exception;
+use Spryker\Shared\Kernel\Store;
+
+class Environment
+{
+
+    /**
+     * @return void
+     */
+    public static function initialize()
+    {
+        date_default_timezone_set('UTC');
+
+        static::defineEnvironment();
+        static::defineStore();
+        static::defineApplication();
+        static::defineApplicationRootDir();
+        static::defineApplicationSourceDir();
+        static::defineApplicationStaticDir();
+        static::defineApplicationVendorDir();
+        static::defineApplicationDataDir();
+
+        $store = Store::getInstance();
+        $locale = current($store->getLocales());
+
+        self::initializeLocale($locale);
+        mb_internal_encoding('UTF-8');
+        mb_regex_encoding('UTF-8');
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineEnvironment()
+    {
+        if (!defined('APPLICATION_ENV')) {
+            $env = getenv('APPLICATION_ENV');
+            if (!$env) {
+                if (file_exists(APPLICATION_ROOT_DIR . '/config/Shared/console_env_local.php')) {
+                    $env = require APPLICATION_ROOT_DIR . '/config/Shared/console_env_local.php';
+                }
+            }
+            if (!$env) {
+                echo 'Environment variable APPLICATION_ENV must be set. You can do this by adding e.g. APPLICATION_ENV=development in front of this command or by adding a file "config/Shared/console_env_local.php" containing the current environment.';
+                exit(1);
+            }
+            define('APPLICATION_ENV', $env);
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineStore()
+    {
+        if (!defined('APPLICATION_STORE')) {
+            $store = getenv('APPLICATION_STORE');
+            if (!$store) {
+                if (file_exists(APPLICATION_ROOT_DIR . '/config/Shared/default_store.php')) {
+                    $store = require APPLICATION_ROOT_DIR . '/config/Shared/default_store.php';
+                }
+            }
+            if (!$store) {
+                echo 'Environment variable APPLICATION_STORE must be set. You can do this by adding e.g. APPLICATION_STORE=DE in front of this command or by adding a file "config/Shared/default_store.php" containing the current store.';
+                exit(1);
+            }
+            define('APPLICATION_STORE', $store);
+        }
+    }
+
+    /**
+     * @throws \Exception
+     *
+     * @return void
+     */
+    protected static function defineApplication()
+    {
+        if (!defined('APPLICATION')) {
+            if (!getenv('APPLICATION')) {
+                throw new Exception('Can not get APPLICATION environment variable');
+            }
+            define('APPLICATION', getenv('APPLICATION'));
+        }
+    }
+
+    /**
+     * @throws \Exception
+     *
+     * @return void
+     */
+    protected static function defineApplicationRootDir()
+    {
+        if (!defined('APPLICATION_ROOT_DIR')) {
+            if (!getenv('APPLICATION_ROOT_DIR')) {
+                throw new Exception('Can not get APPLICATION_ROOT_DIR environment variable');
+            }
+            define('APPLICATION_ROOT_DIR', getenv('APPLICATION_ROOT_DIR'));
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineApplicationSourceDir()
+    {
+        if (!defined('APPLICATION_SOURCE_DIR')) {
+            if (!getenv('APPLICATION_SOURCE_DIR')) {
+                define('APPLICATION_SOURCE_DIR', APPLICATION_ROOT_DIR . '/src');
+            } else {
+                define('APPLICATION_SOURCE_DIR', getenv('APPLICATION_SOURCE_DIR'));
+            }
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineApplicationStaticDir()
+    {
+        if (!defined('APPLICATION_STATIC_DIR')) {
+            if (!getenv('APPLICATION_STATIC_DIR')) {
+                define('APPLICATION_STATIC_DIR', APPLICATION_ROOT_DIR . '/static');
+            } else {
+                define('APPLICATION_STATIC_DIR', getenv('APPLICATION_STATIC_DIR'));
+            }
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineApplicationVendorDir()
+    {
+        if (!defined('APPLICATION_VENDOR_DIR')) {
+            if (!getenv('APPLICATION_VENDOR_DIR')) {
+                define('APPLICATION_VENDOR_DIR', APPLICATION_ROOT_DIR . '/vendor');
+            } else {
+                define('APPLICATION_VENDOR_DIR', getenv('APPLICATION_VENDOR_DIR'));
+            }
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected static function defineApplicationDataDir()
+    {
+        if (!defined('APPLICATION_DATA')) {
+            if (!getenv('APPLICATION_DATA')) {
+                define('APPLICATION_DATA', APPLICATION_ROOT_DIR . '/data');
+            } else {
+                define('APPLICATION_DATA', getenv('APPLICATION_DATA'));
+            }
+        }
+    }
+
+    /**
+     * We set LC_NUMERIC hard to en_US so numeric conversion is always the same to avoid decimal point problems
+     *
+     * @param string $currentLocale
+     *
+     * @return void
+     */
+    public static function initializeLocale($currentLocale)
+    {
+        $locale = $currentLocale . '.UTF-8';
+
+        setlocale(LC_COLLATE, $locale, $currentLocale);
+        setlocale(LC_CTYPE, $locale, $currentLocale);
+        setlocale(LC_MONETARY, $locale, $currentLocale);
+        setlocale(LC_TIME, $locale, $currentLocale);
+        setlocale(LC_MESSAGES, $locale, $currentLocale);
+        setlocale(LC_NUMERIC, 'en_US.UTF-8', 'en_US');
+    }
+
+}
diff --git a/Bundles/Config/src/Spryker/Shared/Config/Config.php b/Bundles/Config/src/Spryker/Shared/Config/Config.php
index 3c7a628..5e2ed32 100644
--- a/Bundles/Config/src/Spryker/Shared/Config/Config.php
+++ b/Bundles/Config/src/Spryker/Shared/Config/Config.php
@@ -10,7 +10,6 @@ namespace Spryker\Shared\Config;
 use ArrayObject;
 use Exception;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Environment;
 
 class Config
 {
diff --git a/Bundles/Config/src/Spryker/Shared/Config/Environment.php b/Bundles/Config/src/Spryker/Shared/Config/Environment.php
new file mode 100644
index 0000000..73d1a78
--- /dev/null
+++ b/Bundles/Config/src/Spryker/Shared/Config/Environment.php
@@ -0,0 +1,124 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Config;
+
+class Environment
+{
+
+    const DEFAULT_ENVIRONMENT = 'production';
+
+    const PRODUCTION = 'production';
+    const STAGING = 'staging';
+    const DEVELOPMENT = 'development';
+    const TESTING = 'devtest';
+
+    /**
+     * @var string
+     */
+    protected static $environment = APPLICATION_ENV;
+
+    /**
+     * @var self
+     */
+    protected static $instance;
+
+    /**
+     * @return $this
+     */
+    public static function getInstance()
+    {
+        if (!self::$instance) {
+            self::$instance = new self();
+        }
+
+        return self::$instance;
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isProduction()
+    {
+        return (self::$environment === self::PRODUCTION);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isNotProduction()
+    {
+        return (self::$environment !== self::PRODUCTION);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isStaging()
+    {
+        return (self::$environment === self::STAGING);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isNotStaging()
+    {
+        return (self::$environment !== self::STAGING);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isDevelopment()
+    {
+        return (self::$environment === self::DEVELOPMENT);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isNotDevelopment()
+    {
+        return (self::$environment !== self::DEVELOPMENT);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isTesting()
+    {
+        return (self::$environment === self::TESTING);
+    }
+
+    /**
+     * @return bool
+     */
+    public static function isNotTesting()
+    {
+        return (self::$environment !== self::TESTING);
+    }
+
+    /**
+     * @return string
+     */
+    public static function getEnvironment()
+    {
+        return self::$environment;
+    }
+
+    /**
+     * @param string $environment
+     *
+     * @return string
+     */
+    public static function setEnvironment($environment)
+    {
+        self::$environment = $environment;
+    }
+
+}
diff --git a/Bundles/Console/composer.json b/Bundles/Console/composer.json
index 1a537dc..57f1285 100644
--- a/Bundles/Console/composer.json
+++ b/Bundles/Console/composer.json
@@ -6,10 +6,9 @@
     }
   },
   "require": {
+    "spryker/config": "^2.0.0",
+    "spryker/error-handler": "^1.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
-    "spryker/new-relic": "^2.1.0",
     "spryker/propel": "^2.0.0",
     "spryker/silex": "^2.0.0",
     "symfony/console": "^2.6.13 || ^3.0.0"
@@ -17,6 +16,7 @@
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/log": "^2.0.0",
+    "spryker/propel-orm": "*",
     "spryker/testify": "*"
   },
   "suggest": {
diff --git a/Bundles/Console/dependency.json b/Bundles/Console/dependency.json
index 861fe53..3f09c80 100644
--- a/Bundles/Console/dependency.json
+++ b/Bundles/Console/dependency.json
@@ -3,7 +3,6 @@
   "include": {
   },
   "exclude": {
-    "Symfony": "Now directly using symfony/console",
-    "Log": "Required by optional ConsoleLogPlugin"
+    "Symfony": "Now directly using symfony/console"
   }
 }
diff --git a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Console.php b/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Console.php
deleted file mode 100644
index e4a4338..0000000
--- a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Console.php
+++ /dev/null
@@ -1,270 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Console\Business\Model;
-
-use Silex\Application;
-use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
-use Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver;
-use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
-use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-use Symfony\Component\Console\Command\Command as SymfonyCommand;
-use Symfony\Component\Console\Input\ArrayInput;
-use Symfony\Component\Console\Input\InputInterface;
-use Symfony\Component\Console\Output\OutputInterface;
-
-/**
- * @method \Spryker\Zed\Console\Communication\ConsoleBootstrap getApplication()
- */
-class Console extends SymfonyCommand
-{
-
-    use Helper;
-
-    const CODE_SUCCESS = 0;
-    const CODE_ERROR = 1;
-
-    /**
-     * @var \Symfony\Component\Console\Input\InputInterface
-     */
-    protected $input;
-
-    /**
-     * @var \Symfony\Component\Console\Output\OutputInterface
-     */
-    protected $output;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    private $factory;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    private $facade;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Container
-     */
-    private $container;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
-     */
-    private $queryContainer;
-
-    /**
-     * @var \Psr\Log\LoggerInterface
-     */
-    protected $messenger;
-
-    /**
-     * @var int
-     */
-    private $exitCode = self::CODE_SUCCESS;
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return $this
-     */
-    public function setExternalDependencies(Container $container)
-    {
-        $this->container = $container;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    protected function getContainer()
-    {
-        return $this->container;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory $factory
-     *
-     * @return $this
-     */
-    public function setFactory(AbstractCommunicationFactory $factory)
-    {
-        $this->factory = $factory;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    protected function getFactory()
-    {
-        if ($this->factory === null) {
-            $this->factory = $this->resolveFactory();
-        }
-
-        if ($this->container !== null) {
-            $this->factory->setContainer($this->container);
-        }
-
-        if ($this->queryContainer !== null) {
-            $this->factory->setQueryContainer($this->queryContainer);
-        }
-
-        return $this->factory;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
-     */
-    private function resolveFactory()
-    {
-        return $this->getFactoryResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver
-     */
-    private function getFactoryResolver()
-    {
-        return new FactoryResolver();
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Business\AbstractFacade $facade
-     *
-     * @return void
-     */
-    public function setFacade(AbstractFacade $facade)
-    {
-        $this->facade = $facade;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    protected function getFacade()
-    {
-        return $this->resolveFacade();
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
-     */
-    private function resolveFacade()
-    {
-        return $this->getFacadeResolver()->resolve($this);
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver
-     */
-    private function getFacadeResolver()
-    {
-        return new FacadeResolver();
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer $queryContainer
-     *
-     * @return $this
-     */
-    public function setQueryContainer(AbstractQueryContainer $queryContainer)
-    {
-        $this->queryContainer = $queryContainer;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
-     */
-    protected function getQueryContainer()
-    {
-        return $this->queryContainer;
-    }
-
-    /**
-     * @param \Symfony\Component\Console\Input\InputInterface $input
-     * @param \Symfony\Component\Console\Output\OutputInterface $output
-     *
-     * @return void
-     */
-    protected function initialize(InputInterface $input, OutputInterface $output)
-    {
-        $this->input = $input;
-        $this->output = $output;
-
-        $propelService = new PropelServiceProvider();
-        $propelService->boot(new Application());
-    }
-
-    /**
-     * @param string $command
-     * @param array $arguments
-     *
-     * @return int
-     */
-    protected function runDependingCommand($command, array $arguments = [])
-    {
-        $command = $this->getApplication()->find($command);
-        $arguments['command'] = $command->getName();
-        $input = new ArrayInput($arguments);
-
-        $exitCode = $command->run($input, $this->output);
-
-        $this->setExitCode($exitCode);
-
-        return $exitCode;
-    }
-
-    /**
-     * @param int $exitCode
-     *
-     * @return $this
-     */
-    private function setExitCode($exitCode)
-    {
-        $this->exitCode = $exitCode;
-
-        return $this;
-    }
-
-    /**
-     * @return bool
-     */
-    protected function hasError()
-    {
-        return $this->exitCode !== self::CODE_SUCCESS;
-    }
-
-    /**
-     * @return int
-     */
-    protected function getLastExitCode()
-    {
-        return $this->exitCode;
-    }
-
-    /**
-     * @return \Spryker\Zed\Messenger\Business\Model\MessengerInterface
-     */
-    protected function getMessenger()
-    {
-        if ($this->messenger === null) {
-            $this->messenger = new ConsoleMessenger($this->output);
-        }
-
-        return $this->messenger;
-    }
-
-}
diff --git a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/ConsoleMessenger.php b/Bundles/Console/src/Spryker/Zed/Console/Business/Model/ConsoleMessenger.php
deleted file mode 100644
index 920440c..0000000
--- a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/ConsoleMessenger.php
+++ /dev/null
@@ -1,15 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Console\Business\Model;
-
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-use Symfony\Component\Console\Logger\ConsoleLogger;
-
-class ConsoleMessenger extends ConsoleLogger implements MessengerInterface
-{
-}
diff --git a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Environment.php b/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Environment.php
index 3bd30c8..fff92d9 100644
--- a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Environment.php
+++ b/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Environment.php
@@ -7,7 +7,8 @@
 
 namespace Spryker\Zed\Console\Business\Model;
 
-use Spryker\Shared\Library\Application\Environment as SprykerEnvironment;
+use Spryker\Shared\Config\Application\Environment as SprykerEnvironment;
+use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
 
 class Environment
 {
@@ -29,7 +30,10 @@ class Environment
         defined('SYSTEM_UNDER_TEST')
             || define('SYSTEM_UNDER_TEST', false);
 
-        SprykerEnvironment::initialize(APPLICATION, true);
+        SprykerEnvironment::initialize();
+
+        $errorHandlerEnvironment = new ErrorHandlerEnvironment();
+        $errorHandlerEnvironment->initialize();
     }
 
 }
diff --git a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Helper.php b/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Helper.php
deleted file mode 100644
index 39fc316..0000000
--- a/Bundles/Console/src/Spryker/Zed/Console/Business/Model/Helper.php
+++ /dev/null
@@ -1,229 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Console\Business\Model;
-
-use RuntimeException;
-use Symfony\Component\Console\Formatter\OutputFormatterStyle;
-use Symfony\Component\Console\Output\OutputInterface;
-
-trait Helper
-{
-
-    /**
-     * @param string $message
-     * @param bool $wrapInInfoTags
-     *
-     * @return void
-     */
-    public function info($message, $wrapInInfoTags = true)
-    {
-        if (is_array($message)) {
-            $message = implode(PHP_EOL, $message);
-        }
-        if ($wrapInInfoTags) {
-            $message = '<info>' . $message . '</info>';
-        }
-        $this->output->writeln($message);
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return void
-     */
-    public function error($message)
-    {
-        $width = $this->getApplication()->getTerminalDimensions()[0];
-        $width = ($width) ?: 200;
-        $width -= strlen($message);
-        $width = max(0, $width);
-        $subOne = false;
-        if ($width % 2 !== 0) {
-            $width += 1;
-            $subOne = true;
-        }
-        $halfWidth = $width / 2;
-        $message = str_repeat(' ', $halfWidth) . $message;
-        if ($subOne) {
-            $halfWidth -= 1;
-        }
-        $message .= str_repeat(' ', $halfWidth);
-        $message = '<error>' . $message . '</error>';
-
-        $this->output->writeln('<error>' . str_repeat(' ', $width + strlen($message)) . '</error>');
-        $this->output->writeln($message);
-        $this->output->writeln('<error>' . str_repeat(' ', $width + strlen($message)) . '</error>');
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return void
-     */
-    public function warning($message)
-    {
-        $width = $this->getApplication()->getTerminalDimensions()[0];
-        $width = ($width) ?: 200;
-        $width -= strlen($message);
-        $subOne = false;
-        if ($width % 2 !== 0) {
-            $width += 1;
-            $subOne = true;
-        }
-        $halfWidth = $width / 2;
-        $message = str_repeat(' ', $halfWidth) . $message;
-        if ($subOne) {
-            $halfWidth -= 1;
-        }
-        $message .= str_repeat(' ', $halfWidth);
-        $message = '<warning>' . $message . '</warning>';
-
-        $style = new OutputFormatterStyle('black', 'yellow');
-        $this->output->getFormatter()->setStyle('warning', $style);
-
-        $this->output->writeln('<warning>' . str_repeat(' ', $width + strlen($message)) . '</warning>');
-        $this->output->writeln($message);
-        $this->output->writeln('<warning>' . str_repeat(' ', $width + strlen($message)) . '</warning>');
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return void
-     */
-    public function success($message)
-    {
-        $width = $this->getApplication()->getTerminalDimensions()[0];
-        $width = ($width) ?: 200;
-        $width -= strlen($message);
-        $subOne = false;
-        if ($width % 2 !== 0) {
-            $width += 1;
-            $subOne = true;
-        }
-        $halfWidth = $width / 2;
-        $message = str_repeat(' ', $halfWidth) . $message;
-        if ($subOne) {
-            $halfWidth -= 1;
-        }
-        $message .= str_repeat(' ', $halfWidth);
-        $message = '<success>' . $message . '</success>';
-
-        $style = new OutputFormatterStyle('black', 'green');
-        $this->output->getFormatter()->setStyle('success', $style);
-
-        $this->output->writeln('<success>' . str_repeat(' ', $width + strlen($message)) . '</success>');
-        $this->output->writeln($message);
-        $this->output->writeln('<success>' . str_repeat(' ', $width + strlen($message)) . '</success>');
-    }
-
-    /**
-     * @param string $question
-     *
-     * @return bool
-     */
-    public function askConfirmation($question)
-    {
-        $question = $question . '? <fg=green>[yes|no|abort]</fg=green> ';
-
-        $result = $this->askAbortableConfirmation($this->output, $question, false);
-
-        return $result;
-    }
-
-    /**
-     * Asks a confirmation to the user.
-     *
-     * The question will be asked until the user answers by yes, or no.
-     * If he answers nothing, it will use the default value. If he answers abort,
-     * it will throw a RuntimeException.
-     *
-     * @param \Symfony\Component\Console\Output\OutputInterface $output An Output instance
-     * @param string $question The question to ask
-     * @param bool $default The default answer if the user enters nothing
-     *
-     * @throws \RuntimeException
-     *
-     * @return bool true if the user has confirmed, false otherwise
-     */
-    public function askAbortableConfirmation(OutputInterface $output, $question, $default = true)
-    {
-        $answer = 'z';
-        while ($answer && !in_array(strtolower($answer[0]), ['y', 'n', 'a'])) {
-            $answer = $this->ask($question, $default);
-        }
-
-        if (strtolower($answer[0]) === 'a') {
-            throw new RuntimeException('Aborted');
-        }
-
-        if ($default === false) {
-            return $answer && strtolower($answer[0]) === 'y';
-        }
-
-        return !$answer || strtolower($answer[0]) === 'y';
-    }
-
-    /**
-     * @param string $question
-     * @param string|null $default
-     *
-     * @return string|null
-     */
-    public function ask($question, $default = null)
-    {
-        /** @var \Symfony\Component\Console\Helper\DialogHelper $dialog */
-        $dialog = $this->getHelperSet()->get('dialog');
-
-        return $dialog->ask($this->output, $question, $default);
-    }
-
-    /**
-     * @param string $question
-     * @param array $options
-     * @param string $default
-     *
-     * @return mixed
-     */
-    public function select($question, array $options, $default)
-    {
-        /** @var \Symfony\Component\Console\Helper\DialogHelper $dialog */
-        $dialog = $this->getHelperSet()->get('dialog');
-        $selected = $dialog->select(
-            $this->output,
-            $question,
-            $options,
-            $default
-        );
-
-        return $options[$selected];
-    }
-
-    /**
-     * @param bool $wrapInInfoTags
-     *
-     * @return void
-     */
-    public function printLineSeparator($wrapInInfoTags = true)
-    {
-        $width = $this->getApplication()->getTerminalDimensions()[0];
-        $width = ($width) ?: 200;
-        $this->info(str_repeat('-', $width), $wrapInInfoTags);
-    }
-
-    /**
-     * @return \Silex\Application
-     */
-    abstract protected function getApplication();
-
-    /**
-     * @return \Symfony\Component\Console\Helper\HelperSet
-     */
-    abstract protected function getHelperSet();
-
-}
diff --git a/Bundles/Console/src/Spryker/Zed/Console/Communication/ConsoleBootstrap.php b/Bundles/Console/src/Spryker/Zed/Console/Communication/ConsoleBootstrap.php
index 4a35091..043252b 100644
--- a/Bundles/Console/src/Spryker/Zed/Console/Communication/ConsoleBootstrap.php
+++ b/Bundles/Console/src/Spryker/Zed/Console/Communication/ConsoleBootstrap.php
@@ -7,8 +7,10 @@
 
 namespace Spryker\Zed\Console\Communication;
 
+use Silex\Application as SilexApplication;
 use Spryker\Zed\Console\Business\Model\Environment;
 use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
+use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 use Symfony\Component\Console\Application;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
@@ -32,8 +34,10 @@ class ConsoleBootstrap extends Application
 
         parent::__construct($name, $version);
         $this->setCatchExceptions(false);
-
         $this->addEventDispatcher();
+
+        $propelService = new PropelServiceProvider();
+        $propelService->boot(new SilexApplication());
     }
 
     /**
diff --git a/Bundles/Console/src/Spryker/Zed/Console/ConsoleDependencyProvider.php b/Bundles/Console/src/Spryker/Zed/Console/ConsoleDependencyProvider.php
index f952a32..b176fed 100644
--- a/Bundles/Console/src/Spryker/Zed/Console/ConsoleDependencyProvider.php
+++ b/Bundles/Console/src/Spryker/Zed/Console/ConsoleDependencyProvider.php
@@ -9,7 +9,6 @@ namespace Spryker\Zed\Console;
 
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\NewRelic\Communication\Plugin\NewRelicConsolePlugin;
 
 class ConsoleDependencyProvider extends AbstractBundleDependencyProvider
 {
@@ -75,20 +74,7 @@ class ConsoleDependencyProvider extends AbstractBundleDependencyProvider
      */
     protected function getEventSubscriber(Container $container)
     {
-        return [
-            $this->createNewRelicConsolePlugin()
-        ];
-    }
-
-    /**
-     * @deprecated This will be removed with next major. If you want to use the NewRelic feature add plugin to
-     * projects ConsoleDependencyProvider.
-     *
-     * @return \Spryker\Zed\NewRelic\Communication\Plugin\NewRelicConsolePlugin
-     */
-    private function createNewRelicConsolePlugin()
-    {
-        return new NewRelicConsolePlugin();
+        return [];
     }
 
 }
diff --git a/Bundles/Console/tests/Unit/Spryker/Zed/Console/Business/Model/Fixtures/ConsoleMock.php b/Bundles/Console/tests/Unit/Spryker/Zed/Console/Business/Model/Fixtures/ConsoleMock.php
index 9470961..cebb554 100644
--- a/Bundles/Console/tests/Unit/Spryker/Zed/Console/Business/Model/Fixtures/ConsoleMock.php
+++ b/Bundles/Console/tests/Unit/Spryker/Zed/Console/Business/Model/Fixtures/ConsoleMock.php
@@ -9,7 +9,7 @@ namespace Unit\Spryker\Zed\Console\Business\Model\Fixtures;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
 use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
 use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 
 class ConsoleMock extends Console
 {
diff --git a/Bundles/Country/composer.json b/Bundles/Country/composer.json
index 5eb58b7..16b5668 100644
--- a/Bundles/Country/composer.json
+++ b/Bundles/Country/composer.json
@@ -6,18 +6,20 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/gui": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/log": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
-    "spryker/user": "^2.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/log": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer."
+  },
   "description": "Country bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryBusinessFactory.php b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryBusinessFactory.php
index 819c948..27b9ba0 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryBusinessFactory.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryBusinessFactory.php
@@ -10,7 +10,6 @@ namespace Spryker\Zed\Country\Business;
 use Spryker\Zed\Country\Business\Cldr\JsonFileCldrDataProvider;
 use Spryker\Zed\Country\Business\Internal\Install;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Country\CountryConfig getConfig()
@@ -20,11 +19,9 @@ class CountryBusinessFactory extends AbstractBusinessFactory
 {
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return \Spryker\Zed\Country\Business\Internal\Install
      */
-    public function createInstaller(MessengerInterface $messenger)
+    public function createInstaller()
     {
         $installer = new Install(
             $this->createCountryManager(),
@@ -41,8 +38,6 @@ class CountryBusinessFactory extends AbstractBusinessFactory
             $this->getConfig()
         );
 
-        $installer->setMessenger($messenger);
-
         return $installer;
     }
 
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacade.php b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacade.php
index fe25a0a..0452255 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacade.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacade.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Country\Business;
 
-use Psr\Log\LoggerInterface;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
 
 /**
@@ -19,13 +18,11 @@ class CountryFacade extends AbstractFacade implements CountryFacadeInterface
     /**
      * @api
      *
-     * @param \Psr\Log\LoggerInterface $messenger
-     *
      * @return void
      */
-    public function install(LoggerInterface $messenger)
+    public function install()
     {
-        $this->getFactory()->createInstaller($messenger)->install();
+        $this->getFactory()->createInstaller()->install();
     }
 
     /**
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacadeInterface.php b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacadeInterface.php
index 7acb293..72f39ac 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacadeInterface.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Business/CountryFacadeInterface.php
@@ -7,19 +7,15 @@
 
 namespace Spryker\Zed\Country\Business;
 
-use Psr\Log\LoggerInterface;
-
 interface CountryFacadeInterface
 {
 
     /**
      * @api
      *
-     * @param \Psr\Log\LoggerInterface $messenger
-     *
      * @return void
      */
-    public function install(LoggerInterface $messenger);
+    public function install();
 
     /**
      * @api
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/Install.php b/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/Install.php
index 1c00ec6..d964120 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/Install.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/Install.php
@@ -12,9 +12,8 @@ use Spryker\Zed\Country\Business\Cldr\CldrDataProviderInterface;
 use Spryker\Zed\Country\Business\CountryManagerInterface;
 use Spryker\Zed\Country\Business\RegionManagerInterface;
 use Spryker\Zed\Country\CountryConfig;
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 
-class Install extends AbstractInstaller
+class Install implements InstallInterface
 {
 
     /**
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/InstallInterface.php b/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/InstallInterface.php
new file mode 100644
index 0000000..6bc8b25
--- /dev/null
+++ b/Bundles/Country/src/Spryker/Zed/Country/Business/Internal/InstallInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Country\Business\Internal;
+
+interface InstallInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install();
+
+}
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Communication/Controller/IndexController.php b/Bundles/Country/src/Spryker/Zed/Country/Communication/Controller/IndexController.php
index 900b726..f1c545e 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Communication/Controller/IndexController.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Country\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 class IndexController extends AbstractController
 {
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Communication/CountryCommunicationFactory.php b/Bundles/Country/src/Spryker/Zed/Country/Communication/CountryCommunicationFactory.php
index 6b1c48a..3cb163b 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/Communication/CountryCommunicationFactory.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/Communication/CountryCommunicationFactory.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Country\Communication;
 
 use Spryker\Zed\Country\Communication\Table\CountryTable;
-use Spryker\Zed\Country\CountryDependencyProvider;
 use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
 
 /**
@@ -28,12 +27,4 @@ class CountryCommunicationFactory extends AbstractCommunicationFactory
         return new CountryTable($countryQuery);
     }
 
-    /**
-     * @return \Spryker\Zed\User\Persistence\UserQueryContainerInterface
-     */
-    protected function getUserQueryContainer()
-    {
-        return $this->getProvidedDependency(CountryDependencyProvider::QUERY_CONTAINER_USER);
-    }
-
 }
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/CountryInstallerPlugin.php b/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/CountryInstallerPlugin.php
new file mode 100644
index 0000000..973581c
--- /dev/null
+++ b/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/CountryInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Country\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Country\Communication\CountryCommunicationFactory getFactory()
+ * @method \Spryker\Zed\Country\Business\CountryFacade getFacade()
+ */
+class CountryInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/Installer.php b/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/Installer.php
deleted file mode 100644
index a9e8014..0000000
--- a/Bundles/Country/src/Spryker/Zed/Country/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Country\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Country\Communication\CountryCommunicationFactory getFactory()
- * @method \Spryker\Zed\Country\Business\CountryFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install($this->messenger);
-    }
-
-}
diff --git a/Bundles/Country/src/Spryker/Zed/Country/CountryDependencyProvider.php b/Bundles/Country/src/Spryker/Zed/Country/CountryDependencyProvider.php
index 85f3d18..9cdf00d 100644
--- a/Bundles/Country/src/Spryker/Zed/Country/CountryDependencyProvider.php
+++ b/Bundles/Country/src/Spryker/Zed/Country/CountryDependencyProvider.php
@@ -8,25 +8,7 @@
 namespace Spryker\Zed\Country;
 
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
-use Spryker\Zed\Kernel\Container;
 
 class CountryDependencyProvider extends AbstractBundleDependencyProvider
 {
-
-    const QUERY_CONTAINER_USER = 'QUERY_CONTAINER_USER';
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    public function provideCommunicationLayerDependencies(Container $container)
-    {
-        $container[self::QUERY_CONTAINER_USER] = function (Container $container) {
-            return $container->getLocator()->user()->queryContainer();
-        };
-
-        return $container;
-    }
-
 }
diff --git a/Bundles/Country/tests/Functional/Spryker/Zed/Country/CountryFacadeTest.php b/Bundles/Country/tests/Functional/Spryker/Zed/Country/CountryFacadeTest.php
index 2fdbcc3..e191199 100644
--- a/Bundles/Country/tests/Functional/Spryker/Zed/Country/CountryFacadeTest.php
+++ b/Bundles/Country/tests/Functional/Spryker/Zed/Country/CountryFacadeTest.php
@@ -9,9 +9,9 @@ namespace Functional\Spryker\Zed\Country;
 
 use Codeception\TestCase\Test;
 use Orm\Zed\Country\Persistence\SpyCountry;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Country\Business\CountryFacade;
 use Spryker\Zed\Country\Persistence\CountryQueryContainer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @group Functional
@@ -47,11 +47,11 @@ class CountryFacadeTest extends Test
     }
 
     /**
-     * @return \Spryker\Zed\Messenger\Business\Model\MessengerInterface
+     * @return \Psr\Log\LoggerInterface
      */
     protected function getMockLogger()
     {
-        return $this->getMockBuilder(MessengerInterface::class)->getMock();
+        return $this->getMockBuilder(LoggerInterface::class)->getMock();
     }
 
     /**
diff --git a/Bundles/Currency/composer.json b/Bundles/Currency/composer.json
index 36bb29b..344cdd5 100644
--- a/Bundles/Currency/composer.json
+++ b/Bundles/Currency/composer.json
@@ -2,15 +2,20 @@
   "name": "spryker/currency",
   "require": {
     "spryker/kernel": "^2.0.0",
-    "spryker/silex": "^2.0.0",
-    "spryker/symfony": "^2.1.3",
-    "spryker/transfer": "^2.0.0",
-    "spryker/twig": "^2.0.0"
+    "spryker/symfony": "^2.1.3"
   },
   "require-dev": {
-    "spryker/application": "^2.0.0",
     "spryker/code-sniffer": "*",
-    "spryker/testify": "*"
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
+    "spryker/testify": "*",
+    "spryker/transfer": "*",
+    "spryker/twig": "*"
+  },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex.",
+    "spryker/twig": "If you want to use Currency in Twig you need to install spryker/twig."
   },
   "description": "Currency bundle",
   "license": "proprietary",
diff --git a/Bundles/Currency/dependency.json b/Bundles/Currency/dependency.json
deleted file mode 100644
index 695ea6a..0000000
--- a/Bundles/Currency/dependency.json
+++ /dev/null
@@ -1,9 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "Transfer": "Required by transfer XML"
-  },
-  "exclude": {
-    "Application": "Required by tests"
-  }
-}
diff --git a/Bundles/Currency/tests/Functional/Spryker/Zed/Currency/Communication/Plugin/ServiceProvider/TwigCurrencyServiceProviderTest.php b/Bundles/Currency/tests/Functional/Spryker/Zed/Currency/Communication/Plugin/ServiceProvider/TwigCurrencyServiceProviderTest.php
index 080e112..9363220 100644
--- a/Bundles/Currency/tests/Functional/Spryker/Zed/Currency/Communication/Plugin/ServiceProvider/TwigCurrencyServiceProviderTest.php
+++ b/Bundles/Currency/tests/Functional/Spryker/Zed/Currency/Communication/Plugin/ServiceProvider/TwigCurrencyServiceProviderTest.php
@@ -8,7 +8,7 @@
 namespace Functional\Spryker\Zed\Currency\Communication\Plugin\ServiceProvider;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Application\Communication\Application;
+use Spryker\Shared\Kernel\Communication\Application;
 use Spryker\Shared\Kernel\Store;
 use Spryker\Zed\Currency\Communication\Plugin\ServiceProvider\TwigCurrencyServiceProvider;
 use Twig_Environment;
@@ -33,7 +33,7 @@ class TwigCurrencyServiceProviderTest extends PHPUnit_Framework_TestCase
     protected static $twigServiceProvider;
 
     /**
-     * @var \Spryker\Shared\Application\Communication\Application
+     * @var \Spryker\Shared\Kernel\Communication\Application
      */
     protected static $application;
 
@@ -102,7 +102,7 @@ class TwigCurrencyServiceProviderTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \Spryker\Shared\Application\Communication\Application
+     * @return \Spryker\Shared\Kernel\Communication\Application
      */
     protected static function getApplication()
     {
diff --git a/Bundles/Customer/composer.json b/Bundles/Customer/composer.json
index 8fc2c99..6e3357b 100644
--- a/Bundles/Customer/composer.json
+++ b/Bundles/Customer/composer.json
@@ -9,27 +9,32 @@
     }
   },
   "require": {
-    "spryker/application": "^2.4.4",
-    "spryker/checkout": "^2.0.0",
     "spryker/country": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.8.0",
-    "spryker/library": "^2.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/mail": "^3.0.0",
-    "spryker/propel": "^2.1.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sequence-number": "^2.0.0",
     "spryker/session": "^2.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0",
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
-    "spryker/assertion": "^2.0.0",
+    "spryker/application": "*",
+    "spryker/assertion": "*",
     "spryker/code-sniffer": "*",
-    "spryker/config": "^2.1.0",
-    "spryker/console": "^2.0.1",
-    "spryker/testify": "*"
+    "spryker/config": "*",
+    "spryker/console": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
+    "spryker/testify": "*",
+    "spryker/twig": "*"
+  },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
   },
   "description": "Customer bundle",
   "license": "proprietary",
diff --git a/Bundles/Customer/src/Spryker/Shared/Customer/CustomerConstants.php b/Bundles/Customer/src/Spryker/Shared/Customer/CustomerConstants.php
index d3406db..38d3b4c 100644
--- a/Bundles/Customer/src/Spryker/Shared/Customer/CustomerConstants.php
+++ b/Bundles/Customer/src/Spryker/Shared/Customer/CustomerConstants.php
@@ -7,15 +7,13 @@
 
 namespace Spryker\Shared\Customer;
 
-use Spryker\Shared\Application\ApplicationConstants;
-
 interface CustomerConstants
 {
 
     const CUSTOMER_ANONYMOUS_PATTERN = 'CUSTOMER_ANONYMOUS_PATTERN';
     const CUSTOMER_SECURED_PATTERN = 'CUSTOMER_SECURED_PATTERN';
 
-    const HOST_YVES = ApplicationConstants::HOST_YVES;
+    const HOST_YVES = 'HOST_YVES';
 
     const NAME_CUSTOMER_REFERENCE = 'CustomerReference';
 
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Business/Customer/Customer.php b/Bundles/Customer/src/Spryker/Zed/Customer/Business/Customer/Customer.php
index 83e29f1..e283c8d 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Business/Customer/Customer.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Business/Customer/Customer.php
@@ -17,6 +17,7 @@ use Generated\Shared\Transfer\MailTransfer;
 use Orm\Zed\Customer\Persistence\SpyCustomer;
 use Orm\Zed\Customer\Persistence\SpyCustomerAddress;
 use Propel\Runtime\Collection\ObjectCollection;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Shared\Customer\Code\Messages;
 use Spryker\Shared\Kernel\Store;
 use Spryker\Zed\Customer\Business\Exception\CustomerNotFoundException;
@@ -27,7 +28,6 @@ use Spryker\Zed\Customer\Communication\Plugin\Mail\CustomerRestorePasswordMailTy
 use Spryker\Zed\Customer\CustomerConfig;
 use Spryker\Zed\Customer\Dependency\Facade\CustomerToMailInterface;
 use Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface;
-use Spryker\Zed\Library\Generator\StringGenerator;
 use Spryker\Zed\Locale\Persistence\LocaleQueryContainerInterface;
 use Symfony\Component\Security\Core\Encoder\BCryptPasswordEncoder;
 
@@ -182,9 +182,9 @@ class Customer
      */
     protected function generateKey()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator->generateRandomString();
+        return $utilTextService->generateRandomString(32);
     }
 
     /**
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Business/Model/PreConditionChecker.php b/Bundles/Customer/src/Spryker/Zed/Customer/Business/Model/PreConditionChecker.php
index cb713f6..2aedfc0 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Business/Model/PreConditionChecker.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Business/Model/PreConditionChecker.php
@@ -10,8 +10,8 @@ namespace Spryker\Zed\Customer\Business\Model;
 use Generated\Shared\Transfer\CheckoutErrorTransfer;
 use Generated\Shared\Transfer\CheckoutResponseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Shared\Checkout\CheckoutConstants;
 use Spryker\Zed\Customer\Business\Customer\Customer;
+use Spryker\Zed\Customer\CustomerConfig;
 
 class PreConditionChecker implements PreConditionCheckerInterface
 {
@@ -48,7 +48,7 @@ class PreConditionChecker implements PreConditionCheckerInterface
         if ($this->customer->hasEmail($quoteTransfer->getCustomer()->getEmail())) {
             $checkoutErrorTransfer = $this->createCheckoutErrorTransfer();
             $checkoutErrorTransfer
-                ->setErrorCode(CheckoutConstants::ERROR_CODE_CUSTOMER_ALREADY_REGISTERED)
+                ->setErrorCode(CustomerConfig::ERROR_CODE_CUSTOMER_ALREADY_REGISTERED)
                 ->setMessage('Email already taken');
 
             $checkoutResponseTransfer
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddController.php
index 6813ee1..4a1708a 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Customer\Communication\Controller;
 
 use Generated\Shared\Transfer\CustomerTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddressController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddressController.php
index 9d66f39..e5d1dc5 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddressController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/AddressController.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Customer\Communication\Controller;
 
 use Generated\Shared\Transfer\AddressTransfer;
 use Spryker\Shared\Customer\CustomerConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/EditController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/EditController.php
index 9571982..fb6deea 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/EditController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/EditController.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Customer\Communication\Controller;
 use Generated\Shared\Transfer\AddressTransfer;
 use Generated\Shared\Transfer\CustomerTransfer;
 use Spryker\Shared\Customer\CustomerConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/IndexController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/IndexController.php
index e3ebc55..ad17697 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/IndexController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Customer\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Customer\Business\CustomerFacade getFacade()
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ProfileController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ProfileController.php
index ddf943d..e50e99b 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ProfileController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ProfileController.php
@@ -9,8 +9,8 @@ namespace Spryker\Zed\Customer\Communication\Controller;
 
 use Generated\Shared\Transfer\AddressTransfer;
 use Generated\Shared\Transfer\CustomerTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Customer\Business\Exception\AddressNotFoundException;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -33,16 +33,9 @@ class ProfileController extends AbstractController
     public function indexAction(Request $request)
     {
         $idCustomer = $this->castId($request->query->get('id'));
-        $customerUri = '/customer';
-
-        $this->clearBreadcrumbs();
-        $this->addBreadcrumb('Customer', $customerUri);
-        $this->addBreadcrumb('Customer ID ' . $idCustomer, '/customer/profile?id=' . $idCustomer);
-
-        $this->setMenuHighlight($customerUri);
 
         $form = $this->getFactory()
-            ->createCustomerForm($request);
+            ->createCustomerForm($idCustomer);
 
         $customerTransfer = new CustomerTransfer();
         $customerTransfer->setIdCustomer($idCustomer);
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ViewController.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ViewController.php
index be3943a..dcfa4bc 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ViewController.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Controller/ViewController.php
@@ -11,7 +11,7 @@ use ArrayObject;
 use Generated\Shared\Transfer\AddressesTransfer;
 use Generated\Shared\Transfer\CustomerTransfer;
 use Spryker\Shared\Customer\CustomerConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Table/CustomerTable.php b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Table/CustomerTable.php
index 9d1317d..587bd96 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Table/CustomerTable.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/Communication/Table/CustomerTable.php
@@ -11,7 +11,7 @@ use Orm\Zed\Customer\Persistence\Map\SpyCustomerAddressTableMap;
 use Orm\Zed\Customer\Persistence\Map\SpyCustomerTableMap;
 use Orm\Zed\Customer\Persistence\SpyCustomer;
 use Propel\Runtime\Collection\ObjectCollection;
-use Spryker\Shared\Library\DateFormatterInterface;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
 use Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
@@ -36,18 +36,18 @@ class CustomerTable extends AbstractTable
     protected $customerQueryContainer;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Spryker\Zed\Customer\Persistence\CustomerQueryContainerInterface $customerQueryContainer
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(CustomerQueryContainerInterface $customerQueryContainer, DateFormatterInterface $dateFormatter)
+    public function __construct(CustomerQueryContainerInterface $customerQueryContainer, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->customerQueryContainer = $customerQueryContainer;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -159,7 +159,7 @@ class CustomerTable extends AbstractTable
         $customerRow = $customer->toArray();
 
         $customerRow[self::COL_FK_COUNTRY] = $this->getCountryNameByCustomer($customer);
-        $customerRow[self::COL_CREATED_AT] = $this->dateFormatter->dateTime($customer->getCreatedAt());
+        $customerRow[self::COL_CREATED_AT] = $this->utilDateTimeService->formatDateTime($customer->getCreatedAt());
         $customerRow[self::ACTIONS] = $this->buildLinks($customer);
 
         return $customerRow;
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/CustomerConfig.php b/Bundles/Customer/src/Spryker/Zed/Customer/CustomerConfig.php
index 87cad25..e8880a6 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/CustomerConfig.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/CustomerConfig.php
@@ -16,6 +16,8 @@ use Spryker\Zed\Kernel\AbstractBundleConfig;
 class CustomerConfig extends AbstractBundleConfig
 {
 
+    const ERROR_CODE_CUSTOMER_ALREADY_REGISTERED = 4001;
+
     /**
      * @return string
      */
diff --git a/Bundles/Customer/src/Spryker/Zed/Customer/CustomerDependencyProvider.php b/Bundles/Customer/src/Spryker/Zed/Customer/CustomerDependencyProvider.php
index 7c2c60c..a108579 100644
--- a/Bundles/Customer/src/Spryker/Zed/Customer/CustomerDependencyProvider.php
+++ b/Bundles/Customer/src/Spryker/Zed/Customer/CustomerDependencyProvider.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Customer;
 
 use Spryker\Shared\Kernel\Store;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Customer\Dependency\Facade\CustomerToCountryBridge;
 use Spryker\Zed\Customer\Dependency\Facade\CustomerToLocaleBridge;
 use Spryker\Zed\Customer\Dependency\Facade\CustomerToMailBridge;
@@ -71,9 +70,8 @@ class CustomerDependencyProvider extends AbstractBundleDependencyProvider
         $container[static::FACADE_COUNTRY] = function (Container $container) {
             return new CustomerToCountryBridge($container->getLocator()->country()->facade());
         };
-
-        $container[static::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        $container[self::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
         return $container;
diff --git a/Bundles/Customer/tests/Functional/Spryker/Zed/Customer/Communication/Controller/EditControllerTest.php b/Bundles/Customer/tests/Functional/Spryker/Zed/Customer/Communication/Controller/EditControllerTest.php
index cce9ba6..34c084f 100755
--- a/Bundles/Customer/tests/Functional/Spryker/Zed/Customer/Communication/Controller/EditControllerTest.php
+++ b/Bundles/Customer/tests/Functional/Spryker/Zed/Customer/Communication/Controller/EditControllerTest.php
@@ -9,13 +9,13 @@ namespace Functional\Spryker\Zed\Customer\Communication\Controller;
 
 use Codeception\TestCase\Test;
 use Orm\Zed\Customer\Persistence\SpyCustomer;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Customer\Business\CustomerBusinessFactory;
 use Spryker\Zed\Customer\Business\CustomerFacade;
 use Spryker\Zed\Customer\Communication\Controller\EditController;
 use Spryker\Zed\Customer\Communication\CustomerCommunicationFactory;
 use Spryker\Zed\Customer\Communication\Form\CustomerForm;
 use Spryker\Zed\Customer\CustomerDependencyProvider;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
 use Symfony\Component\Form\FormView;
 use Symfony\Component\HttpFoundation\RedirectResponse;
@@ -68,6 +68,9 @@ class EditControllerTest extends Test
         $controllerMock->method('getFacade')->willReturn($customerFacade);
 
         $this->controller = $controllerMock;
+
+        $pimple = new Pimple();
+        $this->controller->setApplication($pimple->getApplication());
     }
 
     /**
diff --git a/Bundles/Customer/tests/Unit/Spryker/Zed/Customer/Business/CustomerFacadeTest.php b/Bundles/Customer/tests/Unit/Spryker/Zed/Customer/Business/CustomerFacadeTest.php
index 7dca49f..f692379 100755
--- a/Bundles/Customer/tests/Unit/Spryker/Zed/Customer/Business/CustomerFacadeTest.php
+++ b/Bundles/Customer/tests/Unit/Spryker/Zed/Customer/Business/CustomerFacadeTest.php
@@ -10,7 +10,7 @@ namespace Unit\Spryker\Zed\Customer\Business;
 use Codeception\TestCase\Test;
 use Generated\Shared\Transfer\AddressTransfer;
 use Generated\Shared\Transfer\CustomerTransfer;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Zed\Customer\Business\CustomerBusinessFactory;
 use Spryker\Zed\Customer\Business\CustomerFacade;
 use Spryker\Zed\Customer\Business\Customer\Address;
@@ -28,7 +28,7 @@ class CustomerFacadeTest extends Test
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transfer
      * @param bool $hasEmail
      *
      * @return \Spryker\Zed\Customer\Business\CustomerFacade
@@ -42,7 +42,7 @@ class CustomerFacadeTest extends Test
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transfer
      * @param bool $hasEmail
      *
      * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Customer\Business\CustomerBusinessFactory
diff --git a/Bundles/Customer/tests/_support/Module/Functional.php b/Bundles/Customer/tests/_support/Module/Functional.php
index d6c6f79..9487e9c 100644
--- a/Bundles/Customer/tests/_support/Module/Functional.php
+++ b/Bundles/Customer/tests/_support/Module/Functional.php
@@ -12,15 +12,15 @@ use Propel\Runtime\Propel;
 use Silex\Provider\FormServiceProvider;
 use Silex\Provider\TwigServiceProvider as SilexTwigServiceProvider;
 use Silex\Provider\ValidatorServiceProvider;
-use Spryker\Shared\Application\Communication\Application;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\DateFormatterServiceProvider;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\TwigServiceProvider;
+use Spryker\Service\UtilDateTime\ServiceProvider\DateTimeFormatterServiceProvider;
+use Spryker\Shared\Application\ServiceProvider\FormFactoryServiceProvider;
+use Spryker\Shared\Kernel\Communication\Application;
 use Spryker\Zed\Assertion\Communication\Plugin\ServiceProvider\AssertionServiceProvider;
-use Spryker\Zed\Console\Business\Model\ConsoleMessenger;
 use Spryker\Zed\Country\Business\CountryFacade;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Locale\Business\LocaleFacade;
 use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
+use Symfony\Component\Console\Logger\ConsoleLogger;
 use Symfony\Component\Console\Output\ConsoleOutput;
 use Symfony\Component\Console\Output\OutputInterface;
 
@@ -48,8 +48,8 @@ class Functional extends Module
         $application->register(new SilexTwigServiceProvider());
         $application->register(new ValidatorServiceProvider());
         $application->register(new FormServiceProvider());
-        $application->register(new TwigServiceProvider());
-        $application->register(new DateFormatterServiceProvider());
+        $application->register(new DateTimeFormatterServiceProvider());
+        $application->register(new FormFactoryServiceProvider());
 
         $propelServiceProvider = new PropelServiceProvider();
         $propelServiceProvider->boot($application);
@@ -73,11 +73,11 @@ class Functional extends Module
     }
 
     /**
-     * @return \Spryker\Zed\Console\Business\Model\ConsoleMessenger
+     * @return \Symfony\Component\Console\Logger\ConsoleLogger
      */
     protected function getMessenger()
     {
-        $messenger = new ConsoleMessenger(
+        $messenger = new ConsoleLogger(
             new ConsoleOutput(OutputInterface::VERBOSITY_QUIET)
         );
 
diff --git a/Bundles/CustomerGroup/composer.json b/Bundles/CustomerGroup/composer.json
index 96e1949..b6a1707 100644
--- a/Bundles/CustomerGroup/composer.json
+++ b/Bundles/CustomerGroup/composer.json
@@ -9,20 +9,24 @@
     }
   },
   "require": {
-    "spryker/application": "^2.4.4",
     "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/propel": "^2.1.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/assertion": "^2.0.0",
     "spryker/code-sniffer": "*",
-    "spryker/config": "^2.1.0",
-    "spryker/testify": "*"
+    "spryker/code-sniffer": "*",
+    "spryker/country": "*",
+    "spryker/locale": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
+    "spryker/testify": "*",
+    "spryker/twig": "*"
   },
   "description": "CustomerGroup bundle",
   "license": "proprietary",
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/AddController.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/AddController.php
index d4ddd13..b469374 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/AddController.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/AddController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\CustomerGroup\Communication\Controller;
 
 use Generated\Shared\Transfer\CustomerTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/EditController.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/EditController.php
index b0ea377..fe04e3c 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/EditController.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/EditController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\CustomerGroup\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/IndexController.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/IndexController.php
index e1f7655..9742625 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/IndexController.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\CustomerGroup\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\CustomerGroup\Business\CustomerGroupFacade getFacade()
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/ViewController.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/ViewController.php
index 30a4f41..8cde456 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/ViewController.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Controller/ViewController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\CustomerGroup\Communication\Controller;
 
 use Generated\Shared\Transfer\CustomerGroupTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/CustomerGroupCommunicationFactory.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/CustomerGroupCommunicationFactory.php
index b4e80ea..4022bb8 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/CustomerGroupCommunicationFactory.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/CustomerGroupCommunicationFactory.php
@@ -70,7 +70,7 @@ class CustomerGroupCommunicationFactory extends AbstractCommunicationFactory
     }
 
     /**
-     * @return \Spryker\Shared\Library\DateFormatterInterface
+     * @return \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
     protected function getDateFormatterService()
     {
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerGroupTable.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerGroupTable.php
index 99f33c6..4a346d3 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerGroupTable.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerGroupTable.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\CustomerGroup\Communication\Table;
 use Orm\Zed\CustomerGroup\Persistence\Map\SpyCustomerGroupTableMap;
 use Orm\Zed\CustomerGroup\Persistence\SpyCustomerGroup;
 use Propel\Runtime\Collection\ObjectCollection;
-use Spryker\Shared\Library\DateFormatterInterface;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
 use Spryker\Zed\CustomerGroup\Persistence\CustomerGroupQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
@@ -31,18 +31,18 @@ class CustomerGroupTable extends AbstractTable
     protected $customerGroupQueryContainer;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Spryker\Zed\CustomerGroup\Persistence\CustomerGroupQueryContainerInterface $customerQueryContainer
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(CustomerGroupQueryContainerInterface $customerQueryContainer, DateFormatterInterface $dateFormatter)
+    public function __construct(CustomerGroupQueryContainerInterface $customerQueryContainer, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->customerGroupQueryContainer = $customerQueryContainer;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -140,7 +140,7 @@ class CustomerGroupTable extends AbstractTable
     {
         $customerRow = $customerGroup->toArray();
 
-        $customerRow[static::COL_CREATED_AT] = $this->dateFormatter->dateTime($customerGroup->getCreatedAt());
+        $customerRow[static::COL_CREATED_AT] = $this->utilDateTimeService->formatDateTime($customerGroup->getCreatedAt());
         $customerRow[static::ACTIONS] = $this->buildLinks($customerGroup);
 
         return $customerRow;
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerTable.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerTable.php
index 9f8055d..e870011 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerTable.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/Communication/Table/CustomerTable.php
@@ -12,7 +12,7 @@ use Orm\Zed\CustomerGroup\Persistence\Map\SpyCustomerGroupToCustomerTableMap;
 use Orm\Zed\CustomerGroup\Persistence\SpyCustomerGroupToCustomer;
 use Orm\Zed\Customer\Persistence\Map\SpyCustomerTableMap;
 use Propel\Runtime\Collection\ObjectCollection;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\CustomerGroup\Persistence\CustomerGroupQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/CustomerGroupDependencyProvider.php b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/CustomerGroupDependencyProvider.php
index 60ecd5f..cf1cb26 100644
--- a/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/CustomerGroupDependencyProvider.php
+++ b/Bundles/CustomerGroup/src/Spryker/Zed/CustomerGroup/CustomerGroupDependencyProvider.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\CustomerGroup;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 
@@ -33,8 +32,8 @@ class CustomerGroupDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideCommunicationLayerDependencies(Container $container)
     {
-        $container[self::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        $container[self::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
         return $container;
diff --git a/Bundles/CustomerGroup/tests/_support/Module/Functional.php b/Bundles/CustomerGroup/tests/_support/Module/Functional.php
index b760917..a6b7849 100644
--- a/Bundles/CustomerGroup/tests/_support/Module/Functional.php
+++ b/Bundles/CustomerGroup/tests/_support/Module/Functional.php
@@ -12,15 +12,14 @@ use Propel\Runtime\Propel;
 use Silex\Provider\FormServiceProvider;
 use Silex\Provider\TwigServiceProvider as SilexTwigServiceProvider;
 use Silex\Provider\ValidatorServiceProvider;
-use Spryker\Shared\Application\Communication\Application;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\DateFormatterServiceProvider;
-use Spryker\Zed\Application\Communication\Plugin\ServiceProvider\TwigServiceProvider;
+use Spryker\Service\UtilDateTime\ServiceProvider\DateTimeFormatterServiceProvider;
+use Spryker\Shared\Kernel\Communication\Application;
 use Spryker\Zed\Assertion\Communication\Plugin\ServiceProvider\AssertionServiceProvider;
-use Spryker\Zed\Console\Business\Model\ConsoleMessenger;
 use Spryker\Zed\Country\Business\CountryFacade;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Locale\Business\LocaleFacade;
 use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
+use Symfony\Component\Console\Logger\ConsoleLogger;
 use Symfony\Component\Console\Output\ConsoleOutput;
 use Symfony\Component\Console\Output\OutputInterface;
 
@@ -48,8 +47,7 @@ class Functional extends Module
         $application->register(new SilexTwigServiceProvider());
         $application->register(new ValidatorServiceProvider());
         $application->register(new FormServiceProvider());
-        $application->register(new TwigServiceProvider());
-        $application->register(new DateFormatterServiceProvider());
+        $application->register(new DateTimeFormatterServiceProvider());
 
         $propelServiceProvider = new PropelServiceProvider();
         $propelServiceProvider->boot($application);
@@ -73,11 +71,11 @@ class Functional extends Module
     }
 
     /**
-     * @return \Spryker\Zed\Console\Business\Model\ConsoleMessenger
+     * @return \Symfony\Component\Console\Logger\ConsoleLogger
      */
     protected function getMessenger()
     {
-        $messenger = new ConsoleMessenger(
+        $messenger = new ConsoleLogger(
             new ConsoleOutput(OutputInterface::VERBOSITY_QUIET)
         );
 
diff --git a/Bundles/CustomerGroupDiscountConnector/composer.json b/Bundles/CustomerGroupDiscountConnector/composer.json
index e7b7d99..6ba0cc4 100644
--- a/Bundles/CustomerGroupDiscountConnector/composer.json
+++ b/Bundles/CustomerGroupDiscountConnector/composer.json
@@ -14,9 +14,10 @@
     "spryker/kernel": "^2.8.0"
   },
   "require-dev": {
-    "spryker/assertion": "^2.0.0",
+    "spryker/assertion": "*",
     "spryker/code-sniffer": "*",
-    "spryker/config": "^2.1.0",
+    "spryker/config": "*",
+    "spryker/propel-orm": "*",
     "spryker/testify": "*"
   },
   "description": "CustomerGroupDiscountConnector bundle",
diff --git a/Bundles/Development/composer.json b/Bundles/Development/composer.json
index 02adc55..f55112c 100644
--- a/Bundles/Development/composer.json
+++ b/Bundles/Development/composer.json
@@ -7,9 +7,7 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/graph": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/symfony": "^2.0.0",
diff --git a/Bundles/Development/src/Spryker/Shared/Development/Transfer/development.transfer.xml b/Bundles/Development/src/Spryker/Shared/Development/Transfer/development.transfer.xml
index c76cbfc..08bde89 100644
--- a/Bundles/Development/src/Spryker/Shared/Development/Transfer/development.transfer.xml
+++ b/Bundles/Development/src/Spryker/Shared/Development/Transfer/development.transfer.xml
@@ -20,4 +20,31 @@
         <property name="namespaceName" type="string"/>
     </transfer>
 
+    <transfer name="BundleDependencyCollection">
+        <property name="bundle" type="string"/>
+        <property name="dependencyBundles" type="DependencyBundle[]" singular="dependencyBundle"/>
+    </transfer>
+
+    <transfer name="DependencyBundle">
+        <property name="bundle" type="string"/>
+        <property name="dependencies" type="Dependency[]" singular="dependency"/>
+    </transfer>
+
+    <transfer name="Dependency">
+        <property name="bundle" type="string"/>
+        <property name="type" type="string"/>
+        <property name="isInTest" type="bool"/>
+        <property name="isOptional" type="bool"/>
+    </transfer>
+
+    <transfer name="ComposerDependencyCollection">
+        <property name="composerDependencies" type="ComposerDependency[]" singular="composerDependency"/>
+    </transfer>
+
+    <transfer name="ComposerDependency">
+        <property name="name" type="string"/>
+        <property name="isDev" type="bool"/>
+        <property name="isOptional" type="bool"/>
+    </transfer>
+
 </transfers>
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParser.php b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParser.php
index d5465b3..84c4f54 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParser.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParser.php
@@ -7,12 +7,17 @@
 
 namespace Spryker\Zed\Development\Business\Dependency;
 
+use ArrayObject;
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
+use Generated\Shared\Transfer\DependencyBundleTransfer;
+use Generated\Shared\Transfer\DependencyTransfer;
 use Spryker\Zed\Development\Business\DependencyTree\Finder;
 use Spryker\Zed\Development\DevelopmentConfig;
 use Symfony\Component\Finder\Finder as SymfonyFinder;
+use Zend\Filter\Word\SeparatorToCamelCase;
 use Zend\Filter\Word\UnderscoreToCamelCase;
 
-class BundleParser
+class BundleParser implements BundleParserInterface
 {
 
     /**
@@ -31,35 +36,125 @@ class BundleParser
     protected $bundleConfig;
 
     /**
-     * @param \Symfony\Component\Finder\Finder $finder
+     * @var \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
+     */
+    protected $bundleDependencyCollectionTransfer;
+
+    /**
      * @param \Spryker\Zed\Development\DevelopmentConfig $config
      */
-    public function __construct(SymfonyFinder $finder, DevelopmentConfig $config)
+    public function __construct(DevelopmentConfig $config)
     {
-        $this->finder = $finder;
         $this->config = $config;
     }
 
     /**
      * @param string $bundleName
      *
-     * @return array
+     * @return \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
      */
     public function parseOutgoingDependencies($bundleName)
     {
+        $bundleDependencyCollectionTransfer = new BundleDependencyCollectionTransfer();
+        $bundleDependencyCollectionTransfer->setBundle($bundleName);
+
+        $this->bundleDependencyCollectionTransfer = $bundleDependencyCollectionTransfer;
+
         $allFileDependencies = $this->parseDependencies($bundleName);
-        $externalBundleDependencies = $this->buildExternalBundleDependencies($allFileDependencies, $bundleName);
-        $locatorBundleDependencies = $this->buildLocatorBundleDependencies($allFileDependencies, $bundleName);
 
+        $this->addAllDependencies($allFileDependencies);
+        $this->addExternalBundleDependencies($allFileDependencies);
+        $this->addLocatorBundleDependencies($allFileDependencies);
+        $this->addPersistenceLayerDependencies($bundleName);
+
+        $callback = function (DependencyBundleTransfer $a, DependencyBundleTransfer $b) {
+            return strcmp($a->getBundle(), $b->getBundle());
+        };
+
+        $dependencyBundles = $this->bundleDependencyCollectionTransfer->getDependencyBundles()->getArrayCopy();
+
+        usort($dependencyBundles, $callback);
+
+        $this->bundleDependencyCollectionTransfer->setDependencyBundles(new ArrayObject());
+
+        foreach ($dependencyBundles as $dependencyBundle) {
+            $this->bundleDependencyCollectionTransfer->addDependencyBundle($dependencyBundle);
+        }
+
+        return $this->bundleDependencyCollectionTransfer;
+    }
+
+    /**
+     * @param array $allFileDependencies
+     *
+     * @return void
+     */
+    protected function addAllDependencies(array $allFileDependencies)
+    {
         $allFileDependencies = $this->filterRelevantClasses($allFileDependencies);
-        $allFileDependencies = $this->ignorePluginInterfaces($allFileDependencies);
 
-        $bundleDependencies = $this->buildBundleDependencies($allFileDependencies, $bundleName);
-        $bundleDependencies = $this->addPersistenceLayerDependencies($bundleName, $bundleDependencies);
-        $bundleDependencies += $externalBundleDependencies;
-        $bundleDependencies += $locatorBundleDependencies;
+        $this->buildBundleDependencies($allFileDependencies);
+    }
+
+    /**
+     * @param array $allFileDependencies
+     *
+     * @return void
+     */
+    protected function addExternalBundleDependencies(array $allFileDependencies)
+    {
+        $map = $this->config->getExternalToInternalNamespaceMap();
+
+        foreach ($allFileDependencies as $file => $fileDependencies) {
+            foreach ($fileDependencies as $fileDependency) {
+                $found = null;
+                foreach ($map as $namespace => $package) {
+                    if (strpos($fileDependency, $namespace) !== 0) {
+                        continue;
+                    }
+
+                    $found = $package;
+                    break;
+                }
+
+                if ($found === null) {
+                    continue;
+                }
+
+                $foreignBundle = substr($found, 8);
+                $filter = new SeparatorToCamelCase('-');
+                $foreignBundle = ucfirst($filter->filter($foreignBundle));
+
+                $dependencyTransfer = new DependencyTransfer();
+                $dependencyTransfer
+                    ->setBundle($foreignBundle)
+                    ->setType('external')
+                    ->setIsOptional($this->isPluginFile($file))
+                    ->setIsInTest($this->isTestFile($file));
+
+                $this->addDependency($dependencyTransfer);
+            }
+        }
+    }
+
+    /**
+     * @param string $file
+     *
+     * @return bool
+     */
+    protected function isTestFile($file)
+    {
+        return !strpos($file, '/src/');
+    }
 
-        return $bundleDependencies;
+    /**
+     * @param string $file
+     *
+     * @return bool
+     */
+    protected function isPluginFile($file)
+    {
+        return (strpos($file, '/Plugin/') !== false);
     }
 
     /**
@@ -121,7 +216,6 @@ class BundleParser
             foreach ($fileDependencies as $fileDependency) {
                 $fileDependencyParts = explode('\\', $fileDependency);
                 $bundleNamespace = $fileDependencyParts[0];
-
                 if (in_array($bundleNamespace, $this->relevantBundleNamespaces)) {
                     $reducedDependencies[] = $fileDependency;
                 }
@@ -134,42 +228,70 @@ class BundleParser
 
     /**
      * @param array $allFileDependencies
-     * @param string $bundle
      *
      * @return array
      */
-    protected function buildBundleDependencies(array $allFileDependencies, $bundle)
+    protected function buildBundleDependencies(array $allFileDependencies)
     {
-        $bundleDependencies = [];
-        foreach ($allFileDependencies as $fileDependencies) {
+        foreach ($allFileDependencies as $file => $fileDependencies) {
             foreach ($fileDependencies as $fileDependency) {
-                $expl = explode('\\', $fileDependency);
-                $foreignBundle = $expl[2];
-                if ($bundle !== $foreignBundle) {
-                    if (array_key_exists($foreignBundle, $bundleDependencies) === false) {
-                        $bundleDependencies[$foreignBundle] = 0;
-                    }
-                    $bundleDependencies[$foreignBundle]++;
+                $fileNameParts = explode('\\', $fileDependency);
+                $foreignBundle = $fileNameParts[2];
+                if ($this->bundleDependencyCollectionTransfer->getBundle() !== $foreignBundle) {
+                    $dependencyTransfer = new DependencyTransfer();
+                    $dependencyTransfer->setBundle($foreignBundle);
+                    $dependencyTransfer->setType('spryker');
+                    $dependencyTransfer->setIsOptional($this->isPluginFile($file));
+                    $dependencyTransfer->setIsInTest($this->isTestFile($file));
+
+                    $this->addDependency($dependencyTransfer);
                 }
             }
         }
+    }
 
-        ksort($bundleDependencies);
+    /**
+     * @param \Generated\Shared\Transfer\DependencyTransfer $dependencyTransfer
+     *
+     * @return void
+     */
+    protected function addDependency(DependencyTransfer $dependencyTransfer)
+    {
+        $dependencyBundleTransfer = $this->getDependencyBundleTransfer($dependencyTransfer);
+        $dependencyBundleTransfer->addDependency($dependencyTransfer);
+    }
 
-        return $bundleDependencies;
+    /**
+     * @param \Generated\Shared\Transfer\DependencyTransfer $dependencyTransfer
+     *
+     * @return \Generated\Shared\Transfer\DependencyBundleTransfer
+     */
+    protected function getDependencyBundleTransfer(DependencyTransfer $dependencyTransfer)
+    {
+        foreach ($this->bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            if ($dependencyBundleTransfer->getBundle() === $dependencyTransfer->getBundle()) {
+                return $dependencyBundleTransfer;
+            }
+        }
+
+        $dependencyBundleTransfer = new DependencyBundleTransfer();
+        $dependencyBundleTransfer->setBundle($dependencyTransfer->getBundle());
+
+        $this->bundleDependencyCollectionTransfer->addDependencyBundle($dependencyBundleTransfer);
+
+        return $dependencyBundleTransfer;
     }
 
     /**
      * @param string $bundleName
-     * @param array $bundleDependencies
      *
-     * @return array
+     * @return void
      */
-    protected function addPersistenceLayerDependencies($bundleName, array $bundleDependencies)
+    protected function addPersistenceLayerDependencies($bundleName)
     {
         $folder = $this->config->getBundleDirectory() . $bundleName . '/src/Spryker/Zed/' . $bundleName . '/Persistence/Propel/Schema/';
         if (!is_dir($folder)) {
-            return $bundleDependencies;
+            return;
         }
 
         $files = $this->find($folder);
@@ -197,191 +319,109 @@ class BundleParser
             }
 
             foreach ($tables as $table) {
-                $bundleDependencies = $this->checkForPersistenceLayerDependency($table, $bundleDependencies, $bundleName);
+                $this->addPersistenceLayerDependency($table);
             }
         }
-
-        return $bundleDependencies;
     }
 
     /**
-     * @param string
+     * @param string $table
      *
-     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
+     * @return void
      */
-    protected function find($folder)
+    protected function addPersistenceLayerDependency($table)
     {
-        return $this->finder->in($folder)->name('*.schema.xml')->depth('< 2');
-    }
+        $filter = new UnderscoreToCamelCase();
+        $name = $filter->filter($table);
 
-    /**
-     * @param array $allFileDependencies
-     * @param string $currentBundleName
-     *
-     * @return array
-     */
-    protected function buildExternalBundleDependencies(array $allFileDependencies, $currentBundleName)
-    {
-        $bundleDependencies = [];
+        $existent = $this->isExistentBundle($name);
+        if ($existent) {
+            $dependencyTransfer = new DependencyTransfer();
+            $dependencyTransfer
+                ->setBundle($name)
+                ->setType('spryker (persistence)')
+                ->setIsInTest(false);
 
-        $map = $this->config->getExternalToInternalNamespaceMap();
+            $this->addDependency($dependencyTransfer);
 
-        foreach ($allFileDependencies as $file => $fileDependencies) {
-            foreach ($fileDependencies as $fileDependency) {
-                $found = null;
-                foreach ($map as $namespace => $package) {
-                    if (strpos($fileDependency, $namespace) !== 0) {
-                        continue;
-                    }
+            return;
+        }
 
-                    $found = $package;
-                    break;
-                }
+        $lastUnderscore = strrpos($table, '_');
 
-                if ($found === null) {
-                    continue;
-                }
+        while ($lastUnderscore) {
+            $table = substr($table, 0, $lastUnderscore);
 
-                $name = substr($found, 8);
-                $name = str_replace('-', '_', $name);
-                $filter = new UnderscoreToCamelCase();
-                $name = ucfirst($filter->filter($name));
+            $filter = new UnderscoreToCamelCase();
+            $name = $filter->filter($table);
 
-                $bundleDependencies = $this->addDependency($name, $bundleDependencies, $currentBundleName);
+            $existent = $this->isExistentBundle($name);
+            if (!$existent) {
+                $lastUnderscore = strrpos($table, '_');
+                continue;
             }
-        }
 
-        return $bundleDependencies;
+            $dependencyTransfer = new DependencyTransfer();
+            $dependencyTransfer
+                ->setBundle($name)
+                ->setType('spryker (persistence)')
+                ->setIsInTest(false);
+
+            break;
+        }
     }
 
     /**
-     * @param array $dependencies
+     * @param string
      *
-     * @return array
+     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
      */
-    protected function ignorePluginInterfaces(array $dependencies)
+    protected function find($folder)
     {
-        foreach ($dependencies as $fileName => $fileDependencies) {
-            if (strpos($fileName, '/Communication/Plugin/') === false) {
-                continue;
-            }
-
-            foreach ($fileDependencies as $key => $fileDependency) {
-                if (!preg_match('#\\\\Dependency\\\\.*Plugin.*Interface$#', $fileDependency)) {
-                    continue;
-                }
-
-                unset($dependencies[$fileName][$key]);
-            }
-        }
+        $finder = new SymfonyFinder();
 
-        return $dependencies;
+        return $finder->in($folder)->name('*.schema.xml')->depth('< 2');
     }
 
     /**
      * @param array $allFileDependencies
-     * @param string $bundleName
      *
-     * @return array
+     * @return void
      */
-    protected function buildLocatorBundleDependencies($allFileDependencies, $bundleName)
+    protected function addLocatorBundleDependencies(array $allFileDependencies)
     {
-        $dependencies = [];
-
         foreach ($allFileDependencies as $fileName => $fileDependencies) {
             if (!$fileDependencies || strpos($fileName, 'DependencyProvider.php') === false) {
                 continue;
             }
 
-            $dependencies += $this->extractDependenciesFromDependencyProvider($fileName, $bundleName);
+            $this->addDependenciesFromDependencyProvider($fileName);
         }
-
-        return $dependencies;
     }
 
     /**
      * @param string $fileName
-     * @param string $bundleName;
      *
-     * @return array
+     * @return void
      */
-    protected function extractDependenciesFromDependencyProvider($fileName, $bundleName)
+    protected function addDependenciesFromDependencyProvider($fileName)
     {
         $content = file_get_contents($fileName);
 
-        if (!preg_match_all('/->(?<bundle>\w+?)\(\)->(client|facade|queryContainer)\(\)/', $content, $matches, PREG_SET_ORDER)) {
-            return [];
+        if (!preg_match_all('/->(?<bundle>\w+?)\(\)->(client|facade|queryContainer|service)\(\)/', $content, $matches, PREG_SET_ORDER)) {
+            return;
         }
 
-        $dependencies = [];
-
         foreach ($matches as $match) {
             $toBundle = ucfirst($match['bundle']);
+            $dependencyTransfer = new DependencyTransfer();
+            $dependencyTransfer
+                ->setBundle($toBundle)
+                ->setType('spryker (locator)')
+                ->setIsInTest(false);
 
-            $dependencies = $this->addDependency($toBundle, $dependencies, $bundleName);
-        }
-
-        return $dependencies;
-    }
-
-    /**
-     * @param string $table
-     * @param array $bundleDependencies
-     * @param string $currentBundle
-     *
-     * @return array
-     */
-    protected function checkForPersistenceLayerDependency($table, array $bundleDependencies, $currentBundle)
-    {
-        $filter = new UnderscoreToCamelCase();
-        $name = $filter->filter($table);
-
-        $existent = $this->isExistentBundle($name);
-        if ($existent) {
-            $bundleDependencies = $this->addDependency($name, $bundleDependencies, $currentBundle);
-            return $bundleDependencies;
-        }
-
-        $lastUnderscore = strrpos($table, '_');
-        while ($lastUnderscore) {
-            $table = substr($table, 0, $lastUnderscore);
-
-            $filter = new UnderscoreToCamelCase();
-            $name = $filter->filter($table);
-
-            $existent = $this->isExistentBundle($name);
-            if (!$existent) {
-                $lastUnderscore = strrpos($table, '_');
-                continue;
-            }
-
-            $this->addDependency($name, $bundleDependencies, $currentBundle);
-            break;
-        }
-
-        return $bundleDependencies;
-    }
-
-    /**
-     * @param string $name
-     * @param array $bundleDependencies
-     * @param string|null $currentBundleName
-     *
-     * @return array
-     */
-    protected function addDependency($name, array $bundleDependencies, $currentBundleName = null)
-    {
-        if ($currentBundleName !== null && $name === $currentBundleName) {
-            return $bundleDependencies;
-        }
-
-        if (!isset($bundleDependencies[$name])) {
-            $bundleDependencies[$name] = 0;
+            $this->addDependency($dependencyTransfer);
         }
-
-        $bundleDependencies[$name]++;
-
-        return $bundleDependencies;
     }
 
 }
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParserInterface.php b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParserInterface.php
new file mode 100644
index 0000000..d06d8b4
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/BundleParserInterface.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\Dependency;
+
+interface BundleParserInterface
+{
+
+    /**
+     * @param string $bundleName
+     *
+     * @return \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
+     */
+    public function parseOutgoingDependencies($bundleName);
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/Manager.php b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/Manager.php
index 3590251..d9e2530 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/Manager.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/Dependency/Manager.php
@@ -7,13 +7,14 @@
 
 namespace Spryker\Zed\Development\Business\Dependency;
 
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
 use Symfony\Component\Finder\Finder;
 
 class Manager
 {
 
     /**
-     * @var \Spryker\Zed\Development\Business\Dependency\BundleParser
+     * @var \Spryker\Zed\Development\Business\Dependency\BundleParserInterface
      */
     protected $bundleParser;
 
@@ -23,10 +24,10 @@ class Manager
     protected $bundleDirectory;
 
     /**
-     * @param \Spryker\Zed\Development\Business\Dependency\BundleParser $bundleParser
+     * @param \Spryker\Zed\Development\Business\Dependency\BundleParserInterface $bundleParser
      * @param string $bundleDirectory
      */
-    public function __construct(BundleParser $bundleParser, $bundleDirectory)
+    public function __construct(BundleParserInterface $bundleParser, $bundleDirectory)
     {
         $this->bundleParser = $bundleParser;
         $this->bundleDirectory = $bundleDirectory;
@@ -43,16 +44,14 @@ class Manager
 
         $incomingDependencies = [];
         foreach ($allForeignBundles as $foreignBundle) {
-            try {
-                $dependencies = $this->bundleParser->parseOutgoingDependencies($foreignBundle);
-            } catch (\Exception $e) {
-                $dependencies = []; // TODO illegal try-catch
-            }
-            if (array_key_exists($bundleName, $dependencies)) {
+            $bundleDependencyCollectionTransfer = $this->bundleParser->parseOutgoingDependencies($foreignBundle);
+            $dependencyBundle = $this->findDependencyTo($bundleName, $bundleDependencyCollectionTransfer);
+
+            if ($dependencyBundle) {
                 if (array_key_exists($foreignBundle, $incomingDependencies) === false) {
                     $incomingDependencies[$foreignBundle] = 0;
                 }
-                $incomingDependencies[$foreignBundle] += $dependencies[$bundleName];
+                $incomingDependencies[$foreignBundle] += count($dependencyBundle->getDependencies());
             }
         }
 
@@ -61,6 +60,27 @@ class Manager
 
     /**
      * @param string $bundleName
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return bool|\Generated\Shared\Transfer\DependencyBundleTransfer|mixed
+     */
+    protected function findDependencyTo($bundleName, BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundle) {
+            if ($dependencyBundle->getBundle() === $bundleName) {
+                foreach ($dependencyBundle->getDependencies() as $dependencyTransfer) {
+                    if (!$dependencyTransfer->getIsInTest() && !$dependencyTransfer->getIsOptional()) {
+                        return $dependencyBundle;
+                    }
+                }
+            }
+        }
+
+        return false;
+    }
+
+    /**
+     * @param string $bundleName
      *
      * @return array
      */
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/ComposerDependencyParser.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/ComposerDependencyParser.php
index 215f28c..10de118 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/ComposerDependencyParser.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/ComposerDependencyParser.php
@@ -7,8 +7,12 @@
 
 namespace Spryker\Zed\Development\Business\DependencyTree;
 
+use ArrayObject;
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
+use Generated\Shared\Transfer\ComposerDependencyCollectionTransfer;
+use Generated\Shared\Transfer\ComposerDependencyTransfer;
 use Symfony\Component\Finder\SplFileInfo;
-use Zend\Filter\Word\UnderscoreToCamelCase;
+use Zend\Filter\Word\SeparatorToCamelCase;
 
 class ComposerDependencyParser
 {
@@ -32,26 +36,39 @@ class ComposerDependencyParser
     }
 
     /**
-     * @param string $bundleName
-     * @param array $codeDependencies
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
      *
      * @return array
      */
-    public function getComposerDependencyComparison($bundleName, $codeDependencies)
+    public function getComposerDependencyComparison(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
     {
-        $codeDependencies = $this->getOverwrittenDependenciesForBundle($bundleName, $codeDependencies);
+        $bundleDependencyCollectionTransfer = $this->getOverwrittenDependenciesForBundle($bundleDependencyCollectionTransfer);
+        $composerDependencyCollectionTransfer = $this->getParsedComposerDependenciesForBundle($bundleDependencyCollectionTransfer->getBundle());
+
+        $bundleNames = $this->getBundleDependencyNames($bundleDependencyCollectionTransfer);
+        $bundleNamesInSrc = $this->getBundleDependencyNamesInSrc($bundleDependencyCollectionTransfer);
+        $bundleNamesInTests = $this->getBundleDependencyNamesInTests($bundleDependencyCollectionTransfer);
 
-        $composerDependencies = $this->getParsedComposerDependenciesForBundle($bundleName);
+        $suggestedNames = $this->getSuggested($composerDependencyCollectionTransfer);
+        $requireNames = $this->getRequireNames($composerDependencyCollectionTransfer);
+        $requireDevNames = $this->getRequireNames($composerDependencyCollectionTransfer, true);
 
-        $together = array_unique(array_merge($codeDependencies, $composerDependencies));
-        sort($together);
+        $allBundleNames = array_unique(array_merge($bundleNames, $requireNames, $requireDevNames, $suggestedNames));
+        sort($allBundleNames);
 
         $dependencies = [];
 
-        foreach ($together as $bundleName) {
+        foreach ($allBundleNames as $bundleName) {
+            if ($bundleDependencyCollectionTransfer->getBundle() === $bundleName) {
+                continue;
+            }
             $dependencies[] = [
-                'code' => in_array($bundleName, $codeDependencies) ? $bundleName : '',
-                'composer' => in_array($bundleName, $composerDependencies) ? $bundleName : '',
+                'isOptional' => $this->getIsOptional($bundleName, $bundleDependencyCollectionTransfer),
+                'src' => in_array($bundleName, $bundleNamesInSrc) ? $bundleName : '',
+                'tests' => in_array($bundleName, $bundleNamesInTests) ? $bundleName : '',
+                'composerRequire' => in_array($bundleName, $requireNames) ? $bundleName : '',
+                'composerRequireDev' => in_array($bundleName, $requireDevNames) ? $bundleName : '',
+                'suggested' => in_array($bundleName, $suggestedNames) ? $bundleName : '',
             ];
         }
 
@@ -60,30 +77,148 @@ class ComposerDependencyParser
 
     /**
      * @param string $bundleName
-     * @param array $codeDependencies
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return bool
+     */
+    protected function getIsOptional($bundleName, BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $isOptional = true;
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            if ($dependencyBundleTransfer->getBundle() === $bundleName) {
+                foreach ($dependencyBundleTransfer->getDependencies() as $dependencyTransfer) {
+                    if (!$dependencyTransfer->getIsOptional() && !$dependencyTransfer->getIsInTest()) {
+                        $isOptional = false;
+                    }
+                }
+            }
+        }
+
+        return $isOptional;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
      *
      * @return array
      */
-    protected function getOverwrittenDependenciesForBundle($bundleName, array $codeDependencies)
+    protected function getBundleDependencyNames(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
     {
-        $declaredDependencies = $this->parseDeclaredDependenciesForBundle($bundleName);
-        if (!$declaredDependencies) {
-            return $codeDependencies;
+        $bundleNames = [];
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            $bundleNames[] = $dependencyBundleTransfer->getBundle();
+        }
+
+        return $bundleNames;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return array
+     */
+    protected function getBundleDependencyNamesInSrc(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $bundleNames = [];
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            $usedInSrc = false;
+            foreach ($dependencyBundleTransfer->getDependencies() as $dependencyTransfer) {
+                if (!$dependencyTransfer->getIsInTest()) {
+                    $usedInSrc = true;
+                }
+            }
+            if ($usedInSrc) {
+                $bundleNames[] = $dependencyBundleTransfer->getBundle();
+            }
+        }
+
+        return $bundleNames;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return array
+     */
+    protected function getBundleDependencyNamesInTests(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $bundleNames = [];
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            $usedInTests = false;
+            foreach ($dependencyBundleTransfer->getDependencies() as $dependencyTransfer) {
+                if ($dependencyTransfer->getIsInTest()) {
+                    $usedInTests = true;
+                }
+            }
+            if ($usedInTests) {
+                $bundleNames[] = $dependencyBundleTransfer->getBundle();
+            }
         }
 
-        // For now we can't separate in the dependency tool yet
-        $included = array_merge($declaredDependencies[static::TYPE_INCLUDE], $declaredDependencies[static::TYPE_INCLUDE_DEV]);
-        $excluded = array_merge($declaredDependencies[static::TYPE_EXCLUDE], $declaredDependencies[static::TYPE_EXCLUDE_DEV]);
+        return $bundleNames;
+    }
+
+    /**
+     * If a dependency is optional it needs to be in suggest.
+     * Return all bundle names which are marked as optional.
+     *
+     * @param \Generated\Shared\Transfer\ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer
+     *
+     * @return array
+     */
+    protected function getSuggested(ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer)
+    {
+        $composerBundleNames = [];
+        foreach ($composerDependencyCollectionTransfer->getComposerDependencies() as $composerDependency) {
+            if ($composerDependency->getName() && $composerDependency->getIsOptional()) {
+                $composerBundleNames[] = $composerDependency->getName();
+            }
+        }
+
+        return $composerBundleNames;
+    }
 
-        foreach ($codeDependencies as $key => $bundleDependency) {
-            if (in_array($bundleDependency, $excluded)) {
-                unset($codeDependencies[$key]);
+    /**
+     * @param \Generated\Shared\Transfer\ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer
+     * @param bool $isDev
+     *
+     * @return array
+     */
+    protected function getRequireNames(ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer, $isDev = false)
+    {
+        $composerBundleNames = [];
+        foreach ($composerDependencyCollectionTransfer->getComposerDependencies() as $composerDependency) {
+            if ($composerDependency->getName() && $composerDependency->getIsDev() === $isDev) {
+                $composerBundleNames[] = $composerDependency->getName();
             }
         }
 
-        $codeDependencies = array_merge($codeDependencies, $included);
+        return $composerBundleNames;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
+     */
+    protected function getOverwrittenDependenciesForBundle(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $declaredDependencies = $this->parseDeclaredDependenciesForBundle($bundleDependencyCollectionTransfer->getBundle());
+        if (!$declaredDependencies) {
+            return $bundleDependencyCollectionTransfer;
+        }
+
+        $excluded = $declaredDependencies[static::TYPE_EXCLUDE];
+
+        $dependencyBundlesCollectionTransfer = $bundleDependencyCollectionTransfer->getDependencyBundles();
+        $bundleDependencyCollectionTransfer->setDependencyBundles(new ArrayObject());
+        foreach ($dependencyBundlesCollectionTransfer as $dependencyBundleTransfer) {
+            if (!in_array($dependencyBundleTransfer->getBundle(), $excluded)) {
+                $bundleDependencyCollectionTransfer->addDependencyBundle($dependencyBundleTransfer);
+            }
+        }
 
-        return $codeDependencies;
+        return $bundleDependencyCollectionTransfer;
     }
 
     /**
@@ -122,12 +257,14 @@ class ComposerDependencyParser
     /**
      * @param string $bundleName
      *
-     * @return array
+     * @return \Generated\Shared\Transfer\ComposerDependencyCollectionTransfer
      */
     protected function getParsedComposerDependenciesForBundle($bundleName)
     {
         $composerJsonFiles = $this->finder->find();
-        $dependencies = [];
+
+        $composerDependencies = new ComposerDependencyCollectionTransfer();
+
         foreach ($composerJsonFiles as $composerJsonFile) {
             if ($this->shouldSkip($composerJsonFile, $bundleName)) {
                 continue;
@@ -135,23 +272,65 @@ class ComposerDependencyParser
 
             $content = file_get_contents($composerJsonFile);
             $content = json_decode($content, true);
+
             $require = isset($content['require']) ? $content['require'] : [];
+            $this->addComposerDependencies($require, $composerDependencies);
 
-            foreach ($require as $package => $version) {
-                if (strpos($package, 'spryker/') !== 0) {
-                    continue;
-                }
+            $requireDev = isset($content['require-dev']) ? $content['require-dev'] : [];
+            $this->addComposerDependencies($requireDev, $composerDependencies, true);
 
-                $name = substr($package, 8);
-                $name = str_replace('-', '_', $name);
-                $filter = new UnderscoreToCamelCase();
-                $name = ucfirst($filter->filter($name));
+            $suggested = isset($content['suggest']) ? $content['suggest'] : [];
+            $this->addSuggestedDependencies($suggested, $composerDependencies);
+        }
+
+        return $composerDependencies;
+    }
 
-                $dependencies[] = $name;
+    /**
+     * @param array $require
+     * @param \Generated\Shared\Transfer\ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer
+     * @param bool $isDev
+     *
+     * @return void
+     */
+    protected function addComposerDependencies(array $require, ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer, $isDev = false)
+    {
+        foreach ($require as $package => $version) {
+            if (strpos($package, 'spryker/') !== 0) {
+                continue;
             }
+            $bundle = $this->getBundleName($package);
+
+            $composerDependencyTransfer = new ComposerDependencyTransfer();
+            $composerDependencyTransfer
+                ->setName($bundle)
+                ->setIsDev($isDev);
+
+            $composerDependencyCollectionTransfer->addComposerDependency($composerDependencyTransfer);
         }
+    }
 
-        return $dependencies;
+    /**
+     * @param array $require
+     * @param \Generated\Shared\Transfer\ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer
+     *
+     * @return void
+     */
+    protected function addSuggestedDependencies(array $require, ComposerDependencyCollectionTransfer $composerDependencyCollectionTransfer)
+    {
+        foreach ($require as $package => $version) {
+            if (strpos($package, 'spryker/') !== 0) {
+                continue;
+            }
+            $bundle = $this->getBundleName($package);
+
+            $composerDependencyTransfer = new ComposerDependencyTransfer();
+            $composerDependencyTransfer
+                ->setName($bundle)
+                ->setIsOptional(true);
+
+            $composerDependencyCollectionTransfer->addComposerDependency($composerDependencyTransfer);
+        }
     }
 
     /**
@@ -163,7 +342,22 @@ class ComposerDependencyParser
     protected function shouldSkip(SplFileInfo $composerJsonFile, $bundleName)
     {
         $folder = $composerJsonFile->getRelativePath();
-        return $folder !== $bundleName;
+
+        return ($folder !== $bundleName);
+    }
+
+    /**
+     * @param string $package
+     *
+     * @return string
+     */
+    protected function getBundleName($package)
+    {
+        $name = substr($package, 8);
+        $filter = new SeparatorToCamelCase('-');
+        $name = ucfirst($filter->filter($name));
+
+        return $name;
     }
 
 }
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFilter/InTestDependencyFilter.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFilter/InTestDependencyFilter.php
new file mode 100644
index 0000000..960947e
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFilter/InTestDependencyFilter.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\DependencyTree\DependencyFilter;
+
+use Spryker\Zed\Development\Business\DependencyTree\DependencyTree;
+
+/**
+ * Filters dependencies from DependencyTree where dependency was found in a test class.
+ */
+class InTestDependencyFilter implements DependencyFilterInterface
+{
+
+    /**
+     * @param array $dependency
+     *
+     * @return bool
+     */
+    public function filter(array $dependency)
+    {
+        return $dependency[DependencyTree::META_IN_TEST];
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/AbstractDependencyFinder.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/AbstractDependencyFinder.php
index f49b0ef..a417d94 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/AbstractDependencyFinder.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/AbstractDependencyFinder.php
@@ -79,6 +79,18 @@ abstract class AbstractDependencyFinder
     protected function addDependency(SplFileInfo $fileInfo, $to, array $dependencyInformation = [])
     {
         $dependencyInformation[DependencyTree::META_FINDER] = get_class($this);
+        $dependencyInformation[DependencyTree::META_IN_TEST] = false;
+
+        if (strpos($fileInfo->getPath(), '/tests/') !== false) {
+            $dependencyInformation[DependencyTree::META_IN_TEST] = true;
+        }
+
+        if (!isset($dependencyInformation[DependencyTree::META_IS_OPTIONAL])) {
+            $dependencyInformation[DependencyTree::META_IS_OPTIONAL] = false;
+            if (strpos($fileInfo->getPath(), '/Plugin/') !== false) {
+                $dependencyInformation[DependencyTree::META_IS_OPTIONAL] = true;
+            }
+        }
 
         $this->dependencyTree->addDependency($fileInfo, $to, $dependencyInformation);
     }
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependency.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependency.php
index 80f90b6..a7f8658 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependency.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependency.php
@@ -11,11 +11,25 @@ use PHP_CodeSniffer;
 use PHP_CodeSniffer_File;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyTree;
 use Symfony\Component\Finder\SplFileInfo;
+use Zend\Filter\Word\SeparatorToCamelCase;
 
 class ExternalDependency extends AbstractDependencyFinder
 {
 
     /**
+     * @var array
+     */
+    protected $externalToInternalNamespaceMap;
+
+    /**
+     * @param array $externalToInternalNamespaceMap
+     */
+    public function __construct(array $externalToInternalNamespaceMap)
+    {
+        $this->externalToInternalNamespaceMap = $externalToInternalNamespaceMap;
+    }
+
+    /**
      * @param \Symfony\Component\Finder\SplFileInfo $fileInfo
      *
      * @return void
@@ -74,13 +88,34 @@ class ExternalDependency extends AbstractDependencyFinder
             $dependencyInformation[DependencyTree::META_FOREIGN_CLASS_NAME] = $className;
             $dependencyInformation[DependencyTree::META_FOREIGN_IS_EXTERNAL] = true;
 
-            $this->addDependency($fileInfo, 'external', $dependencyInformation);
+            $to = $this->getInternalBundleNameForExternalDependency($className);
+
+            $this->addDependency($fileInfo, $to, $dependencyInformation);
         }
 
         $this->cleanAutoloader();
     }
 
     /**
+     * @param string $className
+     *
+     * @return string
+     */
+    protected function getInternalBundleNameForExternalDependency($className)
+    {
+        foreach ($this->externalToInternalNamespaceMap as $namespace => $internalComposerBundleName) {
+            if (strpos($className, $namespace) !== false) {
+                $foreignBundle = substr($internalComposerBundleName, 8);
+                $filter = new SeparatorToCamelCase('-');
+
+                return ucfirst($filter->filter($foreignBundle));
+            }
+        }
+
+        return 'external';
+    }
+
+    /**
      * @param array $classNameParts
      *
      * @return string
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/LocatorService.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/LocatorService.php
new file mode 100644
index 0000000..00e62cf
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/LocatorService.php
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\DependencyTree\DependencyFinder;
+
+use Spryker\Zed\Development\Business\DependencyTree\DependencyTree;
+use Symfony\Component\Finder\SplFileInfo;
+
+class LocatorService extends AbstractDependencyFinder
+{
+
+    const NO_LAYER = 'Default';
+    const BUNDLE = 'bundle';
+
+    /**
+     * @param \Symfony\Component\Finder\SplFileInfo $fileInfo
+     *
+     * @return void
+     */
+    public function addDependencies(SplFileInfo $fileInfo)
+    {
+        $content = $fileInfo->getContents();
+
+        if (!preg_match_all('/->(?<bundle>.*?)\(\)->service\(\)/', $content, $matches, PREG_SET_ORDER)) {
+            return;
+        }
+
+        foreach ($matches as $match) {
+            $toBundle = $match[static::BUNDLE];
+
+            if (preg_match('/->/', $toBundle)) {
+                $foundParts = explode('->', $toBundle);
+                $toBundle = array_pop($foundParts);
+            }
+
+            $toBundle = ucfirst($toBundle);
+            $foreignClassName = $this->getClassName($toBundle);
+            $dependencyInformation = [
+                DependencyTree::META_FOREIGN_LAYER => static::NO_LAYER,
+                DependencyTree::META_FOREIGN_CLASS_NAME => $foreignClassName,
+            ];
+            $this->addDependency($fileInfo, $toBundle, $dependencyInformation);
+        }
+    }
+
+    /**
+     * @param string $bundle
+     *
+     * @return string
+     */
+    private function getClassName($bundle)
+    {
+        return sprintf('Spryker\\Client\\%1$s\\\\%1$sClient', $bundle);
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyGraph/OutgoingGraphBuilder.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyGraph/OutgoingGraphBuilder.php
new file mode 100644
index 0000000..15c20e6
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyGraph/OutgoingGraphBuilder.php
@@ -0,0 +1,181 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\DependencyTree\DependencyGraph;
+
+use ArrayObject;
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
+use Spryker\Zed\Development\Business\Dependency\BundleParserInterface;
+use Spryker\Zed\Development\Business\Dependency\Manager;
+use Spryker\Zed\Graph\Communication\Plugin\GraphPlugin;
+
+class OutgoingGraphBuilder
+{
+
+    /**
+     * @var string
+     */
+    protected $bundleName;
+
+    /**
+     * @var \Spryker\Zed\Graph\Communication\Plugin\GraphPlugin
+     */
+    protected $graph;
+
+    /**
+     * @var \Spryker\Zed\Development\Business\Dependency\BundleParserInterface
+     */
+    protected $bundleParser;
+
+    /**
+     * @var \Spryker\Zed\Development\Business\Dependency\Manager
+     */
+    protected $dependencyManager;
+
+    /**
+     * @var array
+     */
+    protected $bundlesToFilter;
+
+    /**
+     * @param string $bundleName
+     * @param \Spryker\Zed\Graph\Communication\Plugin\GraphPlugin $graph
+     * @param \Spryker\Zed\Development\Business\Dependency\BundleParserInterface $bundleParser
+     * @param \Spryker\Zed\Development\Business\Dependency\Manager $dependencyManager
+     * @param array $bundlesToFilter
+     */
+    public function __construct($bundleName, GraphPlugin $graph, BundleParserInterface $bundleParser, Manager $dependencyManager, array $bundlesToFilter = [])
+    {
+        $this->bundleName = $bundleName;
+        $this->graph = $graph;
+        $this->bundleParser = $bundleParser;
+        $this->dependencyManager = $dependencyManager;
+        $this->bundlesToFilter = $bundlesToFilter;
+    }
+
+    /**
+     * @param bool $showIncomingDependencies
+     *
+     * @return string
+     */
+    public function build($showIncomingDependencies = false)
+    {
+        $this->graph->init('Outgoing dependencies', ['bgcolor' => '#f3f3f4']);
+
+        $allDependencies = new ArrayObject();
+        $this->buildGraph($this->bundleName, $allDependencies);
+
+        foreach ($allDependencies as $bundleName => $dependentBundles) {
+            $attributes = [
+                'label' => $bundleName . '<br /><font point-size="10">' . count($dependentBundles) . '</font>',
+                'url' => '/development/dependency/outgoing-graph?bundle=' . $bundleName,
+            ];
+
+            if ($this->bundleName === $bundleName) {
+                $attributes['fillcolor'] = '#ffffff';
+                $attributes['style'] = 'filled';
+                $attributes['label'] = $attributes['label'] . '<br /><font color="violet" point-size="13">' . (count($allDependencies) - 1) . ' (indirect)</font>';
+            }
+
+            $this->graph->addNode($bundleName, $attributes);
+        }
+
+        foreach ($allDependencies as $bundleName => $dependentBundles) {
+            foreach ($dependentBundles as $dependentBundle) {
+                if ($bundleName !== $dependentBundle) {
+                    $this->graph->addEdge($bundleName, $dependentBundle);
+                }
+            }
+        }
+
+        if ($showIncomingDependencies) {
+            $this->addIncomingDependencies();
+        }
+
+        return $this->graph->render('svg');
+    }
+
+    /**
+     * @return void
+     */
+    protected function addIncomingDependencies()
+    {
+        $incomingDependencies = array_keys($this->dependencyManager->parseIncomingDependencies($this->bundleName));
+
+        foreach ($incomingDependencies as $incomingBundle) {
+            $attributes = [
+                'url' => '/development/dependency/outgoing-graph?bundle=' . $incomingBundle,
+            ];
+            $this->graph->addNode($incomingBundle, $attributes);
+            $this->graph->addEdge($incomingBundle, $this->bundleName);
+        }
+    }
+
+    /**
+     * @param string $bundleName
+     * @param \ArrayObject $allDependencies
+     *
+     * @return void
+     */
+    protected function buildGraph($bundleName, ArrayObject $allDependencies)
+    {
+        $dependencies = $this->bundleParser->parseOutgoingDependencies($bundleName);
+        $dependencies = $this->getBundleNames($dependencies);
+
+        if ($bundleName === $this->bundleName) {
+            $dependencies = $this->filterBundles($dependencies);
+        }
+
+        $allDependencies[$bundleName] = $dependencies;
+        foreach ($dependencies as $dependentBundle) {
+            if (array_key_exists($dependentBundle, $allDependencies)) {
+                continue;
+            }
+            $this->buildGraph($dependentBundle, $allDependencies);
+        }
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return array
+     */
+    protected function getBundleNames(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $bundleNames = [];
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            $hasDependencyInSource = false;
+
+            foreach ($dependencyBundleTransfer->getDependencies() as $dependencyTransfer) {
+                if (!$dependencyTransfer->getIsInTest() && !$dependencyTransfer->getIsOptional()) {
+                    $hasDependencyInSource = true;
+                }
+            }
+
+            if ($hasDependencyInSource) {
+                $bundleNames[] = $dependencyBundleTransfer->getBundle();
+            }
+        }
+
+        return $bundleNames;
+    }
+
+    /**
+     * @param array $dependencies
+     *
+     * @return array
+     */
+    protected function filterBundles(array $dependencies)
+    {
+        $callback = function ($bundle) {
+            return !in_array($bundle, $this->bundlesToFilter);
+        };
+
+        return array_filter($dependencies, $callback);
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyTree.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyTree.php
index c02e746..82ebcc0 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyTree.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/DependencyTree.php
@@ -14,6 +14,8 @@ class DependencyTree extends AbstractDependencyTree
 
     const META_FINDER = 'finder';
     const META_FILE = 'file';
+    const META_IN_TEST = 'in test';
+    const META_IS_OPTIONAL = 'is optional';
     const META_CLASS_NAME = 'class name';
     const META_FOREIGN_BUNDLE = 'foreign bundle';
     const META_FOREIGN_BUNDLE_IS_ENGINE = 'foreign bundle is engine';
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/FileInfoExtractor.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/FileInfoExtractor.php
index 9de65e4..c7cfddd 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/FileInfoExtractor.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/FileInfoExtractor.php
@@ -48,6 +48,9 @@ class FileInfoExtractor
     {
         $classNameParts = $this->getClassNameParts($fileInfo);
 
+        if (!isset($classNameParts[3])) {
+            return 'tests';
+        }
         $layer = $classNameParts[3];
         if (in_array($layer, ['Business', 'Communication', 'Persistence'])) {
             return $layer;
@@ -83,6 +86,9 @@ class FileInfoExtractor
 
         $testsDirectoryPosition = array_search('tests', $pathParts);
         if ($testsDirectoryPosition) {
+            if (array_search('_support', $pathParts)) {
+                return ['Spryker', 'tests', $pathParts[$testsDirectoryPosition - 1], '_support'];
+            }
             return array_slice($pathParts, $testsDirectoryPosition + 2);
         }
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/Finder.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/Finder.php
index 1fab2a4..b638e64 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/Finder.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DependencyTree/Finder.php
@@ -85,12 +85,12 @@ class Finder
     private function getDirectories()
     {
         if ($this->application === '*') {
-            $directories = array_merge(
+            $directories = array_unique(array_merge(
                 $this->getZedDirectories(),
                 $this->getYvesDirectories(),
                 $this->getClientDirectories(),
                 $this->getSharedDirectories()
-            );
+            ));
 
             return $directories;
         }
@@ -112,6 +112,7 @@ class Finder
         return [
             $this->bundleDirectory . '/' . $this->bundle . '/src/Spryker/Zed/' . $this->bundle . '/' . $this->layer,
             $this->bundleDirectory . '/' . $this->bundle . '/tests/*/Spryker/Zed/' . $this->bundle . '/' . $this->layer,
+            $this->bundleDirectory . '/' . $this->bundle . '/tests/_support/',
         ];
     }
 
@@ -123,6 +124,7 @@ class Finder
         return [
             $this->bundleDirectory . '/' . $this->bundle . '/src/Spryker/Yves/' . $this->bundle,
             $this->bundleDirectory . '/' . $this->bundle . '/tests/*/Spryker/Yves/' . $this->bundle,
+            $this->bundleDirectory . '/' . $this->bundle . '/tests/_support/',
         ];
     }
 
@@ -134,6 +136,7 @@ class Finder
         return [
             $this->bundleDirectory . '/' . $this->bundle . '/src/Spryker/Client/' . $this->bundle,
             $this->bundleDirectory . '/' . $this->bundle . '/tests/*/Spryker/Client/' . $this->bundle,
+            $this->bundleDirectory . '/' . $this->bundle . '/tests/_support/',
         ];
     }
 
@@ -145,6 +148,7 @@ class Finder
         return [
             $this->bundleDirectory . '/' . $this->bundle . '/src/Spryker/Shared/' . $this->bundle . '/',
             $this->bundleDirectory . '/' . $this->bundle . '/tests/*/Spryker/Shared/' . $this->bundle . '/',
+            $this->bundleDirectory . '/' . $this->bundle . '/tests/_support/',
         ];
     }
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentBusinessFactory.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentBusinessFactory.php
index ed7e3f8..82f26d4 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentBusinessFactory.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentBusinessFactory.php
@@ -37,10 +37,12 @@ use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\ExternalDep
 use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\LocatorClient;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\LocatorFacade;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\LocatorQueryContainer;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\LocatorService;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\UseStatement;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyGraphBuilder;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\DetailedGraphBuilder;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\ExternalGraphBuilder;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\OutgoingGraphBuilder;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\SimpleGraphBuilder;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyHydrator\DependencyHydrator;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyHydrator\PackageNameHydrator;
@@ -70,6 +72,7 @@ use Spryker\Zed\Development\Business\IdeAutoCompletion\Generator\BundleGenerator
 use Spryker\Zed\Development\Business\IdeAutoCompletion\Generator\BundleMethodGenerator;
 use Spryker\Zed\Development\Business\IdeAutoCompletion\IdeAutoCompletionWriter;
 use Spryker\Zed\Development\Business\PhpMd\PhpMdRunner;
+use Spryker\Zed\Development\Business\Stability\StabilityCalculator;
 use Spryker\Zed\Development\DevelopmentDependencyProvider;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 use Symfony\Component\Finder\Finder as SymfonyFinder;
@@ -150,7 +153,7 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     {
         $config = $this->getConfig();
 
-        return new BundleParser($this->createFinder(), $config);
+        return new BundleParser($config);
     }
 
     /**
@@ -164,6 +167,14 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
+     * @return \Spryker\Zed\Development\Business\Stability\StabilityCalculatorInterface
+     */
+    public function createStabilityCalculator()
+    {
+        return new StabilityCalculator();
+    }
+
+    /**
      * @param string $application
      * @param string $bundle
      * @param string $layer
@@ -246,6 +257,7 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
             $this->createLocatorFacadeChecker(),
             $this->createLocatorQueryContainerChecker(),
             $this->createLocatorClientChecker(),
+            $this->createLocatorServiceChecker(),
             $this->createExternalDependencyChecker(),
         ];
     }
@@ -283,11 +295,19 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
+     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\LocatorClient
+     */
+    protected function createLocatorServiceChecker()
+    {
+        return new LocatorService();
+    }
+
+    /**
      * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\ExternalDependency
      */
     protected function createExternalDependencyChecker()
     {
-        return new ExternalDependency();
+        return new ExternalDependency($this->getConfig()->getExternalToInternalNamespaceMap());
     }
 
     /**
@@ -336,6 +356,33 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
+     * @param string $bundleToView
+     * @param array $excludedBundles
+     *
+     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\OutgoingGraphBuilder
+     */
+    public function createOutgoingDependencyGraphBuilder($bundleToView, array $excludedBundles = [])
+    {
+        $outgoingDependencyGraphBuilder = new OutgoingGraphBuilder(
+            $bundleToView,
+            $this->getGraph(),
+            $this->createDependencyBundleParser(),
+            $this->createDependencyManager(),
+            $excludedBundles
+        );
+
+        return $outgoingDependencyGraphBuilder;
+    }
+
+    /**
+     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\DetailedGraphBuilder
+     */
+    protected function createOutgoingGraphBuilder()
+    {
+        return new DetailedGraphBuilder($this->getGraph()->init('Dependency Tree'));
+    }
+
+    /**
      * @param bool $showEngineBundle
      * @param string|bool $bundleToView
      *
@@ -355,7 +402,7 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\DetailedGraphBuilder
+     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\SimpleGraphBuilder
      */
     protected function createSimpleGraphBuilder()
     {
@@ -433,7 +480,7 @@ class DevelopmentBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\DetailedGraphBuilder
+     * @return \Spryker\Zed\Development\Business\DependencyTree\DependencyGraph\ExternalGraphBuilder
      */
     protected function createExternalGraphBuilder()
     {
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacade.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacade.php
index b3b10d1..7162675 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacade.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacade.php
@@ -7,6 +7,7 @@
 
 namespace Spryker\Zed\Development\Business;
 
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
 
 /**
@@ -97,7 +98,7 @@ class DevelopmentFacade extends AbstractFacade implements DevelopmentFacadeInter
      *
      * @param string $bundleName
      *
-     * @return array
+     * @return \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
      */
     public function showOutgoingDependenciesForBundle($bundleName)
     {
@@ -143,6 +144,30 @@ class DevelopmentFacade extends AbstractFacade implements DevelopmentFacadeInter
     /**
      * @api
      *
+     * @return array
+     */
+    public function calculateStability()
+    {
+        return $this->getFactory()->createStabilityCalculator()->calculateStability();
+    }
+
+    /**
+     * @api
+     *
+     * @param string|bool $bundleToView
+     * @param array $excludedBundles
+     * @param bool $showIncomingDependencies
+     *
+     * @return string
+     */
+    public function drawOutgoingDependencyTreeGraph($bundleToView, array $excludedBundles = [], $showIncomingDependencies = false)
+    {
+        return $this->getFactory()->createOutgoingDependencyGraphBuilder($bundleToView, $excludedBundles)->build($showIncomingDependencies);
+    }
+
+    /**
+     * @api
+     *
      * @param string|bool $bundleToView
      *
      * @return string
@@ -220,14 +245,13 @@ class DevelopmentFacade extends AbstractFacade implements DevelopmentFacadeInter
     /**
      * @api
      *
-     * @param string $bundleName
-     * @param array $dependencies
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
      *
      * @return array
      */
-    public function getComposerDependencyComparison($bundleName, array $dependencies)
+    public function getComposerDependencyComparison(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
     {
-        return $this->getFactory()->createComposerDependencyParser()->getComposerDependencyComparison($bundleName, $dependencies);
+        return $this->getFactory()->createComposerDependencyParser()->getComposerDependencyComparison($bundleDependencyCollectionTransfer);
     }
 
     /**
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacadeInterface.php b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacadeInterface.php
index 42da456..c7e0cdc 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacadeInterface.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/DevelopmentFacadeInterface.php
@@ -7,6 +7,8 @@
 
 namespace Spryker\Zed\Development\Business;
 
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
+
 interface DevelopmentFacadeInterface
 {
 
@@ -96,6 +98,27 @@ interface DevelopmentFacadeInterface
     public function buildDependencyTree($application, $bundle, $layer);
 
     /**
+     * Specification:
+     * - Calculates the stability of each bundle.
+
+     * @api
+     *
+     * @return array
+     */
+    public function calculateStability();
+
+    /**
+     * @api
+     *
+     * @param string|bool $bundleToView
+     * @param array $excludedBundles
+     * @param bool $showIncomingDependencies
+     *
+     * @return string
+     */
+    public function drawOutgoingDependencyTreeGraph($bundleToView, array $excludedBundles = [], $showIncomingDependencies = false);
+
+    /**
      * @api
      *
      * @param string|bool $bundleToView
@@ -163,12 +186,11 @@ interface DevelopmentFacadeInterface
     /**
      * @api
      *
-     * @param string $bundleName
-     * @param array $dependencies
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
      *
      * @return array
      */
-    public function getComposerDependencyComparison($bundleName, array $dependencies);
+    public function getComposerDependencyComparison(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer);
 
     /**
      * @api
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculator.php b/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculator.php
new file mode 100644
index 0000000..91d9114
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculator.php
@@ -0,0 +1,217 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\Stability;
+
+use ArrayObject;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyFilter\ClassNameFilter;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyFilter\InTestDependencyFilter;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyFilter\TreeFilter;
+use Spryker\Zed\Development\Business\DependencyTree\DependencyTree;
+
+class StabilityCalculator implements StabilityCalculatorInterface
+{
+
+    /**
+     * @var array
+     */
+    protected $bundles = [];
+
+    /**
+     * @var array
+     */
+    protected $bundlesDependencies;
+
+    /**
+     * @var \Spryker\Zed\Development\Business\DependencyTree\DependencyFilter\TreeFilterInterface
+     */
+    protected $filter;
+
+    public function __construct()
+    {
+        $filter = new TreeFilter();
+        $filter->addFilter(new ClassNameFilter('/\\Dependency\\\(.*?)Interface/'))
+            ->addFilter(new InTestDependencyFilter());
+
+        $this->filter = $filter;
+    }
+
+    /**
+     * @return array
+     */
+    public function calculateStability()
+    {
+        $bundlesDependencies = json_decode(file_get_contents(APPLICATION_ROOT_DIR . '/data/dependencyTree.json'), true);
+
+        $this->bundlesDependencies = $this->filter($bundlesDependencies);
+
+        foreach ($this->bundlesDependencies as $bundlesDependency) {
+            if ($bundlesDependency[DependencyTree::META_IS_OPTIONAL] || $bundlesDependency[DependencyTree::META_IN_TEST]) {
+                continue;
+            }
+            $currentBundleName = $bundlesDependency['bundle'];
+            $outgoingBundleName = $bundlesDependency['foreign bundle'];
+
+            if (!isset($this->bundles[$currentBundleName])) {
+                $this->addInfoStack($currentBundleName);
+            }
+            if (!isset($this->bundles[$outgoingBundleName])) {
+                $this->addInfoStack($outgoingBundleName);
+            }
+
+            $this->bundles[$currentBundleName]['out'][$outgoingBundleName] = $outgoingBundleName;
+            $this->bundles[$outgoingBundleName]['in'][$currentBundleName] = $currentBundleName;
+        }
+
+        ksort($this->bundles);
+
+        $this->calculateBundlesStability();
+        $this->calculateIndirectBundlesStability();
+        $this->calculateSprykerStability();
+
+        return $this->bundles;
+    }
+
+    /**
+     * @param array $bundlesDependencies
+     *
+     * @return array
+     */
+    protected function filter(array $bundlesDependencies)
+    {
+        $callback = function (array $bundleDependency) {
+            return ($bundleDependency[DependencyTree::META_FOREIGN_BUNDLE] !== 'external');
+        };
+        $bundlesDependencies = array_filter($bundlesDependencies, $callback);
+        $bundlesDependencies = $this->filter->filter($bundlesDependencies);
+
+        return $bundlesDependencies;
+    }
+
+    /**
+     * @param string $bundle
+     *
+     * @return void
+     */
+    protected function addInfoStack($bundle)
+    {
+        $this->bundles[$bundle] = [
+            'in' => [],
+            'indirectIn' => [],
+            'out' => [],
+            'indirectOut' => [],
+            'stability' => 0,
+            'indirectStability' => 0,
+            'sprykerStability' => 0,
+        ];
+    }
+
+    /**
+     * @return void
+     */
+    protected function calculateBundlesStability()
+    {
+        foreach ($this->bundles as &$bundle) {
+            $stability = count($bundle['out']) / (count($bundle['in']) + count($bundle['out']));
+            $bundle['stability'] = number_format($stability, 3);
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected function calculateIndirectBundlesStability()
+    {
+        foreach ($this->bundles as $bundle => $info) {
+            $indirectOutgoingDependencies = new ArrayObject();
+            $this->buildIndirectOutgoingDependencies($bundle, $indirectOutgoingDependencies);
+            $this->bundles[$bundle]['indirectOut'] = $indirectOutgoingDependencies->getArrayCopy();
+
+            $indirectIncomingDependencies = new ArrayObject();
+            $incomingBundles = $this->bundles[$bundle]['in'];
+            $this->buildIndirectIncomingDependencies($bundle, $indirectIncomingDependencies);
+
+            $indirectIncomingDependencies = $indirectIncomingDependencies->getArrayCopy();
+            $callback = function ($bundle) use ($incomingBundles) {
+                return !in_array($bundle, $incomingBundles);
+            };
+            $indirectIncomingDependencies = array_filter($indirectIncomingDependencies, $callback);
+            $this->bundles[$bundle]['indirectIn'] = $indirectIncomingDependencies;
+            $indirectStability = count($this->bundles[$bundle]['indirectOut']) / (count($this->bundles[$bundle]['indirectIn']) + count($this->bundles[$bundle]['indirectOut']));
+
+            $this->bundles[$bundle]['indirectStability'] = number_format($indirectStability, 3);
+        }
+    }
+
+    /**
+     * @return void
+     */
+    protected function calculateSprykerStability()
+    {
+//        $max = 0;
+//        $min = 10000;
+//        $numberOfIndirectDependencies = [];
+//        foreach ($this->bundles as $bundle => $info) {
+//            $number = count($info['indirectIn']) + count($info['indirectOut']);
+//
+//            $max = $number > $max ? $number : $max;
+//            $min = $number < $min ? $number : $min;
+//            $numberOfIndirectDependencies[$bundle] = $number;
+//        }
+//
+//        foreach ($this->bundles as $bundle => $info) {
+//            $normalizedNumberOfAllDependencies = ($numberOfIndirectDependencies[$bundle] - $min) / ($max - $min);
+//
+//            $sprykerStability = ($info['stability'] + $info['indirectStability'] + $normalizedNumberOfAllDependencies) / 3;
+//            $this->bundles[$bundle]['sprykerStability'] = number_format($sprykerStability, 3);
+//        }
+
+        foreach ($this->bundles as $bundle => $info) {
+            $sprykerStability = (count($info['indirectIn']) * count($info['indirectOut'])) * (1 - abs(0.5 - $info['indirectStability']));
+            $this->bundles[$bundle]['sprykerStability'] = number_format($sprykerStability, 3);
+        }
+    }
+
+    /**
+     * @param string $bundleName
+     * @param \ArrayObject $indirectOutgoingDependencies
+     *
+     * @return void
+     */
+    protected function buildIndirectOutgoingDependencies($bundleName, ArrayObject $indirectOutgoingDependencies)
+    {
+        $dependencies = $this->bundles[$bundleName]['out'];
+
+        foreach ($dependencies as $dependentBundle) {
+            if (array_key_exists($dependentBundle, $indirectOutgoingDependencies)) {
+                continue;
+            }
+            $indirectOutgoingDependencies[$dependentBundle] = $dependentBundle;
+            $this->buildIndirectOutgoingDependencies($dependentBundle, $indirectOutgoingDependencies);
+        }
+    }
+
+    /**
+     * @param string $bundleName
+     * @param \ArrayObject $indirectIncomingDependencies
+     *
+     * @return void
+     */
+    protected function buildIndirectIncomingDependencies($bundleName, ArrayObject $indirectIncomingDependencies)
+    {
+        $dependencies = $this->bundles[$bundleName]['in'];
+
+        foreach ($dependencies as $dependentBundle) {
+            if (array_key_exists($dependentBundle, $indirectIncomingDependencies)) {
+                continue;
+            }
+            $indirectIncomingDependencies[$dependentBundle] = $dependentBundle;
+            $this->buildIndirectIncomingDependencies($dependentBundle, $indirectIncomingDependencies);
+        }
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculatorInterface.php b/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculatorInterface.php
new file mode 100644
index 0000000..b22271b
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Business/Stability/StabilityCalculatorInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Business\Stability;
+
+interface StabilityCalculatorInterface
+{
+
+    /**
+     * @return array
+     */
+    public function calculateStability();
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/BundleCreateConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/BundleCreateConsole.php
index 8753987..40e46fc 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/BundleCreateConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/BundleCreateConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputArgument;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeCreateConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeCreateConsole.php
index d0029eb..0c6c8ae 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeCreateConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeCreateConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputArgument;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodePhpMessDetectorConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodePhpMessDetectorConsole.php
index 7fc5fed..b70a9b7 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodePhpMessDetectorConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodePhpMessDetectorConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeStyleSnifferConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeStyleSnifferConsole.php
index 92b97ba..9e98fec 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeStyleSnifferConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeStyleSnifferConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputArgument;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeTestConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeTestConsole.php
index 903a393..56ce445 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeTestConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/CodeTestConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/ComposerJsonUpdaterConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/ComposerJsonUpdaterConsole.php
index 3f34c7d..5f83a45 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/ComposerJsonUpdaterConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/ComposerJsonUpdaterConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeBuilderConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeBuilderConsole.php
index 1b920f9..c68cd9b 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeBuilderConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeBuilderConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeDependencyViolationConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeDependencyViolationConsole.php
index b9b5038..6f97824 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeDependencyViolationConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/DependencyTreeDependencyViolationConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
@@ -59,21 +59,47 @@ class DependencyTreeDependencyViolationConsole extends Console
         foreach ($bundles as $bundle) {
             $violations = [];
             $dependencies = $this->getFacade()->showOutgoingDependenciesForBundle($bundle);
+            $composerDependencies = $this->getFacade()->getComposerDependencyComparison($dependencies);
+            foreach ($composerDependencies as $composerDependency) {
 
-            $composerDependencies = $this->getFacade()->getComposerDependencyComparison($bundle, array_keys($dependencies));
+                if (!$composerDependency['tests'] && !$composerDependency['src'] && ($composerDependency['composerRequire'] || $composerDependency['composerRequireDev'])) {
+                    if ($composerDependency['composerRequire']) {
+                        $violations[] = 'src: - / require: ' . $composerDependency['composerRequire'];
+                    }
+                }
 
-            foreach ($composerDependencies as $composerDependency) {
-                if ($composerDependency['code'] && $composerDependency['composer']) {
+                if ($this->isDevelopmentOnlyDependency($composerDependency)) {
                     continue;
                 }
-                if (!$composerDependency['code']) {
-                    $composerDependency['code'] = '-';
+
+                if ($this->isMissingInRequire($composerDependency)) {
+                    $violations[] = 'src: ' . $composerDependency['src'] . ' / require: -';
+                }
+
+                if ($composerDependency['isOptional'] && $composerDependency['composerRequire']) {
+                    $violations[] = $composerDependency['src'] . ' is optional but in require';
+                }
+
+                if ($this->isMissingInSrc($composerDependency)) {
+                    $violations[] = 'src: - / require: ' . $composerDependency['composerRequire'];
+                }
+
+                if ($this->isMissingInRequireDev($composerDependency)) {
+                    $violations[] = 'tests: ' . $composerDependency['tests'] . ' / require-dev: -';
                 }
-                if (!$composerDependency['composer']) {
-                    $composerDependency['composer'] = '-';
+
+                if ($this->isMissingInTests($composerDependency)) {
+                    $violations[] = 'tests: - / require-dev: ' . $composerDependency['composerRequireDev'];
+                }
+
+                if ($composerDependency['composerRequire'] && $composerDependency['composerRequireDev']) {
+                    $violations[] = 'defined in require and require-dev: ' . $composerDependency['composerRequireDev'];
+                }
+
+                if ($composerDependency['src'] && $composerDependency['isOptional'] && !$composerDependency['suggested']) {
+                    $violations[] = $composerDependency['src'] . ' is a optional but missing in composer suggest';
                 }
 
-                $violations[] = 'code: ' . $composerDependency['code'] . ' / composer: ' . $composerDependency['composer'];
             }
 
             if (!$violations) {
@@ -89,7 +115,58 @@ class DependencyTreeDependencyViolationConsole extends Console
         }
 
         $this->info(sprintf('%d bundle dependency issues found', $count));
+
         return $count > 0 ? static::CODE_ERROR : static::CODE_SUCCESS;
     }
 
+    /**
+     * @param array $composerDependency
+     *
+     * @return bool
+     */
+    protected function isDevelopmentOnlyDependency(array $composerDependency)
+    {
+        return (!$composerDependency['src'] && !$composerDependency['tests']);
+    }
+
+    /**
+     * @param array $composerDependency
+     *
+     * @return bool
+     */
+    protected function isMissingInRequire($composerDependency)
+    {
+        return ($composerDependency['src'] && !$composerDependency['composerRequire'] && !$composerDependency['isOptional']);
+    }
+
+    /**
+     * @param array $composerDependency
+     *
+     * @return bool
+     */
+    protected function isMissingInSrc($composerDependency)
+    {
+        return (!$composerDependency['src'] && $composerDependency['composerRequire']);
+    }
+
+    /**
+     * @param array $composerDependency
+     *
+     * @return bool
+     */
+    protected function isMissingInRequireDev($composerDependency)
+    {
+        return ($composerDependency['tests'] && !$composerDependency['composerRequire'] && !$composerDependency['composerRequireDev']);
+    }
+
+    /**
+     * @param array $composerDependency
+     *
+     * @return bool
+     */
+    protected function isMissingInTests($composerDependency)
+    {
+        return (!$composerDependency['tests'] && $composerDependency['composerRequireDev']);
+    }
+
 }
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateClientIdeAutoCompletionConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
index d6be1e2..360652d 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateIdeAutoCompletionConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateIdeAutoCompletionConsole.php
index d690865..bf03ba1 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateIdeAutoCompletionConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateIdeAutoCompletionConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
index 5d86616..0aa3045 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateYvesIdeAutoCompletionConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateYvesIdeAutoCompletionConsole.php
index 9804a13..604ca53 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateYvesIdeAutoCompletionConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateYvesIdeAutoCompletionConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateZedIdeAutoCompletionConsole.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
index 2457977..3cbe69a 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Development\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Controller/DependencyController.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Controller/DependencyController.php
index 59c9f7e..1c45252 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/Controller/DependencyController.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Controller/DependencyController.php
@@ -7,11 +7,13 @@
 
 namespace Spryker\Zed\Development\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Development\Communication\Form\BundlesFormType;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
  * @method \Spryker\Zed\Development\Business\DevelopmentFacade getFacade()
+ * @method \Spryker\Zed\Development\Communication\DevelopmentCommunicationFactory getFactory()
  */
 class DependencyController extends AbstractController
 {
@@ -41,13 +43,12 @@ class DependencyController extends AbstractController
     {
         $bundleName = $request->query->getAlnum(static::QUERY_KEY_BUNDLE);
 
-        $dependencies = $this->getFacade()->showOutgoingDependenciesForBundle($bundleName);
-
-        $composerDependencies = $this->getFacade()->getComposerDependencyComparison($bundleName, array_keys($dependencies));
+        $bundleDependencyCollectionTransfer = $this->getFacade()->showOutgoingDependenciesForBundle($bundleName);
+        $composerDependencies = $this->getFacade()->getComposerDependencyComparison($bundleDependencyCollectionTransfer);
 
         return $this->viewResponse([
             static::QUERY_KEY_BUNDLE => $bundleName,
-            'dependencies' => $dependencies,
+            'dependencies' => $bundleDependencyCollectionTransfer,
             'composerDependencies' => $composerDependencies,
         ]);
     }
@@ -57,6 +58,54 @@ class DependencyController extends AbstractController
      *
      * @return array
      */
+    public function outgoingGraphAction(Request $request)
+    {
+        $bundleName = $request->query->getAlnum(self::QUERY_KEY_BUNDLE);
+        $dataProvider = $this->getFactory()->createBundleFormDataProvider($request, $bundleName);
+
+        $form = $this->getFactory()
+            ->createBundlesForm(
+                $dataProvider->getData(),
+                $dataProvider->getOptions()
+            )
+            ->handleRequest($request);
+
+        $excludedBundles = [];
+        $showIncoming = false;
+
+        if ($form->isValid()) {
+            $formData = $form->getData();
+            if (isset($formData[BundlesFormType::EXCLUDED_BUNDLES])) {
+                $excludedBundles = $formData[BundlesFormType::EXCLUDED_BUNDLES];
+            }
+            if (isset($formData[BundlesFormType::SHOW_INCOMING])) {
+                $showIncoming = $formData[BundlesFormType::SHOW_INCOMING];
+            }
+        }
+
+        $graph = $this->getFacade()->drawOutgoingDependencyTreeGraph($bundleName, $excludedBundles, $showIncoming);
+
+        return $this->viewResponse([
+            'form' => $form->createView(),
+            'graph' => $graph,
+        ]);
+    }
+
+    /**
+     * @return array
+     */
+    public function stabilityAction()
+    {
+        return $this->viewResponse([
+            'bundles' => $this->getFacade()->calculateStability(),
+        ]);
+    }
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $request
+     *
+     * @return array
+     */
     public function incomingAction(Request $request)
     {
         $bundleName = $request->query->getAlnum(static::QUERY_KEY_BUNDLE);
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/DevelopmentCommunicationFactory.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/DevelopmentCommunicationFactory.php
index fbff2ef..7a70309 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/DevelopmentCommunicationFactory.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/DevelopmentCommunicationFactory.php
@@ -7,11 +7,45 @@
 
 namespace Spryker\Zed\Development\Communication;
 
+use Spryker\Zed\Development\Communication\Form\BundlesFormType;
+use Spryker\Zed\Development\Communication\Form\DataProvider\BundleFormDataProvider;
 use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+use Symfony\Component\HttpFoundation\Request;
 
 /**
  * @method \Spryker\Zed\Development\DevelopmentConfig getConfig()
+ * @method \Spryker\Zed\Development\Business\DevelopmentFacade getFacade()
  */
 class DevelopmentCommunicationFactory extends AbstractCommunicationFactory
 {
+
+    /**
+     * @param array $data
+     * @param array $options
+     *
+     * @return \Symfony\Component\Form\FormInterface
+     */
+    public function createBundlesForm(array $data = [], array $options = [])
+    {
+        $bundlesFormType = new BundlesFormType();
+
+        return $this->getFormFactory()->create($bundlesFormType, $data, $options);
+    }
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param string $bundle
+     *
+     * @return \Spryker\Zed\Development\Communication\Form\DataProvider\BundleFormDataProvider
+     */
+    public function createBundleFormDataProvider(Request $request, $bundle)
+    {
+        $bundleFormDataProvider = new BundleFormDataProvider(
+            $request,
+            $this->getFacade()->showOutgoingDependenciesForBundle($bundle)
+        );
+
+        return $bundleFormDataProvider;
+    }
+
 }
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/BundlesFormType.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/BundlesFormType.php
new file mode 100644
index 0000000..af23423
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/BundlesFormType.php
@@ -0,0 +1,61 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Communication\Form;
+
+use Symfony\Component\Form\AbstractType;
+use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
+use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
+use Symfony\Component\Form\FormBuilderInterface;
+use Symfony\Component\OptionsResolver\OptionsResolver;
+
+class BundlesFormType extends AbstractType
+{
+
+    const FORM_TYPE_NAME = 'bundlesFormType';
+    const BUNDLE_NAME_CHOICES = 'bundleNames';
+    const EXCLUDED_BUNDLES = 'excludedBundles';
+    const SHOW_INCOMING = 'showIncoming';
+
+    /**
+     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
+     *
+     * @return void
+     */
+    public function configureOptions(OptionsResolver $resolver)
+    {
+        $resolver->setRequired(static::BUNDLE_NAME_CHOICES);
+    }
+
+    /**
+     * @return string
+     */
+    public function getName()
+    {
+        return static::FORM_TYPE_NAME;
+    }
+
+    /**
+     * @param \Symfony\Component\Form\FormBuilderInterface $builder
+     * @param array $options
+     *
+     * @return void
+     */
+    public function buildForm(FormBuilderInterface $builder, array $options)
+    {
+        $builder->add(static::EXCLUDED_BUNDLES, ChoiceType::class, [
+            'expanded' => true,
+            'multiple' => true,
+            'choices' => $options[static::BUNDLE_NAME_CHOICES],
+        ]);
+
+        $builder->add(static::SHOW_INCOMING, CheckboxType::class, [
+            'required' => false,
+        ]);
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/DataProvider/BundleFormDataProvider.php b/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/DataProvider/BundleFormDataProvider.php
new file mode 100644
index 0000000..b5b5f8e
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/Form/DataProvider/BundleFormDataProvider.php
@@ -0,0 +1,98 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Development\Communication\Form\DataProvider;
+
+use Generated\Shared\Transfer\BundleDependencyCollectionTransfer;
+use Spryker\Zed\Development\Communication\Form\BundlesFormType;
+use Symfony\Component\HttpFoundation\Request;
+
+class BundleFormDataProvider
+{
+
+    /**
+     * @var \Symfony\Component\HttpFoundation\Request
+     */
+    protected $request;
+
+    /**
+     * @var \Generated\Shared\Transfer\BundleDependencyCollectionTransfer
+     */
+    protected $bundleDependencyCollectionTransfer;
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     */
+    public function __construct(Request $request, BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $this->request = $request;
+        $this->bundleDependencyCollectionTransfer = $bundleDependencyCollectionTransfer;
+    }
+
+    /**
+     * @return array
+     */
+    public function getData()
+    {
+        $excludedBundles = [];
+        if ($this->request->request->has(BundlesFormType::FORM_TYPE_NAME)) {
+            $formData = $this->request->request->get(BundlesFormType::FORM_TYPE_NAME);
+            if (isset($formData[BundlesFormType::EXCLUDED_BUNDLES])) {
+                $excludedBundles = $formData[BundlesFormType::EXCLUDED_BUNDLES];
+            }
+        }
+
+        return [BundlesFormType::BUNDLE_NAME_CHOICES => $excludedBundles];
+    }
+
+    /**
+     * @return array
+     */
+    public function getOptions()
+    {
+        return [
+            BundlesFormType::BUNDLE_NAME_CHOICES => $this->getBundleChoices(),
+        ];
+    }
+
+    /**
+     * @return array
+     */
+    protected function getBundleChoices()
+    {
+        $dependencies = $this->getBundleNames($this->bundleDependencyCollectionTransfer);
+
+        return array_combine($dependencies, $dependencies);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer
+     *
+     * @return array
+     */
+    protected function getBundleNames(BundleDependencyCollectionTransfer $bundleDependencyCollectionTransfer)
+    {
+        $bundleNames = [];
+        foreach ($bundleDependencyCollectionTransfer->getDependencyBundles() as $dependencyBundleTransfer) {
+            $hasDependencyInSource = false;
+
+            foreach ($dependencyBundleTransfer->getDependencies() as $dependencyTransfer) {
+                if (!$dependencyTransfer->getIsInTest() && !$dependencyTransfer->getIsOptional()) {
+                    $hasDependencyInSource = true;
+                }
+            }
+
+            if ($hasDependencyInSource) {
+                $bundleNames[] = $dependencyBundleTransfer->getBundle();
+            }
+        }
+
+        return $bundleNames;
+    }
+
+}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Communication/navigation.xml b/Bundles/Development/src/Spryker/Zed/Development/Communication/navigation.xml
index 09750e5..9730f17 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Communication/navigation.xml
+++ b/Bundles/Development/src/Spryker/Zed/Development/Communication/navigation.xml
@@ -10,6 +10,14 @@
                 <action>index</action>
                 <icon>fa-archive</icon>
             </dependencies>
+            <stability>
+                <label>Stability</label>
+                <title>Bundles stability</title>
+                <bundle>development</bundle>
+                <controller>dependency</controller>
+                <action>stability</action>
+                <icon>fa-globe</icon>
+            </stability>
         </pages>
     </maintenance>
 </config>
diff --git a/Bundles/Development/src/Spryker/Zed/Development/DevelopmentConfig.php b/Bundles/Development/src/Spryker/Zed/Development/DevelopmentConfig.php
index d83d1fd..68524e5 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/DevelopmentConfig.php
+++ b/Bundles/Development/src/Spryker/Zed/Development/DevelopmentConfig.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Development;
 
-use Spryker\Shared\Application\ApplicationConstants;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Development\Business\IdeAutoCompletion\IdeAutoCompletionConstants;
 use Spryker\Zed\Development\Business\IdeAutoCompletion\IdeAutoCompletionOptionConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
@@ -20,7 +20,7 @@ class DevelopmentConfig extends AbstractBundleConfig
      */
     public function getBundleDirectory()
     {
-        return $this->getConfig()->get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . DIRECTORY_SEPARATOR;
+        return $this->getConfig()->get(KernelConstants::SPRYKER_ROOT) . DIRECTORY_SEPARATOR;
     }
 
     /**
@@ -102,7 +102,7 @@ class DevelopmentConfig extends AbstractBundleConfig
     {
         return [
             'Psr\\' => 'spryker/log',
-            'Propel\\' => 'spryker/propel',
+            'Propel\\' => 'spryker/propel-orm',
             'Silex\\' => 'spryker/silex',
             'Pimple\\' => 'spryker/pimple',
             'Predis\\' => 'spryker/redis',
@@ -125,7 +125,7 @@ class DevelopmentConfig extends AbstractBundleConfig
     {
         return [
             'psr/log' => 'spryker/log',
-            'propel/propel' => 'spryker/propel',
+            'propel/propel' => 'spryker/propel-orm',
             'silex/silex' => 'spryker/silex',
             'pimple/pimple' => 'spryker/pimple',
             'mandrill/mandrill' => 'spryker/mandrill',
@@ -229,8 +229,8 @@ class DevelopmentConfig extends AbstractBundleConfig
     public function getIdeAutoCompletionSourceDirectoryGlobPatterns()
     {
         return [
-            $this->get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . '/*/src/' => 'Spryker/*/',
-            APPLICATION_SOURCE_DIR . '/' => $this->get(ApplicationConstants::PROJECT_NAMESPACE) . '/*/',
+            $this->get(KernelConstants::SPRYKER_ROOT) . '/*/src/' => 'Spryker/*/',
+            APPLICATION_SOURCE_DIR . '/' => $this->get(KernelConstants::PROJECT_NAMESPACE) . '/*/',
         ];
     }
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/index.twig b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/index.twig
index 704de75..681e344 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/index.twig
+++ b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/index.twig
@@ -14,6 +14,7 @@
                             <td>
                                 <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/incoming', {bundle: bundle}) }}">in</a>&nbsp;
                                 <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/outgoing', {bundle: bundle}) }}">out</a>&nbsp;
+                                <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/outgoing-graph', {bundle: bundle}) }}">out graph</a>&nbsp;
                                 <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/simple', {bundle: bundle}) }}">simple</a>&nbsp;
                                 <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/dependency-tree-graph', {bundle: bundle}) }}">detailed</a>&nbsp;
                                 <a class="btn btn-xs btn-default" href="{{ url('/development/dependency/adjacency-matrix', {bundle: bundle}) }}">adjacency</a>
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-graph.twig b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-graph.twig
new file mode 100644
index 0000000..43f7415
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-graph.twig
@@ -0,0 +1,14 @@
+{% extends '@Application/Layout/layout.twig' %}
+{% block content %}
+    <div class="row">
+        <div class="col-lg-2">
+            {{ form_start(form) }}
+                {{ form_widget(form) }}
+                <input type="submit" class="btn btn-primary" value="{{ 'Reload' | trans }}" />
+            {{ form_end(form) }}
+        </div>
+        <div class="col-lg-10" style="overflow:scroll">
+            {{ graph | raw }}
+        </div>
+    </div>
+{% endblock %}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-old.twig b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-old.twig
new file mode 100644
index 0000000..6b72ba6
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing-old.twig
@@ -0,0 +1,99 @@
+{% extends '@Application/Layout/layout.twig' %}
+{% block content %}
+    <div class="spy-layout sparse">
+
+        <table class="table table-striped spy-grid">
+
+            <tr>
+                <td colspan="4"><h3>{{ "Outgoing dependencies of the" | trans }} {{ bundle }} {{ "bundle" | trans }}</h3></td>
+            </tr>
+
+            <tr>
+                <th>{{ 'Dependency' | trans }}</th>
+                <th>{{ 'Count' | trans }}</th>
+                <th>{{ 'in src' | trans }}</th>
+                <th>{{ 'in tests' | trans }}</th>
+            </tr>
+
+            {% for dependencyBundle in dependencies.dependencyBundles %}
+                <tr>
+                    <td><a href="/development/dependency/outgoing?bundle={{ dependencyBundle.bundle }}">{{ dependencyBundle.bundle }}</a></td>
+                    <td>{{ dependencyBundle.dependencies | length }}</td>
+                    {% set inSrc = 0 %}
+                    {% set inTest = 0 %}
+                    {% for dependency in dependencyBundle.dependencies  %}
+                        {% if dependency.isInTest %}
+                            {% set inTest = inTest + 1 %}
+                        {% else %}
+                            {% set inSrc = inSrc + 1 %}
+                        {% endif %}
+                    {% endfor %}
+                    <td>{{ inSrc }}</td>
+                    <td>{{ inTest }}</td>
+                </tr>
+            {% endfor %}
+
+            <tr>
+                <td colspan="4"><h3>{{ "Composer dependencies" | trans }}</h3></td>
+            </tr>
+
+            <tr>
+                <th colspan="2">{{ 'Found in src' | trans }}</th>
+                <th>{{ 'Declared in composer.json' | trans }}</th>
+                <th>{{ 'Declared in composer.json (dev)' | trans }}</th>
+            </tr>
+
+            {% set hasDevOnlyRequirements = false %}
+            {% for composerDependency in composerDependencies %}
+
+                {% if composerDependency.src or composerDependency.composerRequire %}
+                    <tr>
+                        <td colspan="2"{% if not composerDependency.composerRequire %} style="color: red"{% endif %}>{{ composerDependency.src }}</td>
+                        <td{% if not composerDependency.src %} style="color: red"{% endif %}>{{ composerDependency.composerRequire }}</td>
+                        <td{% if composerDependency.tests and not composerDependency.composerRequireDev %} style="color: red"{% endif %}> {{ composerDependency.composerRequireDev }}</td>
+                    </tr>
+                {% else %}
+                    {% set hasDevOnlyRequirements = true %}
+                {% endif %}
+
+            {% endfor %}
+
+            <tr>
+                <th colspan="3">{{ 'Found in test' | trans }}</th>
+                <th>{{ 'Declared in composer.json (dev)' | trans }}</th>
+            </tr>
+
+            {% for composerDependency in composerDependencies %}
+                {% if composerDependency.tests or composerDependency.src %}
+                    {% if (composerDependency.tests or composerDependency.composerRequireDev) and not composerDependency.src %}
+                        <tr>
+                            <td colspan="3">{{ composerDependency.tests }}</td>
+                            <td{% if composerDependency.tests and not composerDependency.composerRequireDev %} style="color: red"{% endif %}> {{ composerDependency.tests }}</td>
+                        </tr>
+                    {% elseif (not composerDependency.tests and composerDependency.composerRequireDev) %}
+                        <tr>
+                            <td colspan="3">{{ composerDependency.tests }}</td>
+                            <td style="color: red">{{ composerDependency.composerRequireDev }}</td>
+                        </tr>
+                    {% endif %}
+                {% endif %}
+            {% endfor %}
+
+            {% if hasDevOnlyRequirements %}
+                <tr>
+                    <td colspan="4"><h3>{{ "Composer dev only dependencies" | trans }}</h3></td>
+                </tr>
+
+                {% for composerDependency in composerDependencies %}
+                    {% if not composerDependency.src and not composerDependency.tests %}
+                    <tr>
+                        <td colspan="3">&nbsp;</td>
+                        <td>{{ composerDependency.composerRequireDev }}</td>
+                    </tr>
+                    {% endif %}
+                {% endfor %}
+            {% endif %}
+        </table>
+    </div>
+
+{% endblock %}
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing.twig b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing.twig
index 84b1b88..b5cc60f 100644
--- a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing.twig
+++ b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/outgoing.twig
@@ -1,36 +1,103 @@
 {% extends '@Application/Layout/layout.twig' %}
 {% block content %}
     <div class="spy-layout sparse">
-        <h3>{{ "Outgoing dependencies of the" | trans }} {{ bundle }} {{ "bundle" | trans }}</h3>
+
         <table class="table table-striped spy-grid">
-            <tr class="text-left">
+
+            <tr>
+                <td colspan="4"><h3>{{ "Outgoing dependencies of the" | trans }} {{ bundle }} {{ "bundle" | trans }}</h3></td>
+            </tr>
+
+            <tr>
                 <th>{{ 'Dependency' | trans }}</th>
                 <th>{{ 'Count' | trans }}</th>
+                <th>{{ 'in src' | trans }}</th>
+                <th>{{ 'in tests' | trans }}</th>
             </tr>
-            {% for dependency, count in dependencies %}
+
+            {% for dependencyBundle in dependencies.dependencyBundles %}
                 <tr>
-                    <td>{{ dependency }}</td>
-                    <td>{{ count }}</td>
+                    <td><a href="/development/dependency/outgoing?bundle={{ dependencyBundle.bundle }}">{{ dependencyBundle.bundle }}</a></td>
+                    <td>{{ dependencyBundle.dependencies | length }}</td>
+                    {% set inSrc = 0 %}
+                    {% set inTest = 0 %}
+                    {% for dependency in dependencyBundle.dependencies  %}
+                        {% if dependency.isInTest %}
+                            {% set inTest = inTest + 1 %}
+                        {% else %}
+                            {% set inSrc = inSrc + 1 %}
+                        {% endif %}
+                    {% endfor %}
+                    <td>{{ inSrc }}</td>
+                    <td>{{ inTest }}</td>
                 </tr>
             {% endfor %}
-        </table>
-    </div>
 
-    <hr>
+            <tr>
+                <td colspan="4"><h3>{{ "Composer dependencies" | trans }}</h3></td>
+            </tr>
 
-    <div class="spy-layout sparse">
-        <h3>{{ "Composer dependencies" | trans }}</h3>
-        <table class="table table-striped spy-grid">
-            <tr class="text-left">
-                <th>{{ 'Found in code' | trans }}</th>
-                <th>{{ 'Declared in composer.json' | trans }}</th>
+            <tr>
+                <th colspan="2">{{ 'Bundle' | trans }}</th>
+                <th>{{ 'require' | trans }}</th>
+                <th>{{ 'require-dev' | trans }}</th>
             </tr>
+
+            {% set hasDevOnlyRequirements = false %}
+
             {% for composerDependency in composerDependencies %}
+
+                    {% if not composerDependency.src and not composerDependency.tests and not composerDependency.composerRequire %}
+                        {% set hasDevOnlyRequirements = true %}
+                    {% else %}
+
+                        {% if not composerDependency.isOptional or (composerDependency.isOptional and (composerDependency.composerRequire or composerDependency.composerRequireDev)) or (composerDependency.tests and not composerDependency.composerRequireDev) %}
+                            {% set bundleName = composerDependency.src ? composerDependency.src : composerDependency.tests %}
+
+                            <tr>
+                                <td colspan="2"{% if (composerDependency.src and not composerDependency.composerRequire and not composerDependency.suggested) or (not composerDependency.composerRequire and not composerDependency.composerRequireDev) %} style="color: red"{% endif %}>
+                                    {{ bundleName }}
+                                </td>
+                                <td{% if (not composerDependency.src and composerDependency.composerRequire) or (composerDependency.isOptional) %} style="color: red"{% endif %}>
+                                    {{ composerDependency.composerRequire }}
+                                </td>
+                                <td{% if (composerDependency.tests and not composerDependency.composerRequireDev) or (composerDependency.src and composerDependency.tests and composerDependency.composerRequire) %} style="color: red"{% endif %}>
+                                    {{ composerDependency.composerRequireDev }}
+                                </td>
+                            </tr>
+
+                        {% endif %}
+
+                    {% endif %}
+
+            {% endfor %}
+
+            <tr>
+                <td colspan="4"><h3>{{ "Suggested dependencies" | trans }}</h3></td>
+            </tr>
+            {% for composerDependency in composerDependencies %}
+                {% if composerDependency.src and composerDependency.isOptional %}
+                    <tr>
+                        <td colspan="4"{% if composerDependency.src and not composerDependency.suggested %} style="color: red"{% endif %}>{{ composerDependency.src }}</td>
+                    </tr>
+                {% endif %}
+            {% endfor %}
+
+            {% if hasDevOnlyRequirements %}
                 <tr>
-                    <td{% if not composerDependency.composer %} style="color: red"{% endif %}>{{ composerDependency.code }}</td>
-                    <td{% if not composerDependency.code %} style="color: red"{% endif %}>{{ composerDependency.composer }}</td>
+                    <td colspan="4"><h3>{{ "Dev only dependencies" | trans }}</h3></td>
                 </tr>
-            {% endfor %}
+
+                {% for composerDependency in composerDependencies %}
+                    {% if not composerDependency.src and not composerDependency.tests %}
+                    <tr>
+                        <td colspan="3">&nbsp;</td>
+                        <td>{{ composerDependency.composerRequireDev }}</td>
+                    </tr>
+                    {% endif %}
+                {% endfor %}
+            {% endif %}
+
         </table>
     </div>
 
diff --git a/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/stability.twig b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/stability.twig
new file mode 100644
index 0000000..c47870a
--- /dev/null
+++ b/Bundles/Development/src/Spryker/Zed/Development/Presentation/Dependency/stability.twig
@@ -0,0 +1,44 @@
+{% extends '@Application/Layout/layout.twig' %}
+
+{% block content %}
+
+    {% embed '@Gui/Partials/widget.twig' with { widget_title: 'Stability of all core bundles' } %}
+        {% block widget_content %}
+            {% set sum = 0 %}
+            <div class="spy-layout sparse">
+                <p>
+                    Stability is calculated by "incoming dependencies / ( incoming dependencies + outgoing dependencies )" the result will be between 0 (stable) and 1 (unstable)
+                </p>
+                <table class="table table-striped spy-grid">
+                    <tr>
+                        <th style="width: 50%;">Bundle</th>
+                        <th style="text-align:right">Incoming</th>
+                        <th style="text-align:right">Outgoing</th>
+                        <th style="text-align:right">Stability</th>
+                        <th style="text-align:right">Indirect Incoming</th>
+                        <th style="text-align:right">Indirect Outgoing</th>
+                        <th style="text-align:right">Indirect Stability</th>
+                        <th style="text-align:right">Spryker Stability</th>
+                    </tr>
+                    {% for bundle, info in bundles %}
+                        {% set sum = sum + info.indirectOut | length %}
+                        <tr>
+                            <td>
+                                <a href="/development/dependency/outgoing-graph?bundle={{ bundle }}" target="_blank">{{ bundle }}</a>
+                            </td>
+                            <td align="right">{{ info.in | length }}</td>
+                            <td align="right">{{ info.out | length }}</td>
+                            <td align="right">{{ info.stability }}</td>
+                            <td align="right">{{ info.indirectIn | length }}</td>
+                            <td align="right">{{ info.indirectOut | length }}</td>
+                            <td align="right">{{ info.indirectStability }}</td>
+                            <td{% if info.sprykerStability > 150 %} style="color: red"{% endif %} align="right">{{ info.sprykerStability }}</td>
+                        </tr>
+                    {% endfor %}
+                </table>
+                <p>SUM {{ sum }}</p>
+            </div>
+        {% endblock %}
+    {% endembed %}
+
+{% endblock %}
diff --git a/Bundles/Development/tests/Unit/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependencyTest.php b/Bundles/Development/tests/Unit/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependencyTest.php
index 784077d..f92cc3b 100644
--- a/Bundles/Development/tests/Unit/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependencyTest.php
+++ b/Bundles/Development/tests/Unit/Spryker/Zed/Development/Business/DependencyTree/DependencyFinder/ExternalDependencyTest.php
@@ -11,6 +11,7 @@ use PHPUnit_Framework_TestCase;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyFinder\ExternalDependency;
 use Spryker\Zed\Development\Business\DependencyTree\DependencyTree;
 use Spryker\Zed\Development\Business\DependencyTree\FileInfoExtractor;
+use Spryker\Zed\Development\DevelopmentConfig;
 use Symfony\Component\Finder\Finder;
 
 /**
@@ -46,8 +47,9 @@ class ExternalDependencyTest extends PHPUnit_Framework_TestCase
      */
     public function testAddDependency()
     {
+        $developmentConfig = new DevelopmentConfig();
         $testFile = $this->getTestFile();
-        $dependencyFinder = new ExternalDependency();
+        $dependencyFinder = new ExternalDependency($developmentConfig->getExternalToInternalNamespaceMap());
         $dependencyTree = new DependencyTree(new FileInfoExtractor(), []);
         $dependencyFinder->setDependencyTree($dependencyTree);
         $dependencyFinder->addDependencies($testFile);
diff --git a/Bundles/Discount/composer.json b/Bundles/Discount/composer.json
index 3e4cbbf..064eae9 100644
--- a/Bundles/Discount/composer.json
+++ b/Bundles/Discount/composer.json
@@ -1,22 +1,25 @@
 {
   "name": "spryker/discount",
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/gui": "^2.2.0",
     "spryker/kernel": "^2.0.0",
     "spryker/log": "^2.0.0",
     "spryker/messenger": "^2.0.0",
     "spryker/money": "^1.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^2.1.1",
-    "spryker/url": "^2.0.0"
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/sales-split": "^1.0.0 || ^2.0.0",
-    "spryker/testify": "*"
+    "spryker/propel": "*",
+    "spryker/silex": "*",
+    "spryker/testify": "*",
+    "spryker/transfer": "^*"
+  },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
   },
   "description": "Discount bundle",
   "license": "proprietary",
diff --git a/Bundles/Discount/dependency.json b/Bundles/Discount/dependency.json
deleted file mode 100644
index ff3fbc9..0000000
--- a/Bundles/Discount/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "Transfer": "Required by transfer XML"
-  },
-  "exclude": {
-  }
-}
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/IndexController.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/IndexController.php
index 2512984..3d9d6d7 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/IndexController.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/IndexController.php
@@ -8,10 +8,10 @@ namespace Spryker\Zed\Discount\Communication\Controller;
 
 use Generated\Shared\Transfer\DiscountConfiguratorTransfer;
 use Generated\Shared\Transfer\VoucherCreateInfoTransfer;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Discount\DiscountConstants;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Gui\Communication\Table\TableParameters;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/QueryStringController.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/QueryStringController.php
index 6b2182f..7759e4f 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/QueryStringController.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/QueryStringController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Discount\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/SalesController.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/SalesController.php
index 6191ed9..2e1d46c 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/SalesController.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/SalesController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Discount\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 class SalesController extends AbstractController
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/VoucherController.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/VoucherController.php
index f4b6df7..2b05a68 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/VoucherController.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Controller/VoucherController.php
@@ -6,8 +6,8 @@
 
 namespace Spryker\Zed\Discount\Communication\Controller;
 
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/DiscountCommunicationFactory.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/DiscountCommunicationFactory.php
index 488a950..51812a2 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/DiscountCommunicationFactory.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/DiscountCommunicationFactory.php
@@ -9,7 +9,6 @@ namespace Spryker\Zed\Discount\Communication;
 use Generated\Shared\Transfer\DataTablesTransfer;
 use Generated\Shared\Transfer\DiscountConfiguratorTransfer;
 use Generated\Shared\Transfer\DiscountVoucherTransfer;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Discount\Communication\Form\CalculatorForm;
 use Spryker\Zed\Discount\Communication\Form\ConditionsForm;
 use Spryker\Zed\Discount\Communication\Form\DataProvider\CalculatorFormDataProvider;
@@ -170,14 +169,6 @@ class DiscountCommunicationFactory extends AbstractCommunicationFactory
     }
 
     /**
-     * @return \Symfony\Component\Form\FormFactoryInterface
-     */
-    protected function getFormFactory()
-    {
-        return (new Pimple())->getApplication()[self::FORM_FACTORY];
-    }
-
-    /**
      * @return \Spryker\Zed\Discount\Dependency\Plugin\DiscountCalculatorPluginInterface[]
      */
     public function getCalculatorPlugins()
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/CalculatorForm.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/CalculatorForm.php
index 2477dc8..5d8471b 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/CalculatorForm.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/CalculatorForm.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Discount\Communication\Form;
 
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Discount\Business\DiscountFacade;
 use Spryker\Zed\Discount\Business\Exception\CalculatorException;
 use Spryker\Zed\Discount\Business\QueryString\Specification\MetaData\MetaProviderFactory;
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/ConditionsForm.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/ConditionsForm.php
index 9133fba..31c1d10 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/ConditionsForm.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Form/ConditionsForm.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Discount\Communication\Form;
 
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Discount\Business\DiscountFacade;
 use Spryker\Zed\Discount\Business\QueryString\Specification\MetaData\MetaProviderFactory;
 use Spryker\Zed\Discount\Communication\Form\Constraint\QueryString;
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountVoucherCodesTable.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountVoucherCodesTable.php
index 6ff6164..37e267c 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountVoucherCodesTable.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountVoucherCodesTable.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Discount\Communication\Table;
 use Generated\Shared\Transfer\DataTablesTransfer;
 use Orm\Zed\Discount\Persistence\Map\SpyDiscountVoucherTableMap;
 use Orm\Zed\Discount\Persistence\SpyDiscountVoucher;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Discount\Persistence\DiscountQueryContainerInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountsTable.php b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountsTable.php
index c6208f9..5cba212 100644
--- a/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountsTable.php
+++ b/Bundles/Discount/src/Spryker/Zed/Discount/Communication/Table/DiscountsTable.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Discount\Communication\Table;
 use Orm\Zed\Discount\Persistence\Map\SpyDiscountTableMap;
 use Orm\Zed\Discount\Persistence\SpyDiscount;
 use Orm\Zed\Discount\Persistence\SpyDiscountQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
@@ -237,7 +237,7 @@ class DiscountsTable extends AbstractTable
     }
 
     /**
-     * @param \Spryker\Shared\Url\Url $viewDiscountUrl
+     * @param \Spryker\Service\UtilText\Model\Url\Url $viewDiscountUrl
      * @param string $visibility
      *
      * @return string
diff --git a/Bundles/DiscountCalculationConnector/composer.json b/Bundles/DiscountCalculationConnector/composer.json
index 39ff16e..78b5b78 100644
--- a/Bundles/DiscountCalculationConnector/composer.json
+++ b/Bundles/DiscountCalculationConnector/composer.json
@@ -8,13 +8,15 @@
   "require": {
     "spryker/discount": "^2.0.0 || ^3.2.1",
     "spryker/kernel": "^2.0.0",
-    "spryker/tax": "^3.0.0",
-    "spryker/transfer": "^2.0.0"
+    "spryker/tax": "^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation."
+  },
   "description": "DiscountCalculationConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/DiscountCalculationConnector/tests/Functional.suite.yml b/Bundles/DiscountCalculationConnector/tests/Functional.suite.yml
deleted file mode 100644
index dd6b27a..0000000
--- a/Bundles/DiscountCalculationConnector/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \DiscountCalculationConnector\Module\Functional
diff --git a/Bundles/DiscountCalculationConnector/tests/Functional/_bootstrap.php b/Bundles/DiscountCalculationConnector/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/DiscountCalculationConnector/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/DiscountCalculationConnector/tests/Unit/Spryker/Zed/DiscountCalculationConnector/Business/Model/Calculator/GrandTotalWithDiscountsCalculatorTest.php b/Bundles/DiscountCalculationConnector/tests/Unit/Spryker/Zed/DiscountCalculationConnector/Business/Model/Calculator/GrandTotalWithDiscountsCalculatorTest.php
index 57fe522..7ab6f2a 100644
--- a/Bundles/DiscountCalculationConnector/tests/Unit/Spryker/Zed/DiscountCalculationConnector/Business/Model/Calculator/GrandTotalWithDiscountsCalculatorTest.php
+++ b/Bundles/DiscountCalculationConnector/tests/Unit/Spryker/Zed/DiscountCalculationConnector/Business/Model/Calculator/GrandTotalWithDiscountsCalculatorTest.php
@@ -10,7 +10,7 @@ namespace Unit\Spryker\Zed\DiscountCalculationConnector\Business\Model\Calculato
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\TotalsTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\DiscountCalculationConnector\Business\Model\Calculator\GrandTotalWithDiscountsCalculator;
 
 /**
diff --git a/Bundles/DiscountCalculationConnector/tests/_support/FunctionalTester.php b/Bundles/DiscountCalculationConnector/tests/_support/FunctionalTester.php
deleted file mode 100644
index 2c53d59..0000000
--- a/Bundles/DiscountCalculationConnector/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace DiscountCalculationConnector;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/DiscountCalculationConnector/tests/_support/Module/Functional.php b/Bundles/DiscountCalculationConnector/tests/_support/Module/Functional.php
deleted file mode 100644
index 56f90db..0000000
--- a/Bundles/DiscountCalculationConnector/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace DiscountCalculationConnector\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/DiscountSalesAggregatorConnector/composer.json b/Bundles/DiscountSalesAggregatorConnector/composer.json
index ed248f8..d7249ff 100644
--- a/Bundles/DiscountSalesAggregatorConnector/composer.json
+++ b/Bundles/DiscountSalesAggregatorConnector/composer.json
@@ -8,14 +8,19 @@
   "require": {
     "spryker/discount": "^3.2.1",
     "spryker/kernel": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/tax": "^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/sales-aggregator": "If you want to use SalesAggregator plugins you need to install spryker/sales-aggregator."
+  },
   "description": "DiscountSalesAggregatorConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/DummyPayment/composer.json b/Bundles/DummyPayment/composer.json
index 57c5c1b..175bf25 100644
--- a/Bundles/DummyPayment/composer.json
+++ b/Bundles/DummyPayment/composer.json
@@ -8,12 +8,12 @@
     "spryker/refund": "^3.0.0",
     "spryker/sales": "^2.2.5 || ^3.0.0",
     "spryker/step-engine": "^1.0.0",
-    "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0"
+    "spryker/symfony": "^2.1.6"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
     "spryker/testify": "*"
   },
   "description": "DummyPayment bundle",
diff --git a/Bundles/DummyPayment/config/config.dist.php b/Bundles/DummyPayment/config/config.dist.php
index 437b2dc..29826f9 100644
--- a/Bundles/DummyPayment/config/config.dist.php
+++ b/Bundles/DummyPayment/config/config.dist.php
@@ -3,7 +3,6 @@
  * Copy over the following configs to your config
  */
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Shared\Oms\OmsConstants;
 use Spryker\Shared\Sales\SalesConstants;
@@ -26,7 +25,7 @@ $config[KernelConstants::DEPENDENCY_INJECTOR_ZED] = [
 
 $config[OmsConstants::PROCESS_LOCATION] = [
     OmsConfig::DEFAULT_PROCESS_LOCATION,
-    $config[ApplicationConstants::APPLICATION_SPRYKER_ROOT] . '/DummyPayment/config/Zed/Oms',
+    $config[KernelConstants::SPRYKER_ROOT] . '/DummyPayment/config/Zed/Oms',
 ];
 
 $config[OmsConstants::ACTIVE_PROCESSES] = [
diff --git a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentCreditCardFormDataProvider.php b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentCreditCardFormDataProvider.php
index 0d37baf..c071ab1 100644
--- a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentCreditCardFormDataProvider.php
+++ b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentCreditCardFormDataProvider.php
@@ -9,7 +9,7 @@ namespace Spryker\Yves\DummyPayment\Form\DataProvider;
 
 use Generated\Shared\Transfer\DummyPaymentTransfer;
 use Generated\Shared\Transfer\PaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\DummyPayment\Form\CreditCardSubForm;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
@@ -17,9 +17,9 @@ class DummyPaymentCreditCardFormDataProvider implements StepEngineFormDataProvid
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -35,7 +35,7 @@ class DummyPaymentCreditCardFormDataProvider implements StepEngineFormDataProvid
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentInvoiceFormDataProvider.php b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentInvoiceFormDataProvider.php
index 3f45e4f..a0c2291 100644
--- a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentInvoiceFormDataProvider.php
+++ b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Form/DataProvider/DummyPaymentInvoiceFormDataProvider.php
@@ -9,16 +9,16 @@ namespace Spryker\Yves\DummyPayment\Form\DataProvider;
 
 use Generated\Shared\Transfer\DummyPaymentTransfer;
 use Generated\Shared\Transfer\PaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
 class DummyPaymentInvoiceFormDataProvider implements StepEngineFormDataProviderInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -34,7 +34,7 @@ class DummyPaymentInvoiceFormDataProvider implements StepEngineFormDataProviderI
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Plugin/DummyPaymentHandlerPlugin.php b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Plugin/DummyPaymentHandlerPlugin.php
index 5776aa6..00a704b 100644
--- a/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Plugin/DummyPaymentHandlerPlugin.php
+++ b/Bundles/DummyPayment/src/Spryker/Yves/DummyPayment/Plugin/DummyPaymentHandlerPlugin.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\DummyPayment\Plugin;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\Kernel\AbstractPlugin;
 use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -20,7 +20,7 @@ class DummyPaymentHandlerPlugin extends AbstractPlugin implements StepHandlerPlu
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
diff --git a/Bundles/ErrorHandler/composer.json b/Bundles/ErrorHandler/composer.json
index 46163e5..9272320 100644
--- a/Bundles/ErrorHandler/composer.json
+++ b/Bundles/ErrorHandler/composer.json
@@ -12,9 +12,8 @@
   },
   "require": {
     "spryker/config": "^2.2.1",
-    "spryker/library": "^2.0.0",
     "spryker/log": "^2.1.0",
-    "spryker/new-relic": "^2.1.0"
+    "spryker/new-relic-api": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerConstants.php b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerConstants.php
index 99399cc..fdf34a3 100644
--- a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerConstants.php
+++ b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerConstants.php
@@ -52,4 +52,14 @@ interface ErrorHandlerConstants
      */
     const ERROR_LEVEL_LOG_ONLY = 'ERROR_LEVEL_LOG_ONLY';
 
+    /**
+     * Specification:
+     * - Set php.ini config 'display_errors'
+     * - type bool
+     * - default false
+     *
+     * @api
+     */
+    const DISPLAY_ERRORS = 'DISPLAY_ERRORS';
+
 }
diff --git a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerEnvironment.php b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerEnvironment.php
index 94b2185..bce87f3 100644
--- a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerEnvironment.php
+++ b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerEnvironment.php
@@ -31,6 +31,8 @@ class ErrorHandlerEnvironment
         $this->setExceptionHandler();
         $this->registerShutDownFunction();
         $this->setAssertOptions();
+
+        ini_set('display_errors', Config::get(ErrorHandlerConstants::DISPLAY_ERRORS, false));
     }
 
     /**
diff --git a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerFactory.php b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerFactory.php
index 8663533..ec11691 100644
--- a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerFactory.php
+++ b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorHandlerFactory.php
@@ -11,7 +11,6 @@ use Spryker\Shared\Config\Config;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\CliErrorRenderer;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\WebExceptionErrorRenderer;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\WebHtmlErrorRenderer;
-use Spryker\Shared\Library\LibraryConstants;
 
 class ErrorHandlerFactory
 {
@@ -88,10 +87,10 @@ class ErrorHandlerFactory
     protected function getLegacyConfigKey()
     {
         if ($this->application === static::APPLICATION_ZED) {
-            return LibraryConstants::ZED_SHOW_EXCEPTION_STACK_TRACE;
+            return ErrorHandlerConstants::ERROR_RENDERER;
         }
 
-        return LibraryConstants::YVES_SHOW_EXCEPTION_STACK_TRACE;
+        return ErrorHandlerConstants::ERROR_RENDERER;
     }
 
     /**
diff --git a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorLogger.php b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorLogger.php
index 9cab3b9..d7fc9bd 100644
--- a/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorLogger.php
+++ b/Bundles/ErrorHandler/src/Spryker/Shared/ErrorHandler/ErrorLogger.php
@@ -9,7 +9,7 @@ namespace Spryker\Shared\ErrorHandler;
 
 use Exception;
 use Spryker\Shared\Log\LoggerTrait;
-use Spryker\Shared\NewRelic\NewRelicApiTrait;
+use Spryker\Shared\NewRelicApi\NewRelicApiTrait;
 
 class ErrorLogger implements ErrorLoggerInterface
 {
diff --git a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerFactoryTest.php b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerFactoryTest.php
index 77133a2..68c6a53 100644
--- a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerFactoryTest.php
+++ b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerFactoryTest.php
@@ -16,7 +16,6 @@ use Spryker\Shared\ErrorHandler\ErrorHandlerFactory;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\CliErrorRenderer;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\WebExceptionErrorRenderer;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\WebHtmlErrorRenderer;
-use Spryker\Shared\Library\LibraryConstants;
 
 /**
  * @group Unit
@@ -115,48 +114,6 @@ class ErrorHandlerFactoryTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return void
-     */
-    public function testCreateErrorHandlerShouldReturnErrorHandlerWithWebExceptionErrorRendererWhenSapiNotCliAndLegacyZedShowExceptionStackTraceConfigGiven()
-    {
-        $errorHandlerFactoryMock = $this->getErrorHandlerFactoryMock('ZED', ['isCliCall', 'createWebErrorRenderer']);
-        $errorHandlerFactoryMock->expects($this->once())->method('isCliCall')->willReturn(false);
-        $errorHandlerFactoryMock->expects($this->once())->method('createWebErrorRenderer')
-            ->with(WebExceptionErrorRenderer::class)
-            ->willReturn(new WebExceptionErrorRenderer());
-
-        $this->unsetAllErrorRelatedConfigs();
-        $configProperty = $this->getConfigReflectionProperty();
-        $config = $configProperty->getValue();
-        $config[LibraryConstants::ZED_SHOW_EXCEPTION_STACK_TRACE] = WebExceptionErrorRenderer::class;
-        $configProperty->setValue($config);
-
-        $errorHandler = $errorHandlerFactoryMock->createErrorHandler();
-        $this->assertInstanceOf(ErrorHandler::class, $errorHandler);
-    }
-
-    /**
-     * @return void
-     */
-    public function testCreateErrorHandlerShouldReturnErrorHandlerWithWebExceptionErrorRendererWhenSapiNotCliAndLegacyYvesShowExceptionStackTraceConfigGiven()
-    {
-        $errorHandlerFactoryMock = $this->getErrorHandlerFactoryMock('YVES', ['isCliCall', 'createWebErrorRenderer']);
-        $errorHandlerFactoryMock->expects($this->once())->method('isCliCall')->willReturn(false);
-        $errorHandlerFactoryMock->expects($this->once())->method('createWebErrorRenderer')
-            ->with(WebExceptionErrorRenderer::class)
-            ->willReturn(new WebExceptionErrorRenderer());
-
-        $this->unsetAllErrorRelatedConfigs();
-        $configProperty = $this->getConfigReflectionProperty();
-        $config = $configProperty->getValue();
-        $config[LibraryConstants::YVES_SHOW_EXCEPTION_STACK_TRACE] = WebExceptionErrorRenderer::class;
-        $configProperty->setValue($config);
-
-        $errorHandler = $errorHandlerFactoryMock->createErrorHandler();
-        $this->assertInstanceOf(ErrorHandler::class, $errorHandler);
-    }
-
-    /**
      * @param string $application
      * @param array $methods
      *
@@ -180,12 +137,6 @@ class ErrorHandlerFactoryTest extends PHPUnit_Framework_TestCase
         if (isset($config[ErrorHandlerConstants::ERROR_RENDERER])) {
             unset($config[ErrorHandlerConstants::ERROR_RENDERER]);
         }
-        if (isset($config[LibraryConstants::YVES_SHOW_EXCEPTION_STACK_TRACE])) {
-            unset($config[LibraryConstants::YVES_SHOW_EXCEPTION_STACK_TRACE]);
-        }
-        if (isset($config[LibraryConstants::ZED_SHOW_EXCEPTION_STACK_TRACE])) {
-            unset($config[LibraryConstants::ZED_SHOW_EXCEPTION_STACK_TRACE]);
-        }
 
         $configProperty->setValue($config);
     }
diff --git a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerTest.php b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerTest.php
index e8e5a33..65eae4b 100644
--- a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerTest.php
+++ b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorHandlerTest.php
@@ -14,7 +14,7 @@ use Spryker\Shared\ErrorHandler\ErrorHandler;
 use Spryker\Shared\ErrorHandler\ErrorLogger;
 use Spryker\Shared\ErrorHandler\ErrorLoggerInterface;
 use Spryker\Shared\ErrorHandler\ErrorRenderer\ErrorRendererInterface;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 /**
  * @group Unit
@@ -194,7 +194,7 @@ class ErrorHandlerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApiMock()
     {
diff --git a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorLoggerTest.php b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorLoggerTest.php
index c3698d4..e93ed20 100644
--- a/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorLoggerTest.php
+++ b/Bundles/ErrorHandler/tests/Unit/Spryker/Shared/ErrorHandler/ErrorLoggerTest.php
@@ -11,7 +11,7 @@ use Exception;
 use PHPUnit_Framework_TestCase;
 use Psr\Log\LoggerInterface;
 use Spryker\Shared\ErrorHandler\ErrorLogger;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 /**
  * @group Unit
@@ -60,7 +60,7 @@ class ErrorLoggerTest extends PHPUnit_Framework_TestCase
 
     /**
      * @param \Psr\Log\LoggerInterface $logger
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      *
      * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\ErrorHandler\ErrorLogger
      */
@@ -88,7 +88,7 @@ class ErrorLoggerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApiMock()
     {
diff --git a/Bundles/EventJournal/composer.json b/Bundles/EventJournal/composer.json
index 66b3d75..9b3cd21 100644
--- a/Bundles/EventJournal/composer.json
+++ b/Bundles/EventJournal/composer.json
@@ -8,8 +8,9 @@
   "require": {
     "spryker/config": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/new-relic": "^2.1.0"
+    "spryker/new-relic-api": "^1.0.0",
+    "spryker/util-network": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/RequestDataCollector.php b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/RequestDataCollector.php
index 7b5cf6f..1038d32 100644
--- a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/RequestDataCollector.php
+++ b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/RequestDataCollector.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\EventJournal\Model\Collector;
 
-use Spryker\Zed\Library\Generator\StringGenerator;
+use Spryker\Service\UtilText\UtilTextService;
 
 /**
  * @deprecated Use Log bundle instead
@@ -42,9 +42,9 @@ class RequestDataCollector extends AbstractDataCollector
      */
     protected function getRandomString()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator->generateRandomString();
+        return $utilTextService->generateRandomString(32);
     }
 
     /**
diff --git a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/ServerDataCollector.php b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/ServerDataCollector.php
index 1318ff1..283cf7a 100644
--- a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/ServerDataCollector.php
+++ b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Collector/ServerDataCollector.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\EventJournal\Model\Collector;
 
-use Spryker\Shared\Library\System;
+use Spryker\Service\UtilNetwork\Model\Host;
 
 /**
  * @deprecated Use Log bundle instead
@@ -83,7 +83,9 @@ class ServerDataCollector extends AbstractDataCollector
      */
     protected function getHost()
     {
-        return isset($_SERVER['COMPUTERNAME']) ? $_SERVER['COMPUTERNAME'] : System::getHostname();
+        $utilNetworkHost = new Host();
+
+        return isset($_SERVER['COMPUTERNAME']) ? $_SERVER['COMPUTERNAME'] : $utilNetworkHost->getHostname();
     }
 
     /**
diff --git a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Event.php b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Event.php
index 668ed30..483511e 100644
--- a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Event.php
+++ b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Event.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\EventJournal\Model;
 
-use Spryker\Zed\Library\Generator\StringGenerator;
+use Spryker\Service\UtilText\UtilTextService;
 
 /**
  * @deprecated Use Log bundle instead
@@ -40,9 +40,9 @@ class Event implements EventInterface
      */
     private function getRandomString()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator->generateRandomString();
+        return $utilTextService->generateRandomString(32);
     }
 
     /**
diff --git a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/File.php b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/File.php
index 0f8e376..dc82ccd 100644
--- a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/File.php
+++ b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/File.php
@@ -10,7 +10,6 @@ namespace Spryker\Shared\EventJournal\Model\Writer;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\EventJournal\EventJournalConstants;
 use Spryker\Shared\EventJournal\Model\EventInterface;
-use Spryker\Shared\Library\DataDirectory;
 
 /**
  * @deprecated Use Log bundle instead
@@ -125,7 +124,7 @@ class File extends AbstractWriter
     protected function getLogPath()
     {
         if (!isset($this->options[EventJournalConstants::OPTION_LOG_PATH])) {
-            return DataDirectory::getLocalCommonPath('event_journal');
+            return APPLICATION_ROOT_DIR . '/data/common/event_journal';
         }
 
         return $this->options[EventJournalConstants::OPTION_LOG_PATH];
diff --git a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/Newrelic.php b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/Newrelic.php
index 418ce4e..3eff707 100644
--- a/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/Newrelic.php
+++ b/Bundles/EventJournal/src/Spryker/Shared/EventJournal/Model/Writer/Newrelic.php
@@ -8,7 +8,7 @@
 namespace Spryker\Shared\EventJournal\Model\Writer;
 
 use Spryker\Shared\EventJournal\Model\EventInterface;
-use Spryker\Shared\NewRelic\NewRelicApiTrait;
+use Spryker\Shared\NewRelicApi\NewRelicApiTrait;
 
 /**
  * @deprecated Use Log bundle instead
diff --git a/Bundles/EventJournal/tests/Functional.suite.yml b/Bundles/EventJournal/tests/Functional.suite.yml
deleted file mode 100644
index 40cfecf..0000000
--- a/Bundles/EventJournal/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \EventJournal\Module\Functional
diff --git a/Bundles/EventJournal/tests/Functional/_bootstrap.php b/Bundles/EventJournal/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/EventJournal/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/EventJournal/tests/_support/FunctionalTester.php b/Bundles/EventJournal/tests/_support/FunctionalTester.php
deleted file mode 100644
index b08e204..0000000
--- a/Bundles/EventJournal/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace EventJournal;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/EventJournal/tests/_support/Module/Functional.php b/Bundles/EventJournal/tests/_support/Module/Functional.php
deleted file mode 100644
index 8b4364e..0000000
--- a/Bundles/EventJournal/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace EventJournal\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Glossary/composer.json b/Bundles/Glossary/composer.json
index e38c189..1da9794 100644
--- a/Bundles/Glossary/composer.json
+++ b/Bundles/Glossary/composer.json
@@ -6,24 +6,27 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/gui": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/messenger": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/touch": "^2.0.0",
-    "spryker/twig": "^2.2.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer.",
+    "spryker/twig": "If you want to use Twig with Gui you need to install spryker/twig."
+  },
   "description": "Glossary bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Glossary/src/Spryker/Client/Glossary/GlossaryFactory.php b/Bundles/Glossary/src/Spryker/Client/Glossary/GlossaryFactory.php
index cd86111..082280c 100644
--- a/Bundles/Glossary/src/Spryker/Client/Glossary/GlossaryFactory.php
+++ b/Bundles/Glossary/src/Spryker/Client/Glossary/GlossaryFactory.php
@@ -66,7 +66,7 @@ class GlossaryFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createKeyBuilder()
     {
diff --git a/Bundles/Glossary/src/Spryker/Client/Glossary/KeyBuilder/GlossaryKeyBuilder.php b/Bundles/Glossary/src/Spryker/Client/Glossary/KeyBuilder/GlossaryKeyBuilder.php
index a53a8e2..a111323 100644
--- a/Bundles/Glossary/src/Spryker/Client/Glossary/KeyBuilder/GlossaryKeyBuilder.php
+++ b/Bundles/Glossary/src/Spryker/Client/Glossary/KeyBuilder/GlossaryKeyBuilder.php
@@ -7,12 +7,30 @@
 
 namespace Spryker\Client\Glossary\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Glossary\Code\KeyBuilder\GlossaryKeyBuilder as GlossaryKeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 
 class GlossaryKeyBuilder implements KeyBuilderInterface
 {
 
-    use GlossaryKeyBuilderTrait;
+    use KeyBuilderTrait;
+
+    /**
+     * @param string $glossaryKey
+     *
+     * @return string
+     */
+    protected function buildKey($glossaryKey)
+    {
+        return 'translation.' . $glossaryKey;
+    }
+
+    /**
+     * @return string
+     */
+    public function getBundleName()
+    {
+        return 'glossary';
+    }
 
 }
diff --git a/Bundles/Glossary/src/Spryker/Client/Glossary/Storage/GlossaryStorage.php b/Bundles/Glossary/src/Spryker/Client/Glossary/Storage/GlossaryStorage.php
index 35b4e73..704846c 100644
--- a/Bundles/Glossary/src/Spryker/Client/Glossary/Storage/GlossaryStorage.php
+++ b/Bundles/Glossary/src/Spryker/Client/Glossary/Storage/GlossaryStorage.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Glossary\Storage;
 
 use Spryker\Client\Storage\StorageClientInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class GlossaryStorage implements GlossaryStorageInterface
 {
@@ -19,7 +19,7 @@ class GlossaryStorage implements GlossaryStorageInterface
     protected $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
@@ -35,7 +35,7 @@ class GlossaryStorage implements GlossaryStorageInterface
 
     /**
      * @param \Spryker\Client\Storage\StorageClientInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param string $localeName
      */
     public function __construct(StorageClientInterface $storage, KeyBuilderInterface $keyBuilder, $localeName)
diff --git a/Bundles/Glossary/src/Spryker/Shared/Glossary/Code/KeyBuilder/GlossaryKeyBuilder.php b/Bundles/Glossary/src/Spryker/Shared/Glossary/Code/KeyBuilder/GlossaryKeyBuilder.php
deleted file mode 100644
index 167acf3..0000000
--- a/Bundles/Glossary/src/Spryker/Shared/Glossary/Code/KeyBuilder/GlossaryKeyBuilder.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Glossary\Code\KeyBuilder;
-
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
-
-trait GlossaryKeyBuilder
-{
-
-    use KeyBuilderTrait;
-
-    /**
-     * @param string $glossaryKey
-     *
-     * @return string
-     */
-    protected function buildKey($glossaryKey)
-    {
-        return 'translation.' . $glossaryKey;
-    }
-
-    /**
-     * @return string
-     */
-    public function getBundleName()
-    {
-        return 'glossary';
-    }
-
-}
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryBusinessFactory.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryBusinessFactory.php
index 5e43c7a..f048a13 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryBusinessFactory.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryBusinessFactory.php
@@ -12,7 +12,6 @@ use Spryker\Zed\Glossary\Business\Key\KeyManager;
 use Spryker\Zed\Glossary\Business\Translation\TranslationManager;
 use Spryker\Zed\Glossary\GlossaryDependencyProvider;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Glossary\GlossaryConfig getConfig()
@@ -72,7 +71,7 @@ class GlossaryBusinessFactory extends AbstractBusinessFactory
     /**
      * @return \Spryker\Zed\Glossary\Business\Internal\GlossaryInstaller
      */
-    public function createInstaller(MessengerInterface $messenger)
+    public function createInstaller()
     {
         $installer = new GlossaryInstaller(
             $this->createTranslationManager(),
@@ -80,8 +79,6 @@ class GlossaryBusinessFactory extends AbstractBusinessFactory
             $this->getConfig()->getGlossaryFilePaths()
         );
 
-        $installer->setMessenger($messenger);
-
         return $installer;
     }
 
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacade.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacade.php
index e8d0687..daa5bb0 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacade.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacade.php
@@ -11,7 +11,6 @@ use Generated\Shared\Transfer\KeyTranslationTransfer;
 use Generated\Shared\Transfer\LocaleTransfer;
 use Generated\Shared\Transfer\TranslationTransfer;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Glossary\Business\GlossaryBusinessFactory getFactory()
@@ -338,13 +337,11 @@ class GlossaryFacade extends AbstractFacade implements GlossaryFacadeInterface
     /**
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface|null $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger = null)
+    public function install()
     {
-        $this->getFactory()->createInstaller($messenger)->install();
+        $this->getFactory()->createInstaller()->install();
     }
 
     /**
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacadeInterface.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacadeInterface.php
index 3422290..44ffd8b 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacadeInterface.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/GlossaryFacadeInterface.php
@@ -10,7 +10,6 @@ namespace Spryker\Zed\Glossary\Business;
 use Generated\Shared\Transfer\KeyTranslationTransfer;
 use Generated\Shared\Transfer\LocaleTransfer;
 use Generated\Shared\Transfer\TranslationTransfer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 interface GlossaryFacadeInterface
 {
@@ -263,11 +262,9 @@ interface GlossaryFacadeInterface
     /**
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface|null $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger = null);
+    public function install();
 
     /**
      * @api
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstaller.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstaller.php
index 720104b..45cabde 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstaller.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstaller.php
@@ -11,10 +11,9 @@ use Generated\Shared\Transfer\LocaleTransfer;
 use Propel\Runtime\Propel;
 use Spryker\Zed\Glossary\Business\Key\KeyManagerInterface;
 use Spryker\Zed\Glossary\Business\Translation\TranslationManagerInterface;
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 use Symfony\Component\Yaml\Yaml;
 
-class GlossaryInstaller extends AbstractInstaller
+class GlossaryInstaller implements GlossaryInstallerInterface
 {
 
     /**
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstallerInterface.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstallerInterface.php
new file mode 100644
index 0000000..5d005f6
--- /dev/null
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Business/Internal/GlossaryInstallerInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Glossary\Business\Internal;
+
+interface GlossaryInstallerInterface
+{
+
+    /**
+     * @return array
+     */
+    public function install();
+
+}
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AddController.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AddController.php
index 254507e..9e7d40d 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AddController.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AddController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Glossary\Communication\Controller;
 
 use Generated\Shared\Transfer\KeyTranslationTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AjaxController.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AjaxController.php
index b6fad69..22065d0 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AjaxController.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/AjaxController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Glossary\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/EditController.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/EditController.php
index e0070f1..c33290c 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/EditController.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/EditController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Glossary\Communication\Controller;
 
 use Generated\Shared\Transfer\KeyTranslationTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/IndexController.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/IndexController.php
index 09295b6..19cb3f3 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/IndexController.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Glossary\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Glossary\Business\GlossaryFacade getFacade()
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/KeyController.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/KeyController.php
index 869caa3..5199344 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/KeyController.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Controller/KeyController.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Glossary\Communication\Controller;
 use Orm\Zed\Glossary\Persistence\Map\SpyGlossaryKeyTableMap;
 use Orm\Zed\Glossary\Persistence\Map\SpyGlossaryTranslationTableMap;
 use Propel\Runtime\Map\TableMap;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/GlossaryInstallerPlugin.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/GlossaryInstallerPlugin.php
new file mode 100644
index 0000000..12b8fcf
--- /dev/null
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/GlossaryInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Glossary\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Glossary\Communication\GlossaryCommunicationFactory getFactory()
+ * @method \Spryker\Zed\Glossary\Business\GlossaryFacade getFacade()
+ */
+class GlossaryInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/Installer.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/Installer.php
deleted file mode 100644
index abd170d..0000000
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Glossary\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Glossary\Communication\GlossaryCommunicationFactory getFactory()
- * @method \Spryker\Zed\Glossary\Business\GlossaryFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install($this->messenger);
-    }
-
-}
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/TranslationPlugin.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/TranslationPlugin.php
new file mode 100644
index 0000000..29c2d07
--- /dev/null
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Plugin/TranslationPlugin.php
@@ -0,0 +1,41 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Glossary\Communication\Plugin;
+
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface;
+
+/**
+ * @method \Spryker\Zed\Glossary\Business\GlossaryFacade getFacade()
+ * @method \Spryker\Zed\Glossary\Communication\GlossaryCommunicationFactory getFactory()
+ */
+class TranslationPlugin extends AbstractPlugin implements TranslationPluginInterface
+{
+
+    /**
+     * @param string $keyName
+     *
+     * @return bool
+     */
+    public function hasKey($keyName)
+    {
+        return $this->getFacade()->hasKey($keyName);
+    }
+
+    /**
+     * @param string $keyName
+     * @param array $data
+     *
+     * @return string
+     */
+    public function translate($keyName, array $data = [])
+    {
+        return $this->getFacade()->translate($keyName, $data);
+    }
+
+}
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Table/TranslationTable.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Table/TranslationTable.php
index 9b8ffcf..ffef947 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Table/TranslationTable.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/Communication/Table/TranslationTable.php
@@ -13,7 +13,7 @@ use Orm\Zed\Glossary\Persistence\SpyGlossaryKeyQuery;
 use Orm\Zed\Glossary\Persistence\SpyGlossaryTranslationQuery;
 use Orm\Zed\Locale\Persistence\Map\SpyLocaleTableMap;
 use Propel\Runtime\Map\TableMap;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Glossary\Communication\Controller\EditController;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryConfig.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryConfig.php
index 1f116d3..07433c4 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryConfig.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryConfig.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Glossary;
 
-use Spryker\Shared\Application\ApplicationConstants;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
 
 class GlossaryConfig extends AbstractBundleConfig
@@ -21,7 +21,7 @@ class GlossaryConfig extends AbstractBundleConfig
     public function getGlossaryFilePaths()
     {
         return glob(
-            $this->get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . '/*/src/Spryker/*/*/Resources/glossary.yml'
+            $this->get(KernelConstants::SPRYKER_ROOT) . '/*/src/Spryker/*/*/Resources/glossary.yml'
         );
     }
 
diff --git a/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryDependencyProvider.php b/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryDependencyProvider.php
index 5f25e422..5c37b84 100644
--- a/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryDependencyProvider.php
+++ b/Bundles/Glossary/src/Spryker/Zed/Glossary/GlossaryDependencyProvider.php
@@ -7,11 +7,11 @@
 
 namespace Spryker\Zed\Glossary;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Glossary\Dependency\Facade\GlossaryToLocaleBridge;
 use Spryker\Zed\Glossary\Dependency\Facade\GlossaryToMessengerBridge;
 use Spryker\Zed\Glossary\Dependency\Facade\GlossaryToTouchBridge;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
 
 class GlossaryDependencyProvider extends AbstractBundleDependencyProvider
diff --git a/Bundles/Graph/composer.json b/Bundles/Graph/composer.json
index 2e74a22..1bc8724 100644
--- a/Bundles/Graph/composer.json
+++ b/Bundles/Graph/composer.json
@@ -9,7 +9,7 @@
   "require": {
     "spryker/graphviz": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0"
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/Graph/src/Spryker/Shared/Graph/Adapter/PhpDocumentorGraphAdapter.php b/Bundles/Graph/src/Spryker/Shared/Graph/Adapter/PhpDocumentorGraphAdapter.php
index b50ded5..d8658d5 100644
--- a/Bundles/Graph/src/Spryker/Shared/Graph/Adapter/PhpDocumentorGraphAdapter.php
+++ b/Bundles/Graph/src/Spryker/Shared/Graph/Adapter/PhpDocumentorGraphAdapter.php
@@ -10,8 +10,8 @@ namespace Spryker\Shared\Graph\Adapter;
 use phpDocumentor\GraphViz\Edge;
 use phpDocumentor\GraphViz\Graph;
 use phpDocumentor\GraphViz\Node;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Shared\Graph\GraphAdapterInterface;
-use Spryker\Zed\Library\Generator\StringGenerator;
 
 class PhpDocumentorGraphAdapter implements GraphAdapterInterface
 {
@@ -140,10 +140,10 @@ class PhpDocumentorGraphAdapter implements GraphAdapterInterface
      */
     public function render($type, $fileName = null)
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
         if ($fileName === null) {
-            $fileName = sys_get_temp_dir() . '/' . $generator->generateRandomString();
+            $fileName = sys_get_temp_dir() . '/' . $utilTextService->generateRandomString(32);
         }
         $this->graph->export($type, $fileName);
 
diff --git a/Bundles/Gui/composer.json b/Bundles/Gui/composer.json
index f3c7554..331d8b0 100644
--- a/Bundles/Gui/composer.json
+++ b/Bundles/Gui/composer.json
@@ -11,22 +11,20 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/config": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/money": "^1.0.0",
-    "spryker/propel": "^2.3.1",
-    "spryker/silex": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0",
     "spryker/twig": "^2.1.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-sanitize": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Gui bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Gui/src/Spryker/Shared/Gui/Form/AbstractForm.php b/Bundles/Gui/src/Spryker/Shared/Gui/Form/AbstractForm.php
index c5611a4..dd93bf5 100644
--- a/Bundles/Gui/src/Spryker/Shared/Gui/Form/AbstractForm.php
+++ b/Bundles/Gui/src/Spryker/Shared/Gui/Form/AbstractForm.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\Gui\Form;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Symfony\Component\Form\FormBuilderInterface;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\Form\FormTypeInterface;
@@ -36,12 +36,12 @@ abstract class AbstractForm implements FormTypeInterface
     abstract public function buildForm(FormBuilderInterface $builder, array $options);
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface|array
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface|array
      */
     abstract public function populateFormFields();
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface|null
      */
     abstract protected function getDataClass();
 
@@ -52,7 +52,7 @@ abstract class AbstractForm implements FormTypeInterface
      */
     public function setDefaultOptions(OptionsResolverInterface $resolver)
     {
-        if ($this->getDataClass() instanceof TransferInterface && !($this->getDataClass() instanceof NullFormTransfer)) {
+        if ($this->getDataClass() instanceof TransferInterface) {
             $resolver->setDefault('data_class', get_class($this->getDataClass()));
         }
     }
diff --git a/Bundles/Gui/src/Spryker/Shared/Gui/Form/NullFormTransfer.php b/Bundles/Gui/src/Spryker/Shared/Gui/Form/NullFormTransfer.php
deleted file mode 100644
index bd49a0d..0000000
--- a/Bundles/Gui/src/Spryker/Shared/Gui/Form/NullFormTransfer.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Gui\Form;
-
-use Spryker\Shared\Transfer\AbstractTransfer;
-
-class NullFormTransfer extends AbstractTransfer
-{
-}
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Form/AbstractForm.php b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Form/AbstractForm.php
index 82619e1..74ec670 100644
--- a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Form/AbstractForm.php
+++ b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Form/AbstractForm.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\Gui\Communication\Form;
 
 use Spryker\Shared\Gui\Form\AbstractForm as SharedAbstractForm;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Gui\Communication\Plugin\ConstraintsPlugin;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 
 /**
  * @deprecated Use \Symfony\Component\Form\AbstractType instead.
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/ServiceProvider/GuiTwigExtensionServiceProvider.php b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/ServiceProvider/GuiTwigExtensionServiceProvider.php
index 169a154..5c8994b 100644
--- a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/ServiceProvider/GuiTwigExtensionServiceProvider.php
+++ b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/ServiceProvider/GuiTwigExtensionServiceProvider.php
@@ -9,6 +9,7 @@ namespace Spryker\Zed\Gui\Communication\Plugin\ServiceProvider;
 
 use Silex\Application;
 use Silex\ServiceProviderInterface;
+use Spryker\Zed\Gui\Communication\Form\Type\Extension\NoValidateTypeExtension;
 use Spryker\Zed\Gui\GuiDependencyProvider;
 use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 use Twig_Environment;
@@ -26,6 +27,8 @@ class GuiTwigExtensionServiceProvider extends AbstractPlugin implements ServiceP
      */
     public function register(Application $app)
     {
+        $this->provideFormTypeExtension($app);
+
         $app['twig'] = $app->share(
             $app->extend('twig', function (\Twig_Environment $twig) {
 
@@ -88,4 +91,18 @@ class GuiTwigExtensionServiceProvider extends AbstractPlugin implements ServiceP
     {
     }
 
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    protected function provideFormTypeExtension(Application $app)
+    {
+        $app['form.type.extensions'] = $app->share(function () {
+            return [
+                new NoValidateTypeExtension(),
+            ];
+        });
+    }
+
 }
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/FormatPriceFunction.php b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/FormatPriceFunction.php
deleted file mode 100644
index 1b838d1..0000000
--- a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/FormatPriceFunction.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Gui\Communication\Plugin\Twig;
-
-use Spryker\Shared\Twig\TwigFunction;
-use Spryker\Zed\Money\Communication\Plugin\MoneyPlugin;
-
-class FormatPriceFunction extends TwigFunction
-{
-
-    /**
-     * @return string
-     */
-    protected function getFunctionName()
-    {
-        return 'formatPrice';
-    }
-
-    /**
-     * @return callable
-     */
-    protected function getFunction()
-    {
-        return function ($value, $includeSymbol = true) {
-            $moneyPlugin = new MoneyPlugin();
-            $moneyTransfer = $moneyPlugin->fromInteger($value);
-
-            if ($includeSymbol) {
-                return $moneyPlugin->formatWithSymbol($moneyTransfer);
-            }
-
-            return $moneyPlugin->formatWithoutSymbol($moneyTransfer);
-        };
-    }
-
-}
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/UrlFunction.php b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/UrlFunction.php
index 72ed7e3..f823b84 100644
--- a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/UrlFunction.php
+++ b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Plugin/Twig/UrlFunction.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Gui\Communication\Plugin\Twig;
 
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Shared\Twig\TwigFunction;
-use Spryker\Shared\Url\Url;
 
 class UrlFunction extends TwigFunction
 {
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Table/AbstractTable.php b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Table/AbstractTable.php
index 7d0d4ae..9dda301 100644
--- a/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Table/AbstractTable.php
+++ b/Bundles/Gui/src/Spryker/Zed/Gui/Communication/Table/AbstractTable.php
@@ -9,15 +9,14 @@ namespace Spryker\Zed\Gui\Communication\Table;
 
 use Generated\Shared\Transfer\DataTablesColumnTransfer;
 use LogicException;
+use PDO;
 use Propel\Runtime\ActiveQuery\ModelCriteria;
 use Propel\Runtime\Map\TableMap;
 use Propel\Runtime\Propel;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
+use Spryker\Service\UtilSanitize\UtilSanitizeService;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Zed\Gui\Communication\Form\DeleteForm;
-use Spryker\Zed\Library\Generator\StringGenerator;
-use Spryker\Zed\Library\Sanitize\Html;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Twig_Environment;
 use Twig_Loader_Filesystem;
 
@@ -309,8 +308,8 @@ abstract class AbstractTable
      */
     protected function generateTableIdentifier($prefix = 'table-')
     {
-        $generator = new StringGenerator();
-        $this->tableIdentifier = $prefix . $generator->generateRandomString();
+        $utilTextService = new UtilTextService();
+        $this->tableIdentifier = $prefix . $utilTextService->generateRandomString(32);
 
         return $this;
     }
@@ -613,9 +612,9 @@ abstract class AbstractTable
                 }
 
                 $filter = '';
-                $sqlDriver = Config::getInstance()->get(PropelConstants::ZED_DB_ENGINE);
+                $driverName = Propel::getConnection()->getAttribute(PDO::ATTR_DRIVER_NAME);
                 // @todo fix this in CD-412
-                if ($sqlDriver === 'pgsql') {
+                if ($driverName === 'pgsql') {
                     $filter = '::TEXT';
                 }
 
@@ -814,7 +813,7 @@ abstract class AbstractTable
     }
 
     /**
-     * @param string|\Spryker\Shared\Url\Url $url
+     * @param string|\Spryker\Service\UtilText\Model\Url\Url $url
      * @param string $title
      * @param array $defaultOptions
      * @param array $customOptions
@@ -829,7 +828,8 @@ abstract class AbstractTable
         $parameters = $this->getButtonParameters($buttonOptions);
 
         if (is_string($url)) {
-            $url = Html::escape($url);
+            $utilSanitizeService = new UtilSanitizeService();
+            $url = $utilSanitizeService->escapeHtml($url);
         } else {
             $url = $url->buildEscaped();
         }
diff --git a/Bundles/Gui/src/Spryker/Zed/Gui/GuiDependencyProvider.php b/Bundles/Gui/src/Spryker/Zed/Gui/GuiDependencyProvider.php
index 7fb7bbc..00e4ea9 100644
--- a/Bundles/Gui/src/Spryker/Zed/Gui/GuiDependencyProvider.php
+++ b/Bundles/Gui/src/Spryker/Zed/Gui/GuiDependencyProvider.php
@@ -18,7 +18,6 @@ use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Table\CreateTableButtonFun
 use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Table\EditTableButtonFunction;
 use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Table\RemoveTableButtonFunction;
 use Spryker\Zed\Gui\Communication\Plugin\Twig\Buttons\Table\ViewTableButtonFunction;
-use Spryker\Zed\Gui\Communication\Plugin\Twig\FormatPriceFunction;
 use Spryker\Zed\Gui\Communication\Plugin\Twig\TabsFunction;
 use Spryker\Zed\Gui\Communication\Plugin\Twig\UrlFunction;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
@@ -37,10 +36,34 @@ class GuiDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideCommunicationLayerDependencies(Container $container)
     {
-        $container[self::GUI_TWIG_FUNCTIONS] = function () {
+        $container = $this->addTwigFunctions($container);
+        $container = $this->addTwigFilter($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addTwigFunctions(Container $container)
+    {
+        $container[static::GUI_TWIG_FUNCTIONS] = function () {
             return $this->getTwigFunctions();
         };
-        $container[self::GUI_TWIG_FILTERS] = function () {
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addTwigFilter(Container $container)
+    {
+        $container[static::GUI_TWIG_FILTERS] = function () {
             return $this->getTwigFilters();
         };
 
@@ -53,10 +76,9 @@ class GuiDependencyProvider extends AbstractBundleDependencyProvider
     protected function getTwigFunctions()
     {
         return [
-            new FormatPriceFunction(),
             new AssetsPathFunction(),
-            new UrlFunction(),
             new TabsFunction(),
+            new UrlFunction(),
             // navigation buttons
             new BackActionButtonFunction(),
             new CreateActionButtonFunction(),
diff --git a/Bundles/Heartbeat/composer.json b/Bundles/Heartbeat/composer.json
index 8b0b8e0..a95a28d 100644
--- a/Bundles/Heartbeat/composer.json
+++ b/Bundles/Heartbeat/composer.json
@@ -10,7 +10,7 @@
     "spryker/config": "^2.2.0",
     "spryker/elastica": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/redis": "^2.0.0",
     "spryker/session": "^2.1.2",
     "spryker/storage": "^2.1.4",
diff --git a/Bundles/Heartbeat/src/Spryker/Zed/Heartbeat/Communication/Controller/IndexController.php b/Bundles/Heartbeat/src/Spryker/Zed/Heartbeat/Communication/Controller/IndexController.php
index 7735429..e416bd8 100644
--- a/Bundles/Heartbeat/src/Spryker/Zed/Heartbeat/Communication/Controller/IndexController.php
+++ b/Bundles/Heartbeat/src/Spryker/Zed/Heartbeat/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Heartbeat\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Response;
 
 /**
diff --git a/Bundles/Installer/composer.json b/Bundles/Installer/composer.json
index bba5398..d5012f4 100644
--- a/Bundles/Installer/composer.json
+++ b/Bundles/Installer/composer.json
@@ -6,10 +6,7 @@
     }
   },
   "require": {
-    "spryker/console": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/log": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
     "spryker/symfony": "^2.0.0"
   },
   "description": "Installer bundle",
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerBusinessFactory.php b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerBusinessFactory.php
index 74f1819..1094a04 100644
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerBusinessFactory.php
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerBusinessFactory.php
@@ -17,7 +17,7 @@ class InstallerBusinessFactory extends AbstractBusinessFactory
 {
 
     /**
-     * @return \Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin[]
+     * @return \Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface[]
      */
     public function getInstallerPlugins()
     {
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacade.php b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacade.php
index 80cb25b..346739a 100644
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacade.php
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacade.php
@@ -18,7 +18,7 @@ class InstallerFacade extends AbstractFacade implements InstallerFacadeInterface
     /**
      * @api
      *
-     * @return \Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin[]
+     * @return \Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface[]
      */
     public function getInstallerPlugins()
     {
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacadeInterface.php b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacadeInterface.php
index 401f63d..c73cc41 100644
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacadeInterface.php
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/Business/InstallerFacadeInterface.php
@@ -13,7 +13,7 @@ interface InstallerFacadeInterface
     /**
      * @api
      *
-     * @return \Spryker\Zed\Installer\Business\Model\AbstractInstaller[]
+     * @return \Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface[]
      */
     public function getInstallerPlugins();
 
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/AbstractInstaller.php b/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/AbstractInstaller.php
deleted file mode 100644
index fba7b71..0000000
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/AbstractInstaller.php
+++ /dev/null
@@ -1,52 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Installer\Business\Model;
-
-use Psr\Log\AbstractLogger;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-
-abstract class AbstractInstaller extends AbstractLogger implements MessengerInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Messenger\Business\Model\MessengerInterface
-     */
-    protected $messenger;
-
-    /**
-     * @return void
-     */
-    abstract public function install();
-
-    /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
-     * @return $this
-     */
-    public function setMessenger(MessengerInterface $messenger)
-    {
-        $this->messenger = $messenger;
-
-        return $this;
-    }
-
-    /**
-     * Logs with an arbitrary level.
-     *
-     * @param mixed $level
-     * @param string $message
-     * @param array $context
-     *
-     * @return void
-     */
-    public function log($level, $message, array $context = [])
-    {
-        $this->messenger->log($level, $message, $context);
-    }
-
-}
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/InstallerPluginInterface.php b/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/InstallerPluginInterface.php
deleted file mode 100644
index 0d25e1e..0000000
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Business/Model/InstallerPluginInterface.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Installer\Business\Model;
-
-interface InstallerPluginInterface
-{
-
-    /**
-     * @return void
-     */
-    public function run();
-
-}
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Console/InitializeDatabaseConsole.php b/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Console/InitializeDatabaseConsole.php
index 3dc748e..1968896 100644
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Console/InitializeDatabaseConsole.php
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Console/InitializeDatabaseConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Installer\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
@@ -39,16 +39,12 @@ class InitializeDatabaseConsole extends Console
     {
         $installerPlugins = $this->getInstallerPlugins();
 
-        $messenger = $this->getMessenger();
-
         try {
             foreach ($installerPlugins as $plugin) {
                 $name = $this->getPluginNameFromClass(get_class($plugin));
 
                 $output->writeln('Installing DB data for ' . $name);
-
-                $plugin->setMessenger($messenger);
-                $plugin->run();
+                $plugin->install();
             }
         } catch (\Exception $e) {
             $this->error($e->getMessage());
@@ -60,7 +56,7 @@ class InitializeDatabaseConsole extends Console
     }
 
     /**
-     * @return \Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin[]
+     * @return \Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface[]
      */
     protected function getInstallerPlugins()
     {
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Plugin/AbstractInstallerPlugin.php b/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Plugin/AbstractInstallerPlugin.php
deleted file mode 100644
index 9f4b0d5..0000000
--- a/Bundles/Installer/src/Spryker/Zed/Installer/Communication/Plugin/AbstractInstallerPlugin.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Installer\Communication\Plugin;
-
-use Spryker\Zed\Installer\Business\Model\InstallerPluginInterface;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-
-/**
- * @method \Spryker\Zed\Installer\Business\InstallerFacade getFacade()
- * @method \Spryker\Zed\Installer\Communication\InstallerCommunicationFactory getFactory()
- */
-abstract class AbstractInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Messenger\Business\Model\MessengerInterface
-     */
-    protected $messenger;
-
-    /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
-     * @return $this
-     */
-    public function setMessenger(MessengerInterface $messenger)
-    {
-        $this->messenger = $messenger;
-
-        return $this;
-    }
-
-    /**
-     * @return void
-     */
-    abstract protected function install();
-
-    /**
-     * @return void
-     */
-    public function run()
-    {
-        if ($this->messenger instanceof MessengerInterface) {
-            $this->messenger->debug('Running installer plugin: ' . get_class($this));
-        }
-
-        $this->install();
-    }
-
-}
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/Dependency/Plugin/InstallerPluginInterface.php b/Bundles/Installer/src/Spryker/Zed/Installer/Dependency/Plugin/InstallerPluginInterface.php
new file mode 100644
index 0000000..06bc793
--- /dev/null
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/Dependency/Plugin/InstallerPluginInterface.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Installer\Dependency\Plugin;
+
+interface InstallerPluginInterface
+{
+
+    /**
+     * @api
+     *
+     * @return void
+     */
+    public function install();
+
+}
diff --git a/Bundles/Installer/src/Spryker/Zed/Installer/InstallerDependencyProvider.php b/Bundles/Installer/src/Spryker/Zed/Installer/InstallerDependencyProvider.php
index 61e6f60..e91726c 100644
--- a/Bundles/Installer/src/Spryker/Zed/Installer/InstallerDependencyProvider.php
+++ b/Bundles/Installer/src/Spryker/Zed/Installer/InstallerDependencyProvider.php
@@ -34,7 +34,7 @@ class InstallerDependencyProvider extends AbstractBundleDependencyProvider
     /**
      * Overwrite on project level.
      *
-     * @return \Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin[]
+     * @return \Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface[]
      */
     public function getInstallerPlugins()
     {
diff --git a/Bundles/Invoice/composer.json b/Bundles/Invoice/composer.json
index c5d8b9b..cbdf499 100644
--- a/Bundles/Invoice/composer.json
+++ b/Bundles/Invoice/composer.json
@@ -7,7 +7,6 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/library": "^2.0.0",
     "spryker/testify": "*"
   },
   "description": "Invoice bundle",
diff --git a/Bundles/Invoice/tests/Functional.suite.yml b/Bundles/Invoice/tests/Functional.suite.yml
deleted file mode 100644
index 3dda7db..0000000
--- a/Bundles/Invoice/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \Invoice\Module\Functional
diff --git a/Bundles/Invoice/tests/Functional/_bootstrap.php b/Bundles/Invoice/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Invoice/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Invoice/tests/_support/FunctionalTester.php b/Bundles/Invoice/tests/_support/FunctionalTester.php
deleted file mode 100644
index b8089f3..0000000
--- a/Bundles/Invoice/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Invoice;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Invoice/tests/_support/Module/Functional.php b/Bundles/Invoice/tests/_support/Module/Functional.php
deleted file mode 100644
index eb4cc21..0000000
--- a/Bundles/Invoice/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Invoice\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Kernel/composer.json b/Bundles/Kernel/composer.json
index aef76fe..e398d88 100644
--- a/Bundles/Kernel/composer.json
+++ b/Bundles/Kernel/composer.json
@@ -1,30 +1,20 @@
 {
   "name": "spryker/kernel",
-  "autoload": {
-    "psr-0": {
-      "Spryker": "src/"
-    }
-  },
   "require": {
     "php": ">=5.6.0",
-    "spryker/application": "^2.0.0",
+    "everon/collection": "^1.0.0",
     "spryker/config": "^2.1.1",
-    "spryker/library": "^2.1.0",
-    "spryker/messenger": "^2.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/search": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
-    "spryker/session": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/silex": "^2.0.0",
-    "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^2.0.0",
-    "spryker/zed-request": "^2.5.0",
+    "spryker/util-encoding": "^1.0.0",
     "spryker/zend": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/console": "^2.0.1",
-    "spryker/testify": "*"
+    "spryker/testify": "*",
+    "spryker/transfer": "^2.0.0"
   },
   "description": "Kernel bundle",
   "license": "proprietary",
@@ -44,6 +34,11 @@
   "config": {
     "sort-packages": true
   },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
   "autoload-dev": {
     "psr-0": {
       "Functional": "tests/",
diff --git a/Bundles/Kernel/config/config_default-test.php b/Bundles/Kernel/config/config_default-test.php
new file mode 100755
index 0000000..1cf5d87
--- /dev/null
+++ b/Bundles/Kernel/config/config_default-test.php
@@ -0,0 +1,5 @@
+<?php
+
+use Spryker\Shared\Kernel\KernelConstants;
+
+$config[KernelConstants::SPRYKER_ROOT] = APPLICATION_ROOT_DIR . '/../';
diff --git a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractClient.php b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractClient.php
index 0680526..2233329 100644
--- a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractClient.php
+++ b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractClient.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Client\Kernel;
 
-use BadMethodCallException;
 use Spryker\Client\Kernel\ClassResolver\Factory\FactoryResolver;
 
 abstract class AbstractClient
@@ -60,51 +59,4 @@ abstract class AbstractClient
         return new FactoryResolver();
     }
 
-    /**
-     * @throws \BadMethodCallException
-     *
-     * @return \Spryker\Client\ZedRequest\Stub\BaseStub
-     */
-    protected function getZedStub()
-    {
-        $factory = $this->getFactory();
-        if (!method_exists($factory, 'createZedStub')) {
-            throw new BadMethodCallException(
-                sprintf('createZedStub method is not implemented in "%s".', get_class($factory))
-            );
-        }
-
-        return $factory->createZedStub();
-    }
-
-    /**
-     * @api
-     *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getZedInfoMessages()
-    {
-        return $this->getZedStub()->getInfoMessages();
-    }
-
-    /**
-     * @api
-     *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getZedSuccessMessages()
-    {
-        return $this->getZedStub()->getSuccessMessages();
-    }
-
-    /**
-     * @api
-     *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getZedErrorMessages()
-    {
-        return $this->getZedStub()->getErrorMessages();
-    }
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractDependencyProvider.php b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractDependencyProvider.php
index 8e71de3..37e6af2 100644
--- a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractDependencyProvider.php
+++ b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractDependencyProvider.php
@@ -10,11 +10,6 @@ namespace Spryker\Client\Kernel;
 abstract class AbstractDependencyProvider implements BundleDependencyProviderInterface
 {
 
-    const CLIENT_ZED_REQUEST = 'zed request client';
-    const CLIENT_SESSION = 'session client';
-    const CLIENT_KV_STORAGE = 'kv storage client';
-    const CLIENT_SEARCH = 'search client';
-
     /**
      * @param \Spryker\Client\Kernel\Container $container
      *
@@ -22,60 +17,7 @@ abstract class AbstractDependencyProvider implements BundleDependencyProviderInt
      */
     public function provideServiceLayerDependencies(Container $container)
     {
-        $this->addSessionClient($container);
-        $this->addZedClient($container);
-        $this->addStorageClient($container);
-        $this->addSearchClient($container);
-
         return $container;
     }
 
-    /**
-     * @param \Spryker\Client\Kernel\Container $container
-     *
-     * @return void
-     */
-    protected function addSessionClient(Container $container)
-    {
-        $container[self::CLIENT_SESSION] = function (Container $container) {
-            return $container->getLocator()->session()->client();
-        };
-    }
-
-    /**
-     * @param \Spryker\Client\Kernel\Container $container
-     *
-     * @return void
-     */
-    protected function addZedClient(Container $container)
-    {
-        $container[self::CLIENT_ZED_REQUEST] = function (Container $container) {
-            return $container->getLocator()->zedRequest()->client();
-        };
-    }
-
-    /**
-     * @param \Spryker\Client\Kernel\Container $container
-     *
-     * @return void
-     */
-    protected function addStorageClient(Container $container)
-    {
-        $container[self::CLIENT_KV_STORAGE] = function (Container $container) {
-            return $container->getLocator()->storage()->client();
-        };
-    }
-
-    /**
-     * @param \Spryker\Client\Kernel\Container $container
-     *
-     * @return void
-     */
-    protected function addSearchClient(Container $container)
-    {
-        $container[self::CLIENT_SEARCH] = function (Container $container) {
-            return $container->getLocator()->search()->client();
-        };
-    }
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractFactory.php b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractFactory.php
index ad93e98..8026267 100644
--- a/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractFactory.php
+++ b/Bundles/Kernel/src/Spryker/Client/Kernel/AbstractFactory.php
@@ -66,16 +66,6 @@ abstract class AbstractFactory
     }
 
     /**
-     * @deprecated Use `createContainer()` instead
-     *
-     * @return \Spryker\Client\Kernel\Container
-     */
-    protected function getContainer()
-    {
-        return $this->createContainer();
-    }
-
-    /**
      * @return \Spryker\Client\Kernel\Container
      */
     protected function createContainer()
@@ -99,17 +89,7 @@ abstract class AbstractFactory
      */
     protected function resolveDependencyProvider()
     {
-        return $this->getDependencyProviderResolver()->resolve($this);
-    }
-
-    /**
-     * @deprecated Use `createDependencyProviderResolver` instead
-     *
-     * @return \Spryker\Client\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver
-     */
-    protected function getDependencyProviderResolver()
-    {
-        return $this->createDependencyProviderResolver();
+        return $this->createDependencyProviderResolver()->resolve($this);
     }
 
     /**
@@ -131,68 +111,4 @@ abstract class AbstractFactory
         $dependencyProvider->provideServiceLayerDependencies($container);
     }
 
-    /**
-     * @deprecated Use getSessionClient() instead.
-     *
-     * @return \Spryker\Client\Session\SessionClient
-     */
-    protected function createSessionClient()
-    {
-        return $this->getSessionClient();
-    }
-
-    /**
-     * @return \Spryker\Client\Session\SessionClient
-     */
-    public function getSessionClient()
-    {
-        return $this->getProvidedDependency(AbstractDependencyProvider::CLIENT_SESSION);
-    }
-
-    /**
-     * @deprecated Use getZedRequestClient() instead.
-     *
-     * @return \Spryker\Client\ZedRequest\ZedRequestClient
-     */
-    protected function createZedRequestClient()
-    {
-        return $this->getZedRequestClient();
-    }
-
-    /**
-     * @return \Spryker\Client\ZedRequest\ZedRequestClient
-     */
-    public function getZedRequestClient()
-    {
-        return $this->getProvidedDependency(AbstractDependencyProvider::CLIENT_ZED_REQUEST);
-    }
-
-    /**
-     * @deprecated Use getStorageClient() instead.
-     *
-     * @return \Spryker\Client\Storage\StorageClient
-     */
-    protected function createStorageClient()
-    {
-        return $this->getStorageClient();
-    }
-
-    /**
-     * @return \Spryker\Client\Storage\StorageClient
-     */
-    public function getStorageClient()
-    {
-        return $this->getProvidedDependency(AbstractDependencyProvider::CLIENT_KV_STORAGE);
-    }
-
-    /**
-     * @deprecated This method will be removed.
-     *
-     * @return \Spryker\Client\Search\SearchClient
-     */
-    protected function createSearchClient()
-    {
-        return $this->getProvidedDependency(AbstractDependencyProvider::CLIENT_SEARCH);
-    }
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Service/Kernel/AbstractServiceFactory.php b/Bundles/Kernel/src/Spryker/Service/Kernel/AbstractServiceFactory.php
index 09fe98a..f1dfe23 100644
--- a/Bundles/Kernel/src/Spryker/Service/Kernel/AbstractServiceFactory.php
+++ b/Bundles/Kernel/src/Spryker/Service/Kernel/AbstractServiceFactory.php
@@ -37,7 +37,7 @@ class AbstractServiceFactory
      *
      * @throws \Spryker\Service\Kernel\Exception\Container\ContainerKeyNotFoundException
      *
-     * @return object
+     * @return mixed
      */
     public function getProvidedDependency($key)
     {
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/AbstractBundle.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/AbstractBundle.php
deleted file mode 100644
index b7d6747..0000000
--- a/Bundles/Kernel/src/Spryker/Shared/Kernel/AbstractBundle.php
+++ /dev/null
@@ -1,66 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Kernel;
-
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class AbstractBundle
-{
-
-    const OPTION_KEY_PROJECT_PATH_PATTERN = 'project path pattern';
-    const OPTION_KEY_VENDOR_PATH_PATTERN = 'core path pattern';
-    const OPTION_KEY_APPLICATION = 'application';
-    const OPTION_KEY_BUNDLE_PATH_PATTERN = 'bundle path pattern';
-    const OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN = 'bundle project path pattern';
-
-    const APPLICATION = '*';
-    const BUNDLE_PATH_PATTERN = '*/';
-
-    /**
-     * @param array $options
-     */
-    public function __construct(array $options = [])
-    {
-        $resolver = new OptionsResolver();
-        $this->configureOptions($resolver);
-
-        $this->options = $resolver->resolve($options);
-    }
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    private function configureOptions(OptionsResolver $resolver)
-    {
-        $resolver->setDefaults([
-            self::OPTION_KEY_APPLICATION => self::APPLICATION,
-            self::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN => self::BUNDLE_PATH_PATTERN,
-            self::OPTION_KEY_BUNDLE_PATH_PATTERN => self::BUNDLE_PATH_PATTERN,
-            self::OPTION_KEY_PROJECT_PATH_PATTERN => APPLICATION_SOURCE_DIR,
-            self::OPTION_KEY_VENDOR_PATH_PATTERN => Config::get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . '/*/src',
-        ]);
-
-        $resolver->setRequired([
-            self::OPTION_KEY_PROJECT_PATH_PATTERN,
-            self::OPTION_KEY_VENDOR_PATH_PATTERN,
-            self::OPTION_KEY_APPLICATION,
-        ]);
-
-        $resolver->setAllowedTypes(self::OPTION_KEY_PROJECT_PATH_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_VENDOR_PATH_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_APPLICATION, 'string');
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/Cache/Storage/File.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/Cache/Storage/File.php
index 1f7735e..35e116e 100644
--- a/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/Cache/Storage/File.php
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/Cache/Storage/File.php
@@ -11,7 +11,7 @@ use Exception;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Kernel\ClassResolver\Cache\StorageInterface;
 use Spryker\Shared\Kernel\KernelConstants;
-use Spryker\Shared\Library\DataDirectory;
+use Spryker\Shared\Kernel\Store;
 
 class File implements StorageInterface
 {
@@ -59,7 +59,7 @@ class File implements StorageInterface
      */
     protected function getCacheFilename()
     {
-        return DataDirectory::getLocalStoreSpecificPath('cache/autoloader') . '/unresolvable.php';
+        return APPLICATION_ROOT_DIR . '/cache/' . Store::getInstance()->getCurrentCountry() . '/autoloader/unresolvable.php';
     }
 
 }
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/ResolverCache.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/ResolverCache.php
index bcb37d3..b708dee 100644
--- a/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/ResolverCache.php
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/ClassResolver/ResolverCache.php
@@ -7,14 +7,14 @@
 
 namespace Spryker\Shared\Kernel\ClassResolver;
 
+use Everon\Component\Collection\Lazy;
 use Spryker\Shared\Kernel\ClassResolver\Cache\StorageInterface;
-use Spryker\Shared\Library\Collection\LazyCollection;
 
 class ResolverCache implements ResolverCacheInterface
 {
 
     /**
-     * @var \Spryker\Shared\Library\Collection\CollectionInterface
+     * @var \Everon\Component\Collection\CollectionInterface
      */
     protected static $unresolvableCollection;
 
@@ -37,7 +37,7 @@ class ResolverCache implements ResolverCacheInterface
     }
 
     /**
-     * @return \Spryker\Shared\Library\Collection\CollectionInterface
+     * @return \Everon\Component\Collection\CollectionInterface
      */
     protected function getUnresolvableCollection()
     {
@@ -46,7 +46,7 @@ class ResolverCache implements ResolverCacheInterface
                 return $this->getData();
             };
 
-            self::$unresolvableCollection = new LazyCollection($callback);
+            self::$unresolvableCollection = new Lazy($callback);
         }
 
         return self::$unresolvableCollection;
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Communication/Application.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Communication/Application.php
new file mode 100644
index 0000000..833b289
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Communication/Application.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Kernel\Communication;
+
+use Silex\Application as SilexApplication;
+use Silex\Application\TranslationTrait;
+use Silex\Application\TwigTrait;
+use Silex\Application\UrlGeneratorTrait;
+use Symfony\Cmf\Component\Routing\ChainRouter;
+use Symfony\Component\Routing\RouterInterface;
+
+class Application extends SilexApplication
+{
+
+    use TranslationTrait;
+    use TwigTrait;
+    use UrlGeneratorTrait;
+
+    const REQUEST = 'request';
+    const ROUTERS = 'routers';
+    const REQUEST_STACK = 'request_stack';
+
+    /**
+     * Adds a router to the list of routers.
+     *
+     * @param \Symfony\Component\Routing\RouterInterface $router The router
+     * @param int $priority The priority of the router
+     *
+     * @return void
+     */
+    public function addRouter(RouterInterface $router, $priority = 0)
+    {
+        /** @var \Pimple $this */
+        $this[self::ROUTERS] = $this->share($this->extend(self::ROUTERS, function (ChainRouter $chainRouter) use ($router, $priority) {
+            $chainRouter->add($router, $priority);
+
+            return $chainRouter;
+        }));
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/KernelConstants.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/KernelConstants.php
index e90ac1c..2e662bd 100644
--- a/Bundles/Kernel/src/Spryker/Shared/Kernel/KernelConstants.php
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/KernelConstants.php
@@ -7,25 +7,19 @@
 
 namespace Spryker\Shared\Kernel;
 
-use Spryker\Shared\Application\ApplicationConstants;
-
 interface KernelConstants
 {
 
-    const BACKTRACE_USER_PATH = ApplicationConstants::BACKTRACE_USER_PATH;
+    const BACKTRACE_USER_PATH = 'BACKTRACE_USER_PATH';
 
-    const CORE_NAMESPACES = ApplicationConstants::CORE_NAMESPACES;
+    const CORE_NAMESPACES = 'CORE_NAMESPACES';
 
-    const PROJECT_NAMESPACE = ApplicationConstants::PROJECT_NAMESPACE;
-    const PROJECT_NAMESPACES = ApplicationConstants::PROJECT_NAMESPACES;
-    const PROJECT_TIMEZONE = ApplicationConstants::PROJECT_TIMEZONE;
+    const PROJECT_NAMESPACE = 'PROJECT_NAMESPACE';
+    const PROJECT_NAMESPACES = 'PROJECT_NAMESPACES';
 
-    /**
-     * @deprecated Use PropelConstants::PROPEL instead.
-     */
-    const PROPEL = 'PROPEL';
+    const SPRYKER_ROOT = 'SPRYKER_ROOT';
 
-    const STORE_PREFIX = ApplicationConstants::STORE_PREFIX;
+    const STORE_PREFIX = 'STORE_PREFIX';
 
     const DEPENDENCY_INJECTOR_YVES = 'DEPENDENCY_INJECTOR_YVES';
     const DEPENDENCY_INJECTOR_ZED = 'DEPENDENCY_INJECTOR_ZED';
@@ -34,9 +28,4 @@ interface KernelConstants
     const AUTO_LOADER_UNRESOLVABLE_CACHE_PROVIDER = 'AUTO_LOADER_UNRESOLVABLE_CACHE_PROVIDER';
     const AUTO_LOADER_CACHE_FILE_NO_LOCK = 'AUTO_LOADER_CACHE_FILE_NO_LOCK';
 
-    /**
-     * @deprecated Use `$this->getProvidedDependency(ApplicationConstants::FORM_FACTORY)` to get the form factory.
-     */
-    const FORM_FACTORY = 'FORM_FACTORY';
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Store.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Store.php
index dab503c..93fb508 100644
--- a/Bundles/Kernel/src/Spryker/Shared/Kernel/Store.php
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Store.php
@@ -11,7 +11,6 @@ use Exception;
 use InvalidArgumentException;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Kernel\Locale\LocaleNotFoundException;
-use Spryker\Shared\Library\Context;
 
 class Store
 {
@@ -298,22 +297,6 @@ class Store
     }
 
     /**
-     * @param string|\Spryker\Shared\Library\Context|null $context
-     *
-     * @return string
-     */
-    public function getTimezone($context = null)
-    {
-        $contextInstance = Context::getInstance($context);
-
-        if ($contextInstance->has('timezone')) {
-            return $contextInstance->get('timezone');
-        } else {
-            return Config::get(KernelConstants::PROJECT_TIMEZONE);
-        }
-    }
-
-    /**
      * @return array
      */
     public function getContexts()
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/AbstractTransfer.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/AbstractTransfer.php
new file mode 100644
index 0000000..2687d37
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/AbstractTransfer.php
@@ -0,0 +1,475 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Kernel\Transfer;
+
+use ArrayObject;
+use Exception;
+use InvalidArgumentException;
+use Serializable;
+use Spryker\Service\UtilEncoding\Model\Json;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\TransferUnserializationException;
+use Zend\Filter\Word\UnderscoreToCamelCase;
+
+abstract class AbstractTransfer implements TransferInterface, Serializable
+{
+
+    /**
+     * @var array
+     */
+    private $modifiedProperties = [];
+
+    /**
+     * @var array
+     */
+    protected $transferMetadata = [];
+
+    /**
+     * @var \Zend\Filter\Word\UnderscoreToCamelCase
+     */
+    private static $filterUnderscoreToCamelCase;
+
+    public function __construct()
+    {
+        $this->initCollectionProperties();
+    }
+
+    /**
+     * @param bool $isRecursive
+     *
+     * @return array
+     */
+    public function toArray($isRecursive = true)
+    {
+        return $this->propertiesToArray($this->getPropertyNames(), $isRecursive, 'toArray');
+    }
+
+    /**
+     * @param bool $isRecursive
+     *
+     * @return array
+     */
+    public function modifiedToArray($isRecursive = true)
+    {
+        return $this->propertiesToArray($this->modifiedProperties, $isRecursive, 'modifiedToArray');
+    }
+
+    /**
+     * @return void
+     */
+    protected function initCollectionProperties()
+    {
+        foreach ($this->transferMetadata as $property => $metaData) {
+            if ($metaData['is_collection'] && $this->$property === null) {
+                $this->$property = new ArrayObject();
+            }
+        }
+    }
+
+    /**
+     * @param array $properties
+     * @param bool $isRecursive
+     * @param string $childConvertMethodName
+     *
+     * @return array
+     */
+    private function propertiesToArray(array $properties, $isRecursive, $childConvertMethodName)
+    {
+        $values = [];
+
+        foreach ($properties as $property) {
+            $value = $this->callGetMethod($property);
+
+            $arrayKey = $this->transformUnderscoreArrayKey($property);
+
+            if (is_object($value)) {
+                if ($isRecursive && $value instanceof TransferInterface) {
+                    $values[$arrayKey] = $value->$childConvertMethodName($isRecursive);
+                } elseif ($isRecursive && $this->isCollection($property) && count($value) >= 1) {
+                    $values = $this->addValuesToCollection($value, $values, $arrayKey, $isRecursive, $childConvertMethodName);
+                } else {
+                    $values[$arrayKey] = $value;
+                }
+                continue;
+            }
+
+            $values[$arrayKey] = $value;
+        }
+
+        return $values;
+    }
+
+    /**
+     * @return array
+     */
+    private function getPropertyNames()
+    {
+        return array_keys($this->transferMetadata);
+    }
+
+    /**
+     * @param array $data
+     * @param bool $ignoreMissingProperty
+     *
+     * @return $this
+     */
+    public function fromArray(array $data, $ignoreMissingProperty = false)
+    {
+        $allProperties = $this->getPropertyNames();
+        foreach ($data as $property => $value) {
+            $property = $this->filterPropertyUnderscoreToCamelCase($property);
+
+            if ($this->hasProperty($property, $allProperties, $ignoreMissingProperty) === false) {
+                continue;
+            }
+
+            if ($this->isCollection($property)) {
+                $value = $this->processCollection($value, $property, $ignoreMissingProperty);
+            } elseif ($this->isTransferClass($property)) {
+                $value = $this->initializeNestedTransferObject($property, $value, $ignoreMissingProperty);
+            }
+
+            $this->callSetMethod($property, $value);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param string $elementType
+     * @param array|\ArrayObject $arrayObject
+     * @param bool $ignoreMissingProperty
+     *
+     * @return \ArrayObject
+     */
+    protected function processArrayObject($elementType, $arrayObject, $ignoreMissingProperty = false)
+    {
+        $transferObjectsArray = new ArrayObject();
+        foreach ($arrayObject as $arrayElement) {
+            if (!is_array($arrayElement)) {
+                $transferObjectsArray->append(new $elementType());
+                continue;
+            }
+
+            if ($this->isAssociativeArray($arrayElement)) {
+                $transferObject = $this->createInstance($elementType);
+                $transferObject->fromArray($arrayElement, $ignoreMissingProperty);
+                $transferObjectsArray->append($transferObject);
+            } else {
+                foreach ($arrayElement as $arrayElementItem) {
+                    $transferObject = $this->createInstance($elementType);
+                    $transferObject->fromArray($arrayElementItem, $ignoreMissingProperty);
+                    $transferObjectsArray->append($transferObject);
+                }
+            }
+        }
+
+        return $transferObjectsArray;
+    }
+
+    /**
+     * @param array $array
+     *
+     * @return bool
+     */
+    private function isAssociativeArray(array $array)
+    {
+        return array_values($array) !== $array;
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return bool
+     */
+    private function isCollection($property)
+    {
+        return $this->transferMetadata[$property]['is_collection'];
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return bool
+     */
+    private function isTransferClass($property)
+    {
+        return $this->transferMetadata[$property]['is_transfer'];
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return void
+     */
+    protected function addModifiedProperty($property)
+    {
+        if (!in_array($property, $this->modifiedProperties)) {
+            $this->modifiedProperties[] = $property;
+        }
+    }
+
+    /**
+     * @param string $property
+     *
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return void
+     */
+    protected function assertPropertyIsSet($property)
+    {
+        if ($this->$property === null) {
+            throw new RequiredTransferPropertyException(sprintf(
+                'Missing required property "%s" for transfer %s.',
+                $property,
+                get_class($this)
+            ));
+        }
+    }
+
+    /**
+     * @param string $property
+     *
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return void
+     */
+    protected function assertCollectionPropertyIsSet($property)
+    {
+        /** @var \ArrayObject $collection */
+        $collection = $this->$property;
+        if ($collection->count() === 0) {
+            throw new RequiredTransferPropertyException(sprintf(
+                'Empty required collection property "%s" for transfer %s.',
+                $property,
+                get_class($this)
+            ));
+        }
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return string
+     */
+    protected function getTypeForProperty($property)
+    {
+        return $this->transferMetadata[$property]['type'];
+    }
+
+    /**
+     * Performance-Speedup. We do not want another instance of the filter for each property.
+     *
+     * @return \Zend\Filter\Word\UnderscoreToCamelCase
+     */
+    private function getFilterUnderscoreToCamelCase()
+    {
+        if (self::$filterUnderscoreToCamelCase === null) {
+            self::$filterUnderscoreToCamelCase = new UnderscoreToCamelCase();
+        }
+
+        return self::$filterUnderscoreToCamelCase;
+    }
+
+    /**
+     * @param string $property
+     * @param mixed $value
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return void
+     */
+    private function callSetMethod($property, $value)
+    {
+        $setter = 'set' . ucfirst($property);
+
+        try {
+            $this->$setter($value);
+        } catch (Exception $exception) {
+            throw new InvalidArgumentException(
+                sprintf('Could not call "%s(%s)" (type %s) in "%s". Maybe there is a type miss match.', $setter, $value, gettype($value), get_class($this)),
+                $exception->getCode(),
+                $exception
+            );
+        }
+    }
+
+    /**
+     * @param string $property
+     * @param mixed $value
+     * @param bool $ignoreMissingProperty
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    private function initializeNestedTransferObject($property, $value, $ignoreMissingProperty = false)
+    {
+        $type = $this->getTypeForProperty($property);
+        $transferObject = $this->createInstance($type);
+
+        if (is_array($value)) {
+            $transferObject->fromArray($value, $ignoreMissingProperty);
+            $value = $transferObject;
+        }
+
+        return $value;
+    }
+
+    /**
+     * @param mixed $value
+     * @param string $property
+     * @param bool $ignoreMissingProperty
+     *
+     * @return \ArrayObject
+     */
+    private function processCollection($value, $property, $ignoreMissingProperty = false)
+    {
+        $elementType = $this->transferMetadata[$property]['type'];
+        $value = $this->processArrayObject($elementType, $value, $ignoreMissingProperty);
+
+        return $value;
+    }
+
+    /**
+     * @param string $type
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    private function createInstance($type)
+    {
+        return new $type();
+    }
+
+    /**
+     * @param string $property
+     * @param array $properties
+     * @param bool $ignoreMissingProperty
+     *
+     * @throws \InvalidArgumentException
+     *
+     * @return bool
+     */
+    private function hasProperty($property, array $properties, $ignoreMissingProperty)
+    {
+        if (in_array($property, $properties)) {
+            return true;
+        }
+
+        if ($ignoreMissingProperty) {
+            return false;
+        }
+
+        throw new InvalidArgumentException(
+            sprintf('Missing property "%s" in "%s"', $property, get_class($this))
+        );
+    }
+
+    /**
+     * @param string $key
+     *
+     * @return string
+     */
+    private function filterPropertyUnderscoreToCamelCase($key)
+    {
+        $filter = $this->getFilterUnderscoreToCamelCase();
+        $property = lcfirst($filter->filter($key));
+
+        return $property;
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return mixed
+     */
+    private function callGetMethod($property)
+    {
+        $getter = 'get' . ucfirst($property);
+        $value = $this->$getter();
+
+        return $value;
+    }
+
+    /**
+     * @param string $property
+     *
+     * @return mixed
+     */
+    private function transformUnderscoreArrayKey($property)
+    {
+        $property = $this->transferMetadata[$property]['name_underscore'];
+
+        return $property;
+    }
+
+    /**
+     * @param mixed $value
+     * @param array $values
+     * @param string $arrayKey
+     * @param bool $isRecursive
+     * @param string $childConvertMethodName
+     *
+     * @return array
+     */
+    private function addValuesToCollection($value, $values, $arrayKey, $isRecursive, $childConvertMethodName)
+    {
+        foreach ($value as $elementKey => $arrayElement) {
+            if (is_array($arrayElement) || is_scalar($arrayElement)) {
+                $values[$arrayKey][$elementKey] = $arrayElement;
+            } else {
+                $values[$arrayKey][$elementKey] = $arrayElement->$childConvertMethodName($isRecursive);
+            }
+        }
+
+        return $values;
+    }
+
+    /**
+     * @return string
+     */
+    public function serialize()
+    {
+        $jsonUtil = new Json();
+
+        return $jsonUtil->encode($this->modifiedToArray());
+    }
+
+    /**
+     * @param string $serialized
+     *
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\TransferUnserializationException
+     *
+     * @return void
+     */
+    public function unserialize($serialized)
+    {
+        try {
+            $jsonUtil = new Json();
+            $this->fromArray($jsonUtil->decode($serialized, true), true);
+            $this->initCollectionProperties();
+        } catch (Exception $exception) {
+            throw new TransferUnserializationException(
+                sprintf(
+                    'Failed to unserialize %s. Updating or clearing your data source may solve this problem: %s',
+                    get_class($this),
+                    $exception->getMessage()
+                ),
+                $exception->getCode(),
+                $exception
+            );
+        }
+    }
+
+    /**
+     * @return void
+     */
+    public function __wakeup()
+    {
+        $this->initCollectionProperties();
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/RequiredTransferPropertyException.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/RequiredTransferPropertyException.php
new file mode 100644
index 0000000..9662151
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/RequiredTransferPropertyException.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Kernel\Transfer\Exception;
+
+use Exception;
+
+class RequiredTransferPropertyException extends Exception
+{
+}
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/TransferUnserializationException.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/TransferUnserializationException.php
new file mode 100644
index 0000000..29d83e6
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/Exception/TransferUnserializationException.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Kernel\Transfer\Exception;
+
+use Exception;
+
+class TransferUnserializationException extends Exception
+{
+}
diff --git a/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/TransferInterface.php b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/TransferInterface.php
new file mode 100644
index 0000000..793f5ca
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Shared/Kernel/Transfer/TransferInterface.php
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Kernel\Transfer;
+
+interface TransferInterface
+{
+
+    /**
+     * @param bool $isRecursive
+     *
+     * @return array
+     */
+    public function toArray($isRecursive = true);
+
+    /**
+     * @param bool $isRecursive
+     *
+     * @return array
+     */
+    public function modifiedToArray($isRecursive = true);
+
+    /**
+     * @param array $values
+     * @param bool $fuzzyMatch
+     *
+     * @return $this
+     */
+    public function fromArray(array $values, $fuzzyMatch = false);
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/AbstractFactory.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/AbstractFactory.php
index 848a772..6fa08e5 100644
--- a/Bundles/Kernel/src/Spryker/Yves/Kernel/AbstractFactory.php
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/AbstractFactory.php
@@ -11,7 +11,6 @@ use Spryker\Client\Kernel\ClassResolver\Client\ClientResolver;
 use Spryker\Shared\Kernel\ContainerGlobals;
 use Spryker\Shared\Kernel\Dependency\Injector\DependencyInjector;
 use Spryker\Shared\Kernel\Dependency\Injector\DependencyInjectorCollectionInterface;
-use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Yves\Kernel\ClassResolver\DependencyInjector\DependencyInjectorResolver;
 use Spryker\Yves\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver;
 use Spryker\Yves\Kernel\Exception\Container\ContainerKeyNotFoundException;
@@ -63,16 +62,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use DependencyProvider instead
-     *
-     * @return \Generated\Client\Ide\AutoCompletion|\Spryker\Shared\Kernel\LocatorLocatorInterface
-     */
-    protected function getLocator()
-    {
-        return Locator::getInstance();
-    }
-
-    /**
      * @return \Spryker\Client\Kernel\AbstractClient
      */
     protected function getClient()
@@ -93,16 +82,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `createClientResolver()` instead
-     *
-     * @return \Spryker\Client\Kernel\ClassResolver\Client\ClientResolver
-     */
-    protected function getClientResolver()
-    {
-        return $this->createClientResolver();
-    }
-
-    /**
      * @return \Spryker\Client\Kernel\ClassResolver\Client\ClientResolver
      */
     protected function createClientResolver()
@@ -111,18 +90,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `$this->getProvidedDependency(ApplicationConstants::FORM_FACTORY)` to get the form factory.
-     *
-     * Ensure that you registered `Spryker\Shared\Application\ServiceProvider\FormFactoryServiceProvider`
-     *
-     * @return \Symfony\Component\Form\FormFactoryInterface
-     */
-    protected function getFormFactory()
-    {
-        return $this->getProvidedDependency(KernelConstants::FORM_FACTORY);
-    }
-
-    /**
      * @param string $key
      *
      * @throws \Spryker\Yves\Kernel\Exception\Container\ContainerKeyNotFoundException
@@ -143,16 +110,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `createContainerWithProvidedDependencies()` instead
-     *
-     * @return \Spryker\Yves\Kernel\Container
-     */
-    protected function getContainerWithProvidedDependencies()
-    {
-        return $this->createContainerWithProvidedDependencies();
-    }
-
-    /**
      * @return \Spryker\Yves\Kernel\Container
      */
     protected function createContainerWithProvidedDependencies()
@@ -188,18 +145,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `createDependencyInjector()` instead
-     *
-     * @param \Spryker\Shared\Kernel\Dependency\Injector\DependencyInjectorCollectionInterface $dependencyInjectorCollection
-     *
-     * @return \Spryker\Shared\Kernel\Dependency\Injector\DependencyInjector
-     */
-    protected function getDependencyInjector(DependencyInjectorCollectionInterface $dependencyInjectorCollection)
-    {
-        return $this->createDependencyInjector($dependencyInjectorCollection);
-    }
-
-    /**
      * @param \Spryker\Shared\Kernel\Dependency\Injector\DependencyInjectorCollectionInterface $dependencyInjectorCollection
      *
      * @return \Spryker\Shared\Kernel\Dependency\Injector\DependencyInjector
@@ -210,16 +155,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `createDependencyInjectorResolver()` instead
-     *
-     * @return \Spryker\Yves\Kernel\ClassResolver\DependencyInjector\DependencyInjectorResolver
-     */
-    protected function getDependencyInjectorResolver()
-    {
-        return $this->createDependencyInjectorResolver();
-    }
-
-    /**
      * @return \Spryker\Yves\Kernel\ClassResolver\DependencyInjector\DependencyInjectorResolver
      */
     protected function createDependencyInjectorResolver()
@@ -236,16 +171,6 @@ abstract class AbstractFactory implements FactoryInterface
     }
 
     /**
-     * @deprecated Use `createDependencyProviderResolver()` instead
-     *
-     * @return \Spryker\Yves\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver
-     */
-    protected function getDependencyProviderResolver()
-    {
-        return $this->createDependencyProviderResolver();
-    }
-
-    /**
      * @return \Spryker\Yves\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver
      */
     protected function createDependencyProviderResolver()
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Application.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Application.php
new file mode 100644
index 0000000..06e9966
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Application.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel;
+
+use Spryker\Shared\Kernel\Communication\Application as SharedApplication;
+
+class Application extends SharedApplication
+{
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Controller/AbstractController.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Controller/AbstractController.php
new file mode 100644
index 0000000..76437ef
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Controller/AbstractController.php
@@ -0,0 +1,219 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel\Controller;
+
+use Silex\Application;
+use Spryker\Client\Kernel\ClassResolver\Client\ClientResolver;
+use Spryker\Yves\Kernel\ClassResolver\Factory\FactoryResolver;
+use Spryker\Yves\Kernel\Dependency\Messenger\KernelToMessengerBridge;
+use Spryker\Yves\Kernel\Dependency\Messenger\NullMessenger;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+
+abstract class AbstractController
+{
+
+    /**
+     * @var \Silex\Application
+     */
+    private $application;
+
+    /**
+     * @var \Spryker\Yves\Kernel\AbstractFactory
+     */
+    private $factory;
+
+    /**
+     * @var \Spryker\Client\Kernel\AbstractClient
+     */
+    private $client;
+
+    /**
+     * @return void
+     */
+    public function initialize()
+    {
+    }
+
+    /**
+     * @param \Silex\Application $application
+     *
+     * @return $this
+     */
+    public function setApplication(Application $application)
+    {
+        $this->application = $application;
+
+        return $this;
+    }
+
+    /**
+     * @param string $path
+     * @param array $parameters
+     * @param int $code
+     *
+     * @return \Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    protected function redirectResponseInternal($path, $parameters = [], $code = 302)
+    {
+        return new RedirectResponse($this->getApplication()->path($path, $parameters), $code);
+    }
+
+    /**
+     * @return \Silex\Application
+     */
+    protected function getApplication()
+    {
+        return $this->application;
+    }
+
+    /**
+     * @return string
+     */
+    protected function getLocale()
+    {
+        return $this->getApplication()['locale'];
+    }
+
+    /**
+     * @param string $absoluteUrl
+     * @param int $code
+     *
+     * @return \Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    protected function redirectResponseExternal($absoluteUrl, $code = 302)
+    {
+        return new RedirectResponse($absoluteUrl, $code);
+    }
+
+    /**
+     * @param mixed|null $data
+     * @param int $status
+     * @param array $headers
+     *
+     * @return \Symfony\Component\HttpFoundation\JsonResponse
+     */
+    protected function jsonResponse($data = null, $status = 200, $headers = [])
+    {
+        return new JsonResponse($data, $status, $headers);
+    }
+
+    /**
+     * @param array $data
+     *
+     * @return array
+     */
+    protected function viewResponse(array $data = [])
+    {
+        return $data;
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return $this
+     */
+    protected function addSuccessMessage($message)
+    {
+        $this->getMessenger()->addSuccessMessage($message);
+
+        return $this;
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return $this
+     */
+    protected function addInfoMessage($message)
+    {
+        $this->getMessenger()->addInfoMessage($message);
+
+        return $this;
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return $this
+     */
+    protected function addErrorMessage($message)
+    {
+        $this->getMessenger()->addErrorMessage($message);
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Client\Kernel\AbstractClient
+     */
+    protected function getClient()
+    {
+        if ($this->client === null) {
+            $this->client = $this->resolveClient();
+        }
+
+        return $this->client;
+    }
+
+    /**
+     * @return \Spryker\Client\Kernel\AbstractClient
+     */
+    private function resolveClient()
+    {
+        return $this->getClientResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Client\Kernel\ClassResolver\Client\ClientResolver
+     */
+    private function getClientResolver()
+    {
+        return new ClientResolver();
+    }
+
+    /**
+     * @return \Spryker\Yves\Kernel\AbstractFactory
+     */
+    protected function getFactory()
+    {
+        if ($this->factory === null) {
+            $this->factory = $this->resolveFactory();
+        }
+
+        return $this->factory;
+    }
+
+    /**
+     * @return \Spryker\Yves\Kernel\AbstractFactory
+     */
+    private function resolveFactory()
+    {
+        return $this->getFactoryResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Yves\Kernel\ClassResolver\Factory\FactoryResolver
+     */
+    private function getFactoryResolver()
+    {
+        return new FactoryResolver();
+    }
+
+    /**
+     * @return \Spryker\Yves\Kernel\Dependency\Messenger\KernelToMessengerInterface
+     */
+    private function getMessenger()
+    {
+        $messenger = ($this->application->offsetExists('flash_messenger')) ? $this->application['flash_messenger'] : new NullMessenger();
+        $applicationToMessengerBridge = new KernelToMessengerBridge($messenger);
+
+        return $applicationToMessengerBridge;
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/ControllerResolver/YvesFragmentControllerResolver.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/ControllerResolver/YvesFragmentControllerResolver.php
index 4482ee1..02d514a 100644
--- a/Bundles/Kernel/src/Spryker/Yves/Kernel/ControllerResolver/YvesFragmentControllerResolver.php
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/ControllerResolver/YvesFragmentControllerResolver.php
@@ -38,7 +38,7 @@ class YvesFragmentControllerResolver extends SilexControllerResolver
     /**
      * @param \Spryker\Shared\Kernel\Communication\BundleControllerActionInterface $bundleControllerAction
      *
-     * @return \Spryker\Yves\Application\Controller\AbstractController
+     * @return \Spryker\Yves\Kernel\Controller\AbstractController
      */
     protected function resolveController(BundleControllerActionInterface $bundleControllerAction)
     {
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerBridge.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerBridge.php
new file mode 100644
index 0000000..78bc762
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerBridge.php
@@ -0,0 +1,56 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel\Dependency\Messenger;
+
+class KernelToMessengerBridge implements KernelToMessengerInterface
+{
+
+    /**
+     * @var \Spryker\Yves\Messenger\FlashMessenger\FlashMessengerInterface
+     */
+    protected $messenger;
+
+    /**
+     * @param \Spryker\Yves\Messenger\FlashMessenger\FlashMessengerInterface $messengerFacade
+     */
+    public function __construct($messengerFacade)
+    {
+        $this->messenger = $messengerFacade;
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage($message)
+    {
+        $this->messenger->addSuccessMessage($message);
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addInfoMessage($message)
+    {
+        $this->messenger->addInfoMessage($message);
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addErrorMessage($message)
+    {
+        $this->messenger->addErrorMessage($message);
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerInterface.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerInterface.php
new file mode 100644
index 0000000..1bd3edf
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/KernelToMessengerInterface.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel\Dependency\Messenger;
+
+interface KernelToMessengerInterface
+{
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage($message);
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addInfoMessage($message);
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addErrorMessage($message);
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/NullMessenger.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/NullMessenger.php
new file mode 100644
index 0000000..ca63819
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Dependency/Messenger/NullMessenger.php
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel\Dependency\Messenger;
+
+class NullMessenger implements KernelToMessengerInterface
+{
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage($message)
+    {
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addInfoMessage($message)
+    {
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function addErrorMessage($message)
+    {
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Yves/Kernel/Plugin/Pimple.php b/Bundles/Kernel/src/Spryker/Yves/Kernel/Plugin/Pimple.php
new file mode 100644
index 0000000..6e79731
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Yves/Kernel/Plugin/Pimple.php
@@ -0,0 +1,39 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\Kernel\Plugin;
+
+use Spryker\Shared\Kernel\Communication\Application;
+use Spryker\Yves\Kernel\AbstractPlugin;
+
+class Pimple extends AbstractPlugin
+{
+
+    /**
+     * @var \Spryker\Shared\Kernel\Communication\Application
+     */
+    protected static $application;
+
+    /**
+     * @param \Spryker\Shared\Kernel\Communication\Application $application
+     *
+     * @return void
+     */
+    public static function setApplication(Application $application)
+    {
+        self::$application = $application;
+    }
+
+    /**
+     * @return \Spryker\Shared\Kernel\Communication\Application
+     */
+    public function getApplication()
+    {
+        return self::$application;
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleDependencyProviderResolverAwareTrait.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleDependencyProviderResolverAwareTrait.php
index 02db715..40b6386 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleDependencyProviderResolverAwareTrait.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleDependencyProviderResolverAwareTrait.php
@@ -55,16 +55,6 @@ trait BundleDependencyProviderResolverAwareTrait
     }
 
     /**
-     * @deprecated Use `createContainerWithProvidedDependencies()` instead
-     *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    protected function getContainerWithProvidedDependencies()
-    {
-        return $this->createContainerWithProvidedDependencies();
-    }
-
-    /**
      * @return \Spryker\Zed\Kernel\Container
      */
     protected function createContainerWithProvidedDependencies()
@@ -81,18 +71,6 @@ trait BundleDependencyProviderResolverAwareTrait
     }
 
     /**
-     * @deprecated Use `createDependencyInjector()` instead
-     *
-     * @param \Spryker\Zed\Kernel\Dependency\Injector\DependencyInjectorCollectionInterface $dependencyInjectorCollection
-     *
-     * @return \Spryker\Zed\Kernel\Dependency\Injector\DependencyInjector
-     */
-    protected function getDependencyInjector(DependencyInjectorCollectionInterface $dependencyInjectorCollection)
-    {
-        return $this->createDependencyInjector($dependencyInjectorCollection);
-    }
-
-    /**
      * @param \Spryker\Zed\Kernel\Dependency\Injector\DependencyInjectorCollectionInterface $dependencyInjectorCollection
      *
      * @return \Spryker\Zed\Kernel\Dependency\Injector\DependencyInjector
@@ -111,16 +89,6 @@ trait BundleDependencyProviderResolverAwareTrait
     }
 
     /**
-     * @deprecated Use `createDependencyProviderResolver()` instead
-     *
-     * @return \Spryker\Zed\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver
-     */
-    protected function getDependencyProviderResolver()
-    {
-        return $this->createDependencyProviderResolver();
-    }
-
-    /**
      * @return \Spryker\Zed\Kernel\ClassResolver\DependencyProvider\DependencyProviderResolver
      */
     protected function createDependencyProviderResolver()
@@ -151,16 +119,6 @@ trait BundleDependencyProviderResolverAwareTrait
     );
 
     /**
-     * @deprecated Use `createContainer()` instead
-     *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    protected function getContainer()
-    {
-        return $this->createContainer();
-    }
-
-    /**
      * @return \Spryker\Zed\Kernel\Container
      */
     protected function createContainer()
@@ -188,16 +146,6 @@ trait BundleDependencyProviderResolverAwareTrait
     }
 
     /**
-     * @deprecated Use `createDependencyInjectorResolver()` instead
-     *
-     * @return \Spryker\Zed\Kernel\ClassResolver\DependencyInjector\DependencyInjectorResolver
-     */
-    protected function getDependencyInjectorResolver()
-    {
-        return $this->createDependencyInjectorResolver();
-    }
-
-    /**
      * @return \Spryker\Zed\Kernel\ClassResolver\DependencyInjector\DependencyInjectorResolver
      */
     protected function createDependencyInjectorResolver()
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleNameFinder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleNameFinder.php
deleted file mode 100644
index a481410..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/BundleNameFinder.php
+++ /dev/null
@@ -1,76 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel;
-
-use Spryker\Shared\Kernel\AbstractBundle;
-use Symfony\Component\Finder\Finder;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class BundleNameFinder extends AbstractBundle
-{
-
-    /**
-     * @return array
-     */
-    public function getBundleNames()
-    {
-        $bundles = [];
-
-        foreach ($this->getFinder() as $bundleDirectory) {
-            $bundleName = $bundleDirectory->getRelativePathname();
-            $bundles[] = $bundleName;
-        }
-
-        $bundles = array_unique($bundles);
-
-        sort($bundles);
-
-        return $bundles;
-    }
-
-    /**
-     * @return array
-     */
-    private function getBundleDirectories()
-    {
-        $vendorBundlePathPattern = rtrim($this->options[self::OPTION_KEY_VENDOR_PATH_PATTERN], DIRECTORY_SEPARATOR)
-            . DIRECTORY_SEPARATOR
-            . $this->options[self::OPTION_KEY_BUNDLE_PATH_PATTERN]
-            . $this->options[self::OPTION_KEY_APPLICATION];
-
-        $projectBundlePathPattern = rtrim($this->options[self::OPTION_KEY_PROJECT_PATH_PATTERN])
-            . DIRECTORY_SEPARATOR
-            . $this->options[self::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN]
-            . $this->options[self::OPTION_KEY_APPLICATION];
-
-        $directories = [];
-
-        if (glob($projectBundlePathPattern)) {
-            $directories[] = $projectBundlePathPattern;
-        }
-        if (glob($vendorBundlePathPattern)) {
-            $directories[] = $vendorBundlePathPattern;
-        }
-
-        return $directories;
-    }
-
-    /**
-     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
-     */
-    protected function getFinder()
-    {
-        $finder = new Finder();
-        $dirs = $this->getBundleDirectories();
-
-        return $finder->directories()->in($dirs)->depth(0);
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Business/ModelResult.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Business/ModelResult.php
deleted file mode 100644
index b3f70fc..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Business/ModelResult.php
+++ /dev/null
@@ -1,189 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\Business;
-
-use Propel\Runtime\ActiveRecord\ActiveRecordInterface;
-use Spryker\Shared\Transfer\TransferInterface;
-
-/**
- * //TODO: Move this class away from Kernel bundle.
- */
-class ModelResult
-{
-
-    /**
-     * @var \Propel\Runtime\ActiveRecord\ActiveRecordInterface|null
-     */
-    protected $entity = null;
-
-    /**
-     * @var array
-     */
-    protected $entityModifiedColumns = [];
-
-    /**
-     * @var \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    protected $transfer = null;
-
-    /**
-     * @var array
-     */
-    protected $errors = [];
-
-    /**
-     * @var bool
-     */
-    protected $success = true;
-
-    /**
-     * @param \Propel\Runtime\ActiveRecord\ActiveRecordInterface|null $entity
-     */
-    public function __construct(ActiveRecordInterface $entity = null)
-    {
-        $this->entity = $entity;
-    }
-
-    /**
-     * @return bool
-     */
-    public function isSuccess()
-    {
-        return $this->success;
-    }
-
-    /**
-     * @return array
-     */
-    public function getErrors()
-    {
-        return array_merge($this->errors, $this->getPropelValidationErrors());
-    }
-
-    /**
-     * @return array
-     */
-    protected function getPropelValidationErrors()
-    {
-        return [];
-    }
-
-    /**
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    public function getTransfer()
-    {
-        return $this->transfer;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transfer)
-    {
-        $this->transfer = $transfer;
-
-        return $this;
-    }
-
-    /**
-     * @return bool
-     */
-    public function hasTransfer()
-    {
-        return isset($this->transfer);
-    }
-
-    /**
-     * @return bool
-     */
-    public function hasEntity()
-    {
-        return isset($this->entity);
-    }
-
-    /**
-     * @return \Propel\Runtime\ActiveRecord\ActiveRecordInterface
-     */
-    public function getEntity()
-    {
-        return $this->entity;
-    }
-
-    /**
-     * @deprecated
-     *
-     * @param \Propel\Runtime\ActiveRecord\ActiveRecordInterface $entity
-     *
-     * @return $this
-     */
-    public function setEntity(ActiveRecordInterface $entity)
-    {
-        $this->entity = $entity;
-
-        return $this;
-    }
-
-    /**
-     * @param array $entityModifiedColumns
-     *
-     * @return void
-     */
-    public function setEntityModifiedColumns($entityModifiedColumns)
-    {
-        $this->entityModifiedColumns = $entityModifiedColumns;
-    }
-
-    /**
-     * @return array
-     */
-    public function getEntityModifiedColumns()
-    {
-        return $this->entityModifiedColumns;
-    }
-
-    /**
-     * @param string $error
-     *
-     * @return $this
-     */
-    public function addError($error)
-    {
-        $this->success = false;
-        $this->errors[] = $error;
-
-        return $this;
-    }
-
-    /**
-     * @param array $errors
-     *
-     * @return void
-     */
-    public function addErrors(array $errors)
-    {
-        foreach ($errors as $error) {
-            $this->addError($error);
-        }
-    }
-
-    /**
-     * @param bool $success
-     *
-     * @return $this
-     */
-    public function setSuccess($success)
-    {
-        $this->success = $success;
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/AbstractCommunicationFactory.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/AbstractCommunicationFactory.php
index 5cfe1c2..2e63ea6 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/AbstractCommunicationFactory.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/AbstractCommunicationFactory.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Kernel\Communication;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\AbstractFactory;
 use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
@@ -17,7 +16,7 @@ use Spryker\Zed\Kernel\Dependency\Injector\DependencyInjector;
 abstract class AbstractCommunicationFactory extends AbstractFactory
 {
 
-    const FORM_FACTORY = 'form.factory';
+    const FORM_FACTORY = 'FORM_FACTORY';
 
     /**
      * @var \Spryker\Zed\Kernel\Business\AbstractFacade
@@ -83,7 +82,9 @@ abstract class AbstractCommunicationFactory extends AbstractFactory
      */
     protected function getFormFactory()
     {
-        return (new Pimple())->getApplication()[self::FORM_FACTORY];
+        $container = $this->createContainerWithProvidedDependencies();
+
+        return $container[self::FORM_FACTORY];
     }
 
 }
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Console.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Console.php
new file mode 100644
index 0000000..0c9b8f3
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Console.php
@@ -0,0 +1,263 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Communication\Console;
+
+use Spryker\Zed\Kernel\Business\AbstractFacade;
+use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
+use Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver;
+use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+use Spryker\Zed\Kernel\Container;
+use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
+use Symfony\Component\Console\Command\Command as SymfonyCommand;
+use Symfony\Component\Console\Input\ArrayInput;
+use Symfony\Component\Console\Input\InputInterface;
+use Symfony\Component\Console\Logger\ConsoleLogger;
+use Symfony\Component\Console\Output\OutputInterface;
+
+class Console extends SymfonyCommand
+{
+
+    use Helper;
+
+    const CODE_SUCCESS = 0;
+    const CODE_ERROR = 1;
+
+    /**
+     * @var \Symfony\Component\Console\Input\InputInterface
+     */
+    protected $input;
+
+    /**
+     * @var \Symfony\Component\Console\Output\OutputInterface
+     */
+    protected $output;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
+     */
+    private $factory;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    private $facade;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Container
+     */
+    private $container;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
+     */
+    private $queryContainer;
+
+    /**
+     * @var \Psr\Log\LoggerInterface
+     */
+    protected $messenger;
+
+    /**
+     * @var int
+     */
+    private $exitCode = self::CODE_SUCCESS;
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return $this
+     */
+    public function setExternalDependencies(Container $container)
+    {
+        $this->container = $container;
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function getContainer()
+    {
+        return $this->container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory $factory
+     *
+     * @return $this
+     */
+    public function setFactory(AbstractCommunicationFactory $factory)
+    {
+        $this->factory = $factory;
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
+     */
+    protected function getFactory()
+    {
+        if ($this->factory === null) {
+            $this->factory = $this->resolveFactory();
+        }
+
+        if ($this->container !== null) {
+            $this->factory->setContainer($this->container);
+        }
+
+        if ($this->queryContainer !== null) {
+            $this->factory->setQueryContainer($this->queryContainer);
+        }
+
+        return $this->factory;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
+     */
+    private function resolveFactory()
+    {
+        return $this->getFactoryResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver
+     */
+    private function getFactoryResolver()
+    {
+        return new FactoryResolver();
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Business\AbstractFacade $facade
+     *
+     * @return void
+     */
+    public function setFacade(AbstractFacade $facade)
+    {
+        $this->facade = $facade;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    protected function getFacade()
+    {
+        return $this->resolveFacade();
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    private function resolveFacade()
+    {
+        return $this->getFacadeResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver
+     */
+    private function getFacadeResolver()
+    {
+        return new FacadeResolver();
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer $queryContainer
+     *
+     * @return $this
+     */
+    public function setQueryContainer(AbstractQueryContainer $queryContainer)
+    {
+        $this->queryContainer = $queryContainer;
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
+     */
+    protected function getQueryContainer()
+    {
+        return $this->queryContainer;
+    }
+
+    /**
+     * @param \Symfony\Component\Console\Input\InputInterface $input
+     * @param \Symfony\Component\Console\Output\OutputInterface $output
+     *
+     * @return void
+     */
+    protected function initialize(InputInterface $input, OutputInterface $output)
+    {
+        $this->input = $input;
+        $this->output = $output;
+    }
+
+    /**
+     * @param string $command
+     * @param array $arguments
+     *
+     * @return int
+     */
+    protected function runDependingCommand($command, array $arguments = [])
+    {
+        $command = $this->getApplication()->find($command);
+        $arguments['command'] = $command->getName();
+        $input = new ArrayInput($arguments);
+
+        $exitCode = $command->run($input, $this->output);
+
+        $this->setExitCode($exitCode);
+
+        return $exitCode;
+    }
+
+    /**
+     * @param int $exitCode
+     *
+     * @return $this
+     */
+    private function setExitCode($exitCode)
+    {
+        $this->exitCode = $exitCode;
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     */
+    protected function hasError()
+    {
+        return $this->exitCode !== self::CODE_SUCCESS;
+    }
+
+    /**
+     * @return int
+     */
+    protected function getLastExitCode()
+    {
+        return $this->exitCode;
+    }
+
+    /**
+     * @return \Psr\Log\LoggerInterface|\Symfony\Component\Console\Logger\ConsoleLogger
+     */
+    protected function getMessenger()
+    {
+        if ($this->messenger === null) {
+            $this->messenger = new ConsoleLogger($this->output);
+        }
+
+        return $this->messenger;
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Helper.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Helper.php
new file mode 100644
index 0000000..0ae12d5
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Console/Helper.php
@@ -0,0 +1,229 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Communication\Console;
+
+use RuntimeException;
+use Symfony\Component\Console\Formatter\OutputFormatterStyle;
+use Symfony\Component\Console\Output\OutputInterface;
+
+trait Helper
+{
+
+    /**
+     * @param string $message
+     * @param bool $wrapInInfoTags
+     *
+     * @return void
+     */
+    public function info($message, $wrapInInfoTags = true)
+    {
+        if (is_array($message)) {
+            $message = implode(PHP_EOL, $message);
+        }
+        if ($wrapInInfoTags) {
+            $message = '<info>' . $message . '</info>';
+        }
+        $this->output->writeln($message);
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function error($message)
+    {
+        $width = $this->getApplication()->getTerminalDimensions()[0];
+        $width = ($width) ?: 200;
+        $width -= strlen($message);
+        $width = max(0, $width);
+        $subOne = false;
+        if ($width % 2 !== 0) {
+            $width += 1;
+            $subOne = true;
+        }
+        $halfWidth = $width / 2;
+        $message = str_repeat(' ', $halfWidth) . $message;
+        if ($subOne) {
+            $halfWidth -= 1;
+        }
+        $message .= str_repeat(' ', $halfWidth);
+        $message = '<error>' . $message . '</error>';
+
+        $this->output->writeln('<error>' . str_repeat(' ', $width + strlen($message)) . '</error>');
+        $this->output->writeln($message);
+        $this->output->writeln('<error>' . str_repeat(' ', $width + strlen($message)) . '</error>');
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function warning($message)
+    {
+        $width = $this->getApplication()->getTerminalDimensions()[0];
+        $width = ($width) ?: 200;
+        $width -= strlen($message);
+        $subOne = false;
+        if ($width % 2 !== 0) {
+            $width += 1;
+            $subOne = true;
+        }
+        $halfWidth = $width / 2;
+        $message = str_repeat(' ', $halfWidth) . $message;
+        if ($subOne) {
+            $halfWidth -= 1;
+        }
+        $message .= str_repeat(' ', $halfWidth);
+        $message = '<warning>' . $message . '</warning>';
+
+        $style = new OutputFormatterStyle('black', 'yellow');
+        $this->output->getFormatter()->setStyle('warning', $style);
+
+        $this->output->writeln('<warning>' . str_repeat(' ', $width + strlen($message)) . '</warning>');
+        $this->output->writeln($message);
+        $this->output->writeln('<warning>' . str_repeat(' ', $width + strlen($message)) . '</warning>');
+    }
+
+    /**
+     * @param string $message
+     *
+     * @return void
+     */
+    public function success($message)
+    {
+        $width = $this->getApplication()->getTerminalDimensions()[0];
+        $width = ($width) ?: 200;
+        $width -= strlen($message);
+        $subOne = false;
+        if ($width % 2 !== 0) {
+            $width += 1;
+            $subOne = true;
+        }
+        $halfWidth = $width / 2;
+        $message = str_repeat(' ', $halfWidth) . $message;
+        if ($subOne) {
+            $halfWidth -= 1;
+        }
+        $message .= str_repeat(' ', $halfWidth);
+        $message = '<success>' . $message . '</success>';
+
+        $style = new OutputFormatterStyle('black', 'green');
+        $this->output->getFormatter()->setStyle('success', $style);
+
+        $this->output->writeln('<success>' . str_repeat(' ', $width + strlen($message)) . '</success>');
+        $this->output->writeln($message);
+        $this->output->writeln('<success>' . str_repeat(' ', $width + strlen($message)) . '</success>');
+    }
+
+    /**
+     * @param string $question
+     *
+     * @return bool
+     */
+    public function askConfirmation($question)
+    {
+        $question = $question . '? <fg=green>[yes|no|abort]</fg=green> ';
+
+        $result = $this->askAbortableConfirmation($this->output, $question, false);
+
+        return $result;
+    }
+
+    /**
+     * Asks a confirmation to the user.
+     *
+     * The question will be asked until the user answers by yes, or no.
+     * If he answers nothing, it will use the default value. If he answers abort,
+     * it will throw a RuntimeException.
+     *
+     * @param \Symfony\Component\Console\Output\OutputInterface $output An Output instance
+     * @param string $question The question to ask
+     * @param bool $default The default answer if the user enters nothing
+     *
+     * @throws \RuntimeException
+     *
+     * @return bool true if the user has confirmed, false otherwise
+     */
+    public function askAbortableConfirmation(OutputInterface $output, $question, $default = true)
+    {
+        $answer = 'z';
+        while ($answer && !in_array(strtolower($answer[0]), ['y', 'n', 'a'])) {
+            $answer = $this->ask($question, $default);
+        }
+
+        if (strtolower($answer[0]) === 'a') {
+            throw new RuntimeException('Aborted');
+        }
+
+        if ($default === false) {
+            return $answer && strtolower($answer[0]) === 'y';
+        }
+
+        return !$answer || strtolower($answer[0]) === 'y';
+    }
+
+    /**
+     * @param string $question
+     * @param string|null $default
+     *
+     * @return string|null
+     */
+    public function ask($question, $default = null)
+    {
+        /** @var \Symfony\Component\Console\Helper\DialogHelper $dialog */
+        $dialog = $this->getHelperSet()->get('dialog');
+
+        return $dialog->ask($this->output, $question, $default);
+    }
+
+    /**
+     * @param string $question
+     * @param array $options
+     * @param string $default
+     *
+     * @return mixed
+     */
+    public function select($question, array $options, $default)
+    {
+        /** @var \Symfony\Component\Console\Helper\DialogHelper $dialog */
+        $dialog = $this->getHelperSet()->get('dialog');
+        $selected = $dialog->select(
+            $this->output,
+            $question,
+            $options,
+            $default
+        );
+
+        return $options[$selected];
+    }
+
+    /**
+     * @param bool $wrapInInfoTags
+     *
+     * @return void
+     */
+    public function printLineSeparator($wrapInInfoTags = true)
+    {
+        $width = $this->getApplication()->getTerminalDimensions()[0];
+        $width = ($width) ?: 200;
+        $this->info(str_repeat('-', $width), $wrapInInfoTags);
+    }
+
+    /**
+     * @return \Silex\Application
+     */
+    abstract protected function getApplication();
+
+    /**
+     * @return \Symfony\Component\Console\Helper\HelperSet
+     */
+    abstract protected function getHelperSet();
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractController.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractController.php
new file mode 100644
index 0000000..9ef8e7c
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractController.php
@@ -0,0 +1,288 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Communication\Controller;
+
+use Generated\Shared\Transfer\MessageTransfer;
+use Silex\Application;
+use Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver;
+use Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver;
+use Spryker\Zed\Kernel\ClassResolver\QueryContainer\QueryContainerResolver;
+use Spryker\Zed\Kernel\Dependency\Facade\KernelToMessengerBridge;
+use Spryker\Zed\Kernel\Dependency\Facade\NullMessenger;
+use Spryker\Zed\Kernel\Exception\Controller\InvalidIdException;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\RedirectResponse;
+use Symfony\Component\HttpFoundation\StreamedResponse;
+
+abstract class AbstractController
+{
+
+    /**
+     * @var \Silex\Application
+     */
+    private $application;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
+     */
+    private $factory;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    private $facade;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
+     */
+    private $queryContainer;
+
+    /**
+     * @return void
+     */
+    public function initialize()
+    {
+    }
+
+    /**
+     * @param \Silex\Application $application
+     *
+     * @return $this
+     */
+    public function setApplication(Application $application)
+    {
+        $this->application = $application;
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory
+     */
+    protected function getFactory()
+    {
+        if ($this->factory === null) {
+            $this->factory = $this->resolveFactory();
+        }
+
+        return $this->factory;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory|\Spryker\Zed\Kernel\AbstractFactory
+     */
+    private function resolveFactory()
+    {
+        return $this->getFactoryResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver
+     */
+    private function getFactoryResolver()
+    {
+        return new FactoryResolver();
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    protected function getFacade()
+    {
+        if ($this->facade === null) {
+            $this->facade = $this->resolveFacade();
+        }
+
+        return $this->facade;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Business\AbstractFacade
+     */
+    private function resolveFacade()
+    {
+        return $this->getFacadeResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\ClassResolver\Facade\FacadeResolver
+     */
+    private function getFacadeResolver()
+    {
+        return new FacadeResolver();
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
+     */
+    protected function getQueryContainer()
+    {
+        if ($this->queryContainer === null) {
+            $this->queryContainer = $this->resolveQueryContainer();
+        }
+
+        return $this->queryContainer;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Persistence\AbstractQueryContainer
+     */
+    private function resolveQueryContainer()
+    {
+        return $this->getQueryContainerResolver()->resolve($this);
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\ClassResolver\QueryContainer\QueryContainerResolver
+     */
+    private function getQueryContainerResolver()
+    {
+        return new QueryContainerResolver();
+    }
+
+    /**
+     * This methods centralizes the way we cast IDs. This is needed to allow the usage of UUIDs in the future.
+     *
+     * @param mixed $id
+     *
+     * @throws \Spryker\Zed\Kernel\Exception\Controller\InvalidIdException
+     *
+     * @return int
+     */
+    protected function castId($id)
+    {
+        if (!is_numeric($id) || $id === 0) {
+            throw new InvalidIdException('The given id is not numeric or 0 (zero)');
+        }
+
+        return (int)$id;
+    }
+
+    /**
+     * @param string $url
+     * @param int $status
+     * @param array $headers
+     *
+     * @return \Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    protected function redirectResponse($url, $status = 302, $headers = [])
+    {
+        return new RedirectResponse($url, $status, $headers);
+    }
+
+    /**
+     * @param array|null $data
+     * @param int $status
+     * @param array $headers
+     *
+     * @return \Symfony\Component\HttpFoundation\JsonResponse
+     */
+    protected function jsonResponse($data = null, $status = 200, $headers = [])
+    {
+        return new JsonResponse($data, $status, $headers);
+    }
+
+    /**
+     * @param callable|null $callback
+     * @param int $status
+     * @param array $headers
+     *
+     * @return \Symfony\Component\HttpFoundation\StreamedResponse
+     */
+    protected function streamedResponse($callback = null, $status = 200, $headers = [])
+    {
+        $streamedResponse = new StreamedResponse($callback, $status, $headers);
+        $streamedResponse->send();
+
+        return $streamedResponse;
+    }
+
+    /**
+     * @param array $data
+     *
+     * @return array
+     */
+    protected function viewResponse(array $data = [])
+    {
+        return $data;
+    }
+
+    /**
+     * @param string $message
+     * @param array $data
+     *
+     * @return $this
+     */
+    protected function addSuccessMessage($message, array $data = [])
+    {
+        $this->getMessenger()->addSuccessMessage($this->createMessageTransfer($message, $data));
+
+        return $this;
+    }
+
+    /**
+     * @param string $message
+     * @param array $data
+     *
+     * @return $this
+     */
+    protected function addInfoMessage($message, array $data = [])
+    {
+        $this->getMessenger()->addInfoMessage($this->createMessageTransfer($message, $data));
+
+        return $this;
+    }
+
+    /**
+     * @param string $message
+     * @param array $data
+     *
+     * @return $this
+     */
+    protected function addErrorMessage($message, array $data = [])
+    {
+        $this->getMessenger()->addErrorMessage($this->createMessageTransfer($message, $data));
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\Kernel\Dependency\Facade\KernelToMessengerBridge
+     */
+    protected function getMessenger()
+    {
+        $messenger = ($this->application->offsetExists('messenger')) ? $this->application['messenger'] : new NullMessenger();
+        $kernelToMessengerBridge = new KernelToMessengerBridge($messenger);
+
+        return $kernelToMessengerBridge;
+    }
+
+    /**
+     * @param string $message
+     * @param array $data
+     *
+     * @return \Generated\Shared\Transfer\MessageTransfer
+     */
+    private function createMessageTransfer($message, array $data = [])
+    {
+        $messageTransfer = new MessageTransfer();
+        $messageTransfer->setValue($message);
+        $messageTransfer->setParameters($data);
+
+        return $messageTransfer;
+    }
+
+    /**
+     * @return \Silex\Application
+     */
+    protected function getApplication()
+    {
+        return $this->application;
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractGatewayController.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractGatewayController.php
index 8b96c5b..b3b5e49 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractGatewayController.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Controller/AbstractGatewayController.php
@@ -7,8 +7,7 @@
 
 namespace Spryker\Zed\Kernel\Communication\Controller;
 
-use Spryker\Shared\ZedRequest\Client\Message;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Generated\Shared\Transfer\MessageTransfer;
 
 abstract class AbstractGatewayController extends AbstractController
 {
@@ -19,17 +18,17 @@ abstract class AbstractGatewayController extends AbstractController
     protected $success = true;
 
     /**
-     * @var \Spryker\Shared\ZedRequest\Client\Message[]
+     * @var \Generated\Shared\Transfer\MessageTransfer[]
      */
     private $errorMessages = [];
 
     /**
-     * @var \Spryker\Shared\ZedRequest\Client\Message[]
+     * @var \Generated\Shared\Transfer\MessageTransfer[]
      */
     private $infoMessages = [];
 
     /**
-     * @var \Spryker\Shared\ZedRequest\Client\Message[]
+     * @var \Generated\Shared\Transfer\MessageTransfer[]
      */
     private $successMessages = [];
 
@@ -61,9 +60,9 @@ abstract class AbstractGatewayController extends AbstractController
      */
     protected function addInfoMessage($message, array $data = [])
     {
-        $messageObject = new Message();
-        $messageObject->setMessage($message);
-        $messageObject->setData($data);
+        $messageObject = new MessageTransfer();
+        $messageObject->setValue($message);
+        $messageObject->setParameters($data);
 
         $this->infoMessages[] = $messageObject;
 
@@ -78,9 +77,9 @@ abstract class AbstractGatewayController extends AbstractController
      */
     protected function addErrorMessage($message, array $data = [])
     {
-        $messageObject = new Message();
-        $messageObject->setMessage($message);
-        $messageObject->setData($data);
+        $messageObject = new MessageTransfer();
+        $messageObject->setValue($message);
+        $messageObject->setParameters($data);
 
         $this->errorMessages[] = $messageObject;
 
@@ -95,9 +94,9 @@ abstract class AbstractGatewayController extends AbstractController
      */
     protected function addSuccessMessage($message, array $data = [])
     {
-        $messageObject = new Message();
-        $messageObject->setMessage($message);
-        $messageObject->setData($data);
+        $messageObject = new MessageTransfer();
+        $messageObject->setValue($message);
+        $messageObject->setParameters($data);
 
         $this->successMessages[] = $messageObject;
 
@@ -105,7 +104,7 @@ abstract class AbstractGatewayController extends AbstractController
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getErrorMessages()
     {
@@ -113,7 +112,7 @@ abstract class AbstractGatewayController extends AbstractController
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getInfoMessages()
     {
@@ -121,7 +120,7 @@ abstract class AbstractGatewayController extends AbstractController
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getSuccessMessages()
     {
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/GatewayControllerListenerInterface.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/GatewayControllerListenerInterface.php
deleted file mode 100644
index 8a42978..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/GatewayControllerListenerInterface.php
+++ /dev/null
@@ -1,22 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\Communication;
-
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
-
-interface GatewayControllerListenerInterface
-{
-
-    /**
-     * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
-     *
-     * @return callable|null
-     */
-    public function onKernelController(FilterControllerEvent $event);
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/KernelCommunicationFactory.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/KernelCommunicationFactory.php
index 133d4d2..aed69bc 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/KernelCommunicationFactory.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/KernelCommunicationFactory.php
@@ -7,17 +7,6 @@
 
 namespace Spryker\Zed\Kernel\Communication;
 
-use Spryker\Zed\Kernel\KernelDependencyProvider;
-
 class KernelCommunicationFactory extends AbstractCommunicationFactory
 {
-
-    /**
-     * @return \Spryker\Zed\Kernel\Dependency\Facade\KernelToMessengerInterface
-     */
-    public function getMessengerFacade()
-    {
-        return $this->getProvidedDependency(KernelDependencyProvider::FACADE_MESSENGER);
-    }
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPlugin.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPlugin.php
deleted file mode 100644
index 2faf7e0..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPlugin.php
+++ /dev/null
@@ -1,226 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\Communication\Plugin;
-
-use LogicException;
-use ReflectionObject;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Messenger\MessengerConstants;
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Shared\ZedRequest\Client\Message;
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\TransferServer;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
-use Spryker\Zed\Kernel\Communication\GatewayControllerListenerInterface;
-use Spryker\Zed\Messenger\MessengerConfig;
-use Spryker\Zed\ZedRequest\Business\Client\Request;
-use Spryker\Zed\ZedRequest\Business\Client\Response;
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
-
-/**
- * @method \Spryker\Zed\Kernel\Communication\KernelCommunicationFactory getFactory()
- */
-class GatewayControllerListenerPlugin extends AbstractPlugin implements GatewayControllerListenerInterface
-{
-
-    /**
-     * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
-     *
-     * @return callable|null
-     */
-    public function onKernelController(FilterControllerEvent $event)
-    {
-        $currentController = $event->getController();
-        $controller = $currentController[0];
-        $action = $currentController[1];
-
-        if (!($controller instanceof AbstractGatewayController)) {
-            return $currentController;
-        }
-
-        $newController = function () use ($controller, $action) {
-
-            MessengerConfig::setMessageTray(MessengerConstants::IN_MEMORY_TRAY);
-
-            $requestTransfer = $this->getRequestTransfer($controller, $action);
-
-            $this->setCustomersLocaleIfPresent($requestTransfer);
-
-            $result = $controller->$action($requestTransfer->getTransfer(), $requestTransfer);
-            $response = $this->getResponse($controller, $result);
-
-            return TransferServer::getInstance()
-                ->setResponse($response)
-                ->send();
-        };
-
-        $event->setController($newController);
-    }
-
-    /**
-     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
-     *
-     * @return void
-     */
-    protected function setCustomersLocaleIfPresent(Request $request)
-    {
-        $localeTransfer = $this->getLocaleMetaTransfer($request);
-        if ($localeTransfer) {
-            Store::getInstance()->setCurrentLocale($localeTransfer->getLocaleName());
-        }
-    }
-
-    /**
-     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
-     *
-     * @return null|\Generated\Shared\Transfer\LocaleTransfer
-     */
-    protected function getLocaleMetaTransfer(Request $request)
-    {
-        $localeTransfer = $request->getMetaTransfer('locale');
-
-        return $localeTransfer;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
-     * @param string $action
-     *
-     * @throws \LogicException
-     *
-     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
-     */
-    private function getRequestTransfer(AbstractGatewayController $controller, $action)
-    {
-        $classReflection = new ReflectionObject($controller);
-        $methodReflection = $classReflection->getMethod($action);
-        $parameters = $methodReflection->getParameters();
-        $countParameters = count($parameters);
-
-        if ($countParameters > 2 || $countParameters === 2 && end($parameters)->getClass() !== 'Spryker\\Shared\\Library\\Transfer\\Request') {
-            throw new LogicException('Only one transfer object can be received in yves-action');
-        }
-
-        /** @var \ReflectionParameter $parameter */
-        $parameter = array_shift($parameters);
-        if ($parameter) {
-            $class = $parameter->getClass();
-            if (empty($class)) {
-                throw new LogicException('You need to specify a class for the parameter in the yves-action.');
-            }
-
-            $this->validateClassIsTransferObject($class->getName());
-        }
-
-        return TransferServer::getInstance()->getRequest();
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
-     * @param \Spryker\Shared\Transfer\TransferInterface $result
-     *
-     * @return \Spryker\Zed\ZedRequest\Business\Client\Response
-     */
-    protected function getResponse(AbstractGatewayController $controller, $result)
-    {
-        $response = new Response();
-
-        if ($result instanceof TransferInterface) {
-            $response->setTransfer($result);
-        }
-
-        $this->setGatewayControllerMessages($controller, $response);
-        $this->setMessengerMessages($response);
-
-        $response->setSuccess($controller->isSuccess());
-
-        return $response;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
-     * @param \Spryker\Zed\ZedRequest\Business\Client\Response $response
-     *
-     * @return void
-     */
-    protected function setGatewayControllerMessages(AbstractGatewayController $controller, Response $response)
-    {
-        $response->addSuccessMessages($controller->getSuccessMessages());
-        $response->addInfoMessages($controller->getInfoMessages());
-        $response->addErrorMessages($controller->getErrorMessages());
-    }
-
-    /**
-     * @param \Spryker\Zed\ZedRequest\Business\Client\Response $response
-     *
-     * @return void
-     */
-    protected function setMessengerMessages(Response $response)
-    {
-        $messengerFacade = $this->getFactory()->getMessengerFacade();
-
-        $messagesTransfer = $messengerFacade->getStoredMessages();
-        if ($messagesTransfer === null) {
-            return;
-        }
-
-        $response->addErrorMessages(
-            $this->createResponseMessages(
-                $messagesTransfer->getErrorMessages()
-            )
-        );
-        $response->addInfoMessages(
-            $this->createResponseMessages(
-                $messagesTransfer->getInfoMessages()
-            )
-        );
-        $response->addSuccessMessages(
-            $this->createResponseMessages(
-                $messagesTransfer->getSuccessMessages()
-            )
-        );
-    }
-
-    /**
-     * @param array $messages
-     * @param \Spryker\Shared\ZedRequest\Client\Message[] $storedMessages
-     *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    protected function createResponseMessages(array $messages, array $storedMessages = [])
-    {
-        foreach ($messages as $message) {
-            $responseMessage = new Message();
-            $responseMessage->setMessage($message);
-            $storedMessages[] = $responseMessage;
-        }
-
-        return $storedMessages;
-    }
-
-    /**
-     * @param string $className
-     *
-     * @throws \LogicException
-     *
-     * @return bool
-     */
-    protected function validateClassIsTransferObject($className)
-    {
-        if (substr($className, 0, 16) === 'Generated\Shared') {
-            return true;
-        }
-
-        if ($className === 'Spryker\Shared\Transfer\TransferInterface') {
-            return true;
-        }
-
-        throw new LogicException('Only transfer classes are allowed in yves action as parameter');
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayServiceProviderPlugin.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayServiceProviderPlugin.php
deleted file mode 100644
index aec0f5c..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/GatewayServiceProviderPlugin.php
+++ /dev/null
@@ -1,69 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\Communication\Plugin;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\TransferServer;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-use Spryker\Zed\Kernel\Communication\GatewayControllerListenerInterface;
-use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\KernelEvents;
-
-/**
- * @method \Spryker\Zed\Kernel\Communication\KernelCommunicationFactory getFactory()
- */
-class GatewayServiceProviderPlugin extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Kernel\Communication\GatewayControllerListenerInterface
-     */
-    protected $controllerListener;
-
-    /**
-     * @param \Spryker\Zed\Kernel\Communication\GatewayControllerListenerInterface $controllerListener
-     *
-     * @return void
-     */
-    public function setControllerListener(GatewayControllerListenerInterface $controllerListener)
-    {
-        $this->controllerListener = $controllerListener;
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        /** @var \Symfony\Component\EventDispatcher\EventDispatcher $dispatcher */
-        $dispatcher = $app['dispatcher'];
-        $dispatcher->addListener(
-            KernelEvents::CONTROLLER,
-            [
-                $this->controllerListener,
-                'onKernelController',
-            ]
-        );
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-        $app->before(function (Request $request) {
-            TransferServer::getInstance()->setRequest($request);
-        });
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/Pimple.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/Pimple.php
new file mode 100644
index 0000000..9e44abc
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Communication/Plugin/Pimple.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Communication\Plugin;
+
+use Spryker\Shared\Kernel\Communication\Application;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Kernel\Communication\KernelCommunicationFactory getFactory()
+ */
+class Pimple extends AbstractPlugin
+{
+
+    /**
+     * @var \Spryker\Shared\Kernel\Communication\Application
+     */
+    protected static $application;
+
+    /**
+     * @param \Spryker\Shared\Kernel\Communication\Application $application
+     *
+     * @return void
+     */
+    public static function setApplication(Application $application)
+    {
+        self::$application = $application;
+    }
+
+    /**
+     * @return \Spryker\Shared\Kernel\Communication\Application
+     */
+    public function getApplication()
+    {
+        return self::$application;
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/ControllerResolver/ZedFragmentControllerResolver.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/ControllerResolver/ZedFragmentControllerResolver.php
index 9617c2d..9052ca8 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/ControllerResolver/ZedFragmentControllerResolver.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/ControllerResolver/ZedFragmentControllerResolver.php
@@ -39,7 +39,7 @@ class ZedFragmentControllerResolver extends SilexControllerResolver
     /**
      * @param \Spryker\Shared\Kernel\Communication\BundleControllerActionInterface $bundleControllerAction
      *
-     * @return \Spryker\Zed\Application\Communication\Controller\AbstractController
+     * @return \Spryker\Zed\Kernel\Communication\Controller\AbstractController
      */
     protected function resolveController(BundleControllerActionInterface $bundleControllerAction)
     {
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerBridge.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerBridge.php
index cb89f3e..fcb886b 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerBridge.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerBridge.php
@@ -7,6 +7,8 @@
 
 namespace Spryker\Zed\Kernel\Dependency\Facade;
 
+use Generated\Shared\Transfer\MessageTransfer;
+
 class KernelToMessengerBridge implements KernelToMessengerInterface
 {
 
@@ -24,11 +26,33 @@ class KernelToMessengerBridge implements KernelToMessengerInterface
     }
 
     /**
-     * @return \Generated\Shared\Transfer\FlashMessagesTransfer
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage(MessageTransfer $message)
+    {
+        $this->messengerFacade->addSuccessMessage($message);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addInfoMessage(MessageTransfer $message)
+    {
+        $this->messengerFacade->addInfoMessage($message);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
      */
-    public function getStoredMessages()
+    public function addErrorMessage(MessageTransfer $message)
     {
-        return $this->messengerFacade->getStoredMessages();
+        $this->messengerFacade->addErrorMessage($message);
     }
 
 }
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerInterface.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerInterface.php
index 5c61894..4a91ff8 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerInterface.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/KernelToMessengerInterface.php
@@ -7,12 +7,30 @@
 
 namespace Spryker\Zed\Kernel\Dependency\Facade;
 
+use Generated\Shared\Transfer\MessageTransfer;
+
 interface KernelToMessengerInterface
 {
 
     /**
-     * @return \Generated\Shared\Transfer\FlashMessagesTransfer
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage(MessageTransfer $message);
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addInfoMessage(MessageTransfer $message);
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
      */
-    public function getStoredMessages();
+    public function addErrorMessage(MessageTransfer $message);
 
 }
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/NullMessenger.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/NullMessenger.php
new file mode 100644
index 0000000..b436514
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Dependency/Facade/NullMessenger.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Dependency\Facade;
+
+use Generated\Shared\Transfer\MessageTransfer;
+
+class NullMessenger implements KernelToMessengerInterface
+{
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage(MessageTransfer $message)
+    {
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addInfoMessage(MessageTransfer $message)
+    {
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addErrorMessage(MessageTransfer $message)
+    {
+    }
+
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Exception/Controller/InvalidIdException.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Exception/Controller/InvalidIdException.php
new file mode 100644
index 0000000..588eb80
--- /dev/null
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Exception/Controller/InvalidIdException.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Kernel\Exception\Controller;
+
+use InvalidArgumentException;
+
+class InvalidIdException extends InvalidArgumentException
+{
+}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractIdeAutoCompletionGenerator.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractIdeAutoCompletionGenerator.php
deleted file mode 100644
index e1d0d25..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractIdeAutoCompletionGenerator.php
+++ /dev/null
@@ -1,179 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion;
-
-use Spryker\Zed\Kernel\BundleNameFinder;
-use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\MethodTagBuilderInterface;
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-abstract class AbstractIdeAutoCompletionGenerator
-{
-
-    const GENERATOR_NAME = 'IDE bundle auto completion class';
-
-    const INTERFACE_NAME = 'AutoCompletion';
-
-    const OPTION_KEY_METHOD_STRING_PATTERN = 'method string pattern';
-    const OPTION_KEY_APPLICATION = 'application';
-    const OPTION_KEY_NAMESPACE = 'namespace';
-    const OPTION_KEY_BUNDLE_NAME_FINDER = 'bundle name finder';
-    const OPTION_KEY_INTERFACE_NAME = 'interface name';
-    const OPTION_KEY_LOCATION_DIR = 'location dir';
-    const OPTION_KEY_HAS_LAYERS = 'has layers';
-
-    const APPLICATION = 'Zed';
-
-    const PLACEHOLDER_BUNDLE = '{{bundle}}';
-    const PLACEHOLDER_METHOD_NAME = '{{methodName}}';
-    const PLACEHOLDER_NAMESPACE = '{{namespace}}';
-    const PLACEHOLDER_INTERFACE_NAME = '{{interfaceName}}';
-    const PLACEHOLDER_METHOD_LINES = '{{methodLines}}';
-    const PLACEHOLDER_APPLICATION = '{{application}}';
-
-    /**
-     * @var array
-     */
-    protected $options;
-
-    /**
-     * @var \Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\MethodTagBuilderInterface[]
-     */
-    protected $methodTagBuilder = [];
-
-    /**
-     * @param array $options
-     */
-    public function __construct(array $options = [])
-    {
-        $resolver = new OptionsResolver();
-        $this->configureOptions($resolver);
-
-        $this->options = $resolver->resolve($options);
-        $this->makeDirIfNotExists();
-    }
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    protected function configureOptions(OptionsResolver $resolver)
-    {
-        $resolver->setDefaults([
-            self::OPTION_KEY_BUNDLE_NAME_FINDER => new BundleNameFinder(),
-            self::OPTION_KEY_APPLICATION => self::APPLICATION,
-            self::OPTION_KEY_INTERFACE_NAME => self::INTERFACE_NAME,
-        ]);
-
-        $resolver->setRequired([
-            self::OPTION_KEY_LOCATION_DIR,
-            self::OPTION_KEY_NAMESPACE,
-            self::OPTION_KEY_INTERFACE_NAME,
-        ]);
-
-        $resolver->setAllowedTypes(self::OPTION_KEY_LOCATION_DIR, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_NAMESPACE, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_INTERFACE_NAME, 'string');
-    }
-
-    /**
-     * @return void
-     */
-    abstract public function create();
-
-    /**
-     * @return void
-     */
-    protected function makeDirIfNotExists()
-    {
-        if (!is_dir($this->options[self::OPTION_KEY_LOCATION_DIR])) {
-            mkdir($this->options[self::OPTION_KEY_LOCATION_DIR], 0755, true);
-        }
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\MethodTagBuilderInterface $methodTagBuilder
-     *
-     * @return $this
-     */
-    public function addMethodTagBuilder(MethodTagBuilderInterface $methodTagBuilder)
-    {
-        $this->methodTagBuilder[] = $methodTagBuilder;
-
-        return $this;
-    }
-
-    /**
-     * @param string $bundle
-     *
-     * @return array
-     */
-    protected function getMethodTagsByBundle($bundle)
-    {
-        $methodTags = [];
-
-        foreach ($this->methodTagBuilder as $methodTagBuilder) {
-            $methodTags = $methodTagBuilder->buildMethodTags($bundle, $methodTags);
-        }
-
-        return $methodTags;
-    }
-
-    /**
-     * @param string $namespace
-     *
-     * @return string
-     */
-    protected function getBaseFile($namespace)
-    {
-        return '<?php' . PHP_EOL . PHP_EOL . 'namespace ' . $namespace . ';' . PHP_EOL . PHP_EOL;
-    }
-
-    /**
-     * @return string
-     */
-    public function getName()
-    {
-        return self::GENERATOR_NAME;
-    }
-
-    /**
-     * @return array
-     */
-    protected function getBundles()
-    {
-        $bundleNameFinder = $this->getBundleNameFinder();
-
-        return $bundleNameFinder->getBundleNames();
-    }
-
-    /**
-     * @return \Spryker\Zed\Kernel\BundleNameFinder
-     */
-    protected function getBundleNameFinder()
-    {
-        return $this->options[self::OPTION_KEY_BUNDLE_NAME_FINDER];
-    }
-
-    /**
-     * @param string $fileContent
-     *
-     * @return void
-     */
-    protected function saveFileContent($fileContent)
-    {
-        $pathToFile = $this->options[self::OPTION_KEY_LOCATION_DIR];
-        $fileName = $this->options[self::OPTION_KEY_INTERFACE_NAME] . '.php';
-
-        file_put_contents($pathToFile . $fileName, $fileContent);
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGenerator.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGenerator.php
deleted file mode 100644
index f03dea8..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGenerator.php
+++ /dev/null
@@ -1,51 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class IdeAutoCompletionGenerator extends AbstractIdeAutoCompletionGenerator
-{
-
-    /**
-     * @return void
-     */
-    public function create()
-    {
-        $fileContent = $this->getBaseFile($this->options[self::OPTION_KEY_NAMESPACE]);
-
-        $methodTags = $this->getMethodTags();
-        if (count($methodTags) > 0) {
-            $interface = '/**' . PHP_EOL;
-            $interface .= implode(PHP_EOL, $methodTags) . PHP_EOL;
-            $interface .= ' */' . PHP_EOL;
-            $interface .= 'interface ' . $this->options[self::OPTION_KEY_INTERFACE_NAME] . PHP_EOL . '{}' . PHP_EOL;
-
-            $fileContent .= $interface . PHP_EOL;
-        }
-
-        $this->saveFileContent($fileContent);
-    }
-
-    /**
-     * @return array
-     */
-    private function getMethodTags()
-    {
-        $bundles = $this->getBundles();
-        $methodTags = [];
-        foreach ($bundles as $bundle) {
-            $methodBundleTag = $this->getMethodTagsByBundle($bundle);
-            $methodTags = array_merge($methodTags, $methodBundleTag);
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGenerator.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGenerator.php
deleted file mode 100644
index 4fd7e73..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGenerator.php
+++ /dev/null
@@ -1,65 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class IdeBundleAutoCompletionGenerator extends AbstractIdeAutoCompletionGenerator
-{
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    protected function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_INTERFACE_NAME => 'BundleAutoCompletion',
-        ]);
-    }
-
-    /**
-     * @return void
-     */
-    public function create()
-    {
-        $fileContent = $this->getBaseFile($this->options[self::OPTION_KEY_NAMESPACE]);
-        $fileContent .= $this->generateInterfaces();
-
-        $this->saveFileContent($fileContent);
-    }
-
-    /**
-     * @return string
-     */
-    private function generateInterfaces()
-    {
-        $bundles = $this->getBundles();
-        $interfaces = '';
-        foreach ($bundles as $bundle) {
-            $methodTags = $this->getMethodTagsByBundle($bundle);
-            if (count($methodTags) > 0) {
-                $interface = '/**' . PHP_EOL;
-                $interface .= implode(PHP_EOL, $methodTags) . PHP_EOL;
-                $interface .= ' */' . PHP_EOL;
-                $interface .= 'interface ' . $bundle . PHP_EOL . '{}' . PHP_EOL;
-
-                $interfaces .= $interface . PHP_EOL;
-            }
-        }
-
-        return $interfaces;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilder.php
deleted file mode 100644
index 553ac64..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilder.php
+++ /dev/null
@@ -1,208 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Symfony\Component\Finder\Finder;
-use Symfony\Component\Finder\SplFileInfo;
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-abstract class AbstractSingleFileMethodTagBuilder implements MethodTagBuilderInterface
-{
-
-    const OPTION_KEY_METHOD_STRING_PATTERN = 'method string pattern';
-    const OPTION_KEY_PATH_PATTERN = 'path pattern';
-    const OPTION_KEY_FILE_NAME_SUFFIX = 'file name suffix';
-    const OPTION_KEY_PROJECT_PATH_PATTERN = 'project path pattern';
-    const OPTION_KEY_VENDOR_PATH_PATTERN = 'core path pattern';
-    const OPTION_KEY_APPLICATION = 'application';
-    const OPTION_KEY_NAMESPACE_PATTERN = 'namespace pattern';
-
-    const APPLICATION = 'Zed';
-
-    const PLACEHOLDER_CLASS_NAME = '{{className}}';
-    const NAMESPACE_PATTERN = '*';
-
-    /**
-     * @var array
-     */
-    private $options;
-
-    /**
-     * @param array $options
-     */
-    public function __construct(array $options = [])
-    {
-        $resolver = new OptionsResolver();
-        $this->configureOptions($resolver);
-
-        $this->options = $resolver->resolve($options);
-    }
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    protected function configureOptions(OptionsResolver $resolver)
-    {
-        $resolver->setDefaults([
-            self::OPTION_KEY_APPLICATION => self::APPLICATION,
-            self::OPTION_KEY_NAMESPACE_PATTERN => self::NAMESPACE_PATTERN,
-            self::OPTION_KEY_PROJECT_PATH_PATTERN => APPLICATION_SOURCE_DIR,
-            self::OPTION_KEY_VENDOR_PATH_PATTERN => Config::get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . '/*/src',
-        ]);
-
-        $resolver->setRequired([
-            self::OPTION_KEY_METHOD_STRING_PATTERN,
-            self::OPTION_KEY_PATH_PATTERN,
-            self::OPTION_KEY_FILE_NAME_SUFFIX,
-            self::OPTION_KEY_PROJECT_PATH_PATTERN,
-            self::OPTION_KEY_VENDOR_PATH_PATTERN,
-            self::OPTION_KEY_APPLICATION,
-        ]);
-
-        $resolver->setAllowedTypes(self::OPTION_KEY_METHOD_STRING_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_PATH_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_FILE_NAME_SUFFIX, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_PROJECT_PATH_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_VENDOR_PATH_PATTERN, 'string');
-        $resolver->setAllowedTypes(self::OPTION_KEY_APPLICATION, 'string');
-    }
-
-    /**
-     * @param string $bundle
-     *
-     * @return string
-     */
-    protected function getMethodTag($bundle)
-    {
-        $name = $bundle . $this->options[self::OPTION_KEY_FILE_NAME_SUFFIX];
-        $pattern = $this->options[self::OPTION_KEY_NAMESPACE_PATTERN] . '/'
-            . $this->options[self::OPTION_KEY_APPLICATION] . '/'
-            . $bundle . '/'
-            . $this->options[self::OPTION_KEY_PATH_PATTERN];
-
-        $file = $this->findByNameAndPattern($name, $pattern);
-
-        if ($file instanceof SplFileInfo) {
-            return $this->buildMethodTagFromFile(
-                $file,
-                $this->options[self::OPTION_KEY_METHOD_STRING_PATTERN]
-            );
-        }
-
-        return false;
-    }
-
-    /**
-     * @param string $name
-     * @param string $pattern
-     *
-     * @return bool|\Symfony\Component\Finder\SplFileInfo
-     */
-    protected function findByNameAndPattern($name, $pattern)
-    {
-        $pathPattern = rtrim($this->options[self::OPTION_KEY_PROJECT_PATH_PATTERN], DIRECTORY_SEPARATOR)
-            . DIRECTORY_SEPARATOR
-            . $pattern;
-
-        $file = $this->getFileIn($name, $pathPattern);
-
-        if (!($file instanceof SplFileInfo)) {
-            $pathPattern = rtrim($this->options[self::OPTION_KEY_VENDOR_PATH_PATTERN], DIRECTORY_SEPARATOR)
-                . DIRECTORY_SEPARATOR
-                . $pattern;
-
-            return $this->getFileIn($name, $pathPattern);
-        }
-
-        return $file;
-    }
-
-    /**
-     * @param string $fileName
-     * @param string $path
-     *
-     * @return bool|\Symfony\Component\Finder\SplFileInfo
-     */
-    private function getFileIn($fileName, $path)
-    {
-        $finder = new Finder();
-        try {
-            foreach ($finder->files()->in($path)->name($fileName)->depth(0) as $file) {
-                return $file;
-            }
-
-            return false;
-        } catch (\InvalidArgumentException $e) {
-            return false;
-        }
-    }
-
-    /**
-     * @param \Symfony\Component\Finder\SplFileInfo $file
-     * @param string $methodPattern
-     *
-     * @return string
-     */
-    private function buildMethodTagFromFile(SplFileInfo $file, $methodPattern)
-    {
-        $className = $this->replaceProjectPath($file->getPathname());
-        $className = $this->replaceVendorPath($className);
-        $className = str_replace(['//', '/', '.php'], ['/', '\\', ''], $className);
-
-        return ' * ' . str_replace(
-            self::PLACEHOLDER_CLASS_NAME,
-            $className,
-            $methodPattern
-        );
-    }
-
-    /**
-     * @param string $filePathName
-     *
-     * @return string
-     */
-    private function replaceProjectPath($filePathName)
-    {
-        return $this->replacePath($filePathName, rtrim($this->options[self::OPTION_KEY_PROJECT_PATH_PATTERN], DIRECTORY_SEPARATOR));
-    }
-
-    /**
-     * @param string $filePathName
-     *
-     * @return string
-     */
-    private function replaceVendorPath($filePathName)
-    {
-        return $this->replacePath($filePathName, rtrim($this->options[self::OPTION_KEY_VENDOR_PATH_PATTERN], DIRECTORY_SEPARATOR));
-    }
-
-    /**
-     * @param string $filePathName
-     * @param string $path
-     *
-     * @return string
-     */
-    private function replacePath($filePathName, $path)
-    {
-        $basePathPattern = str_replace(DIRECTORY_SEPARATOR, '\/', $path);
-        $search = '/' . str_replace('*', '(.*?)', $basePathPattern) . '/';
-        $replace = '';
-
-        $className = preg_replace($search, $replace, $filePathName);
-
-        return $className;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ClientMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ClientMethodTagBuilder.php
deleted file mode 100644
index 98e0acb..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ClientMethodTagBuilder.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class ClientMethodTagBuilder extends AbstractSingleFileMethodTagBuilder
-{
-
-    const METHOD_STRING_PATTERN = '@method {{className}} client()';
-    const APPLICATION_CLIENT = 'Client';
-    const FILE_NAME_SUFFIX = 'Client.php';
-    const PATH_PATTERN = '/';
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    protected function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_APPLICATION => self::APPLICATION_CLIENT,
-            self::OPTION_KEY_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-            self::OPTION_KEY_PATH_PATTERN => self::PATH_PATTERN,
-            self::OPTION_KEY_FILE_NAME_SUFFIX => self::FILE_NAME_SUFFIX,
-        ]);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTag = $this->getMethodTag($bundle);
-        if ($methodTag) {
-            $methodTags[] = $methodTag;
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/FacadeMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/FacadeMethodTagBuilder.php
deleted file mode 100644
index 38ac0fd..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/FacadeMethodTagBuilder.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class FacadeMethodTagBuilder extends AbstractSingleFileMethodTagBuilder
-{
-
-    const METHOD_STRING_PATTERN = '@method {{className}}Interface facade()';
-    const PATH_PATTERN = 'Business/';
-    const FILE_NAME_SUFFIX = 'Facade.php';
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    public function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-            self::OPTION_KEY_PATH_PATTERN => self::PATH_PATTERN,
-            self::OPTION_KEY_FILE_NAME_SUFFIX => self::FILE_NAME_SUFFIX,
-        ]);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTag = $this->getMethodTag($bundle);
-        if ($methodTag) {
-            $methodTags[] = $methodTag;
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilder.php
deleted file mode 100644
index 6fb06b2..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilder.php
+++ /dev/null
@@ -1,72 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class GeneratedInterfaceMethodTagBuilder implements MethodTagBuilderInterface
-{
-
-    const METHOD_STRING_PATTERN = ' * @method \\Generated\Zed\Ide\{{bundle}} {{methodName}}()';
-    const OPTION_METHOD_STRING_PATTERN = 'method string pattern';
-    const PLACEHOLDER_BUNDLE = '{{bundle}}';
-    const PLACEHOLDER_METHOD_NAME = '{{methodName}}';
-
-    /**
-     * @var array
-     */
-    protected $options;
-
-    /**
-     * @param array $options
-     */
-    public function __construct(array $options = [])
-    {
-        $resolver = new OptionsResolver();
-        $resolver->setDefaults([
-            self::OPTION_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-        ]);
-        $resolver->setRequired([
-            self::OPTION_METHOD_STRING_PATTERN,
-        ]);
-        $resolver->setAllowedTypes(self::OPTION_METHOD_STRING_PATTERN, 'string');
-
-        $this->options = $resolver->resolve($options);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTags[] = $this->getMethodTag($bundle);
-
-        return $methodTags;
-    }
-
-    /**
-     * @param string $bundle
-     *
-     * @return string
-     */
-    private function getMethodTag($bundle)
-    {
-        return str_replace(
-            [self::PLACEHOLDER_BUNDLE, self::PLACEHOLDER_METHOD_NAME],
-            [$bundle, lcfirst($bundle)],
-            $this->options[self::OPTION_METHOD_STRING_PATTERN]
-        );
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/MethodTagBuilderInterface.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/MethodTagBuilderInterface.php
deleted file mode 100644
index 29969a8..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/MethodTagBuilderInterface.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-/**
- * @deprecated Will be removed with next major release
- */
-interface MethodTagBuilderInterface
-{
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = []);
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/QueryContainerMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/QueryContainerMethodTagBuilder.php
deleted file mode 100644
index e3df5ff..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/QueryContainerMethodTagBuilder.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class QueryContainerMethodTagBuilder extends AbstractSingleFileMethodTagBuilder
-{
-
-    const METHOD_STRING_PATTERN = '@method {{className}} queryContainer()';
-    const PATH_PATTERN = 'Persistence/';
-    const FILE_NAME_SUFFIX = 'QueryContainer.php';
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    public function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-            self::OPTION_KEY_PATH_PATTERN => self::PATH_PATTERN,
-            self::OPTION_KEY_FILE_NAME_SUFFIX => self::FILE_NAME_SUFFIX,
-        ]);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTag = $this->getMethodTag($bundle);
-        if ($methodTag) {
-            $methodTags[] = $methodTag;
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ServiceMethodTagBuilder.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ServiceMethodTagBuilder.php
deleted file mode 100644
index fd67ea4..0000000
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/ServiceMethodTagBuilder.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-/**
- * @deprecated Will be removed with next major release
- */
-class ServiceMethodTagBuilder extends AbstractSingleFileMethodTagBuilder
-{
-
-    const METHOD_STRING_PATTERN = '@method {{className}} service()';
-    const APPLICATION_SERVICE = 'Service';
-    const FILE_NAME_SUFFIX = 'Service.php';
-    const PATH_PATTERN = '/';
-
-    /**
-     * @param \Symfony\Component\OptionsResolver\OptionsResolver $resolver
-     *
-     * @return void
-     */
-    protected function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_APPLICATION => self::APPLICATION_SERVICE,
-            self::OPTION_KEY_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-            self::OPTION_KEY_PATH_PATTERN => self::PATH_PATTERN,
-            self::OPTION_KEY_FILE_NAME_SUFFIX => self::FILE_NAME_SUFFIX,
-        ]);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTag = $this->getMethodTag($bundle);
-        if ($methodTag) {
-            $methodTags[] = $methodTag;
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/KernelDependencyProvider.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/KernelDependencyProvider.php
index e516cbe..ab36cda 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/KernelDependencyProvider.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/KernelDependencyProvider.php
@@ -7,25 +7,6 @@
 
 namespace Spryker\Zed\Kernel;
 
-use Spryker\Zed\Kernel\Dependency\Facade\KernelToMessengerBridge;
-
 class KernelDependencyProvider extends AbstractBundleDependencyProvider
 {
-
-    const FACADE_MESSENGER = 'messenger facade';
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    public function provideCommunicationLayerDependencies(Container $container)
-    {
-        $container[self::FACADE_MESSENGER] = function (Container $container) {
-            return new KernelToMessengerBridge($container->getLocator()->messenger()->facade());
-        };
-
-        return $container;
-    }
-
 }
diff --git a/Bundles/Kernel/src/Spryker/Zed/Kernel/Persistence/AbstractQueryContainer.php b/Bundles/Kernel/src/Spryker/Zed/Kernel/Persistence/AbstractQueryContainer.php
index dcaa2ef..d445e36 100644
--- a/Bundles/Kernel/src/Spryker/Zed/Kernel/Persistence/AbstractQueryContainer.php
+++ b/Bundles/Kernel/src/Spryker/Zed/Kernel/Persistence/AbstractQueryContainer.php
@@ -7,13 +7,13 @@
 
 namespace Spryker\Zed\Kernel\Persistence;
 
+use Propel\Runtime\Propel;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\BundleDependencyProviderResolverAwareTrait;
 use Spryker\Zed\Kernel\ClassResolver\Factory\FactoryResolver;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Kernel\Dependency\Injector\DependencyInjector;
 use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
-use Spryker\Zed\Propel\Communication\Plugin\Connection;
 
 abstract class AbstractQueryContainer implements QueryContainerInterface
 {
@@ -66,7 +66,7 @@ abstract class AbstractQueryContainer implements QueryContainerInterface
     }
 
     /**
-     * @return \Spryker\Zed\Kernel\Persistence\AbstractPersistenceFactory
+     * @return \Spryker\Zed\Kernel\Persistence\PersistenceFactoryInterface
      */
     protected function getFactory()
     {
@@ -100,7 +100,7 @@ abstract class AbstractQueryContainer implements QueryContainerInterface
      */
     public function getConnection()
     {
-        return (new Connection())->get();
+        return Propel::getConnection();
     }
 
 }
diff --git a/Bundles/Kernel/tests/Functional/Spryker/Client/Kernel/AbstractDependencyProviderTest.php b/Bundles/Kernel/tests/Functional/Spryker/Client/Kernel/AbstractDependencyProviderTest.php
index 184eade..658853a 100644
--- a/Bundles/Kernel/tests/Functional/Spryker/Client/Kernel/AbstractDependencyProviderTest.php
+++ b/Bundles/Kernel/tests/Functional/Spryker/Client/Kernel/AbstractDependencyProviderTest.php
@@ -10,10 +10,6 @@ namespace Functional\Spryker\Client\Kernel;
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\Kernel\AbstractDependencyProvider;
 use Spryker\Client\Kernel\Container;
-use Spryker\Client\Search\SearchClientInterface;
-use Spryker\Client\Session\SessionClientInterface;
-use Spryker\Client\Storage\StorageClientInterface;
-use Spryker\Client\ZedRequest\ZedRequestClientInterface;
 
 /**
  * @group Functional
@@ -36,50 +32,6 @@ class AbstractDependencyProviderTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return void
-     */
-    public function testContainerShouldContainSessionClient()
-    {
-        $container = new Container();
-        $abstractDependencyContainerMock = $this->getAbstractDependencyContainerMock();
-        $abstractDependencyContainerMock->provideServiceLayerDependencies($container);
-        $this->assertInstanceOf(SessionClientInterface::class, $container[AbstractDependencyProvider::CLIENT_SESSION]);
-    }
-
-    /**
-     * @return void
-     */
-    public function testContainerShouldContainZedRequestClient()
-    {
-        $container = new Container();
-        $abstractDependencyContainerMock = $this->getAbstractDependencyContainerMock();
-        $abstractDependencyContainerMock->provideServiceLayerDependencies($container);
-        $this->assertInstanceOf(ZedRequestClientInterface::class, $container[AbstractDependencyProvider::CLIENT_ZED_REQUEST]);
-    }
-
-    /**
-     * @return void
-     */
-    public function testContainerShouldContainKvStorageClient()
-    {
-        $container = new Container();
-        $abstractDependencyContainerMock = $this->getAbstractDependencyContainerMock();
-        $abstractDependencyContainerMock->provideServiceLayerDependencies($container);
-        $this->assertInstanceOf(StorageClientInterface::class, $container[AbstractDependencyProvider::CLIENT_KV_STORAGE]);
-    }
-
-    /**
-     * @return void
-     */
-    public function testContainerShouldContainSearchClient()
-    {
-        $container = new Container();
-        $abstractDependencyContainerMock = $this->getAbstractDependencyContainerMock();
-        $abstractDependencyContainerMock->provideServiceLayerDependencies($container);
-        $this->assertInstanceOf(SearchClientInterface::class, $container[AbstractDependencyProvider::CLIENT_SEARCH]);
-    }
-
-    /**
      * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Client\Kernel\AbstractDependencyProvider
      */
     private function getAbstractDependencyContainerMock()
diff --git a/Bundles/Kernel/tests/Functional/Spryker/Zed/Kernel/BundleNameFinderTest.php b/Bundles/Kernel/tests/Functional/Spryker/Zed/Kernel/BundleNameFinderTest.php
deleted file mode 100644
index f95ac9d..0000000
--- a/Bundles/Kernel/tests/Functional/Spryker/Zed/Kernel/BundleNameFinderTest.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Functional\Spryker\Zed\Kernel;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Kernel\BundleNameFinder;
-
-/**
- * @group Functional
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group BundleNameFinderTest
- */
-class BundleNameFinderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testBundleNameFinderShouldFindBundleNames()
-    {
-        $bundleNameFinder = new BundleNameFinder();
-        $bundleNames = $bundleNameFinder->getBundleNames();
-
-        $this->assertTrue(count($bundleNames) > 0);
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo.php b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo.php
index d41cae6..b983729 100644
--- a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo.php
+++ b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo.php
@@ -7,7 +7,7 @@
 namespace Unit\Spryker\Shared\Kernel\Fixtures\Transfer;
 
 use Unit\Spryker\Shared\Kernel\Fixtures\Transfer\Foo\Bar;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class Foo extends AbstractTransfer
 {
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo/Bar.php b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo/Bar.php
index 77d5836..4e8ea30 100644
--- a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo/Bar.php
+++ b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Fixtures/Transfer/Foo/Bar.php
@@ -6,7 +6,7 @@
 
 namespace Unit\Spryker\Shared\Kernel\Fixtures\Transfer\Foo;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class Bar extends AbstractTransfer
 {
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/AbstractTransferTest.php b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/AbstractTransferTest.php
new file mode 100644
index 0000000..a3470dc
--- /dev/null
+++ b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/AbstractTransferTest.php
@@ -0,0 +1,473 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\Kernel\Transfer;
+
+use ArrayObject;
+use InvalidArgumentException;
+use PHPUnit_Framework_TestCase;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Unit\Spryker\Shared\Kernel\Transfer\Fixtures\AbstractTransfer;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Shared
+ * @group Kernel
+ * @group Transfer
+ * @group AbstractTransferTest
+ */
+class AbstractTransferTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testFromArrayShouldReturnInstanceWithSetDefaultTypes()
+    {
+        $data = [
+            'string' => 'string',
+            'int' => 1,
+            'bool' => true,
+            'array' => [],
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data);
+
+        $this->assertSame('string', $transfer->getString());
+        $this->assertSame(1, $transfer->getInt());
+        $this->assertTrue($transfer->getBool());
+        $this->assertInternalType('array', $transfer->getArray());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayShouldReturnInstanceWithSetTransferObject()
+    {
+        $data = [
+            'transfer' => new AbstractTransfer(),
+            'transferCollection' => [
+                new AbstractTransfer(),
+            ],
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data);
+
+        $this->assertInstanceOf(TransferInterface::class, $transfer->getTransfer());
+        $this->assertInstanceOf('\ArrayObject', $transfer->getTransferCollection());
+        $this->assertCount(1, $transfer->getTransferCollection());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayShouldWorkForGivenTransferAndInnerTransfers()
+    {
+        $data = [
+            'string' => 'foo',
+            'int' => 1,
+            'transfer' => [
+                'string' => 'foo',
+                'int' => 1,
+            ],
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data);
+
+        $this->assertInstanceOf(TransferInterface::class, $transfer->getTransfer());
+    }
+
+    /**
+     * @expectedException \InvalidArgumentException
+     *
+     * @return void
+     */
+    public function testFromArrayWithIgnoreMissingPropertyFalseShouldThrowExceptionIfPropertyIsInArrayButNotInObject()
+    {
+        $data = [
+            'not existing property key' => '',
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data);
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayWithIgnoreMissingPropertyTrueShouldNotThrowExceptionIfPropertyIsInArrayButNotInObject()
+    {
+        $data = [
+            'not existing property key' => '',
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data, true);
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayWithNestedTransferCollectionShouldReturnValidDataFromEmbeddedTransferObjects()
+    {
+        $data = [
+            'string' => 'level1',
+            'int' => 1,
+            'transfer_collection' => [
+                [
+                    'string' => 'level2',
+                    'int' => 1,
+                ], [
+                    'string' => 'level2',
+                    'int' => 2,
+                    'transfer_collection' => [
+                        [
+                            'string' => 'level3',
+                            'int' => 1,
+                        ], [
+                            'string' => 'level3',
+                            'int' => 2,
+                        ],
+                    ],
+                ],
+            ],
+        ];
+
+        $transfer = new AbstractTransfer();
+        $transfer->fromArray($data);
+
+        $this->assertEquals('level1', $transfer->getString());
+        $this->assertEquals('level2', $transfer->getTransferCollection()[0]->getString());
+        $this->assertEquals('level3', $transfer->getTransferCollection()[1]->getTransferCollection()[0]->getString());
+    }
+
+    /**
+     * @return void
+     */
+    public function testToArrayShouldReturnArrayWithAllPropertyNamesAsKeysAndNullValuesWhenNoPropertyWasSet()
+    {
+        $transfer = new AbstractTransfer();
+        $given = $transfer->toArray();
+        $expected = [
+            'string' => null,
+            'int' => null,
+            'bool' => null,
+            'array' => [],
+            'transfer' => null,
+            'transfer_collection' => new ArrayObject(),
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testToArrayShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValues()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+
+        $given = $transfer->toArray();
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+            'bool' => null,
+            'array' => [],
+            'transfer' => null,
+            'transfer_collection' => new ArrayObject(),
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testToArrayWithRecursiveTrueShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValuesAndRecursiveFilledInnerObjects()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+
+        $innerTransfer = new AbstractTransfer();
+        $innerTransfer->setString('bar');
+        $innerTransfer->setInt(3);
+
+        $transfer->setTransfer($innerTransfer);
+
+        $given = $transfer->toArray();
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+            'bool' => null,
+            'array' => [],
+            'transfer' => [
+                'string' => 'bar',
+                'int' => 3,
+                'bool' => null,
+                'array' => [],
+                'transfer' => null,
+                'transfer_collection' => new ArrayObject(),
+            ],
+            'transfer_collection' => new ArrayObject(),
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testToArrayWithRecursiveFalseShouldReturnArrayWithAllPropertyNamesAsKeysAndWithoutRecursiveFilledInnerObjects()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+
+        $innerTransfer = new AbstractTransfer();
+        $innerTransfer->setString('bar');
+        $innerTransfer->setInt(3);
+
+        $transfer->setTransfer($innerTransfer);
+
+        $given = $transfer->toArray(false);
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+            'bool' => null,
+            'array' => [],
+            'transfer' => $innerTransfer,
+            'transfer_collection' => new ArrayObject(),
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testModifiedToArrayShouldReturnArrayOnlyWithModifiedProperty()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+
+        $given = $transfer->modifiedToArray();
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testModifiedToArrayWithRecursiveTrueShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValuesAndRecursiveFilledInnerObjectsWhichWhereModified()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+        $transfer->setArray([]);
+
+        $innerTransfer = new AbstractTransfer();
+        $innerTransfer->setString('bar');
+        $innerTransfer->setInt(3);
+
+        $transfer->setTransfer($innerTransfer);
+
+        $given = $transfer->modifiedToArray(true);
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+            'array' => [],
+            'transfer' => [
+                'string' => 'bar',
+                'int' => 3,
+            ],
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testSerializeAndUnSerializeShouldReturnUnSerializedInstance()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+
+        $serialized = serialize($transfer);
+        $unSerialized = unserialize($serialized);
+
+        $given = $unSerialized->toArray();
+        $expected = [
+            'string' => 'foo',
+            'int' => 2,
+            'bool' => null,
+            'array' => [],
+            'transfer' => null,
+            'transfer_collection' => new ArrayObject(),
+        ];
+
+        $this->assertEquals($expected, $given);
+    }
+
+    /**
+     * @return void
+     */
+    public function testSerializeTransferAffectsModifiedDataOnly()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+
+        $serialized = serialize($transfer);
+        $unserialized = unserialize($serialized);
+
+        $expected = [
+            'string' => 'foo',
+        ];
+
+        $this->assertEquals($expected, $unserialized->modifiedToArray());
+    }
+
+    /**
+     * @return void
+     */
+    public function testTransferUnserializationIsIdempotent()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer
+            ->setString('foo')
+            ->setTransfer((new AbstractTransfer())->setInt(123))
+            ->setTransferCollection(new ArrayObject([
+                (new AbstractTransfer())->setBool(false),
+                (new AbstractTransfer())->setBool(true),
+            ]));
+
+        $serialized = $transfer->serialize();
+        $unserializedTransfer = new AbstractTransfer();
+        $unserializedTransfer->unserialize($serialized);
+
+        $this->assertEquals($transfer, $unserializedTransfer);
+    }
+
+    /**
+     * @return void
+     */
+    public function testCloneShouldReturnFullClonedObject()
+    {
+        $transfer = new AbstractTransfer();
+        $transfer->setString('foo');
+        $transfer->setInt(2);
+        $transfer->setTransfer(new AbstractTransfer());
+
+        $clonedTransfer = clone $transfer;
+
+        $this->assertEquals($transfer, $clonedTransfer);
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayShouldWorkWithCyclicReferences()
+    {
+        $transfer = new AbstractTransfer();
+
+        $data = [
+            'string' => 'foo',
+            'transfer' => [
+                'string' => 'bar',
+                'transfer' => $transfer,
+            ],
+        ];
+
+        $transfer->fromArray($data);
+
+        $this->assertEquals('foo', $transfer->getString());
+        $this->assertEquals('bar', $transfer->getTransfer()->getString());
+        $this->assertEquals('foo', $transfer->getTransfer()->getTransfer()->getString());
+        $this->assertEquals('bar', $transfer->getTransfer()->getTransfer()->getTransfer()->getString());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayToArrayConversionShouldWorkWithEmptyDataForTheSameTransferType()
+    {
+        $transfer1 = new AbstractTransfer();
+        $transfer2 = new AbstractTransfer();
+
+        $transfer1->fromArray($transfer2->toArray());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayToArrayConversionShouldWorkForTheSameTransferType()
+    {
+        $transfer1 = new AbstractTransfer();
+        $data = [
+            'string' => 'foo',
+            'transfer' => [
+                'string' => 'bar',
+            ],
+        ];
+        $transfer1->fromArray($data);
+
+        $transfer2 = new AbstractTransfer();
+        $transfer2->fromArray($transfer1->toArray());
+
+        $this->assertEquals('foo', $transfer2->getString());
+        $this->assertEquals('bar', $transfer2->getTransfer()->getString());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetTransferCollectionWithArrayObject()
+    {
+        $transfer = new AbstractTransfer();
+        $collection = new ArrayObject([
+            new AbstractTransfer(),
+            new AbstractTransfer(),
+        ]);
+        $transfer->setTransferCollection($collection);
+
+        $this->assertCount(2, $transfer->getTransferCollection());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFromArrayShouldThrowInvalidArgumentExceptionWhenMissingPropertyCanBeIgnoredAndPropertyExistsButExpectedTypeDoesNotMatch()
+    {
+        if (version_compare(PHP_VERSION, '7.0') >= 0) {
+            $this->markTestSkipped('We must first upgrade PHPUnit to 5.6+');
+            return;
+        }
+
+        $this->expectException(InvalidArgumentException::class);
+        $this->expectExceptionMessage(sprintf(
+            'Could not call "setArray(string)" (type string) in "%s". Maybe there is a type miss match.',
+            AbstractTransfer::class
+        ));
+
+        $abstractTransfer = new AbstractTransfer();
+        $abstractTransfer->fromArray(['array' => 'string']);
+    }
+
+}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/Fixtures/AbstractTransfer.php b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/Fixtures/AbstractTransfer.php
new file mode 100644
index 0000000..35b3615
--- /dev/null
+++ b/Bundles/Kernel/tests/Unit/Spryker/Shared/Kernel/Transfer/Fixtures/AbstractTransfer.php
@@ -0,0 +1,323 @@
+<?php
+
+/**
+ * (c) Spryker Systems GmbH copyright protected
+ */
+
+namespace Unit\Spryker\Shared\Kernel\Transfer\Fixtures;
+
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer as ParentAbstractTransfer;
+
+class AbstractTransfer extends ParentAbstractTransfer
+{
+
+    const STRING = 'string';
+
+    const INT = 'int';
+
+    const BOOL = 'bool';
+
+    const ARRAY_PROPERTY = 'array';
+
+    const TRANSFER = 'transfer';
+
+    const TRANSFER_COLLECTION = 'transferCollection';
+
+    /**
+     * @var string
+     */
+    protected $string;
+
+    /**
+     * @var int
+     */
+    protected $int;
+
+    /**
+     * @var bool
+     */
+    protected $bool;
+
+    /**
+     * @var array
+     */
+    protected $array = [];
+
+    /**
+     * @var \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    protected $transfer;
+
+    /**
+     * @var \ArrayObject|\Spryker\Shared\Kernel\Transfer\TransferInterface[]
+     */
+    protected $transferCollection;
+
+    /**
+     * @var array
+     */
+    protected $transferMetadata = [
+        self::STRING => [
+            'type' => 'string',
+            'name_underscore' => 'string',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+        self::INT => [
+            'type' => 'int',
+            'name_underscore' => 'int',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+        self::BOOL => [
+            'type' => 'bool',
+            'name_underscore' => 'bool',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+        self::ARRAY_PROPERTY => [
+            'type' => 'array',
+            'name_underscore' => 'array',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+        self::TRANSFER => [
+            'type' => 'Unit\Spryker\Shared\Kernel\Transfer\Fixtures\AbstractTransfer',
+            'name_underscore' => 'transfer',
+            'is_collection' => false,
+            'is_transfer' => true,
+        ],
+        self::TRANSFER_COLLECTION => [
+            'type' => 'Unit\Spryker\Shared\Kernel\Transfer\Fixtures\AbstractTransfer',
+            'name_underscore' => 'transfer_collection',
+            'is_collection' => true,
+            'is_transfer' => true,
+        ],
+    ];
+
+    /**
+     * @param string $string
+     *
+     * @return $this
+     */
+    public function setString($string)
+    {
+        $this->string = $string;
+        $this->addModifiedProperty(self::STRING);
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getString()
+    {
+        return $this->string;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireString()
+    {
+        $this->assertPropertyIsSet(self::STRING);
+
+        return $this;
+    }
+
+    /**
+     * @param int $int
+     *
+     * @return $this
+     */
+    public function setInt($int)
+    {
+        $this->int = $int;
+        $this->addModifiedProperty(self::INT);
+
+        return $this;
+    }
+
+    /**
+     * @return int
+     */
+    public function getInt()
+    {
+        return $this->int;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireInt()
+    {
+        $this->assertPropertyIsSet(self::INT);
+
+        return $this;
+    }
+
+    /**
+     * @param bool $bool
+     *
+     * @return $this
+     */
+    public function setBool($bool)
+    {
+        $this->bool = $bool;
+        $this->addModifiedProperty(self::BOOL);
+
+        return $this;
+    }
+
+    /**
+     * @return bool
+     */
+    public function getBool()
+    {
+        return $this->bool;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireBool()
+    {
+        $this->assertPropertyIsSet(self::BOOL);
+
+        return $this;
+    }
+
+    /**
+     * @param array $array
+     *
+     * @return $this
+     */
+    public function setArray(array $array = [])
+    {
+        $this->array = $array;
+        $this->addModifiedProperty(self::ARRAY_PROPERTY);
+
+        return $this;
+    }
+
+    /**
+     * @return array
+     */
+    public function getArray()
+    {
+        return $this->array;
+    }
+
+    /**
+     * @param array $arr
+     *
+     * @return $this
+     */
+    public function addArr($arr)
+    {
+        $this->array[] = $arr;
+        $this->addModifiedProperty(self::ARRAY_PROPERTY);
+
+        return $this;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireArr()
+    {
+        $this->assertCollectionPropertyIsSet(self::ARRAY_PROPERTY);
+
+        return $this;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transfer
+     *
+     * @return $this
+     */
+    public function setTransfer(TransferInterface $transfer = null)
+    {
+        $this->transfer = $transfer;
+        $this->addModifiedProperty(self::TRANSFER);
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    public function getTransfer()
+    {
+        return $this->transfer;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireTransfer()
+    {
+        $this->assertPropertyIsSet(self::TRANSFER);
+
+        return $this;
+    }
+
+    /**
+     * @param \ArrayObject|\Spryker\Shared\Kernel\Transfer\TransferInterface[] $transferCollection
+     *
+     * @return $this
+     */
+    public function setTransferCollection(\ArrayObject $transferCollection)
+    {
+        $this->transferCollection = $transferCollection;
+        $this->addModifiedProperty(self::TRANSFER_COLLECTION);
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface[]
+     */
+    public function getTransferCollection()
+    {
+        return $this->transferCollection;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferCollection
+     *
+     * @return $this
+     */
+    public function addTransferCollection(TransferInterface $transferCollection)
+    {
+        $this->transferCollection[] = $transferCollection;
+        $this->addModifiedProperty(self::TRANSFER_COLLECTION);
+
+        return $this;
+    }
+
+    /**
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
+     *
+     * @return $this
+     */
+    public function requireTransferCollection()
+    {
+        $this->assertCollectionPropertyIsSet(self::TRANSFER_COLLECTION);
+
+        return $this;
+    }
+
+}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/BundleNameFinderTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/BundleNameFinderTest.php
deleted file mode 100644
index 5b5f701..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/BundleNameFinderTest.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Kernel\BundleNameFinder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group BundleNameFinderTest
- */
-class BundleNameFinderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testBundleNameFinderShouldFindBundleNames()
-    {
-        $options = [
-            BundleNameFinder::OPTION_KEY_PROJECT_PATH_PATTERN => __DIR__ . '/Fixtures/Project/src/',
-            BundleNameFinder::OPTION_KEY_VENDOR_PATH_PATTERN => __DIR__ . '/Fixtures/VendorMock/*/src/',
-            BundleNameFinder::OPTION_KEY_APPLICATION => 'Application',
-        ];
-
-        $bundleNameFinder = new BundleNameFinder($options);
-        $bundleNames = $bundleNameFinder->getBundleNames();
-
-        $this->assertContains('FooBundle', $bundleNames);
-        $this->assertContains('BarBundle', $bundleNames);
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/AbstractGatewayControllerTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/AbstractGatewayControllerTest.php
index 150f9a3..581ccda 100644
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/AbstractGatewayControllerTest.php
+++ b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/AbstractGatewayControllerTest.php
@@ -9,7 +9,8 @@ namespace Unit\Spryker\Zed\Kernel\Communication;
 
 use PHPUnit_Framework_TestCase;
 use Silex\Application;
-use Unit\Spryker\Zed\Kernel\Communication\Fixtures\FixtureGatewayController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
+use Unit\Spryker\Zed\Kernel\Communication\Fixture\FixtureGatewayController;
 
 /**
  * @group Unit
@@ -30,7 +31,7 @@ class AbstractGatewayControllerTest extends PHPUnit_Framework_TestCase
         $application = new Application();
 
         $this->assertInstanceOf(
-            'Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController',
+            AbstractGatewayController::class,
             new FixtureGatewayController($application)
         );
     }
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/AbstractControllerTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/AbstractControllerTest.php
new file mode 100644
index 0000000..1510eb3
--- /dev/null
+++ b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/AbstractControllerTest.php
@@ -0,0 +1,67 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\Kernel\Communication\Controller;
+
+use Exception;
+use PHPUnit_Framework_TestCase;
+use Unit\Spryker\Zed\Kernel\Communication\Controller\Fixtures\MockController;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group Kernel
+ * @group Communication
+ * @group Controller
+ * @group AbstractControllerTest
+ */
+class AbstractControllerTest extends PHPUnit_Framework_TestCase
+{
+
+    const EXPECTED_INTERNAL_TYPE = 'int';
+
+    /**
+     * @dataProvider getTestData()
+     *
+     * @param mixed $input
+     * @param int $expected
+     * @param bool $isValid
+     *
+     * @return void
+     */
+    public function testCastInt($input, $expected, $isValid)
+    {
+        $controller = new MockController();
+
+        if (!$isValid) {
+            $this->expectException(Exception::class);
+        }
+
+        $result = $controller->indexAction($input);
+
+        $this->assertSame($expected, $result);
+        $this->assertInternalType(self::EXPECTED_INTERNAL_TYPE, $result);
+    }
+
+    /**
+     * @return array
+     */
+    public function getTestData()
+    {
+        return [
+            ['1', 1, true],
+            [1, 1, true],
+            [1.5, 1, true],
+            [true, 1, false],
+            [false, 0, false],
+            ['string', 0, false],
+            [[], 0, false],
+        ];
+    }
+
+}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/Fixtures/MockController.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/Fixtures/MockController.php
new file mode 100644
index 0000000..06d60d3
--- /dev/null
+++ b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Controller/Fixtures/MockController.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\Kernel\Communication\Controller\Fixtures;
+
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
+
+class MockController extends AbstractController
+{
+
+    /**
+     * @param mixed $id
+     *
+     * @return int
+     */
+    public function indexAction($id)
+    {
+        return $this->castId($id);
+    }
+
+}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixture/FixtureGatewayController.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixture/FixtureGatewayController.php
new file mode 100644
index 0000000..010a61f
--- /dev/null
+++ b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixture/FixtureGatewayController.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\Kernel\Communication\Fixture;
+
+use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
+
+class FixtureGatewayController extends AbstractGatewayController
+{
+}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixtures/FixtureGatewayController.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixtures/FixtureGatewayController.php
deleted file mode 100644
index 3a7309a..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Fixtures/FixtureGatewayController.php
+++ /dev/null
@@ -1,9 +0,0 @@
-<?php
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Fixtures;
-
-use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
-
-class FixtureGatewayController extends AbstractGatewayController
-{
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/FilterControllerEvent.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/FilterControllerEvent.php
deleted file mode 100644
index e6f54d5..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/FilterControllerEvent.php
+++ /dev/null
@@ -1,32 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture;
-
-use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpKernel\Event\FilterControllerEvent as SymfonyFilterControllerEvent;
-use Symfony\Component\HttpKernel\HttpKernelInterface;
-
-class FilterControllerEvent extends SymfonyFilterControllerEvent
-{
-
-    /**
-     * @param \Symfony\Component\HttpKernel\HttpKernelInterface|null $kernel
-     * @param callable|null $controller
-     * @param \Symfony\Component\HttpFoundation\Request|null $request
-     * @param int|null $requestType
-     */
-    public function __construct(
-        HttpKernelInterface $kernel = null,
-        $controller = null,
-        Request $request = null,
-        $requestType = null
-    ) {
-        unset($kernel, $controller, $request, $requestType);
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/GatewayController.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/GatewayController.php
deleted file mode 100644
index 9bb71f4..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/GatewayController.php
+++ /dev/null
@@ -1,95 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture;
-
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
-use stdClass;
-
-class GatewayController extends AbstractGatewayController
-{
-
-    /**
-     * @return string
-     */
-    public function badAction()
-    {
-        return 'bad';
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $foo
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function goodAction(TransferInterface $foo)
-    {
-        return $foo;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $foo
-     * @param \Spryker\Shared\Transfer\TransferInterface $bar
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function twoTransferParametersAction(TransferInterface $foo, TransferInterface $bar)
-    {
-        if ($bar) {
-        }
-
-        return $foo;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $foo
-     * @param mixed $bar
-     * @param mixed $baz
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function tooManyParametersAction(TransferInterface $foo, $bar, $baz)
-    {
-        if ($bar && $baz) {
-        }
-
-        return $foo;
-    }
-
-    /**
-     * @param \stdClass $foo
-     *
-     * @return \stdClass
-     */
-    public function notTransferAction(stdClass $foo)
-    {
-        return $foo;
-    }
-
-    /**
-     * @param mixed $foo
-     *
-     * @return mixed
-     */
-    public function noClassParameterAction($foo)
-    {
-        return $foo;
-    }
-
-    /**
-     * @return void
-     */
-    public function transformMessageAction()
-    {
-        $this->addInfoMessage('info');
-        $this->addErrorMessage('error');
-        $this->addSuccessMessage('success');
-        $this->setSuccess(false);
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/NotGatewayController.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/NotGatewayController.php
deleted file mode 100644
index a9d4cd5..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/NotGatewayController.php
+++ /dev/null
@@ -1,42 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture;
-
-use Spryker\Shared\Transfer\TransferInterface;
-
-class NotGatewayController
-{
-
-    public function __construct()
-    {
-    }
-
-    /**
-     * @return string
-     */
-    public function badAction()
-    {
-        return 'bad';
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $foo
-     * @param int $bar
-     *
-     * @return int
-     */
-    public function bazAction(TransferInterface $foo, $bar = 0)
-    {
-        if ($foo) {
-            $bar = 0;
-        }
-
-        return $bar;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/Request.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/Request.php
deleted file mode 100644
index 895c396..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/Request.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture;
-
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Zed\ZedRequest\Business\Client\Request as ClientRequest;
-
-class Request extends ClientRequest
-{
-
-    /**
-     * @var \Spryker\Shared\Transfer\TransferInterface
-     */
-    private $transfer;
-
-    /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function getTransfer()
-    {
-        if ($this->transfer) {
-            return $this->transfer;
-        }
-
-        return parent::getTransfer();
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transfer)
-    {
-        $this->transfer = $transfer;
-
-        return $this;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
-     *
-     * @return void
-     */
-    public function setFixtureTransfer($transfer)
-    {
-        $this->transfer = $transfer;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/TransferServer.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/TransferServer.php
deleted file mode 100644
index 330867f..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/Fixture/TransferServer.php
+++ /dev/null
@@ -1,45 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture;
-
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\TransferServer as CoreTransferServer;
-use Spryker\Zed\ZedRequest\Business\Client\Request;
-
-class TransferServer extends CoreTransferServer
-{
-
-    /**
-     * @var \Spryker\Zed\ZedRequest\Business\Client\Request
-     */
-    private $fixtureRequest;
-
-    /**
-     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
-     *
-     * @return $this
-     */
-    public function setFixtureRequest(Request $request)
-    {
-        $this->fixtureRequest = $request;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
-     */
-    public function getRequest()
-    {
-        if (isset($this->fixtureRequest)) {
-            return $this->fixtureRequest;
-        }
-
-        return parent::getRequest();
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPluginTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPluginTest.php
deleted file mode 100644
index 9626599..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/Communication/Plugin/GatewayControllerListenerPluginTest.php
+++ /dev/null
@@ -1,278 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\Communication\Plugin;
-
-use LogicException;
-use PHPUnit_Framework_TestCase;
-use ReflectionClass;
-use ReflectionObject;
-use Spryker\Shared\Kernel\AbstractLocatorLocator;
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater;
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\TransferServer as CoreTransferServer;
-use Spryker\Zed\Kernel\Communication\Plugin\GatewayControllerListenerPlugin;
-use stdClass;
-use Symfony\Component\HttpFoundation\JsonResponse;
-use Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture\FilterControllerEvent;
-use Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture\GatewayController;
-use Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture\NotGatewayController;
-use Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture\Request;
-use Unit\Spryker\Zed\Kernel\Communication\Plugin\Fixture\TransferServer;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group Communication
- * @group Plugin
- * @group GatewayControllerListenerPluginTest
- */
-class GatewayControllerListenerPluginTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function setUp()
-    {
-        parent::setUp();
-        $this->unsetLocator();
-    }
-
-    /**
-     * We need to unset the Locator instance because we are using the Locator for Yves and for Zed
-     * When it first get instantiated by Yves it wont have the proper Proxies configured
-     *
-     * @return void
-     */
-    protected function unsetLocator()
-    {
-        $reflectionClass = new ReflectionClass(AbstractLocatorLocator::class);
-        $reflectedProperty = $reflectionClass->getProperty('instance');
-        $reflectedProperty->setAccessible(true);
-        $reflectedProperty->setValue(null);
-    }
-
-    /**
-     * @return void
-     */
-    protected function tearDown()
-    {
-        parent::tearDown();
-        $this->resetTransferServer();
-    }
-
-    /**
-     * @return void
-     */
-    public function testWhenControllerIsGatewayControllerPluginMustReturnInstanceOfClosure()
-    {
-        $eventMock = new FilterControllerEvent();
-        $controller = new GatewayController();
-        $action = 'goodAction';
-        $eventMock->setController([$controller, $action]);
-
-        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
-        $controllerListenerPlugin->onKernelController($eventMock);
-
-        $controllerCallable = $eventMock->getController();
-        $this->assertTrue(is_callable($controllerCallable));
-        $this->assertInstanceOf('\Closure', $controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testWhenControllerIsNotAGatewayControllerPluginMustReturnPassedCallable()
-    {
-        $action = 'badAction';
-        $eventMock = new FilterControllerEvent();
-        $controller = new NotGatewayController();
-        $eventMock->setController([$controller, $action]);
-
-        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
-        $controllerListenerPlugin->onKernelController($eventMock);
-
-        $controllerCallable = $eventMock->getController();
-        $this->assertTrue(is_callable($controllerCallable));
-        $this->assertNotInstanceOf('\Closure', $controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testIfTwoTransferParameterGivenPluginMustThrowException()
-    {
-        $this->expectException(LogicException::class);
-        $this->expectExceptionMessage('Only one transfer object can be received in yves-action');
-
-        $action = 'twoTransferParametersAction';
-        $controllerCallable = $this->executeMockedListenerTest($action);
-        call_user_func($controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testIfTooManyTransferParameterGivenPluginMustThrowException()
-    {
-        $this->expectException(LogicException::class);
-        $this->expectExceptionMessage('Only one transfer object can be received in yves-action');
-
-        $action = 'tooManyParametersAction';
-        $controllerCallable = $this->executeMockedListenerTest($action);
-        call_user_func($controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testIfPassedParameterIsNotAClassPluginMustThrowException()
-    {
-        $this->expectException(LogicException::class);
-        $this->expectExceptionMessage('You need to specify a class for the parameter in the yves-action.');
-
-        $action = 'noClassParameterAction';
-        $controllerCallable = $this->executeMockedListenerTest($action);
-        call_user_func($controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testWhenObjectIsNotTransferClassPluginMustThrowException()
-    {
-        $this->expectException(LogicException::class);
-        $this->expectExceptionMessage('Only transfer classes are allowed in yves action as parameter');
-
-        $transfer = new stdClass();
-        $controllerCallable = $this->executeMockedListenerTest('notTransferAction', $transfer);
-        call_user_func($controllerCallable);
-    }
-
-    /**
-     * @return void
-     */
-    public function testWhenControllerIsGatewayControllerAndOnlyOneTransferObjectIsGivenActionMustReturnResponse()
-    {
-        $transfer = $this->getTransferMock();
-        $controllerCallable = $this->executeMockedListenerTest('goodAction', $transfer);
-
-        $response = call_user_func($controllerCallable);
-        $this->assertInstanceOf(JsonResponse::class, $response);
-    }
-
-    /**
-     * @return void
-     */
-    public function testTransformMessagesFromController()
-    {
-        $action = 'transformMessageAction';
-
-        $transfer = $this->getTransferMock();
-        $controllerCallable = $this->executeMockedListenerTest($action, $transfer);
-
-        $response = call_user_func($controllerCallable);
-        $this->assertInstanceOf(JsonResponse::class, $response);
-
-        $responseContent = json_decode($response->getContent(), true);
-
-        $this->assertArrayHasKey('infoMessages', $responseContent);
-        $this->assertArrayHasKey('errorMessages', $responseContent);
-        $this->assertArrayHasKey('successMessages', $responseContent);
-        $this->assertArrayHasKey('success', $responseContent);
-    }
-
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater
-     */
-    private function createRepeaterMock()
-    {
-        return $this->getMockBuilder(Repeater::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return void
-     */
-    private function initTransferServer($transferObject)
-    {
-        $oldTransferServer = CoreTransferServer::getInstance();
-        $this->resetSingleton($oldTransferServer);
-
-        $request = new Request();
-        $request->setFixtureTransfer($transferObject);
-        TransferServer::getInstance()->setFixtureRequest($request);
-    }
-
-    /**
-     * @return void
-     */
-    private function resetTransferServer()
-    {
-        $fixtureServer = TransferServer::getInstance();
-        $this->resetSingleton($fixtureServer);
-        CoreTransferServer::getInstance(
-            $this->createRepeaterMock()
-        );
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $oldTransferServer
-     *
-     * @return void
-     */
-    private function resetSingleton($oldTransferServer)
-    {
-        $refObject = new ReflectionObject($oldTransferServer);
-        $refProperty = $refObject->getProperty('instance');
-        $refProperty->setAccessible(true);
-        $refProperty->setValue(null);
-    }
-
-    /**
-     * @param string $action
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transfer
-     *
-     * @return callable
-     */
-    private function executeMockedListenerTest($action, $transfer = null)
-    {
-        $eventMock = new FilterControllerEvent();
-        $controller = new GatewayController();
-        $eventMock->setController([$controller, $action]);
-
-        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
-
-        if (!$transfer) {
-            $transfer = $this->getTransferMock();
-        }
-
-        $this->initTransferServer($transfer);
-
-        $controllerListenerPlugin->onKernelController($eventMock);
-        $controllerCallable = $eventMock->getController();
-
-        return $controllerCallable;
-    }
-
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Transfer\TransferInterface
-     */
-    private function getTransferMock()
-    {
-        $transfer = $this->getMockBuilder(TransferInterface::class)->getMock();
-
-        return $transfer;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractAutoCompletion.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractAutoCompletion.php
deleted file mode 100644
index 39d1584..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/AbstractAutoCompletion.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion;
-
-use PHPUnit_Framework_TestCase;
-use Symfony\Component\Finder\Finder;
-
-abstract class AbstractAutoCompletion extends PHPUnit_Framework_TestCase
-{
-
-    public function __construct()
-    {
-        $this->baseDir = __DIR__ . '/Fixtures/';
-    }
-
-    /**
-     * @return void
-     */
-    public function setUp()
-    {
-        $testDirectory = $this->baseDir . 'test';
-        if (!is_dir($testDirectory)) {
-            mkdir($testDirectory, 0775, true);
-        }
-    }
-
-    /**
-     * @return void
-     */
-    public function tearDown()
-    {
-        $this->cleanUpTestDir();
-    }
-
-    /**
-     * @return void
-     */
-    protected function cleanUpTestDir()
-    {
-        if ($this->baseDir . 'test/') {
-            $finder = new Finder();
-            /** @var \Symfony\Component\Finder\SplFileInfo $file */
-            foreach ($finder->files()->in($this->baseDir . 'test/') as $file) {
-                unlink($file->getPathname());
-            }
-            rmdir($this->baseDir . 'test/');
-        }
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/BundleNameFinder.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/BundleNameFinder.php
deleted file mode 100644
index 508b647..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/BundleNameFinder.php
+++ /dev/null
@@ -1,22 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures;
-
-class BundleNameFinder extends \Spryker\Zed\Kernel\BundleNameFinder
-{
-
-    public function getBundleNames()
-    {
-        return [
-            'BundleA',
-            'BundleB',
-            'BundleC',
-            'BundleD',
-        ];
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/MethodTagBuilder.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/MethodTagBuilder.php
deleted file mode 100644
index 5a17889..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/Fixtures/MethodTagBuilder.php
+++ /dev/null
@@ -1,25 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures;
-
-use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\MethodTagBuilderInterface;
-
-class MethodTagBuilder implements MethodTagBuilderInterface
-{
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        return ['\\Foo\\Bar\\Baz\\Bat' => '\\Foo\\Bar\\Baz\\Bat'];
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGeneratorTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGeneratorTest.php
deleted file mode 100644
index 5276ca1..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeAutoCompletionGeneratorTest.php
+++ /dev/null
@@ -1,131 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion;
-
-use Spryker\Zed\Kernel\IdeAutoCompletion\IdeAutoCompletionGenerator;
-use Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures\BundleNameFinder;
-use Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures\MethodTagBuilder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group IdeAutoCompletion
- * @group IdeAutoCompletionGeneratorTest
- */
-class IdeAutoCompletionGeneratorTest extends AbstractAutoCompletion
-{
-
-    /**
-     * @var string
-     */
-    private $generatedFileContent;
-
-    /**
-     * @var string
-     */
-    private $pathToFile;
-
-    /**
-     * @return string
-     */
-    public function getGeneratedFileContent()
-    {
-        if ($this->generatedFileContent === null) {
-            $options = $this->getOptions();
-
-            $generator = new IdeAutoCompletionGenerator($options);
-
-            $generator->create();
-
-            $interfaceName = $this->getOptions('')[IdeAutoCompletionGenerator::OPTION_KEY_INTERFACE_NAME];
-            $this->pathToFile = $this->baseDir . 'test/' . $interfaceName . '.php';
-            $this->generatedFileContent = file_get_contents($this->pathToFile);
-        }
-
-        return $this->generatedFileContent;
-    }
-
-    /**
-     * @return void
-     */
-    public function testDirectoryShouldBeCreatedIfNotExists()
-    {
-        $this->generatedFileContent = null;
-
-        $dirToTest = $this->baseDir . 'test/';
-        $this->cleanUpTestDir();
-
-        $this->assertFalse(is_dir($dirToTest));
-
-        $this->getGeneratedFileContent();
-
-        $this->assertTrue(is_dir($dirToTest));
-        $this->generatedFileContent = null;
-    }
-
-    /**
-     * @return void
-     */
-    public function testFileShouldBeGenerated()
-    {
-        $this->getGeneratedFileContent();
-
-        $this->assertFileExists($this->pathToFile);
-    }
-
-    /**
-     * @return void
-     */
-    public function testFileShouldContainNamespace()
-    {
-        $generatedFile = $this->getGeneratedFileContent();
-        $namespace = $this->getOptions('')[IdeAutoCompletionGenerator::OPTION_KEY_NAMESPACE];
-
-        $this->assertContains('namespace ' . $namespace . ';', $generatedFile);
-    }
-
-    /**
-     * @return void
-     */
-    public function testAddMethodTagBuilderShouldReturnGenerator()
-    {
-        $generator = new IdeAutoCompletionGenerator($this->getOptions());
-        $generator = $generator->addMethodTagBuilder(new MethodTagBuilder());
-
-        $this->assertInstanceOf('Spryker\Zed\Kernel\IdeAutoCompletion\IdeAutoCompletionGenerator', $generator);
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetNameShouldReturnNameOfGenerator()
-    {
-        $this->assertSame(
-            IdeAutoCompletionGenerator::GENERATOR_NAME,
-            (new IdeAutoCompletionGenerator($this->getOptions()))->getName()
-        );
-    }
-
-    /**
-     * @return array
-     */
-    private function getOptions()
-    {
-        $options = [
-            IdeAutoCompletionGenerator::OPTION_KEY_BUNDLE_NAME_FINDER => new BundleNameFinder(),
-            IdeAutoCompletionGenerator::OPTION_KEY_NAMESPACE => 'Generated\Zed\Ide',
-            IdeAutoCompletionGenerator::OPTION_KEY_INTERFACE_NAME => 'TestInterface',
-            IdeAutoCompletionGenerator::OPTION_KEY_LOCATION_DIR => $this->baseDir . '/test/',
-        ];
-
-        return $options;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGeneratorTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGeneratorTest.php
deleted file mode 100644
index 2e8204f..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/IdeBundleAutoCompletionGeneratorTest.php
+++ /dev/null
@@ -1,112 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion;
-
-use Spryker\Zed\Kernel\IdeAutoCompletion\IdeBundleAutoCompletionGenerator;
-use Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures\BundleNameFinder;
-use Unit\Spryker\Zed\Kernel\IdeAutoCompletion\Fixtures\MethodTagBuilder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group IdeAutoCompletion
- * @group IdeBundleAutoCompletionGeneratorTest
- */
-class IdeBundleAutoCompletionGeneratorTest extends AbstractAutoCompletion
-{
-
-    /**
-     * @return void
-     */
-    public function testFileShouldBeGenerated()
-    {
-        $this->cleanUpTestDir();
-
-        $generator = new IdeBundleAutoCompletionGenerator($this->getOptions());
-        $generator->create();
-
-        $this->assertFileExists($this->getFilePath());
-    }
-
-    /**
-     * @return void
-     */
-    public function testAddMethodTagBuilderShouldReturnGenerator()
-    {
-        $generator = new IdeBundleAutoCompletionGenerator($this->getOptions());
-        $generator = $generator->addMethodTagBuilder(new MethodTagBuilder());
-
-        $this->assertInstanceOf('Spryker\Zed\Kernel\IdeAutoCompletion\IdeBundleAutoCompletionGenerator', $generator);
-    }
-
-    /**
-     * @return string
-     */
-    private function getFilePath()
-    {
-        $interfaceName = $this->getOptions('')[IdeBundleAutoCompletionGenerator::OPTION_KEY_INTERFACE_NAME];
-
-        return $this->baseDir . 'test/' . $interfaceName . '.php';
-    }
-
-    /**
-     * @return void
-     */
-    public function testFileShouldContainANamespace()
-    {
-        $generated = $this->getGeneratedFileContent();
-
-        $namespace = $this->getOptions()[IdeBundleAutoCompletionGenerator::OPTION_KEY_NAMESPACE];
-        $expectedNamespace = 'namespace ' . $namespace . ';';
-
-        $this->assertContains($expectedNamespace, $generated);
-    }
-
-    /**
-     * @return void
-     */
-    public function testFileShouldContainInterfaceForEachFoundBundle()
-    {
-        $generatedFile = $this->getGeneratedFileContent();
-
-        $bundles = ['BundleA', 'BundleB', 'BundleC', 'BundleD'];
-        foreach ($bundles as $bundle) {
-            $this->assertContains('interface ' . $bundle, $generatedFile);
-        }
-    }
-
-    /**
-     * @return string
-     */
-    private function getGeneratedFileContent()
-    {
-        $generator = new IdeBundleAutoCompletionGenerator($this->getOptions());
-        $generator->addMethodTagBuilder(new MethodTagBuilder());
-        $generator->create();
-
-        return file_get_contents($this->getFilePath());
-    }
-
-    /**
-     * @return array
-     */
-    private function getOptions()
-    {
-        $options = [
-            IdeBundleAutoCompletionGenerator::OPTION_KEY_BUNDLE_NAME_FINDER => new BundleNameFinder(),
-            IdeBundleAutoCompletionGenerator::OPTION_KEY_NAMESPACE => 'Generated\Zed\Ide\AutoCompletion',
-            IdeBundleAutoCompletionGenerator::OPTION_KEY_INTERFACE_NAME => 'TestInterface',
-            IdeBundleAutoCompletionGenerator::OPTION_KEY_LOCATION_DIR => $this->baseDir . 'test/',
-        ];
-
-        return $options;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilderTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilderTest.php
deleted file mode 100644
index 6178c14..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/AbstractSingleFileMethodTagBuilderTest.php
+++ /dev/null
@@ -1,99 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use PHPUnit_Framework_TestCase;
-use Unit\Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\Fixtures\SingleFileMethodTagBuilder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group IdeAutoCompletion
- * @group MethodTagBuilder
- * @group AbstractSingleFileMethodTagBuilderTest
- */
-class AbstractSingleFileMethodTagBuilderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testBuildMethodTagsShouldReturnMethodTagWithVendorFileIfProjectDoesNotOverrideIt()
-    {
-        $methodTagBuilder = new SingleFileMethodTagBuilder([
-            SingleFileMethodTagBuilder::OPTION_KEY_PATH_PATTERN => 'Layer/',
-            SingleFileMethodTagBuilder::OPTION_KEY_FILE_NAME_SUFFIX => 'CoreOnly.php',
-            SingleFileMethodTagBuilder::OPTION_KEY_PROJECT_PATH_PATTERN => __DIR__ . '/Fixtures/src',
-            SingleFileMethodTagBuilder::OPTION_KEY_VENDOR_PATH_PATTERN => __DIR__ . '/Fixtures/vendorMock/*/*/src',
-        ]);
-
-        $expectedMethodTag =
-            ' * @method \VendorNamespace\Application\Bundle\Layer\BundleCoreOnly singleFileMethod()';
-
-        $methodTags = $methodTagBuilder->buildMethodTags('Bundle');
-        $this->assertContains($expectedMethodTag, $methodTags);
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildMethodTagsShouldReturnMethodTagWithProjectFileIfProjectOverrideIt()
-    {
-        $methodTagBuilder = new SingleFileMethodTagBuilder([
-            SingleFileMethodTagBuilder::OPTION_KEY_PATH_PATTERN => 'Layer/',
-            SingleFileMethodTagBuilder::OPTION_KEY_FILE_NAME_SUFFIX => 'CoreAndProject.php',
-            SingleFileMethodTagBuilder::OPTION_KEY_PROJECT_PATH_PATTERN => __DIR__ . '/Fixtures/src',
-            SingleFileMethodTagBuilder::OPTION_KEY_VENDOR_PATH_PATTERN => __DIR__ . '/Fixtures/vendorMock/*/*/src',
-        ]);
-
-        $expectedMethodTag =
-            ' * @method \ProjectNamespace\Application\Bundle\Layer\BundleCoreAndProject singleFileMethod()';
-
-        $methodTags = $methodTagBuilder->buildMethodTags('Bundle');
-        $this->assertContains($expectedMethodTag, $methodTags);
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildMethodTagsShouldReturnMethodTagWithProjectFileIfFileOnlyInProject()
-    {
-        $methodTagBuilder = new SingleFileMethodTagBuilder([
-            SingleFileMethodTagBuilder::OPTION_KEY_PATH_PATTERN => 'Layer/',
-            SingleFileMethodTagBuilder::OPTION_KEY_FILE_NAME_SUFFIX => 'ProjectOnly.php',
-            SingleFileMethodTagBuilder::OPTION_KEY_PROJECT_PATH_PATTERN => __DIR__ . '/Fixtures/src',
-            SingleFileMethodTagBuilder::OPTION_KEY_VENDOR_PATH_PATTERN => __DIR__ . '/Fixtures/vendorMock/*/*/src',
-        ]);
-
-        $expectedMethodTag =
-            ' * @method \ProjectNamespace\Application\Bundle\Layer\BundleProjectOnly singleFileMethod()';
-
-        $methodTags = $methodTagBuilder->buildMethodTags('Bundle');
-        $this->assertContains($expectedMethodTag, $methodTags);
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildMethodTagsShouldReturnUnchangedArrayIfNoFileCanBeFound()
-    {
-        $methodTagBuilder = new SingleFileMethodTagBuilder([
-            SingleFileMethodTagBuilder::OPTION_KEY_PATH_PATTERN => 'NotExisting/',
-            SingleFileMethodTagBuilder::OPTION_KEY_FILE_NAME_SUFFIX => 'Facade.php',
-            SingleFileMethodTagBuilder::OPTION_KEY_PROJECT_PATH_PATTERN => __DIR__ . '/Fixtures/src',
-            SingleFileMethodTagBuilder::OPTION_KEY_VENDOR_PATH_PATTERN => __DIR__ . '/Fixtures/vendorMock/*/*/src',
-        ]);
-
-        $givenMethodTags = [];
-        $methodTags = $methodTagBuilder->buildMethodTags('Bundle', $givenMethodTags);
-        $this->assertSame($givenMethodTags, $methodTags);
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/SingleFileMethodTagBuilder.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/SingleFileMethodTagBuilder.php
deleted file mode 100644
index 3c42749..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/SingleFileMethodTagBuilder.php
+++ /dev/null
@@ -1,50 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\Fixtures;
-
-use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\AbstractSingleFileMethodTagBuilder;
-use Symfony\Component\OptionsResolver\OptionsResolver;
-
-class SingleFileMethodTagBuilder extends AbstractSingleFileMethodTagBuilder
-{
-
-    const METHOD_STRING_PATTERN = '@method {{className}} singleFileMethod()';
-    const APPLICATION = 'Application';
-
-    /**
-     * @param OptionsResolver $resolver
-     *
-     * @return void
-     */
-    public function configureOptions(OptionsResolver $resolver)
-    {
-        parent::configureOptions($resolver);
-
-        $resolver->setDefaults([
-            self::OPTION_KEY_METHOD_STRING_PATTERN => self::METHOD_STRING_PATTERN,
-            self::OPTION_KEY_APPLICATION => self::APPLICATION,
-        ]);
-    }
-
-    /**
-     * @param string $bundle
-     * @param array $methodTags
-     *
-     * @return array
-     */
-    public function buildMethodTags($bundle, array $methodTags = [])
-    {
-        $methodTag = $this->getMethodTag($bundle);
-
-        if ($methodTag) {
-            $methodTags[] = $methodTag;
-        }
-
-        return $methodTags;
-    }
-
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleCoreAndProject.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleCoreAndProject.php
deleted file mode 100644
index 52c8858..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleCoreAndProject.php
+++ /dev/null
@@ -1,11 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace ProjectNamespace\Application\Bundle\Layer;
-
-class BundleCoreAndProject
-{
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleProjectOnly.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleProjectOnly.php
deleted file mode 100644
index 5e19bc7..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/src/ProjectNamespace/Application/Bundle/Layer/BundleProjectOnly.php
+++ /dev/null
@@ -1,11 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace ProjectNamespace\Application\Bundle\Layer;
-
-class BundleProjectOnly
-{
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreAndProject.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreAndProject.php
deleted file mode 100644
index 76ba2af..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreAndProject.php
+++ /dev/null
@@ -1,11 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace VendorNamespace\Application\Bundle\Layer;
-
-class BundleCoreAndProject
-{
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreOnly.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreOnly.php
deleted file mode 100644
index 12a4aec..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/Fixtures/vendorMock/vendorMock/package/src/VendorNamespace/Application/Bundle/Layer/BundleCoreOnly.php
+++ /dev/null
@@ -1,11 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace VendorNamespace\Application\Bundle\Layer;
-
-class OnlyCore
-{
-}
diff --git a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilderTest.php b/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilderTest.php
deleted file mode 100644
index bc8c13c..0000000
--- a/Bundles/Kernel/tests/Unit/Spryker/Zed/Kernel/IdeAutoCompletion/MethodTagBuilder/GeneratedInterfaceMethodTagBuilderTest.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\GeneratedInterfaceMethodTagBuilder;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Kernel
- * @group IdeAutoCompletion
- * @group MethodTagBuilder
- * @group GeneratedInterfaceMethodTagBuilderTest
- */
-class GeneratedInterfaceMethodTagBuilderTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testBuildMethodTagsShouldReturnArrayWithMethodsToGetGeneratedBundleInterface()
-    {
-        $expectedMethodTag = ' * @method \\Generated\Zed\Ide\Bundle bundle()';
-
-        $this->assertContains(
-            $expectedMethodTag,
-            (new GeneratedInterfaceMethodTagBuilder())->buildMethodTags('Bundle')
-        );
-    }
-
-}
diff --git a/Bundles/Kernel/tests/_support/Module/Functional.php b/Bundles/Kernel/tests/_support/Module/Functional.php
index cbc51c6..92c7106 100644
--- a/Bundles/Kernel/tests/_support/Module/Functional.php
+++ b/Bundles/Kernel/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace Kernel\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -64,8 +36,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/KeyBuilder/.coveralls.yml b/Bundles/KeyBuilder/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/KeyBuilder/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/KeyBuilder/.gitattributes b/Bundles/KeyBuilder/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/KeyBuilder/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/KeyBuilder/.gitignore b/Bundles/KeyBuilder/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/KeyBuilder/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/KeyBuilder/.travis.yml b/Bundles/KeyBuilder/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/KeyBuilder/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/KeyBuilder/CHANGELOG.md b/Bundles/KeyBuilder/CHANGELOG.md
new file mode 100644
index 0000000..6110bc2
--- /dev/null
+++ b/Bundles/KeyBuilder/CHANGELOG.md
@@ -0,0 +1,3 @@
+# KeyBuilder Changelog
+
+[Release Changelog](https://github.com/spryker/KeyBuilder/releases)
diff --git a/Bundles/KeyBuilder/LICENSE b/Bundles/KeyBuilder/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/KeyBuilder/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/KeyBuilder/README.md b/Bundles/KeyBuilder/README.md
new file mode 100644
index 0000000..834363f
--- /dev/null
+++ b/Bundles/KeyBuilder/README.md
@@ -0,0 +1,14 @@
+# KeyBuilder Bundle
+[![Build Status](https://travis-ci.org/spryker/KeyBuilder.svg)](https://travis-ci.org/spryker/KeyBuilder)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/KeyBuilder/badge.svg)](https://coveralls.io/github/spryker/KeyBuilder)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/KeyBuilder/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/KeyBuilder/?branch=master)
+
+## Installation
+
+```
+composer require spryker/key-builder
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/KeyBuilder/codeception.yml b/Bundles/KeyBuilder/codeception.yml
new file mode 100644
index 0000000..bd781e9
--- /dev/null
+++ b/Bundles/KeyBuilder/codeception.yml
@@ -0,0 +1,17 @@
+namespace: KeyBuilder
+actor: Tester
+paths:
+    tests: tests
+    log: tests/_output
+    data: tests/_data
+    support: tests/_support
+    envs: tests/_envs
+settings:
+    bootstrap: _bootstrap.php
+    suite_class: \PHPUnit_Framework_TestSuite
+    colors: true
+    memory_limit: 1024M
+    log: true
+coverage:
+    enabled: true
+    whitelist: { include: ['src/*.php'] }
diff --git a/Bundles/KeyBuilder/composer.json b/Bundles/KeyBuilder/composer.json
new file mode 100644
index 0000000..214f21e
--- /dev/null
+++ b/Bundles/KeyBuilder/composer.json
@@ -0,0 +1,32 @@
+{
+  "name": "spryker/key-builder",
+  "require": {
+    "spryker/kernel": "^2.0.0"
+  },
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "description": "KeyBuilder bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Unit": "tests/"
+    }
+  }
+}
diff --git a/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderInterface.php b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderInterface.php
new file mode 100644
index 0000000..ebe1f9c
--- /dev/null
+++ b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderInterface.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\KeyBuilder;
+
+interface KeyBuilderInterface
+{
+
+    /**
+     * @param mixed $data
+     * @param string $localeName
+     *
+     * @return string
+     */
+    public function generateKey($data, $localeName);
+
+}
diff --git a/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderTrait.php b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderTrait.php
new file mode 100644
index 0000000..c903981
--- /dev/null
+++ b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/KeyBuilderTrait.php
@@ -0,0 +1,73 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\KeyBuilder;
+
+use Spryker\Shared\Kernel\Store;
+
+trait KeyBuilderTrait
+{
+
+    /**
+     * @var string
+     */
+    protected $keySeparator = '.';
+
+    /**
+     * @param mixed $data
+     * @param string $localeName
+     *
+     * @return string
+     */
+    public function generateKey($data, $localeName)
+    {
+        $keyParts = $this->getKeyParts($data, $localeName);
+
+        return $this->escapeKey(implode($this->keySeparator, $keyParts));
+    }
+
+    /**
+     * @return string
+     */
+    abstract public function getBundleName();
+
+    /**
+     * @param mixed $data
+     * @param string $localeName
+     *
+     * @return array
+     */
+    protected function getKeyParts($data, $localeName)
+    {
+        return [
+            Store::getInstance()->getStoreName(),
+            $localeName,
+            $this->getBundleName(),
+            $this->buildKey($data),
+        ];
+    }
+
+    /**
+     * @param mixed $data
+     *
+     * @return string
+     */
+    abstract protected function buildKey($data);
+
+    /**
+     * @param string $key
+     *
+     * @return string
+     */
+    protected function escapeKey($key)
+    {
+        $charsToReplace = ['"', "'", ' ', "\0", "\n", "\r"];
+
+        return str_replace($charsToReplace, '-', mb_strtolower(trim($key)));
+    }
+
+}
diff --git a/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/SharedResourceKeyBuilder.php b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/SharedResourceKeyBuilder.php
new file mode 100644
index 0000000..af97282
--- /dev/null
+++ b/Bundles/KeyBuilder/src/Spryker/Shared/KeyBuilder/SharedResourceKeyBuilder.php
@@ -0,0 +1,38 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\KeyBuilder;
+
+abstract class SharedResourceKeyBuilder implements KeyBuilderInterface
+{
+
+    use KeyBuilderTrait;
+
+    /**
+     * @param array $identifier
+     *
+     * @return string
+     */
+    protected function buildKey($identifier)
+    {
+        return $this->getResourceType() . '.' . $identifier;
+    }
+
+    /**
+     * @return string
+     */
+    public function getBundleName()
+    {
+        return 'resource';
+    }
+
+    /**
+     * @return string
+     */
+    abstract protected function getResourceType();
+
+}
diff --git a/Bundles/KeyBuilder/tests/Unit.suite.yml b/Bundles/KeyBuilder/tests/Unit.suite.yml
new file mode 100644
index 0000000..210b490
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/Unit.suite.yml
@@ -0,0 +1,4 @@
+class_name: UnitTester
+modules:
+    enabled:
+        - \Testify\Module\Environment
diff --git a/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/Fixtures/KeyBuilder.php b/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/Fixtures/KeyBuilder.php
new file mode 100644
index 0000000..10e8160
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/Fixtures/KeyBuilder.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Copyright © 2017-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\KeyBuilder\Fixtures;
+
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
+
+class KeyBuilder
+{
+
+    use KeyBuilderTrait;
+
+    /**
+     * @return string
+     */
+    public function getBundleName()
+    {
+        return 'key-builder';
+    }
+
+    /**
+     * @param string $data
+     *
+     * @return string
+     */
+    protected function buildKey($data)
+    {
+        return 'identifier.' . $data;
+    }
+
+
+}
diff --git a/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/KeyBuilderTraitTest.php b/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/KeyBuilderTraitTest.php
new file mode 100644
index 0000000..541483d
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/Unit/Spryker/Shared/KeyBuilder/KeyBuilderTraitTest.php
@@ -0,0 +1,58 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\KeyBuilder;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Shared\Kernel\Store;
+use Unit\Spryker\Shared\KeyBuilder\Fixtures\KeyBuilder;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Shared
+ * @group KeyBuilder
+ * @group KeyBuilderTraitTest
+ */
+class KeyBuilderTraitTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @dataProvider generateKey
+     *
+     * @param mixed $data
+     * @param string $expectedGeneratedKey
+     *
+     * @return void
+     */
+    public function testGenerateKeyBuildExpectedStrings($data, $expectedGeneratedKey)
+    {
+        $keyBuilder = new KeyBuilder();
+        $generatedKey = $keyBuilder->generateKey($data, 'de_DE');
+
+        $this->assertSame($expectedGeneratedKey, $generatedKey);
+    }
+
+    /**
+     * @return array
+     */
+    public function generateKey()
+    {
+        $storeName = strtolower(Store::getInstance()->getStoreName());
+
+        return [
+            ['string', $storeName . '.de_de.key-builder.identifier.string'],
+            [100, $storeName . '.de_de.key-builder.identifier.100'],
+            [0.1, $storeName . '.de_de.key-builder.identifier.0.1'],
+            ['foo' . "\n" . 'bar', $storeName . '.de_de.key-builder.identifier.foo-bar'],
+            ['foo' . "\r" . 'bar', $storeName . '.de_de.key-builder.identifier.foo-bar'],
+            ['foo "23" bar', $storeName . '.de_de.key-builder.identifier.foo--23--bar'],
+            ['foo \'23\' bar', $storeName . '.de_de.key-builder.identifier.foo--23--bar'],
+        ];
+    }
+
+}
diff --git a/Bundles/KeyBuilder/tests/Unit/_bootstrap.php b/Bundles/KeyBuilder/tests/Unit/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/Unit/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/KeyBuilder/tests/_bootstrap.php b/Bundles/KeyBuilder/tests/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/KeyBuilder/tests/_data/dump.sql b/Bundles/KeyBuilder/tests/_data/dump.sql
new file mode 100644
index 0000000..4bc742c
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/_data/dump.sql
@@ -0,0 +1 @@
+/* Replace this file with actual dump of your database */
\ No newline at end of file
diff --git a/Bundles/KeyBuilder/tests/_support/UnitTester.php b/Bundles/KeyBuilder/tests/_support/UnitTester.php
new file mode 100644
index 0000000..9c9f2b3
--- /dev/null
+++ b/Bundles/KeyBuilder/tests/_support/UnitTester.php
@@ -0,0 +1,30 @@
+<?php
+namespace KeyBuilder;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class UnitTester extends Actor
+{
+
+    use _generated\UnitTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/Library/.gitattributes b/Bundles/Library/.gitattributes
deleted file mode 100644
index 3f00241..0000000
--- a/Bundles/Library/.gitattributes
+++ /dev/null
@@ -1,30 +0,0 @@
-# Set the default behavior, in case people don't have core.autocrlf set.
-* eol=lf
-* text=auto
-
-# Denote all files that are truly binary and should not be modified.
-*.png binary
-*.jpg binary
-*.gif binary
-*.jpeg binary
-*.zip binary
-*.phar binary
-*.ttf binary
-*.woff binary
-*.woff2 binary
-*.eot binary
-*.ico binary
-*.mo binary
-*.pdf binary
-*.xsd binary
-*.ts binary
-*.exe binary
-
-# Remove files for archives generated using `git archive`
-codeception.yml export-ignore
-dependency.json export-ignore
-.coveralls.yml export-ignore
-.travis.yml export-ignore
-.editorconfig export-ignore
-.gitattributes export-ignore
-.gitignore export-ignore
diff --git a/Bundles/Library/.gitignore b/Bundles/Library/.gitignore
deleted file mode 100644
index f743dc0..0000000
--- a/Bundles/Library/.gitignore
+++ /dev/null
@@ -1,28 +0,0 @@
-# IDEs
-/.idea
-/.project
-/nbproject
-/.buildpath
-/.settings
-*.sublime-*
-*.AppleDouble
-*.AppleDB
-*.AppleDesktop
-
-# built client resources
-/src/*/Zed/*/Static/Public
-/src/*/Zed/*/Static/Assets/sprite
-
-# propel classes
-/src/*/Zed/*/Persistence/Propel/Base/*
-/src/*/Zed/*/Persistence/Propel/Map/*
-
-# OS
-.DS_Store
-
-# grunt stuff
-.grunt
-.sass-cache
-/node_modules/
-/tests/_output/*
-!/tests/_output/.gitkeep
diff --git a/Bundles/Library/CHANGELOG.md b/Bundles/Library/CHANGELOG.md
index 70856c1..81fbbb6 100644
--- a/Bundles/Library/CHANGELOG.md
+++ b/Bundles/Library/CHANGELOG.md
@@ -1,3 +1,5 @@
 # Library Changelog
 
+**This bundle is not continued at this point.**
+
 [Library Changelog](https://github.com/spryker/Library/releases)
diff --git a/Bundles/Library/CONTRIBUTING.md b/Bundles/Library/CONTRIBUTING.md
deleted file mode 100644
index 5eff362..0000000
--- a/Bundles/Library/CONTRIBUTING.md
+++ /dev/null
@@ -1,46 +0,0 @@
-CODE CONTRIBUTION LICENSE AGREEMENT
-
-BY DISPLAYING, PUBLISHING, UPLOADING OR PROMOTING (COLLECTIVELY, “POSTING”) SOURCE CODE (“SOURCE CODE”)
-TO SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER
-HRB 134310 (“WE”, “US” OR ”SPRYKER”), YOU AGREE TO THIS CODE CONTRIBUTION LICENSE AGREEMENT (THE “AGREEMENT”).
-
-You grant us and our affiliates an irrevocable, perpetual, worldwide, royalty-free, non-exclusive, unrestricted
-license and right to use, reproduce and store, disseminate and otherwise exploit, modify, delete from, add to,
-create derivative works of, publicly perform, publicly display, reproduce, exchange parts of Source Code or combine them with
-other Source Code, use in data networks and distribute with or without consideration and without limitations as to the
-number of items via all distribution channels (and to sublicense the foregoing rights through multiple tiers of licensees)
-of such Source Code and any other copyright protected material for any reason and in connection with advertising and
-promoting our software and/or our products in any media formats and through any channels now existing or developed in
-the future. The transfer and assignment of rights covers any usage and exploitation rights for any unknown types of use
-as well as with regard to any known types of use the right to unrestrictedly make publicly available and publish,
-irrespective of the medium including any editions and versions and grant simple or exclusive usage, exploitation or
-adaptation rights to third parties.
-
-Spryker may reject, refuse to post or delete any Source Code for any or no reason, including, without limitation.
-
-From time to time, we may remove the Source Code permanently or temporarily, provided that even if we do remove such
-Source Code, we shall have no obligation to cease our other uses of the Source Code as permitted above.
-
-You agree to be fully responsible for and to pay any and all royalties, fees, and any other monies owing any person or
-entity by reason of any Source Code posted by you.
-
-Spryker respects the intellectual property of others, and requires that you do the same. Your postings and the Source Code
-must not infringe any copyright, patent, trademark, trade secret or other proprietary rights or other rights of any person
-or entity and you may not upload, embed, post, email, transmit or otherwise make available Source Code, software or any other
-material that that infringes such rights.
-
-YOU GUARANTEE THAT: (I) YOU OWN THE SOURCE CODE POSTED BY YOU OR OTHERWISE HAVE THE RIGHT TO GRANT THE LICENSES AND RIGHTS
-SET FORTH ABOVE, AND (II) THE POSTING OF YOUR SOURCE CODE DOES NOT VIOLATE THE PRIVACY RIGHTS, PUBLICITY RIGHTS, CONTRACT RIGHTS,
-INTELLECTUAL PROPERTY OR ANY OTHER RIGHTS OF ANY PERSON OR ENTITY OR ANY APPLICABLE LAW.
-
-YOU AGREE TO INDEMNIFY AND HOLD SPRYKER, ITS SUBSIDIARIES, AND AFFILIATES, AND THEIR RESPECTIVE OFFICERS, AGENTS, PARTNERS
-AND EMPLOYEES, HARMLESS FROM ANY LOSS, LIABILITY, COST, EXPENSE, CLAIM OR DEMAND, INCLUDING WITHOUT LIMITATION, REASONABLE
-ATTORNEYS’ FEES, DUE OR RELATING TO OR ARISING OUT OF THE USE OF YOUR SOURCE CODE IN VIOLATION OF THIS AGREEMENT AND/OR
-ARISING FROM A BREACH OF ANY TERMS OF THIS AGREEMENT AND/OR ANY BREACH OF YOUR REPRESENTATIONS AND WARRANTIES SET FORTH IN
-THIS AGREEMENT AND/OR ARISING OUT OF OR RELATING TO ANY SOURCE CODE THAT YOU POST.
-
-This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
-on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
-
-This Agreement constitutes the entire agreement between you and us concerning Spryker’s use of the Source Code. This Agreement
-supersedes any prior verbal understanding between the parties. This Agreement may be amended only in a writing signed by an authorized officer of Spryker.
diff --git a/Bundles/Library/LICENSE b/Bundles/Library/LICENSE
deleted file mode 100644
index d376fd6..0000000
--- a/Bundles/Library/LICENSE
+++ /dev/null
@@ -1,40 +0,0 @@
-SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
-
-SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
-(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
-UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
-
-The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
-contains elements of open source components, to which different license terms apply respectively.
-These open source components are needed to be installed separately.
-
-Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
-the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
-to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
-
-Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
-from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
-disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
-Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
-derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
-
-THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
-BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
-BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
-DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
-THE POSSIBILITY OF SUCH DAMAGES.
-
-Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
-both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
-Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
-made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
-
-This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
-on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
-
-This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
-
-This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
-any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
-document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
-an authorized officer of Spryker.
diff --git a/Bundles/Library/README.md b/Bundles/Library/README.md
deleted file mode 100644
index d18b47f..0000000
--- a/Bundles/Library/README.md
+++ /dev/null
@@ -1,11 +0,0 @@
-# Library Bundle
-
-## Installation
-
-```
-composer require spryker/library
-```
-
-## Documentation
-
-[Documentation](http://spryker.github.io)
diff --git a/Bundles/Library/codeception.yml b/Bundles/Library/codeception.yml
deleted file mode 100644
index 9f409ef..0000000
--- a/Bundles/Library/codeception.yml
+++ /dev/null
@@ -1,17 +0,0 @@
-namespace: Library
-actor: Tester
-paths:
-    tests: tests
-    log: tests/_output
-    data: tests/_data
-    support: tests/_support
-    envs: tests/_envs
-settings:
-    bootstrap: _bootstrap.php
-    suite_class: \PHPUnit_Framework_TestSuite
-    colors: true
-    memory_limit: 1024M
-    log: true
-coverage:
-    enabled: true
-    whitelist: { include: ['src/*'] }
diff --git a/Bundles/Library/composer.json b/Bundles/Library/composer.json
deleted file mode 100644
index 494d1b6..0000000
--- a/Bundles/Library/composer.json
+++ /dev/null
@@ -1,57 +0,0 @@
-{
-  "name": "spryker/library",
-  "autoload": {
-    "psr-0": {
-      "Spryker": "src/"
-    }
-  },
-  "require": {
-    "paragonie/random_compat": "~1.2.1",
-    "spryker/application": "^2.7.1",
-    "spryker/config": "^2.2.1",
-    "spryker/elastica": "^2.0.0 || ^3.0.0",
-    "spryker/error-handler": "^1.0.0",
-    "spryker/event-journal": "^2.0.0",
-    "spryker/guzzle": "^2.1.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/log": "^2.0.0",
-    "spryker/monolog": "^2.0.0",
-    "spryker/new-relic": "^2.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/redis": "^2.0.0",
-    "spryker/sql-criteria-builder": "^1.0.0",
-    "spryker/storage": "^2.0.0",
-    "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^2.0.0",
-    "spryker/twig": "^2.1.0",
-    "spryker/util-encoding": "^1.0.0",
-    "spryker/util-network": "^1.0.0",
-    "spryker/util-sanitize": "^1.0.0",
-    "spryker/util-text": "^1.0.0",
-    "spryker/zed-request": "^2.0.0",
-    "spryker/zend": "^2.0.0"
-  },
-  "require-dev": {
-    "spryker/code-sniffer": "*",
-    "spryker/silex": "^2.0.0",
-    "spryker/testify": "*"
-  },
-  "description": "Library bundle",
-  "license": "proprietary",
-  "minimum-stability": "dev",
-  "prefer-stable": true,
-  "extra": {
-    "branch-alias": {
-      "dev-master": "2.0.x-dev"
-    }
-  },
-  "config": {
-    "sort-packages": true
-  },
-  "autoload-dev": {
-    "psr-0": {
-      "Functional": "tests/",
-      "Unit": "tests/"
-    }
-  }
-}
diff --git a/Bundles/Library/dependency.json b/Bundles/Library/dependency.json
deleted file mode 100644
index 4b49ccb..0000000
--- a/Bundles/Library/dependency.json
+++ /dev/null
@@ -1,10 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "UtilEncoding": "Required by deprecated code",
-    "Log": "Required by deprecated code"
-  },
-  "exclude": {
-    "Silex": "Required by tests"
-  }
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Application/Environment.php b/Bundles/Library/src/Spryker/Shared/Library/Application/Environment.php
deleted file mode 100644
index 80d4557..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Application/Environment.php
+++ /dev/null
@@ -1,262 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Application;
-
-use ErrorException;
-use Exception;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Error\ErrorHandler;
-use Spryker\Shared\Library\LibraryConstants;
-
-class Environment
-{
-
-    /**
-     * @deprecated Use \Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment instead.
-     *
-     * @var array
-     */
-    protected static $fatalErrors = [
-        E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR,
-    ];
-
-    /**
-     * @return void
-     */
-    public static function initialize()
-    {
-        date_default_timezone_set('UTC');
-
-        static::defineEnvironment();
-        static::defineStore();
-        static::defineApplication();
-        static::defineApplicationRootDir();
-        static::defineApplicationSourceDir();
-        static::defineApplicationStaticDir();
-        static::defineApplicationVendorDir();
-        static::defineApplicationDataDir();
-        static::initializeErrorHandlerEnvironment();
-
-        ini_set('display_errors', Config::get(LibraryConstants::DISPLAY_ERRORS, false));
-
-        $store = Store::getInstance();
-        $locale = current($store->getLocales());
-
-        self::initializeLocale($locale);
-        mb_internal_encoding('UTF-8');
-        mb_regex_encoding('UTF-8');
-    }
-
-    /**
-     * @return void
-     */
-    protected static function initializeErrorHandlerEnvironment()
-    {
-        $errorHandlerEnvironment = new ErrorHandlerEnvironment();
-        $errorHandlerEnvironment->initialize();
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineEnvironment()
-    {
-        if (!defined('APPLICATION_ENV')) {
-            $env = getenv('APPLICATION_ENV');
-            if (!$env) {
-                if (file_exists(APPLICATION_ROOT_DIR . '/config/Shared/console_env_local.php')) {
-                    $env = require APPLICATION_ROOT_DIR . '/config/Shared/console_env_local.php';
-                }
-            }
-            if (!$env) {
-                echo 'Environment variable APPLICATION_ENV must be set. You can do this by adding e.g. APPLICATION_ENV=development in front of this command or by adding a file "config/Shared/console_env_local.php" containing the current environment.';
-                exit(1);
-            }
-            define('APPLICATION_ENV', $env);
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineStore()
-    {
-        if (!defined('APPLICATION_STORE')) {
-            $store = getenv('APPLICATION_STORE');
-            if (!$store) {
-                if (file_exists(APPLICATION_ROOT_DIR . '/config/Shared/default_store.php')) {
-                    $store = require APPLICATION_ROOT_DIR . '/config/Shared/default_store.php';
-                }
-            }
-            if (!$store) {
-                echo 'Environment variable APPLICATION_STORE must be set. You can do this by adding e.g. APPLICATION_STORE=DE in front of this command or by adding a file "config/Shared/default_store.php" containing the current store.';
-                exit(1);
-            }
-            define('APPLICATION_STORE', $store);
-        }
-    }
-
-    /**
-     * @throws \Exception
-     *
-     * @return void
-     */
-    protected static function defineApplication()
-    {
-        if (!defined('APPLICATION')) {
-            if (!getenv('APPLICATION')) {
-                throw new Exception('Can not get APPLICATION environment variable');
-            }
-            define('APPLICATION', getenv('APPLICATION'));
-        }
-    }
-
-    /**
-     * @throws \Exception
-     *
-     * @return void
-     */
-    protected static function defineApplicationRootDir()
-    {
-        if (!defined('APPLICATION_ROOT_DIR')) {
-            if (!getenv('APPLICATION_ROOT_DIR')) {
-                throw new Exception('Can not get APPLICATION_ROOT_DIR environment variable');
-            }
-            define('APPLICATION_ROOT_DIR', getenv('APPLICATION_ROOT_DIR'));
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineApplicationSourceDir()
-    {
-        if (!defined('APPLICATION_SOURCE_DIR')) {
-            if (!getenv('APPLICATION_SOURCE_DIR')) {
-                define('APPLICATION_SOURCE_DIR', APPLICATION_ROOT_DIR . '/src');
-            } else {
-                define('APPLICATION_SOURCE_DIR', getenv('APPLICATION_SOURCE_DIR'));
-            }
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineApplicationStaticDir()
-    {
-        if (!defined('APPLICATION_STATIC_DIR')) {
-            if (!getenv('APPLICATION_STATIC_DIR')) {
-                define('APPLICATION_STATIC_DIR', APPLICATION_ROOT_DIR . '/static');
-            } else {
-                define('APPLICATION_STATIC_DIR', getenv('APPLICATION_STATIC_DIR'));
-            }
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineApplicationVendorDir()
-    {
-        if (!defined('APPLICATION_VENDOR_DIR')) {
-            if (!getenv('APPLICATION_VENDOR_DIR')) {
-                define('APPLICATION_VENDOR_DIR', APPLICATION_ROOT_DIR . '/vendor');
-            } else {
-                define('APPLICATION_VENDOR_DIR', getenv('APPLICATION_VENDOR_DIR'));
-            }
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected static function defineApplicationDataDir()
-    {
-        if (!defined('APPLICATION_DATA')) {
-            if (!getenv('APPLICATION_DATA')) {
-                define('APPLICATION_DATA', APPLICATION_ROOT_DIR . '/data');
-            } else {
-                define('APPLICATION_DATA', getenv('APPLICATION_DATA'));
-            }
-        }
-    }
-
-    /**
-     * ErrorHandler is initialized lazy as in most cases
-     * we will not use it
-     *
-     * @deprecated Use \Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment instead.
-     *
-     * @throws \ErrorException
-     *
-     * @return void
-     */
-    protected static function initializeErrorHandler()
-    {
-        $initErrorHandler = function () {
-            require_once __DIR__ . '/../Error/ErrorHandler.php';
-
-            return ErrorHandler::initialize();
-        };
-
-        $errorLevel = error_reporting();
-        set_error_handler(
-            function ($errno, $errstr, $errfile, $errline) use ($initErrorHandler) {
-                throw new ErrorException($errstr, 0, $errno, $errfile, $errline);
-            },
-            $errorLevel
-        );
-
-        set_exception_handler(
-            function ($exception) use ($initErrorHandler) {
-                $initErrorHandler()->handleException($exception);
-            }
-        );
-
-        register_shutdown_function(
-            function () use ($initErrorHandler) {
-                $lastError = error_get_last();
-                if ($lastError && in_array($lastError['type'], self::$fatalErrors)) {
-                    $initErrorHandler()->handleFatal();
-                }
-            }
-        );
-
-        assert_options(
-            ASSERT_CALLBACK,
-            function ($script, $line, $message) {
-                $parsedMessage = trim(preg_replace('~^.*/\*(.*)\*/~i', '$1', $message));
-                $message = $parsedMessage ?: 'Assertion failed: ' . $message;
-                throw new ErrorException($message, 0, 0, $script, $line);
-            }
-        );
-    }
-
-    /**
-     * We set LC_NUMERIC hard to en_US so numeric conversion is always the same to avoid decimal point problems
-     *
-     * @param string $currentLocale
-     *
-     * @return void
-     */
-    public static function initializeLocale($currentLocale)
-    {
-        $locale = $currentLocale . '.UTF-8';
-
-        setlocale(LC_COLLATE, $locale, $currentLocale);
-        setlocale(LC_CTYPE, $locale, $currentLocale);
-        setlocale(LC_MONETARY, $locale, $currentLocale);
-        setlocale(LC_TIME, $locale, $currentLocale);
-        setlocale(LC_MESSAGES, $locale, $currentLocale);
-        setlocale(LC_NUMERIC, 'en_US.UTF-8', 'en_US');
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Application/TestEnvironment.php b/Bundles/Library/src/Spryker/Shared/Library/Application/TestEnvironment.php
deleted file mode 100644
index d1ff369..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Application/TestEnvironment.php
+++ /dev/null
@@ -1,62 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Application;
-
-use ErrorException;
-
-/**
- * @deprecated Not needed anymore
- */
-class TestEnvironment
-{
-
-    /**
-     * @return void
-     */
-    public static function initialize()
-    {
-        if (PHP_SAPI === 'cli') {
-            defined('SYSTEM_UNDER_TEST') || define('SYSTEM_UNDER_TEST', getenv('SYSTEM_UNDER_TEST') === '1' ? true : false);
-        } elseif (isset($_GET['SYSTEM_UNDER_TEST']) && $_GET['SYSTEM_UNDER_TEST'] === 1) {
-            defined('SYSTEM_UNDER_TEST') || define('SYSTEM_UNDER_TEST', 1);
-        } else {
-            defined('SYSTEM_UNDER_TEST') || define('SYSTEM_UNDER_TEST', 0);
-        }
-    }
-
-    /**
-     * @throws \ErrorException
-     *
-     * @return void
-     */
-    public static function forceSystemUnderTest()
-    {
-        if (defined('SYSTEM_UNDER_TEST') && SYSTEM_UNDER_TEST === 1) {
-            return;
-        }
-
-        if (defined('SYSTEM_UNDER_TEST') && SYSTEM_UNDER_TEST === 0) {
-            throw new ErrorException('Cannot change to Test-Mode after a previous initialisation.');
-        }
-
-        define('SYSTEM_UNDER_TEST', 1);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isSystemUnderTest()
-    {
-        if (defined('SYSTEM_UNDER_TEST') && SYSTEM_UNDER_TEST === 1) {
-            return true;
-        }
-
-        return false;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Application/Version.php b/Bundles/Library/src/Spryker/Shared/Library/Application/Version.php
deleted file mode 100644
index 1cb1bd7..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Application/Version.php
+++ /dev/null
@@ -1,94 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Application;
-
-class Version
-{
-
-    /**
-     * @var string
-     */
-    protected static $content;
-
-    /**
-     * @return string
-     */
-    public static function getRevTxt()
-    {
-        if (empty(self::$content)) {
-            self::$content = 'no rev.txt';
-            $path = APPLICATION_SOURCE_DIR . '/../rev.txt';
-            if (file_exists($path)) {
-                self::$content = file_get_contents($path);
-            }
-        }
-
-        return self::$content;
-    }
-
-    /**
-     * @return bool
-     */
-    public function hasData()
-    {
-        $content = self::getRevTxt();
-
-        return $content !== 'no rev.txt';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDate()
-    {
-        return $this->extract('Date');
-    }
-
-    /**
-     * @param string $type
-     *
-     * @return string
-     */
-    protected function extract($type)
-    {
-        if (preg_match('~' . $type . ': (.+)~', self::getRevTxt(), $matches)) {
-            return $matches[1];
-        }
-
-        return '';
-    }
-
-    /**
-     * @return string
-     */
-    public function getPath()
-    {
-        return $this->extract('Path');
-    }
-
-    /**
-     * @return string
-     */
-    public function getRevision()
-    {
-        return $this->extract('Revision');
-    }
-
-    /**
-     * @return array
-     */
-    public function toArray()
-    {
-        return [
-            'Date' => $this->getDate(),
-            'Path' => $this->getPath(),
-            'Revision' => $this->getRevision(),
-        ];
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Autoloader.php b/Bundles/Library/src/Spryker/Shared/Library/Autoloader.php
deleted file mode 100644
index 20d300e..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Autoloader.php
+++ /dev/null
@@ -1,225 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Exception;
-
-class Autoloader
-{
-
-    /**
-     * @var array
-     */
-    private static $allowedNamespaces = [
-        'Spryker',
-    ];
-
-    /**
-     * @var self
-     */
-    private static $instance;
-
-    /**
-     * @var string
-     */
-    private $application;
-
-    /**
-     * @var bool
-     */
-    private $disableApplicationCheck;
-
-    /**
-     * @var array
-     */
-    private $classMap = [];
-
-    /**
-     * @param string $rootDirectory
-     * @param string $vendorDirectory
-     * @param string|null $application
-     * @param bool $disableApplicationCheck
-     */
-    private function __construct($rootDirectory, $vendorDirectory, $application = null, $disableApplicationCheck = false)
-    {
-        $this->application = $application;
-        $this->rootDirectory = $rootDirectory;
-        $this->disableApplicationCheck = $disableApplicationCheck;
-
-        require_once $vendorDirectory . '/autoload.php';
-    }
-
-    /**
-     * @param string $rootDirectory
-     * @param string $vendorDirectory
-     * @param string|null $application
-     * @param bool $disableApplicationCheck
-     *
-     * @return void
-     */
-    public static function register($rootDirectory, $vendorDirectory, $application = null, $disableApplicationCheck = false)
-    {
-        if (!self::$instance) {
-            self::$instance = new self($rootDirectory, $vendorDirectory, $application, $disableApplicationCheck);
-            spl_autoload_register([self::$instance, 'autoload'], true, true);
-        }
-    }
-
-    /**
-     * @return $this
-     */
-    public static function unregister()
-    {
-        if (self::$instance) {
-            spl_autoload_unregister([self::$instance, 'autoload']);
-            self::$instance = null;
-        }
-    }
-
-    /**
-     * Transform resource name into its relative resource path representation.
-     *
-     * @param string $resourceParts
-     *
-     * @return string Resource relative path.
-     */
-    private function getResourceRelativePath($resourceParts)
-    {
-        $bundle = $resourceParts[2];
-        if (defined('APPLICATION_STORE')) {
-            $bundle = str_replace(APPLICATION_STORE, '', $bundle);
-        }
-        $relativeResourcePath = '/' . $bundle . '/src/' . implode(DIRECTORY_SEPARATOR, $resourceParts);
-
-        return $relativeResourcePath . '.php';
-    }
-
-    /**
-     * Transform relative path into its absolute resource path representation.
-     *
-     * @param string $relativePath
-     *
-     * @return string|null Resource relative path.
-     */
-    private function getResourceAbsolutePath($relativePath)
-    {
-        $absolutePath = $this->rootDirectory . DIRECTORY_SEPARATOR . $relativePath;
-
-        return $absolutePath;
-    }
-
-    /**
-     * Try to load a Yves or Zed class
-     * with fallback to composer
-     *
-     * @param string $resourceName
-     *
-     * @return bool
-     */
-    protected function autoload($resourceName)
-    {
-        $file = $this->findFile($resourceName);
-        if ($file !== false) {
-            include $file;
-        } else {
-            $this->classMap[$resourceName] = false;
-
-            return false;
-        }
-    }
-
-    /**
-     * @param string $resourceName
-     *
-     * @return bool|string
-     */
-    protected function findFile($resourceName)
-    {
-        // We always work with FQCN in our context
-        // php bug from 5.3.0 to 5.3.2
-        $resourceName = ltrim($resourceName, '\\');
-
-        if (isset($this->classMap[$resourceName])) {
-            return $this->classMap[$resourceName];
-        }
-
-        if (!$this->isLoadingAllowed($resourceName)) {
-            return false;
-        }
-
-        $resourceName = str_replace('_', '\\', $resourceName);
-        $resourceParts = explode('\\', $resourceName);
-
-        if (!$this->disableApplicationCheck) {
-            $this->checkApplication($resourceParts);
-        }
-
-        $relativePath = $this->getResourceRelativePath($resourceParts);
-        $absolutePath = $this->getResourceAbsolutePath($relativePath);
-
-        if (file_exists($absolutePath)) {
-            return $absolutePath;
-        }
-
-        return false;
-    }
-
-    /**
-     * @param string $resourceName
-     *
-     * @return bool
-     */
-    private function isLoadingAllowed($resourceName)
-    {
-        foreach (self::$allowedNamespaces as $ns) {
-            $namespaceLength = strlen($ns);
-            if (substr($resourceName, 0, $namespaceLength) !== $ns) {
-                continue;
-            }
-            if ($resourceName[$namespaceLength] === '_' || $resourceName[$namespaceLength] === '\\') {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * @param string $namespace
-     *
-     * @return void
-     */
-    public static function allowNamespace($namespace)
-    {
-        if (!in_array($namespace, self::$allowedNamespaces)) {
-            self::$allowedNamespaces[] = $namespace;
-        }
-    }
-
-    /**
-     * Checks if the class is allowed inside Yves or Zed
-     *
-     * @param array $resourceParts
-     *
-     * @throws \Exception
-     *
-     * @return void
-     */
-    protected function checkApplication($resourceParts)
-    {
-        if (!$this->application) {
-            return;
-        }
-
-        $app = ucfirst(strtolower($this->application));
-        if (($resourceParts[1] !== $app && ($resourceParts[1] === 'Yves' || $resourceParts[1] === 'Zed')) && $resourceParts[1] !== 'Shared') {
-            throw new Exception('You are not allowed to load this class in your app. (' . implode('\\', $resourceParts) . ')');
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilder.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilder.php
deleted file mode 100644
index f2e3924..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilder.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator\Builder;
-
-use Propel\Runtime\ActiveQuery\ModelCriteria;
-use Spryker\Shared\Library\BatchIterator\PropelBatchIterator;
-
-class BatchIteratorBuilder implements BatchIteratorBuilderInterface
-{
-
-    /**
-     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
-     * @param int $chunkSize
-     *
-     * @return \Spryker\Shared\Library\BatchIterator\PropelBatchIterator
-     */
-    public function buildPropelBatchIterator(ModelCriteria $query, $chunkSize = 100)
-    {
-        return new PropelBatchIterator($query, $chunkSize);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilderInterface.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilderInterface.php
deleted file mode 100644
index 1fc7c37..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/Builder/BatchIteratorBuilderInterface.php
+++ /dev/null
@@ -1,22 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator\Builder;
-
-use Propel\Runtime\ActiveQuery\ModelCriteria;
-
-interface BatchIteratorBuilderInterface
-{
-
-    /**
-     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
-     *
-     * @return \Spryker\Shared\Library\BatchIterator\PropelBatchIterator
-     */
-    public function buildPropelBatchIterator(ModelCriteria $query);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CountableIteratorInterface.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CountableIteratorInterface.php
deleted file mode 100644
index 97ff8d7..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CountableIteratorInterface.php
+++ /dev/null
@@ -1,15 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use Countable;
-use Iterator;
-
-interface CountableIteratorInterface extends Iterator, Countable
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CsvBatchIterator.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CsvBatchIterator.php
deleted file mode 100644
index 16e0be5..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/CsvBatchIterator.php
+++ /dev/null
@@ -1,139 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use Spryker\Shared\Library\Reader\Csv\CsvReader;
-
-class CsvBatchIterator implements CountableIteratorInterface
-{
-
-    /**
-     * @var \Spryker\Shared\Library\Reader\Csv\CsvReaderInterface
-     */
-    protected $csvReader;
-
-    /**
-     * @var string
-     */
-    protected $csvFilename;
-
-    /**
-     * @var int
-     */
-    protected $offset = 0;
-
-    /**
-     * @var int
-     */
-    protected $chunkSize = 100;
-
-    /**
-     * @var array
-     */
-    protected $batchData = [];
-
-    /**
-     * @param string $filename
-     * @param int $chunkSize
-     */
-    public function __construct($filename, $chunkSize = 10)
-    {
-        $this->csvFilename = $filename;
-        $this->chunkSize = $chunkSize;
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Reader\Csv\CsvReaderInterface
-     */
-    protected function getCsvReader()
-    {
-        if ($this->csvReader === null) {
-            $this->csvReader = new CsvReader();
-            $this->csvReader->load($this->csvFilename);
-        }
-
-        return $this->csvReader;
-    }
-
-    /**
-     * @return void
-     */
-    protected function loadChunk()
-    {
-        $this->batchData = [];
-
-        $batchSize = $this->offset + $this->chunkSize;
-        if ($batchSize > $this->getCsvReader()->getTotal()) {
-            $batchSize = $this->getCsvReader()->getTotal();
-        }
-
-        while ($this->getCsvReader()->valid()) {
-            $this->batchData[] = $this->getCsvReader()->read();
-            $this->offset++;
-
-            if ($this->offset >= $batchSize) {
-                break;
-            }
-        }
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function current()
-    {
-        return $this->batchData;
-    }
-
-    /**
-     * {@inheritdoc}
-     * x
-     * @return void
-     */
-    public function next()
-    {
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function key()
-    {
-        return $this->offset;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function valid()
-    {
-        return !empty($this->batchData);
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        $this->offset = 0;
-        $this->getCsvReader()->rewind();
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function count()
-    {
-        return $this->getCsvReader()->getTotal();
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PdoBatchIterator.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PdoBatchIterator.php
deleted file mode 100644
index ca4056b..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PdoBatchIterator.php
+++ /dev/null
@@ -1,134 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use PDO;
-use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
-use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
-
-class PdoBatchIterator implements CountableIteratorInterface
-{
-
-    /**
-     * @var \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface
-     */
-    protected $criteriaBuilder;
-
-    /**
-     * @var \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface
-     */
-    protected $queryContainer;
-
-    /**
-     * @var int
-     */
-    protected $offset = 0;
-
-    /**
-     * @var int
-     */
-    protected $chunkSize = 100;
-
-    /**
-     * @var array
-     */
-    protected $batchData = [];
-
-    /**
-     * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
-     * @param \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface $connection
-     * @param int $chunkSize
-     */
-    public function __construct(CriteriaBuilderInterface $criteriaBuilder, QueryContainerInterface $connection, $chunkSize = 100)
-    {
-        $this->criteriaBuilder = $criteriaBuilder;
-        $this->queryContainer = $connection;
-        $this->chunkSize = $chunkSize;
-    }
-
-    /**
-     * @return void
-     */
-    protected function loadChunk()
-    {
-        $this->criteriaBuilder->setOffset($this->offset);
-        $this->criteriaBuilder->setLimit($this->chunkSize);
-
-        $sqlPart = $this->criteriaBuilder->toSqlPart();
-
-        $st = $this->queryContainer
-            ->getConnection()
-            ->prepare($sqlPart->getSql());
-        $st->execute($sqlPart->getParameters());
-
-        $this->batchData = $st->fetchAll(PDO::FETCH_ASSOC);
-        $this->offset += $this->chunkSize;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function current()
-    {
-        return $this->batchData;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function next()
-    {
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function key()
-    {
-        return $this->offset;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function valid()
-    {
-        return count($this->batchData);
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        $this->offset = 0;
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function count()
-    {
-        $this->criteriaBuilder->setLimit(null);
-        $this->criteriaBuilder->setOffset(null);
-        $sqlPart = $this->criteriaBuilder->toSqlPart();
-
-        $countSql = 'SELECT COUNT(*) cnt FROM (' . $sqlPart->getSql() . ') AS v';
-        $st = $this->queryContainer->getConnection()->prepare($countSql);
-        $st->execute($sqlPart->getParameters());
-
-        return $st->fetchColumn();
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PropelBatchIterator.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PropelBatchIterator.php
deleted file mode 100644
index 8d9f38e..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/PropelBatchIterator.php
+++ /dev/null
@@ -1,114 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use Propel\Runtime\ActiveQuery\ModelCriteria;
-
-class PropelBatchIterator implements CountableIteratorInterface
-{
-
-    /**
-     * @var int
-     */
-    protected $offset = 0;
-
-    /**
-     * @var int
-     */
-    protected $chunkSize = 100;
-
-    /**
-     * @var \Propel\Runtime\ActiveQuery\ModelCriteria
-     */
-    protected $query;
-
-    /**
-     * @var array
-     */
-    protected $currentDataSet = [];
-
-    /**
-     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
-     * @param int $chunkSize
-     */
-    public function __construct(ModelCriteria $query, $chunkSize = 100)
-    {
-        $this->query = $query;
-        $this->chunkSize = $chunkSize;
-    }
-
-    /**
-     * @return void
-     */
-    protected function loadChunk()
-    {
-        $this->query->setOffset($this->offset);
-        $this->query->setLimit($this->chunkSize);
-        $this->currentDataSet = $this->query->find();
-
-        $this->offset += $this->chunkSize;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function current()
-    {
-        return $this->currentDataSet;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function next()
-    {
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function key()
-    {
-        return $this->offset;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function valid()
-    {
-        return count($this->currentDataSet);
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        $this->offset = 0;
-        $this->loadChunk();
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function count()
-    {
-        $query = clone $this->query;
-        $query->setLimit(-1);
-        $query->setOffset(-1);
-
-        return $query->count();
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/XmlBatchIterator.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/XmlBatchIterator.php
deleted file mode 100644
index 398c73b..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/XmlBatchIterator.php
+++ /dev/null
@@ -1,127 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use Spryker\Shared\Library\Exception\ResourceNotFoundException;
-
-class XmlBatchIterator implements CountableIteratorInterface
-{
-
-    /**
-     * @var \Symfony\Component\Yaml\Yaml
-     */
-    protected $xmlReader;
-
-    /**
-     * @var string
-     */
-    protected $xmlFilename;
-
-    /**
-     * @var string
-     */
-    protected $rootNodeName;
-
-    /**
-     * @var int
-     */
-    protected $offset = 0;
-
-    /**
-     * @var int
-     */
-    protected $chunkSize = -1;
-
-    /**
-     * @var array
-     */
-    protected $batchData;
-
-    /**
-     * @param string $filename
-     * @param int $chunkSize
-     */
-    public function __construct($filename, $rootNodeName, $chunkSize = -1)
-    {
-        $this->xmlFilename = $filename;
-        $this->rootNodeName = $rootNodeName;
-        $this->chunkSize = $chunkSize;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function current()
-    {
-        return $this->batchData;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function next()
-    {
-        if ($this->batchData === null) {
-            try {
-                $xml = simplexml_load_string(
-                    file_get_contents($this->xmlFilename),
-                    'SimpleXMLElement',
-                    LIBXML_NOCDATA
-                );
-
-                $this->batchData = json_decode(
-                    json_encode($xml), true
-                );
-
-                $this->batchData = $this->batchData[$this->rootNodeName];
-            } catch (\Exception $exception) {
-                $this->batchData = [];
-            }
-        }
-
-        $this->offset++;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function key()
-    {
-        return $this->offset;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function valid()
-    {
-        return $this->batchData !== null && $this->offset === 0;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        $this->offset = 0;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function count()
-    {
-        $this->next();
-        return count($this->batchData);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/YamlBatchIterator.php b/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/YamlBatchIterator.php
deleted file mode 100644
index 2516b5b..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/BatchIterator/YamlBatchIterator.php
+++ /dev/null
@@ -1,131 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\BatchIterator;
-
-use Spryker\Shared\Library\Exception\ResourceNotFoundException;
-use Symfony\Component\Yaml\Yaml;
-
-class YamlBatchIterator implements CountableIteratorInterface
-{
-
-    /**
-     * @var \Symfony\Component\Yaml\Yaml
-     */
-    protected $yamlReader;
-
-    /**
-     * @var string
-     */
-    protected $yamlFilename;
-
-    /**
-     * @var int
-     */
-    protected $offset = 0;
-
-    /**
-     * @var int
-     */
-    protected $chunkSize = -1;
-
-    /**
-     * @var array
-     */
-    protected $batchData;
-
-    /**
-     * @param string $filename
-     * @param int $chunkSize
-     */
-    public function __construct($filename, $chunkSize = -1)
-    {
-        $this->yamlFilename = $filename;
-        $this->chunkSize = $chunkSize;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Library\Exception\ResourceNotFoundException
-     *
-     * @return \Symfony\Component\Yaml\Yaml
-     */
-    protected function getYamlReader()
-    {
-        if ($this->yamlReader === null) {
-            $this->yamlReader = new Yaml();
-
-            if (!is_file($this->yamlFilename) || !is_readable($this->yamlFilename)) {
-                throw new ResourceNotFoundException(sprintf(
-                    'Could not open Yaml file "%s"',
-                    $this->yamlFilename
-                ));
-            }
-        }
-
-        return $this->yamlReader;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function current()
-    {
-        return $this->batchData;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function next()
-    {
-        if ($this->batchData === null) {
-            $this->batchData = $this->getYamlReader()->parse(
-                file_get_contents($this->yamlFilename)
-            );
-        }
-
-        $this->offset++;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function key()
-    {
-        return $this->offset;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function valid()
-    {
-        return $this->batchData !== null && $this->offset === 0;
-    }
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        $this->offset = 0;
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function count()
-    {
-        $this->next();
-        return count($this->batchData);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Cloud.php b/Bundles/Library/src/Spryker/Shared/Library/Cloud.php
deleted file mode 100644
index fae9e0c..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Cloud.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Spryker\Shared\Config\Config;
-
-class Cloud
-{
-
-    /**
-     * @var bool
-     */
-    protected static $cloudConfigEnabled;
-
-    /**
-     * @return bool
-     */
-    public static function isCloudEnabled()
-    {
-        if (static::$cloudConfigEnabled === null) {
-            static::init();
-        }
-
-        if (static::$cloudConfigEnabled) {
-            return static::$cloudConfigEnabled === true;
-        } else {
-            return false;
-        }
-    }
-
-    /**
-     * @return void
-     */
-    public static function init()
-    {
-        static::$cloudConfigEnabled = Config::get(LibraryConstants::CLOUD_ENABLED);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isCloudStorageEnabled()
-    {
-        if (!static::isCloudEnabled()) {
-            return false;
-        }
-
-        return Config::get(LibraryConstants::CLOUD_OBJECT_STORAGE_ENABLED) === true;
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isCloudStorageCdnEnabled()
-    {
-        if (!static::isCloudStorageEnabled()) {
-            return false;
-        }
-
-        return Config::get(LibraryConstants::CLOUD_CDN_ENABLED) === true;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Collection/Collection.php b/Bundles/Library/src/Spryker/Shared/Library/Collection/Collection.php
deleted file mode 100644
index db06362..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Collection/Collection.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Collection;
-
-use Everon\Component\Collection\Collection as EveronCollection;
-
-class Collection extends EveronCollection implements CollectionInterface
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Collection/CollectionInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Collection/CollectionInterface.php
deleted file mode 100644
index 9875563..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Collection/CollectionInterface.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Collection;
-
-use Everon\Component\Collection\CollectionInterface as EveronCollectionInterface;
-
-interface CollectionInterface extends EveronCollectionInterface
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Collection/LazyCollection.php b/Bundles/Library/src/Spryker/Shared/Library/Collection/LazyCollection.php
deleted file mode 100644
index e47145c..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Collection/LazyCollection.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Collection;
-
-use Everon\Component\Collection\Lazy as EveronLazyCollection;
-
-class LazyCollection extends EveronLazyCollection
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/AbstractObject.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/AbstractObject.php
deleted file mode 100644
index ad4220e..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/AbstractObject.php
+++ /dev/null
@@ -1,76 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-abstract class AbstractObject implements ObjectInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $values;
-
-    /**
-     * @param array|null $values
-     */
-    public function __construct(array $values = null)
-    {
-        if ($values) {
-            $this->fromArray($values);
-        }
-    }
-
-    /**
-     * @return array
-     */
-    public function toArray()
-    {
-        $values = $this->values;
-
-        foreach ($values as $key => $value) {
-            if ($value === null || is_array($value) && empty($value)) {
-                unset($values[$key]);
-                continue;
-            }
-
-            if (is_array($value)) {
-                foreach ($value as $subKey => $subValue) {
-                    if ($subValue === null || is_array($subValue) && empty($subValue)) {
-                        unset($value[$subKey]);
-                        continue;
-                    }
-
-                    if (is_object($subValue) && method_exists($subValue, 'toArray')) {
-                        /** @var \Spryker\Shared\Library\Communication\ObjectInterface $subValue */
-                        $value[$subKey] = $subValue->toArray();
-                    }
-                }
-                if (empty($value)) {
-                    unset($values[$key]);
-                } else {
-                    $values[$key] = $value;
-                }
-                continue;
-            }
-        }
-
-        return $values;
-    }
-
-    /**
-     * @param array $values
-     *
-     * @return void
-     */
-    public function fromArray(array $values)
-    {
-        $values = array_intersect_key($values, $this->values);
-        $this->values = array_merge($this->values, $values);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/EmbeddedTransferInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/EmbeddedTransferInterface.php
deleted file mode 100644
index f491404..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/EmbeddedTransferInterface.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-use Spryker\Shared\Transfer\TransferInterface;
-
-interface EmbeddedTransferInterface
-{
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transferObject);
-
-    /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function getTransfer();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/Message.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/Message.php
deleted file mode 100644
index 4d43f1d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/Message.php
+++ /dev/null
@@ -1,61 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-class Message extends AbstractObject
-{
-
-    /**
-     * @var array
-     */
-    protected $values = [
-        'data' => [],
-        'message' => null,
-    ];
-
-    /**
-     * @return array
-     */
-    public function getData()
-    {
-        return $this->values['data'];
-    }
-
-    /**
-     * @param array $data
-     *
-     * @return $this
-     */
-    public function setData($data)
-    {
-        $this->values['data'] = $data;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getMessage()
-    {
-        return $this->values['message'];
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return $this
-     */
-    public function setMessage($message)
-    {
-        $this->values['message'] = $message;
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/ObjectInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/ObjectInterface.php
deleted file mode 100644
index 31676e6..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/ObjectInterface.php
+++ /dev/null
@@ -1,25 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-interface ObjectInterface
-{
-
-    /**
-     * @param array $values
-     *
-     * @return void
-     */
-    public function fromArray(array $values);
-
-    /**
-     * @return array
-     */
-    public function toArray();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/Request.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/Request.php
deleted file mode 100644
index 52679d6..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/Request.php
+++ /dev/null
@@ -1,198 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-use Spryker\Shared\Transfer\TransferInterface;
-
-class Request extends AbstractObject implements EmbeddedTransferInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $values = [
-        'host' => null,
-        'metaTransfers' => [],
-        'password' => null,
-        'sessionId' => null,
-        'time' => null,
-        'transfer' => null,
-        'transferClassName' => null,
-        'username' => null,
-    ];
-
-    /**
-     * @return string
-     */
-    public function getHost()
-    {
-        return $this->values['host'];
-    }
-
-    /**
-     * @param string $host
-     *
-     * @return $this
-     */
-    public function setHost($host)
-    {
-        $this->values['host'] = $host;
-
-        return $this;
-    }
-
-    /**
-     * @param string $name
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    public function getMetaTransfer($name)
-    {
-        if (isset($this->values['metaTransfers'][$name])) {
-            $className = $this->values['metaTransfers'][$name]['className'];
-            $transfer = $this->createTransferObject($className);
-            $transfer->fromArray($this->values['metaTransfers'][$name]['data']);
-
-            return $transfer;
-        }
-
-        return null;
-    }
-
-    /**
-     * @param string $name
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return $this
-     */
-    public function addMetaTransfer($name, TransferInterface $transferObject)
-    {
-        $this->values['metaTransfers'][$name] = [
-            'data' => $transferObject->toArray(false),
-            'className' => get_class($transferObject),
-        ];
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getPassword()
-    {
-        return $this->values['password'];
-    }
-
-    /**
-     * @param string $password
-     *
-     * @return $this
-     */
-    public function setPassword($password)
-    {
-        $this->values['password'] = $password;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getSessionId()
-    {
-        return $this->values['sessionId'];
-    }
-
-    /**
-     * @param string $sessionId
-     *
-     * @return $this
-     */
-    public function setSessionId($sessionId)
-    {
-        $this->values['sessionId'] = $sessionId;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getTime()
-    {
-        return $this->values['time'];
-    }
-
-    /**
-     * @param string $time
-     *
-     * @return $this
-     */
-    public function setTime($time)
-    {
-        $this->values['time'] = $time;
-
-        return $this;
-    }
-
-    /**
-     * @deprecated Not used anymore.
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    public function getTransfer()
-    {
-        return null;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transferObject)
-    {
-        $this->values['transfer'] = $transferObject->toArray(false);
-        $this->values['transferClassName'] = get_class($transferObject);
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getUsername()
-    {
-        return $this->values['username'];
-    }
-
-    /**
-     * @param string $username
-     *
-     * @return $this
-     */
-    public function setUsername($username)
-    {
-        $this->values['username'] = $username;
-
-        return $this;
-    }
-
-    /**
-     * @param string $transferClassName
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    protected function createTransferObject($transferClassName)
-    {
-        $transfer = new $transferClassName();
-
-        return $transfer;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Communication/Response.php b/Bundles/Library/src/Spryker/Shared/Library/Communication/Response.php
deleted file mode 100644
index d584229..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Communication/Response.php
+++ /dev/null
@@ -1,190 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Communication;
-
-use Spryker\Shared\Transfer\TransferInterface;
-
-class Response extends AbstractObject implements EmbeddedTransferInterface
-{
-
-    /**
-     * @var array
-     */
-    protected $values = [
-        'messages' => [],
-        'errorMessages' => [],
-        'success' => true,
-        'transfer' => null,
-        'transferClassName' => null,
-    ];
-
-    /**
-     * @param array $values
-     *
-     * @return void
-     */
-    public function fromArray(array $values)
-    {
-        parent::fromArray($values);
-
-        foreach ($this->values['messages'] as $key => $message) {
-            $this->values['messages'][$key] = new Message($message);
-        }
-
-        foreach ($this->values['errorMessages'] as $key => $message) {
-            $this->values['errorMessages'][$key] = new Message($message);
-        }
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Communication\Message[]
-     */
-    public function getErrorMessages()
-    {
-        return $this->values['errorMessages'];
-    }
-
-    /**
-     * @param string $messageString
-     *
-     * @return bool
-     */
-    public function hasErrorMessage($messageString)
-    {
-        $errorMessages = $this->getErrorMessages();
-        /** @var \Spryker\Shared\Library\Communication\Message $errorMessage */
-        foreach ($errorMessages as $errorMessage) {
-            if ($errorMessage->getMessage() === $messageString) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * @param array $errorMessages
-     *
-     * @return $this
-     */
-    public function addErrorMessages(array $errorMessages)
-    {
-        foreach ($errorMessages as $errorMessage) {
-            $this->addErrorMessage($errorMessage);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @param \Spryker\Shared\Library\Communication\Message $errorMessage
-     *
-     * @return $this
-     */
-    public function addErrorMessage(Message $errorMessage)
-    {
-        $this->values['errorMessages'][] = $errorMessage;
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Communication\Message[]
-     */
-    public function getMessages()
-    {
-        return $this->values['messages'];
-    }
-
-    /**
-     * @param string $messageString
-     *
-     * @return bool
-     */
-    public function hasMessage($messageString)
-    {
-        $messages = $this->getMessages();
-        foreach ($messages as $message) {
-            if ($message->getMessage() === $messageString) {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * @param \Spryker\Shared\Library\Communication\Message $message
-     *
-     * @return $this
-     */
-    public function addMessage(Message $message)
-    {
-        $this->values['messages'][] = $message;
-
-        return $this;
-    }
-
-    /**
-     * @param array $messages
-     *
-     * @return $this
-     */
-    public function addMessages(array $messages)
-    {
-        foreach ($messages as $message) {
-            $this->addMessage($message);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @return bool
-     */
-    public function isSuccess()
-    {
-        return $this->values['success'];
-    }
-
-    /**
-     * @param bool $success
-     *
-     * @return $this
-     */
-    public function setSuccess($success)
-    {
-        $this->values['success'] = $success;
-
-        return $this;
-    }
-
-    /**
-     * @deprecated Not used anymore.
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
-     */
-    public function getTransfer()
-    {
-        return null;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transferObject)
-    {
-        $this->values['transfer'] = $transferObject->toArray(false);
-        $this->values['transferClassName'] = get_class($transferObject);
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Context.php b/Bundles/Library/src/Spryker/Shared/Library/Context.php
deleted file mode 100644
index f82f8d9..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Context.php
+++ /dev/null
@@ -1,251 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use DateTime;
-use DateTimeZone;
-use Exception;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Exception\UnknownContextPropertyException;
-
-class Context
-{
-
-    const CONTEXT_SHARED = '*';
-    const CONTEXT_YVES = 'yves';
-    const CONTEXT_ZED = 'zed';
-
-    /**
-     * @var array|null
-     */
-    protected static $contexts = null;
-
-    /**
-     * @var array
-     */
-    protected static $instances = [];
-
-    /**
-     * @var string
-     */
-    protected static $defaultContext = self::CONTEXT_SHARED;
-
-    /**
-     * @var string|null
-     */
-    protected $_contextName = null;
-
-    /**
-     * Creates Context object based on given context name.
-     *
-     * @param string|\Spryker\Shared\Library\Context|null $context
-     *
-     * @throws \Exception
-     *
-     * @return \Spryker\Shared\Library\Context
-     */
-    public static function getInstance($context = null)
-    {
-        if ($context instanceof self) {
-            return $context;
-        }
-        if (empty($context)) {
-            $context = static::$defaultContext;
-        }
-        static::loadContexts();
-        if (!isset(static::$contexts[$context])) {
-            throw new Exception('Incorrect context: ' . $context);
-        }
-        if (!isset(static::$instances[$context])) {
-            static::$instances[$context] = new self($context);
-        }
-
-        return static::$instances[$context];
-    }
-
-    /**
-     * Sets default context, should be used only while bootstrapping the system
-     *
-     * @param string|\Spryker\Shared\Library\Context $context
-     *
-     * @return void
-     */
-    public static function setDefaultContext($context = self::CONTEXT_SHARED)
-    {
-        if ($context instanceof self) {
-            static::$defaultContext = $context->_contextName;
-        } else {
-            static::$defaultContext = $context;
-        }
-    }
-
-    /**
-     * @return string
-     */
-    public static function getDefaultContext()
-    {
-        return static::$defaultContext;
-    }
-
-    /**
-     * @param string $contextName
-     */
-    protected function __construct($contextName)
-    {
-        $this->_contextName = $contextName;
-    }
-
-    /**
-     * Loads and builds available contexts.
-     *
-     * @return void
-     */
-    protected static function loadContexts()
-    {
-        if (static::$contexts === null) {
-            $contexts = Store::getInstance()->getContexts();
-            if (isset($contexts['*'])) {
-                $defaults = is_array($contexts['*']) ? $contexts['*'] : [];
-            } else {
-                $defaults = [];
-            }
-            foreach ($contexts as $k => $v) {
-                $contexts[$k] = array_replace_recursive($defaults, $v);
-            }
-            static::$contexts = $contexts;
-        }
-    }
-
-    /**
-     * @param string $name
-     *
-     * @return bool
-     */
-    public function __isset($name)
-    {
-        return $this->has($name);
-    }
-
-    /**
-     * @param string $name
-     *
-     * @return mixed
-     */
-    public function __get($name)
-    {
-        return $this->get($name);
-    }
-
-    /**
-     * Checks if value exists in context.
-     *
-     * @param string $name
-     *
-     * @return bool
-     */
-    public function has($name)
-    {
-        return isset(static::$contexts[$this->_contextName][$name]);
-    }
-
-    /**
-     * Retrieves value from context.
-     *
-     * @param string $name
-     *
-     * @throws \Spryker\Shared\Library\Exception\UnknownContextPropertyException
-     *
-     * @return mixed
-     */
-    public function get($name)
-    {
-        if (!array_key_exists($name, static::$contexts[$this->_contextName])) {
-            throw new UnknownContextPropertyException(sprintf(
-                'Unknown context property "%s"',
-                $name
-            ));
-        }
-
-        return static::$contexts[$this->_contextName][$name];
-    }
-
-    /**
-     * Converts date/time from internal timezone to context's timezone.
-     *
-     * @param string|\DateTime $dateTime date/time to be converted
-     * @param string $format output format
-     *
-     * @return string
-     */
-    public function dateTimeConvertTo($dateTime, $format = 'Y-m-d H:i:s')
-    {
-        if (!($dateTime instanceof DateTime)) {
-            $dateTime = new DateTime($dateTime, new DateTimeZone(Store::getInstance()->getTimezone()));
-        }
-        $dateTime->setTimezone(new DateTimeZone($this->timezone));
-
-        return $dateTime->format($format);
-    }
-
-    /**
-     * Converts date/time from context's timezone to internal timezone.
-     *
-     * @param string|\DateTime $dateTime date/time to be converted
-     * @param string $format output format
-     *
-     * @return string
-     */
-    public function dateTimeConvertFrom($dateTime, $format = 'Y-m-d H:i:s')
-    {
-        if (!($dateTime instanceof DateTime)) {
-            $dateTime = new DateTime($dateTime, new DateTimeZone($this->timezone));
-        }
-        $dateTime->setTimezone(new DateTimeZone(Store::getInstance()->getTimezone()));
-
-        return $dateTime->format($format);
-    }
-
-    /**
-     * Converts date/time to context't timezone from external context's timezone.
-     *
-     * @param \Spryker\Shared\Library\Context|string $contextFrom context from which to convert
-     * @param string|\DateTime $dateTime date/time to be converted
-     * @param string $format output format
-     *
-     * @return string
-     */
-    public function dateTimeConvertToFrom($contextFrom, $dateTime, $format = 'Y-m-d H:i:s')
-    {
-        if (!($dateTime instanceof DateTime)) {
-            $dateTime = new DateTime($dateTime, new DateTimeZone(self::getInstance($contextFrom)->timezone));
-        }
-        $dateTime->setTimezone(new DateTimeZone($this->timezone));
-
-        return $dateTime->format($format);
-    }
-
-    /**
-     * Converts date/time from context's timezone to external context't timezone.
-     *
-     * @param \Spryker\Shared\Library\Context|string $contextTo context to which to convert
-     * @param string|\DateTime $dateTime date/time to be converted
-     * @param string $format output format
-     *
-     * @return string
-     */
-    public function dateTimeConvertFromTo($contextTo, $dateTime, $format = 'Y-m-d H:i:s')
-    {
-        if (!($dateTime instanceof DateTime)) {
-            $dateTime = new DateTime($dateTime, new DateTimeZone($this->timezone));
-        }
-        $dateTime->setTimezone(new DateTimeZone(self::getInstance($contextTo)->timezone));
-
-        return $dateTime->format($format);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/BRL.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/BRL.php
deleted file mode 100644
index 0264d01..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/BRL.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency\Config;
-
-use Spryker\Shared\Library\Currency\CurrencyInterface;
-
-class BRL implements CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode()
-    {
-        return 'BRL';
-    }
-
-    /**
-     * @return string
-     */
-    public function getSymbol()
-    {
-        return 'R$';
-    }
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator()
-    {
-        return '.';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator()
-    {
-        return ',';
-    }
-
-    /**
-     * @return int
-     */
-    public function getDecimalDigits()
-    {
-        return 2;
-    }
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern()
-    {
-        return '{s}{v}';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/CHF.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/CHF.php
deleted file mode 100644
index f1d47d6..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/CHF.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency\Config;
-
-use Spryker\Shared\Library\Currency\CurrencyInterface;
-
-class CHF implements CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode()
-    {
-        return 'CHF';
-    }
-
-    /**
-     * @return string
-     */
-    public function getSymbol()
-    {
-        return 'CHF';
-    }
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator()
-    {
-        return '.';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator()
-    {
-        return ',';
-    }
-
-    /**
-     * @return int
-     */
-    public function getDecimalDigits()
-    {
-        return 2;
-    }
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern()
-    {
-        return '{s} {v}';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/EUR.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/EUR.php
deleted file mode 100644
index e2c67ac..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/EUR.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency\Config;
-
-use Spryker\Shared\Library\Currency\CurrencyInterface;
-
-class EUR implements CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode()
-    {
-        return 'EUR';
-    }
-
-    /**
-     * @return string
-     */
-    public function getSymbol()
-    {
-        return '€';
-    }
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator()
-    {
-        return '.';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator()
-    {
-        return ',';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalDigits()
-    {
-        return 2;
-    }
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern()
-    {
-        return '{v} {s}';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/PLN.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/PLN.php
deleted file mode 100644
index 593fa02..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/PLN.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency\Config;
-
-use Spryker\Shared\Library\Currency\CurrencyInterface;
-
-class PLN implements CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode()
-    {
-        return 'PLN';
-    }
-
-    /**
-     * @return string
-     */
-    public function getSymbol()
-    {
-        return 'zł';
-    }
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator()
-    {
-        return '.';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator()
-    {
-        return ',';
-    }
-
-    /**
-     * @return int
-     */
-    public function getDecimalDigits()
-    {
-        return 2;
-    }
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern()
-    {
-        return '{v} {s}';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/USD.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/USD.php
deleted file mode 100644
index 8e7866d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/Config/USD.php
+++ /dev/null
@@ -1,63 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency\Config;
-
-use Spryker\Shared\Library\Currency\CurrencyInterface;
-
-class USD implements CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode()
-    {
-        return 'USD';
-    }
-
-    /**
-     * @return string
-     */
-    public function getSymbol()
-    {
-        return '$';
-    }
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator()
-    {
-        return ',';
-    }
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator()
-    {
-        return '.';
-    }
-
-    /**
-     * @return int
-     */
-    public function getDecimalDigits()
-    {
-        return 2;
-    }
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern()
-    {
-        return '{s}{v}';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyConstants.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyConstants.php
deleted file mode 100644
index aca28ea..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyConstants.php
+++ /dev/null
@@ -1,17 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency;
-
-interface CurrencyConstants
-{
-
-    const PLACEHOLDER_VALUE = '{v}';
-
-    const PLACEHOLDER_SYMBOL = '{s}';
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyInterface.php
deleted file mode 100644
index 554585f..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyInterface.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency;
-
-interface CurrencyInterface
-{
-
-    /**
-     * @return string
-     */
-    public function getIsoCode();
-
-    /**
-     * @return string
-     */
-    public function getSymbol();
-
-    /**
-     * @return string
-     */
-    public function getThousandsSeparator();
-
-    /**
-     * @return string
-     */
-    public function getDecimalSeparator();
-
-    /**
-     * @return int
-     */
-    public function getDecimalDigits();
-
-    /**
-     * @return string
-     */
-    public function getFormatPattern();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManager.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManager.php
deleted file mode 100644
index cc72bbf..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManager.php
+++ /dev/null
@@ -1,214 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Currency;
-
-use Spryker\Shared\Kernel\Store;
-
-/**
- * @deprecated Use Money Bundle instead
- *
- * This class is the central math class for currency arithmetic operations
- */
-class CurrencyManager implements CurrencyManagerInterface
-{
-
-    const PRICE_PRECISION = 100;
-
-    /**
-     * @var \Spryker\Shared\Library\Currency\CurrencyInterface
-     */
-    private static $currency;
-
-    /**
-     * @var self
-     */
-    private static $instance;
-
-    private function __construct()
-    {
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @return $this
-     */
-    public static function getInstance()
-    {
-        if (!self::$instance) {
-            self::$instance = new self();
-        }
-
-        return self::$instance;
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param \Spryker\Shared\Library\Currency\CurrencyInterface $currency
-     *
-     * @return void
-     */
-    public static function setDefaultCurrency(CurrencyInterface $currency)
-    {
-        self::$currency = $currency;
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param string $isoCode
-     *
-     * @return void
-     */
-    public static function setDefaultCurrencyIso($isoCode)
-    {
-        self::$currency = self::loadCurrencyClass($isoCode);
-    }
-
-    /**
-     * @deprecated Use Store class instead
-     *
-     * @return \Spryker\Shared\Library\Currency\CurrencyInterface
-     */
-    public static function getDefaultCurrency()
-    {
-        if (!self::$currency) {
-            self::$currency = self::loadCurrencyClass(Store::getInstance()->getCurrencyIsoCode());
-        }
-
-        return self::$currency;
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param string $currencyIsoCode
-     *
-     * @return \Spryker\Shared\Library\Currency\CurrencyInterface
-     */
-    protected static function loadCurrencyClass($currencyIsoCode)
-    {
-        $class = '\Spryker\\Shared\\Library\\Currency\\Config\\' . $currencyIsoCode;
-
-        return new $class();
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * This method should never return a number with a thousend separator, otherwise
-     * the next call to number_format will leeds to an error
-     *
-     * @param int $centValue
-     *
-     * @return float
-     */
-    public function convertCentToDecimal($centValue)
-    {
-        return number_format($centValue / self::PRICE_PRECISION, 2, '.', '');
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param float $decimalValue
-     *
-     * @return int
-     */
-    public function convertDecimalToCent($decimalValue)
-    {
-        return $decimalValue * self::PRICE_PRECISION;
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * Ceil the current value
-     * Solves precision lose problems, like in:
-     * -((0.1+0.7)*10), ('34.200' + 0) * 100)
-     * Specify expected decimalPlacesInUse to avoid false rounding
-     *
-     * @param int|float $value
-     * @param int $decimalPlacesInUse
-     *
-     * @return float
-     */
-    public static function ceil($value, $decimalPlacesInUse = 2)
-    {
-        return ceil(round($value, $decimalPlacesInUse + 1));
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param int|float $value
-     * @param bool $includeSymbol
-     *
-     * @return string
-     */
-    public function format($value, $includeSymbol = true)
-    {
-        return self::formatCurrency($this->getDefaultCurrency(), $value, $includeSymbol);
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param string $isoCode
-     * @param int|float $value
-     * @param bool $includeSymbol
-     *
-     * @return string
-     */
-    public function formatByIsoCode($isoCode, $value, $includeSymbol = true)
-    {
-        return self::formatCurrency($this->loadCurrencyClass($isoCode), $value, $includeSymbol);
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param \Spryker\Shared\Library\Currency\CurrencyInterface $currency
-     * @param int|float $value
-     * @param bool $includeSymbol
-     *
-     * @return string|null
-     */
-    protected function formatCurrency(CurrencyInterface $currency, $value, $includeSymbol = true)
-    {
-        if ($value === null) {
-            return $value;
-        }
-        $value = $this->formatNumber($currency, $value);
-
-        if ($includeSymbol === true) {
-            $value = str_replace(
-                [CurrencyConstants::PLACEHOLDER_VALUE, CurrencyConstants::PLACEHOLDER_SYMBOL],
-                [$value, $currency->getSymbol()],
-                $currency->getFormatPattern()
-            );
-        }
-
-        return $value;
-    }
-
-    /**
-     * @deprecated Use Money Bundle instead
-     *
-     * @param \Spryker\Shared\Library\Currency\CurrencyInterface $currency
-     * @param int|float $value
-     *
-     * @return string
-     */
-    protected function formatNumber(CurrencyInterface $currency, $value)
-    {
-        return number_format($value, $currency->getDecimalDigits(), $currency->getDecimalSeparator(), $currency->getThousandsSeparator());
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManagerInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManagerInterface.php
deleted file mode 100644
index f4fac08..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Currency/CurrencyManagerInterface.php
+++ /dev/null
@@ -1,50 +0,0 @@
-<?php
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-namespace Spryker\Shared\Library\Currency;
-
-/**
- * @deprecated Use Money Bundle instead
- *
- * This class is the central math class for currency arithmetic operations
- */
-interface CurrencyManagerInterface
-{
-
-    /**
-     * This method should never return a number with a thousands separator, otherwise
-     * the next call to number_format will leeds to an error
-     *
-     * @param int $centValue
-     *
-     * @return float
-     */
-    public function convertCentToDecimal($centValue);
-
-    /**
-     * @param float $decimalValue
-     *
-     * @return int
-     */
-    public function convertDecimalToCent($decimalValue);
-
-    /**
-     * @param int|float $value
-     * @param bool $includeSymbol
-     *
-     * @return int
-     */
-    public function format($value, $includeSymbol = true);
-
-    /**
-     * @param string $isoCode
-     * @param int|float $value
-     * @param bool $includeSymbol
-     *
-     * @return string
-     */
-    public function formatByIsoCode($isoCode, $value, $includeSymbol = true);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/DataDirectory.php b/Bundles/Library/src/Spryker/Shared/Library/DataDirectory.php
deleted file mode 100644
index 49b33e8..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/DataDirectory.php
+++ /dev/null
@@ -1,154 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Exception;
-use Spryker\Shared\Kernel\Store;
-
-/**
- * Performance Optimization:
- *  Cache the information if the directory exists
- */
-class DataDirectory
-{
-
-    const PATH_DATA = 'data';
-    const PATH_SHARED = 'static';
-    const PATH_COMMON = 'common';
-
-    /**
-     * This directory is local host only and not store specific
-     *
-     * @param string|null $relativePath relative path in data directory
-     *
-     * @return string
-     */
-    public static function getLocalCommonPath($relativePath = null)
-    {
-        $path = self::getBaseDataPath(false, false);
-        $path .= DIRECTORY_SEPARATOR . self::PATH_COMMON;
-        $path = self::addRelativePath($path, $relativePath);
-
-        return self::createDirectoryIfNotExisting($path);
-    }
-
-    /**
-     * This directory is local host only but store specific
-     *
-     * @param string|null $relativePath relative path in data directory
-     *
-     * @return string
-     */
-    public static function getLocalStoreSpecificPath($relativePath = null)
-    {
-        $path = self::getBaseDataPath(true, false);
-        $path = self::addRelativePath($path, $relativePath);
-
-        return self::createDirectoryIfNotExisting($path);
-    }
-
-    /**
-     * This directory is shared between hosts (NFS) but not store specific
-     *
-     * @param string|null $relativePath relative path in data directory
-     *
-     * @return string
-     */
-    public static function getSharedCommonPath($relativePath = null)
-    {
-        $path = self::getBaseDataPath(false, true);
-        $path .= DIRECTORY_SEPARATOR . self::PATH_COMMON;
-        $path = self::addRelativePath($path, $relativePath);
-
-        if (Cloud::isCloudStorageEnabled()) {
-            return $path;
-        }
-
-        return self::createDirectoryIfNotExisting($path);
-    }
-
-    /**
-     * This directory is shared between hosts (NFS) and is store specific
-     *
-     * @param string|null $relativePath relative path in data directory
-     *
-     * @return string
-     */
-    public static function getSharedStoreSpecificPath($relativePath = null)
-    {
-        $path = self::getBaseDataPath(true, true);
-        $path = self::addRelativePath($path, $relativePath);
-
-        if (Cloud::isCloudStorageEnabled()) {
-            return $path;
-        }
-
-        return self::createDirectoryIfNotExisting($path);
-    }
-
-    /**
-     * @param bool $storeSpecific (stored in store specific sub.folder?)
-     * @param bool $isSharedBetweenHosts (weather to store in 'static' directory in shared NFS)
-     *
-     * @return string
-     */
-    protected static function getBaseDataPath($storeSpecific = false, $isSharedBetweenHosts = true)
-    {
-        $path = APPLICATION_ROOT_DIR . DIRECTORY_SEPARATOR . self::PATH_DATA;
-        if ($isSharedBetweenHosts) {
-            $path .= DIRECTORY_SEPARATOR . self::PATH_SHARED;
-        }
-        if ($storeSpecific) {
-            $path .= DIRECTORY_SEPARATOR . Store::getInstance()->getStoreName();
-        }
-
-        return $path;
-    }
-
-    /**
-     * @param string $path
-     * @param string $relativePath
-     *
-     * @return string
-     */
-    protected static function addRelativePath($path, $relativePath)
-    {
-        if ($path !== null && $relativePath !== '/') {
-            $path .= DIRECTORY_SEPARATOR . $relativePath;
-        }
-        if (substr($path, -1) !== DIRECTORY_SEPARATOR) {
-            $path .= DIRECTORY_SEPARATOR;
-        }
-
-        return $path;
-    }
-
-    /**
-     * @param string $path
-     *
-     * @throws \Exception
-     *
-     * @return string
-     */
-    protected static function createDirectoryIfNotExisting($path)
-    {
-        if (is_dir($path) === false) {
-            try {
-                mkdir($path, 0775, true);
-            } catch (\ErrorException $e) {
-                throw new Exception('Could not create data directory "' . $path . '"!');
-            }
-        }
-        if (is_writable($path) === false) {
-            throw new Exception('Data directory not writable! (' . $path . ')');
-        }
-
-        return $path;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/DateFormatter.php b/Bundles/Library/src/Spryker/Shared/Library/DateFormatter.php
deleted file mode 100644
index 270aec2..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/DateFormatter.php
+++ /dev/null
@@ -1,111 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use DateTime;
-use DateTimeZone;
-use Spryker\Shared\Library\Exception\UnsupportedDateFormatException;
-
-class DateFormatter implements DateFormatterInterface
-{
-
-    const DATE_FORMAT_SHORT = 'short';
-    const DATE_FORMAT_MEDIUM = 'medium';
-    const DATE_FORMAT_RFC = 'rfc';
-    const DATE_FORMAT_DATETIME = 'datetime';
-
-    /**
-     * @var \Spryker\Shared\Library\Context
-     */
-    private $context;
-
-    /**
-     * @param \Spryker\Shared\Library\Context $context
-     */
-    public function __construct(Context $context)
-    {
-        $this->context = $context;
-    }
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateShort($date, DateTimeZone $timezone = null)
-    {
-        return $this->formatDate($date, self::DATE_FORMAT_SHORT, $timezone);
-    }
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateMedium($date, DateTimeZone $timezone = null)
-    {
-        return $this->formatDate($date, self::DATE_FORMAT_MEDIUM, $timezone);
-    }
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateRFC($date, DateTimeZone $timezone = null)
-    {
-        return $this->formatDate($date, self::DATE_FORMAT_RFC, $timezone);
-    }
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateTime($date, DateTimeZone $timezone = null)
-    {
-        return $this->formatDate($date, self::DATE_FORMAT_DATETIME, $timezone);
-    }
-
-    /**
-     * @param \DateTime|string $date
-     * @param string $dateFormat
-     * @param \DateTimeZone|null $timezone
-     *
-     * @throws \Spryker\Shared\Library\Exception\UnsupportedDateFormatException
-     *
-     * @return string|null
-     */
-    protected function formatDate($date, $dateFormat, DateTimeZone $timezone = null)
-    {
-        if (empty($date)) {
-            return null;
-        }
-
-        if (!array_key_exists($dateFormat, $this->context->dateFormat)) {
-            throw new UnsupportedDateFormatException(sprintf('Unsupported date format: %s', $dateFormat));
-        }
-
-        if ($timezone === null) {
-            return $this->context->dateTimeConvertTo($date, $this->context->dateFormat[$dateFormat]);
-        }
-
-        if (!($date instanceof DateTime)) {
-            $date = new DateTime($date, $timezone);
-        } else {
-            $date->setTimezone($timezone);
-        }
-
-        return $date->format($this->context->dateFormat[$dateFormat]);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/DateFormatterInterface.php b/Bundles/Library/src/Spryker/Shared/Library/DateFormatterInterface.php
deleted file mode 100644
index 6ea44df..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/DateFormatterInterface.php
+++ /dev/null
@@ -1,47 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use DateTimeZone;
-
-interface DateFormatterInterface
-{
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateShort($date, DateTimeZone $timezone = null);
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateMedium($date, DateTimeZone $timezone = null);
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateRFC($date, DateTimeZone $timezone = null);
-
-    /**
-     * @param string $date
-     * @param \DateTimeZone|null $timezone
-     *
-     * @return string
-     */
-    public function dateTime($date, DateTimeZone $timezone = null);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Environment.php b/Bundles/Library/src/Spryker/Shared/Library/Environment.php
deleted file mode 100644
index b5a6b0d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Environment.php
+++ /dev/null
@@ -1,124 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-class Environment
-{
-
-    const DEFAULT_ENVIRONMENT = 'production';
-
-    const PRODUCTION = 'production';
-    const STAGING = 'staging';
-    const DEVELOPMENT = 'development';
-    const TESTING = 'devtest';
-
-    /**
-     * @var string
-     */
-    protected static $environment = APPLICATION_ENV;
-
-    /**
-     * @var self
-     */
-    protected static $instance;
-
-    /**
-     * @return $this
-     */
-    public static function getInstance()
-    {
-        if (!self::$instance) {
-            self::$instance = new self();
-        }
-
-        return self::$instance;
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isProduction()
-    {
-        return (self::$environment === self::PRODUCTION);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isNotProduction()
-    {
-        return (self::$environment !== self::PRODUCTION);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isStaging()
-    {
-        return (self::$environment === self::STAGING);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isNotStaging()
-    {
-        return (self::$environment !== self::STAGING);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isDevelopment()
-    {
-        return (self::$environment === self::DEVELOPMENT);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isNotDevelopment()
-    {
-        return (self::$environment !== self::DEVELOPMENT);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isTesting()
-    {
-        return (self::$environment === self::TESTING);
-    }
-
-    /**
-     * @return bool
-     */
-    public static function isNotTesting()
-    {
-        return (self::$environment !== self::TESTING);
-    }
-
-    /**
-     * @return string
-     */
-    public static function getEnvironment()
-    {
-        return self::$environment;
-    }
-
-    /**
-     * @param string $environment
-     *
-     * @return string
-     */
-    public static function setEnvironment($environment)
-    {
-        self::$environment = $environment;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorHandler.php b/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorHandler.php
deleted file mode 100644
index c6576cc..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorHandler.php
+++ /dev/null
@@ -1,189 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Error;
-
-use ErrorException;
-use Exception;
-use Propel\Runtime\Propel;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\LibraryConstants;
-use Throwable;
-
-/**
- * @deprecated Use ErrorHandler bundle instead.
- */
-class ErrorHandler
-{
-
-    /**
-     * @var self
-     */
-    protected static $instance;
-
-    const YVES = 'YVES';
-
-    const ZED = 'ZED';
-
-    const DEVELOPMENT = 'development';
-
-    const SAPI_CLI = 'cli';
-
-    /**
-     * Do not allow object instantiation
-     */
-    private function __construct()
-    {
-    }
-
-    /**
-     * @return $this
-     */
-    public static function initialize()
-    {
-        if (!self::$instance) {
-            self::$instance = new self();
-
-            return self::$instance;
-        }
-
-        return self::$instance;
-    }
-
-    /**
-     * @param \Exception|\Throwable $exception
-     * @param bool $output
-     * @param bool $exit
-     *
-     * @return void
-     */
-    public function handleException($exception, $output = true, $exit = true)
-    {
-        ErrorLogger::log($exception);
-
-        try {
-            $this->send500Header();
-
-            $this->doDatabaseRollback();
-
-            $this->cleanOutputBuffer();
-
-            if ($this->showExceptionStackTrace()) {
-                $this->echoOutput($exception, $output);
-            } else {
-                if ($exit) {
-                    $this->showErrorPage();
-                }
-            }
-        } catch (Throwable $internalException) {
-            ErrorLogger::log($internalException);
-        } catch (Exception $internalException) {
-            ErrorLogger::log($internalException);
-        }
-
-        if ($exit) {
-            exit(-1);
-        }
-    }
-
-    /**
-     * @return void
-     */
-    public function handleFatal()
-    {
-        $error = error_get_last();
-
-        if (isset($error)) {
-            $exception = new ErrorException('FATAL ERROR - ' . $error['message'], 0, $error['type'], $error['file'], $error['line']);
-            $this->handleException($exception);
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected function send500Header()
-    {
-        if (!headers_sent()) {
-            header('HTTP/1.0 500 Internal Server Error');
-        }
-    }
-
-    /**
-     * @return bool
-     */
-    protected function showExceptionStackTrace()
-    {
-        if (APPLICATION === self::YVES) {
-            return Config::get(LibraryConstants::YVES_SHOW_EXCEPTION_STACK_TRACE);
-        }
-
-        return Config::get(LibraryConstants::ZED_SHOW_EXCEPTION_STACK_TRACE);
-    }
-
-    /**
-     * @param \Exception|\Throwable $exception
-     * @param bool $output
-     *
-     * @return void
-     */
-    protected function echoOutput($exception, $output)
-    {
-        if ($output) {
-            $message = ErrorRenderer::renderException($exception);
-
-            echo $message;
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected function showErrorPage()
-    {
-        if (headers_sent() || $this->isCliCall()) {
-            return;
-        }
-
-        $errorPage = Config::get(LibraryConstants::ZED_ERROR_PAGE);
-
-        if (APPLICATION === self::YVES) {
-            $errorPage = Config::get(LibraryConstants::YVES_ERROR_PAGE);
-        }
-
-        require_once $errorPage;
-    }
-
-    /**
-     * @return void
-     */
-    protected function doDatabaseRollback()
-    {
-        if (APPLICATION === self::ZED && class_exists('Propel', false)) {
-            Propel::getConnection()->forceRollBack();
-        }
-    }
-
-    /**
-     * @return void
-     */
-    protected function cleanOutputBuffer()
-    {
-        while (ob_get_level()) {
-            ob_end_clean();
-        }
-    }
-
-    /**
-     * @return bool
-     */
-    protected function isCliCall()
-    {
-        return PHP_SAPI === self::SAPI_CLI;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorLogger.php b/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorLogger.php
deleted file mode 100644
index 432fa76..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorLogger.php
+++ /dev/null
@@ -1,131 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Error;
-
-use Spryker\Shared\EventJournal\Model\Event;
-use Spryker\Shared\EventJournal\Model\EventInterface;
-use Spryker\Shared\EventJournal\Model\EventJournalInterface;
-use Spryker\Shared\EventJournal\Model\SharedEventJournal;
-use Spryker\Shared\Library\Application\Version;
-use Spryker\Shared\Library\Log;
-use Spryker\Shared\NewRelic\Api;
-use Spryker\Shared\NewRelic\ApiInterface;
-
-/**
- * @deprecated Use ErrorHandler bundle instead.
- */
-class ErrorLogger
-{
-
-    /**
-     * @param \Exception|\Throwable $exception
-     *
-     * @return void
-     */
-    public static function log($exception)
-    {
-        $newRelicApi = new Api();
-
-        self::sendExceptionToFile($exception, new SharedEventJournal(), $newRelicApi);
-        self::sendExceptionToNewRelic($exception, new SharedEventJournal(), $newRelicApi);
-        self::sendExceptionToEventJournal($exception, new SharedEventJournal(), $newRelicApi);
-    }
-
-    /**
-     * @param \Exception|\Throwable $exception
-     * @param \Spryker\Shared\EventJournal\Model\EventJournalInterface $eventJournal
-     * @param \Spryker\Shared\NewRelic\ApiInterface $newRelicApi
-     * @param bool $ignoreInternalExceptions
-     *
-     * @return void
-     */
-    protected static function sendExceptionToEventJournal(
-        $exception,
-        EventJournalInterface $eventJournal,
-        ApiInterface $newRelicApi,
-        $ignoreInternalExceptions = false
-    ) {
-        try {
-            $event = new Event();
-            $event->setField('message', $exception->getMessage());
-            $event->setField('trace', $exception->getTraceAsString());
-            $event->setField('class_name', get_class($exception));
-            $event->setField('file_name', $exception->getFile());
-            $event->setField('line', $exception->getLine());
-            $event->setField(Event::FIELD_NAME, 'exception');
-            self::addDeploymentInformation($event);
-            $eventJournal->saveEvent($event);
-        } catch (\Exception $internalException) {
-            if (!$ignoreInternalExceptions) {
-                self::sendExceptionToNewRelic($internalException, $eventJournal, $newRelicApi, true);
-            }
-        }
-    }
-
-    /**
-     * @param \Exception|\Throwable $exception
-     * @param \Spryker\Shared\EventJournal\Model\EventJournalInterface $eventJournal
-     * @param \Spryker\Shared\NewRelic\ApiInterface $newRelicApi
-     * @param bool $ignoreInternalExceptions
-     *
-     * @return void
-     */
-    protected static function sendExceptionToNewRelic(
-        $exception,
-        EventJournalInterface $eventJournal,
-        ApiInterface $newRelicApi,
-        $ignoreInternalExceptions = false
-    ) {
-        try {
-            $message = $message = get_class($exception) . ' - ' . $exception->getMessage() . ' in file "' . $exception->getFile() . '"';
-            $newRelicApi->noticeError($message, $exception);
-        } catch (\Exception $internalException) {
-            if (!$ignoreInternalExceptions) {
-                self::sendExceptionToEventJournal($internalException, $eventJournal, $newRelicApi, true);
-            }
-        }
-    }
-
-    /**
-     * @param \Exception|\Throwable $exception
-     * @param \Spryker\Shared\EventJournal\Model\EventJournalInterface $eventJournal
-     * @param \Spryker\Shared\NewRelic\ApiInterface $newRelicApi
-     *
-     * @return void
-     */
-    protected static function sendExceptionToFile(
-        $exception,
-        EventJournalInterface $eventJournal,
-        ApiInterface $newRelicApi
-    ) {
-        try {
-            $message = ErrorRenderer::renderException($exception);
-
-            Log::log($message, 'exception.log');
-        } catch (\Exception $internalException) {
-            self::sendExceptionToEventJournal($internalException, $eventJournal, $newRelicApi, true);
-            self::sendExceptionToNewRelic($internalException, $eventJournal, $newRelicApi, true);
-        }
-    }
-
-    /**
-     * @param \Spryker\Shared\EventJournal\Model\EventInterface $event
-     *
-     * @return void
-     */
-    protected static function addDeploymentInformation(EventInterface $event)
-    {
-        $deploymentInformation = (new Version())->toArray();
-        foreach ($deploymentInformation as $name => $data) {
-            if (!empty($data)) {
-                $event->setField('deployment_' . $name, $data);
-            }
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorRenderer.php b/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorRenderer.php
deleted file mode 100644
index 7f0434b..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Error/ErrorRenderer.php
+++ /dev/null
@@ -1,116 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Error;
-
-use Spryker\Shared\Library\Application\Version;
-use Spryker\Shared\Library\Exception\AbstractErrorRendererException;
-use Spryker\Zed\Library\Sanitize\Html;
-
-/**
- * @deprecated Use ErrorHandler bundle instead.
- */
-class ErrorRenderer
-{
-
-    const SAPI_CLI = 'cli';
-
-    /**
-     * @param \Exception|\Throwable $e
-     *
-     * @return string
-     */
-    protected static function renderForWeb($e)
-    {
-        $uri = isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : 'n/a';
-
-        $errorString = '<div style="font-family: courier; font-size: 14px">';
-        $message = get_class($e) . ' - ' . $e->getMessage();
-        $errorString .= '<h1>' . APPLICATION . ' Exception</h1><div style="background: #dadada; padding: 5px"><font style="12"><b>' . $message . '</b></font></div><br/>';
-
-        $errorString .= 'in ' . $e->getFile() . ' (' . $e->getLine() . ')';
-        $errorString .= '<br/><br/>';
-        $errorString .= '<b>Url:</b> ' . Html::escape($uri);
-        $errorString .= '<br/><br/>';
-        $errorString .= '<b>Trace:</b>';
-        $errorString .= '<br/>';
-        $errorString .= '<pre>' . $e->getTraceAsString() . '</pre>';
-        $errorString .= '</div>';
-
-        $version = new Version();
-        if ($version->hasData()) {
-            $errorString .= '<hr>';
-            $errorString .= 'DeployInfo (Revision: ' . $version->getRevision() . ', Path: ' . $version->getPath() . ', Date: ' . $version->getDate() . ')';
-        }
-
-        $errorString = '<pre>' . $errorString . '</pre>';
-
-        if ($e instanceof AbstractErrorRendererException) {
-            $errorString .= '<br/><hr/><br/>' . (string)$e->getExtra();
-        }
-
-        return $errorString;
-    }
-
-    /**
-     * @param \Exception|\Throwable $e
-     *
-     * @return string
-     */
-    protected static function renderForCli($e)
-    {
-        if (isset($_SERVER['argv']) && is_array($_SERVER['argv'])) {
-            $uri = implode(' ', $_SERVER['argv']);
-        } else {
-            $uri = 'n/a';
-        }
-
-        $message = get_class($e) . ' - ' . $e->getMessage();
-        $errorString = PHP_EOL . APPLICATION . ' Exception: ' . $message . PHP_EOL;
-
-        $errorString .= 'in ' . $e->getFile() . ' (' . $e->getLine() . ')';
-        $errorString .= PHP_EOL . PHP_EOL;
-        $errorString .= 'Command: ' . $uri;
-        $errorString .= PHP_EOL . PHP_EOL;
-        $errorString .= 'Trace:' . PHP_EOL;
-        $errorString .= $e->getTraceAsString() . PHP_EOL;
-
-        $version = new Version();
-        if ($version->hasData()) {
-            $errorString .= 'DeployInfo (Revision: ' . $version->getRevision() . ', Path: ' . $version->getPath() . ', Date: ' . $version->getDate() . ')' . PHP_EOL;
-        }
-
-        if ($e instanceof AbstractErrorRendererException) {
-            $errorString .= PHP_EOL . PHP_EOL . (string)$e->getExtra();
-        }
-
-        return $errorString;
-    }
-
-    /**
-     * @param \Exception|\Throwable $e
-     *
-     * @return string
-     */
-    public static function renderException($e)
-    {
-        if (self::isCliCall()) {
-            return self::renderForCli($e);
-        }
-
-        return self::renderForWeb($e);
-    }
-
-    /**
-     * @return bool
-     */
-    protected static function isCliCall()
-    {
-        return PHP_SAPI === self::SAPI_CLI;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Exception/AbstractErrorRendererException.php b/Bundles/Library/src/Spryker/Shared/Library/Exception/AbstractErrorRendererException.php
deleted file mode 100644
index 11919ec..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Exception/AbstractErrorRendererException.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Exception;
-
-use Exception;
-
-abstract class AbstractErrorRendererException extends Exception
-{
-
-    /**
-     * @var string
-     */
-    protected $extra;
-
-    /**
-     * @return string
-     */
-    public function getExtra()
-    {
-        return $this->extra;
-    }
-
-    /**
-     * @param string $extra
-     *
-     * @return void
-     */
-    public function setExtra($extra)
-    {
-        $this->extra = $extra;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Exception/ResourceNotFoundException.php b/Bundles/Library/src/Spryker/Shared/Library/Exception/ResourceNotFoundException.php
deleted file mode 100644
index 484327d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Exception/ResourceNotFoundException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Exception;
-
-use Exception;
-
-class ResourceNotFoundException extends Exception
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Exception/UnknownContextPropertyException.php b/Bundles/Library/src/Spryker/Shared/Library/Exception/UnknownContextPropertyException.php
deleted file mode 100644
index 32d56a2..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Exception/UnknownContextPropertyException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Exception;
-
-use Exception;
-
-class UnknownContextPropertyException extends Exception
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Exception/UnsupportedDateFormatException.php b/Bundles/Library/src/Spryker/Shared/Library/Exception/UnsupportedDateFormatException.php
deleted file mode 100644
index d98f954..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Exception/UnsupportedDateFormatException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Exception;
-
-use Exception;
-
-class UnsupportedDateFormatException extends Exception
-{
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilter.php b/Bundles/Library/src/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilter.php
deleted file mode 100644
index 9ec66bf..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilter.php
+++ /dev/null
@@ -1,36 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Filter;
-
-class CamelCaseToSeparatorFilter implements FilterInterface
-{
-
-    /**
-     * @var string
-     */
-    protected $separator;
-
-    /**
-     * @param string $separator
-     */
-    public function __construct($separator)
-    {
-        $this->separator = $separator;
-    }
-
-    /**
-     * @param string $string
-     *
-     * @return string
-     */
-    public function filter($string)
-    {
-        return strtolower(preg_replace('/([a-z])([A-Z])/', '$1' . addcslashes($this->separator, '$') . '$2', $string));
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Filter/FilterInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Filter/FilterInterface.php
deleted file mode 100644
index 44950af..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Filter/FilterInterface.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Filter;
-
-interface FilterInterface
-{
-
-    /**
-     * @param string $string
-     *
-     * @return string
-     */
-    public function filter($string);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilter.php b/Bundles/Library/src/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilter.php
deleted file mode 100644
index 322d99f..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilter.php
+++ /dev/null
@@ -1,53 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Filter;
-
-class SeparatorToCamelCaseFilter implements FilterInterface
-{
-
-    /**
-     * @var string
-     */
-    protected $separator;
-
-    /**
-     * @var bool
-     */
-    protected $upperCaseFirst;
-
-    /**
-     * @param string $separator
-     * @param bool $upperCaseFirst
-     */
-    public function __construct($separator, $upperCaseFirst = false)
-    {
-        $this->separator = $separator;
-        $this->upperCaseFirst = $upperCaseFirst;
-    }
-
-    /**
-     * @param string $string
-     *
-     * @return string
-     */
-    public function filter($string)
-    {
-        // This should be the fastest solution compared to
-        // any preg_*() or array_map() solution
-        $explodedString = explode($this->separator, $string);
-
-        $result = ($this->upperCaseFirst) ? '' : array_shift($explodedString);
-
-        foreach ($explodedString as $part) {
-            $result .= ucfirst($part);
-        }
-
-        return $result;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Hash/Hash.php b/Bundles/Library/src/Spryker/Shared/Library/Hash/Hash.php
deleted file mode 100644
index f69b5a6..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Hash/Hash.php
+++ /dev/null
@@ -1,45 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Hash;
-
-class Hash
-{
-
-    const SHA256 = 'sha256';
-    const SHA512 = 'sha512';
-    const MD5 = 'md5';
-
-    /**
-     * @var self
-     */
-    private static $instance;
-
-    /**
-     * @return $this
-     */
-    public static function getInstance()
-    {
-        if (!self::$instance) {
-            self::$instance = new self();
-        }
-
-        return self::$instance;
-    }
-
-    /**
-     * @param string $algorithm
-     * @param mixed $value
-     *
-     * @return string
-     */
-    public static function hashValue($algorithm, $value)
-    {
-        return hash($algorithm, $value);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Image.php b/Bundles/Library/src/Spryker/Shared/Library/Image.php
deleted file mode 100644
index 10392ba..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Image.php
+++ /dev/null
@@ -1,212 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use ErrorException;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Kernel\Store;
-
-class Image
-{
-
-    /*
-     * @todo
-     */
-    const PLACEHOLDER_PRODUCT_ZED = '/new/images/product/default-product-image.jpg';
-    const PLACEHOLDER_PRODUCT_YVES = '/images/product/default.png';
-
-    const HTTPS = 'https';
-    const HTTP = 'http';
-
-    const POSITION_HASH = 0;
-    const POSITION_SIZE = 1;
-    const POSITION_WEIGHT = 2;
-    const POSITION_DIRECTORY = 3;
-
-    const ORDER_WEIGHT_ASC = 'asc';
-    const ORDER_WEIGHT_DESC = 'desc';
-
-    const SIZE_XXL = 'xxl';
-    const SIZE_XL = 'xl';
-    const SIZE_L = 'l';
-    const SIZE_M = 'm';
-    const SIZE_S = 's';
-    const SIZE_XS = 'xs';
-
-    protected static $imageBaseUrl;
-
-    protected static $config;
-
-    /**
-     * @param string $filename
-     *
-     * @throws \ErrorException
-     *
-     * @return string
-     */
-    public static function getAbsoluteProductImageUrl($filename)
-    {
-        $urlDomain = self::getStaticMediaUrl();
-
-        if ($filename === '') {
-            $applicationName = APPLICATION;
-
-            switch ($applicationName) {
-                case 'ZED':
-                    return self::getSchema() . Config::get(LibraryConstants::HOST_ZED_GUI) . self::PLACEHOLDER_PRODUCT_ZED;
-
-                case 'YVES':
-                    return self::getSchema() . Config::get(LibraryConstants::HOST_YVES) . self::PLACEHOLDER_PRODUCT_YVES;
-
-                default:
-                    throw new ErrorException('Invalid Application name');
-            }
-        }
-
-        $urlKey = $filename;
-
-        /* ONLY FOR CLOUD HOSTING SETUP USED */
-        if (Cloud::isCloudStorageCdnEnabled()) {
-            return self::getAbsoluteProductImageUrlForCloudUsage($urlKey);
-        }
-
-        return self::getSchema() . implode(
-            '/',
-            [
-                $urlDomain,
-                Store::getInstance()->getStoreName(),
-                Config::get(LibraryConstants::PRODUCT_IMAGE_IMAGE_URL_PREFIX), $urlKey,
-            ]
-        );
-    }
-
-    /**
-     * @param string $objectName
-     *
-     * @return string
-     */
-    protected static function getAbsoluteProductImageUrlForCloudUsage($objectName)
-    {
-        if (static::getProtocol() === self::HTTP) {
-            $host = Config::get(LibraryConstants::CLOUD_CDN_STATIC_MEDIA_HTTP);
-        } else {
-            $host = Config::get(LibraryConstants::CLOUD_CDN_STATIC_MEDIA_HTTPS);
-        }
-
-        return $host . '/' . Config::get(LibraryConstants::CLOUD_CDN_STATIC_MEDIA_PREFIX)
-            . Config::get(LibraryConstants::CLOUD_CDN_PRODUCT_IMAGES_PATH_NAME) . $objectName;
-    }
-
-    /**
-     * @param array $images
-     * @param string $order
-     *
-     * @throws \ErrorException
-     *
-     * @return array
-     */
-    public static function getGroupedImagesBySize(array $images, $order = self::ORDER_WEIGHT_ASC)
-    {
-        $virtualDirectory = null;
-        $groupedImages = [];
-
-        foreach ($images as $seoFilename) {
-            $parts = array_reverse(explode('-', $seoFilename));
-
-            if ($virtualDirectory === null) {
-                $virtualDirectory = $parts[self::POSITION_DIRECTORY];
-            } else {
-                if ($virtualDirectory !== $parts[self::POSITION_DIRECTORY]) {
-                    throw new ErrorException('You cannot mix product images from different products');
-                }
-            }
-
-            if (array_key_exists($parts[self::POSITION_SIZE], $groupedImages)) {
-                $groupedImages[$parts[self::POSITION_SIZE]][$parts[self::POSITION_WEIGHT]] = $seoFilename;
-            } else {
-                $groupedImages[$parts[self::POSITION_SIZE]] = [$parts[self::POSITION_WEIGHT] => $seoFilename];
-            }
-        }
-
-        foreach ($groupedImages as &$images) {
-            ksort($images);
-            if ($order === self::ORDER_WEIGHT_DESC) {
-                $images = array_reverse($images, true);
-            }
-        }
-
-        return $groupedImages;
-    }
-
-    /**
-     * @param array $groupedImageFileNames
-     * @param string $size
-     *
-     * @return mixed|string
-     */
-    public static function getFirstProductImageFilenameBySize(array $groupedImageFileNames, $size = self::SIZE_L)
-    {
-        if (!array_key_exists($size, $groupedImageFileNames)) {
-            return '';
-        } else {
-            return array_shift($groupedImageFileNames[$size]);
-        }
-    }
-
-    /**
-     * @param array $groupedImageFileNames
-     * @param string $size
-     *
-     * @return array
-     */
-    public static function getAllProductImagesBySize(array $groupedImageFileNames, $size = self::SIZE_L)
-    {
-        if (!array_key_exists($size, $groupedImageFileNames)) {
-            return [];
-        } else {
-            return $groupedImageFileNames[$size];
-        }
-    }
-
-    /**
-     * @return string
-     */
-    protected static function getStaticMediaUrl()
-    {
-        if (self::HTTPS === self::getProtocol()) {
-            return Config::get(LibraryConstants::HOST_SSL_STATIC_MEDIA);
-        }
-
-        return Config::get(LibraryConstants::HOST_STATIC_MEDIA);
-    }
-
-    /**
-     * @return string
-     */
-    protected static function getProtocol()
-    {
-        if (isset($_SERVER['HTTPS']) && ($_SERVER['HTTPS'] === 'on' || $_SERVER['HTTPS'] === 1)
-            || isset($_SERVER['X-Forwarded-Proto']) && $_SERVER['X-Forwarded-Proto'] === 'https'
-        ) {
-            return self::HTTPS;
-        }
-
-        return self::HTTP;
-    }
-
-    /**
-     * @return string
-     */
-    protected static function getSchema()
-    {
-        $protocol = self::getProtocol();
-
-        return $protocol . '://';
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Json.php b/Bundles/Library/src/Spryker/Shared/Library/Json.php
deleted file mode 100644
index 5edff95..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Json.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use \Spryker\Service\UtilEncoding\Model\Json AS JsonEncoder;
-
-/**
- * @deprecated Use \Spryker\Service\UtilEncoding\Model\Json instead.
- */
-class Json
-{
-
-    const DEFAULT_OPTIONS = JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT;
-    const DEFAULT_DEPTH = 512;
-
-    /**
-     * @var \Spryker\Service\UtilEncoding\Model\Json
-     */
-    protected static $utilJsonEncoder = null;
-
-    /**
-     * @param mixed $value
-     * @param int $options
-     * @param int $depth
-     *
-     * @throws \Exception
-     *
-     * @return string
-     */
-    public static function encode($value, $options = self::DEFAULT_OPTIONS, $depth = self::DEFAULT_DEPTH)
-    {
-        return static::createUtilJsonEncoder()->encode($value, $options, $depth);
-    }
-
-    /**
-     * @param string $jsonString
-     * @param bool $assoc
-     * @param int $depth
-     * @param int $options
-     *
-     * @throws \Exception
-     *
-     * @return mixed
-     */
-    public static function decode($jsonString, $assoc = false, $depth = self::DEFAULT_DEPTH, $options = self::DEFAULT_OPTIONS)
-    {
-        return static::createUtilJsonEncoder()->decode($jsonString, $assoc, $depth, $options);
-    }
-
-    /**
-     * @return \Spryker\Service\UtilEncoding\Model\Json
-     */
-    protected static function createUtilJsonEncoder()
-    {
-        if (static::$utilJsonEncoder === null) {
-            static::$utilJsonEncoder = new JsonEncoder();
-        }
-
-        return static::$utilJsonEncoder;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/LibraryConstants.php b/Bundles/Library/src/Spryker/Shared/Library/LibraryConstants.php
deleted file mode 100644
index ad0ac25..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/LibraryConstants.php
+++ /dev/null
@@ -1,90 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Spryker\Shared\Application\ApplicationConstants;
-
-interface LibraryConstants
-{
-
-    const CLOUD_CDN_ENABLED = ApplicationConstants::CLOUD_CDN_ENABLED;
-    const CLOUD_CDN_PRODUCT_IMAGES_PATH_NAME = ApplicationConstants::CLOUD_CDN_PRODUCT_IMAGES_PATH_NAME;
-    const CLOUD_CDN_STATIC_MEDIA_HTTP = ApplicationConstants::CLOUD_CDN_STATIC_MEDIA_HTTP;
-    const CLOUD_CDN_STATIC_MEDIA_HTTPS = ApplicationConstants::CLOUD_CDN_STATIC_MEDIA_HTTPS;
-    const CLOUD_CDN_STATIC_MEDIA_PREFIX = ApplicationConstants::CLOUD_CDN_STATIC_MEDIA_PREFIX;
-    const CLOUD_ENABLED = ApplicationConstants::CLOUD_ENABLED;
-    const CLOUD_OBJECT_STORAGE_ENABLED = ApplicationConstants::CLOUD_OBJECT_STORAGE_ENABLED;
-    const CORE_NAMESPACES = ApplicationConstants::CORE_NAMESPACES;
-
-    const DISPLAY_ERRORS = ApplicationConstants::DISPLAY_ERRORS;
-
-    const ELASTICA_PARAMETER__HOST = ApplicationConstants::ELASTICA_PARAMETER__HOST;
-    const ELASTICA_PARAMETER__PORT = ApplicationConstants::ELASTICA_PARAMETER__PORT;
-    const ELASTICA_PARAMETER__AUTH_HEADER = ApplicationConstants::ELASTICA_PARAMETER__AUTH_HEADER;
-    const ELASTICA_PARAMETER__TRANSPORT = ApplicationConstants::ELASTICA_PARAMETER__TRANSPORT;
-    const ERROR_LEVEL = ApplicationConstants::ERROR_LEVEL;
-    const HOST_SSL_STATIC_MEDIA = ApplicationConstants::HOST_SSL_STATIC_MEDIA;
-
-    const HOST_STATIC_MEDIA = ApplicationConstants::HOST_STATIC_MEDIA;
-    const HOST_YVES = ApplicationConstants::HOST_YVES;
-    const HOST_ZED_API = ApplicationConstants::HOST_ZED_API;
-    const HOST_ZED_GUI = ApplicationConstants::HOST_ZED_GUI;
-
-    const PRODUCT_IMAGE_IMAGE_URL_PREFIX = 'PRODUCT_IMAGE_IMAGE_URL_PREFIX';
-
-    const STORAGE_KV_SOURCE = ApplicationConstants::STORAGE_KV_SOURCE;
-
-    const TRANSFER_DEBUG_SESSION_FORWARD_ENABLED = ApplicationConstants::TRANSFER_DEBUG_SESSION_FORWARD_ENABLED;
-    const TRANSFER_DEBUG_SESSION_NAME = ApplicationConstants::TRANSFER_DEBUG_SESSION_NAME;
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::YVES_ERROR_PAGE instead.
-     */
-    const YVES_ERROR_PAGE = ApplicationConstants::YVES_ERROR_PAGE;
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ERROR_RENDERER to choose renderer.
-     */
-    const YVES_SHOW_EXCEPTION_STACK_TRACE = ApplicationConstants::YVES_SHOW_EXCEPTION_STACK_TRACE;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_HOST = ApplicationConstants::YVES_STORAGE_SESSION_REDIS_HOST;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_PERSISTENT_CONNECTION = ApplicationConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_PORT = ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PORT;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_PROTOCOL = ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PROTOCOL;
-
-    /**
-     * @deprecated Use Session bundle SessionConstants class constant.
-     */
-    const YVES_STORAGE_SESSION_REDIS_PASSWORD = ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PASSWORD;
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ZED_ERROR_PAGE instead.
-     */
-    const ZED_ERROR_PAGE = ApplicationConstants::ZED_ERROR_PAGE;
-
-    /**
-     * @deprecated Use ErrorHandlerConstants::ERROR_RENDERER to choose renderer.
-     */
-    const ZED_SHOW_EXCEPTION_STACK_TRACE = ApplicationConstants::ZED_SHOW_EXCEPTION_STACK_TRACE;
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Log.php b/Bundles/Library/src/Spryker/Shared/Library/Log.php
deleted file mode 100644
index 1c2b3e7..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Log.php
+++ /dev/null
@@ -1,123 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Exception;
-
-class Log
-{
-
-    /**
-     * @param string $expression
-     * @param string $fileName
-     * @param bool|true $showInfo
-     * @param string $dir
-     *
-     * @return void
-     */
-    public static function log($expression, $fileName, $showInfo = true, $dir = 'logs')
-    {
-        if (is_scalar($expression)) {
-            $expression = strip_tags($expression);
-        }
-
-        self::logRaw($expression, $fileName, $showInfo, $dir);
-    }
-
-    /**
-     * Simple Logger
-     *
-     * @param mixed $expression
-     * @param string $fileName
-     * @param bool $showInfo
-     * @param string $dir
-     *
-     * @return void
-     */
-    public static function logRaw($expression, $fileName, $showInfo = true, $dir = 'logs')
-    {
-        $string = '';
-        if ($showInfo) {
-            $string = '-------' . PHP_EOL;
-            $string .= date('c', time()) . ' ';
-        }
-
-        $sanitizedExpression = print_r($expression, true);
-
-        $string .= htmlentities($sanitizedExpression, ENT_QUOTES);
-        $string .= PHP_EOL;
-
-        $filePath = self::getFilePath($fileName, $dir);
-
-        file_put_contents($filePath, $string, FILE_APPEND);
-    }
-
-    /**
-     * Writes the pure content of expression into the file
-     * - without any overhead
-     * - if file already exists, it will be truncated first
-     *
-     * @param mixed $expression
-     * @param string $fileName
-     *
-     * @return void
-     */
-    public static function setFlashInFile($expression, $fileName)
-    {
-        $filePath = self::getFilePath($fileName);
-        $string = serialize($expression);
-        file_put_contents($filePath, $string);
-    }
-
-    /**
-     * Retrieves Content from Flashfile
-     *
-     * @param string $fileName
-     *
-     * @return string
-     */
-    public static function getFlashInFile($fileName)
-    {
-        $filePath = self::getFilePath($fileName);
-        if (!file_exists($filePath)) {
-            return '';
-        }
-        $content = file_get_contents($filePath);
-        if (empty($content)) {
-            return '';
-        }
-
-        return unserialize($content);
-    }
-
-    /**
-     * @param string $fileName
-     * @param string $dir
-     *
-     * @throws \Exception
-     *
-     * @return string
-     */
-    public static function getFilePath($fileName, $dir = 'logs')
-    {
-        $logPath = DataDirectory::getLocalStoreSpecificPath($dir);
-        if ($dir === 'logs') {
-            $logPath .= APPLICATION . DIRECTORY_SEPARATOR;
-            if (is_dir($logPath) === false) {
-                mkdir($logPath, 0775, true);
-            }
-        }
-
-        if (!is_writable($logPath)) {
-            throw new Exception(sprintf('Log file "%s" is not writable!', $logPath));
-        }
-
-        return $logPath . DIRECTORY_SEPARATOR . $fileName;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Monolog/EventJournalHandler.php b/Bundles/Library/src/Spryker/Shared/Library/Monolog/EventJournalHandler.php
deleted file mode 100644
index 2d98e02..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Monolog/EventJournalHandler.php
+++ /dev/null
@@ -1,38 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Monolog;
-
-use Monolog\Handler\AbstractHandler;
-use Spryker\Shared\EventJournal\Model\Event;
-use Spryker\Shared\EventJournal\Model\SharedEventJournal;
-
-class EventJournalHandler extends AbstractHandler
-{
-
-    const MESSAGE_LOG_MONOLOG = 'monolog';
-
-    /**
-     * {@inheritdoc}
-     *
-     * @return void
-     */
-    public function handle(array $record)
-    {
-        $journal = new SharedEventJournal();
-        $event = new Event();
-        $event->setField('extra', $record['extra']);
-        $event->setField('context', $record['context']);
-        $event->setField('channel', $record['channel']);
-        $event->setField('context', $record['context']);
-        $event->setField('message', $record['message']);
-        $event->setField('level', $record['level_name']);
-        $event->setField('name', self::MESSAGE_LOG_MONOLOG);
-        $journal->saveEvent($event);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/PHPUnit/Constraints/ArrayContainsKeyEqualToConstraint.php b/Bundles/Library/src/Spryker/Shared/Library/PHPUnit/Constraints/ArrayContainsKeyEqualToConstraint.php
deleted file mode 100644
index 94951a0..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/PHPUnit/Constraints/ArrayContainsKeyEqualToConstraint.php
+++ /dev/null
@@ -1,114 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\PHPUnit\Constraints;
-
-use PHPUnit_Framework_Constraint;
-use PHPUnit_Framework_ExpectationFailedException;
-use PHPUnit_Util_Type;
-use SebastianBergmann\Comparator\ComparisonFailure;
-use SebastianBergmann\Comparator\Factory;
-
-class ArrayContainsKeyEqualToConstraint extends PHPUnit_Framework_Constraint
-{
-
-    /**
-     * @var string
-     */
-    protected $key;
-
-    /**
-     * @var mixed
-     */
-    protected $value;
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     */
-    public function __construct($key, $value)
-    {
-        $this->key = $key;
-        $this->value = $value;
-    }
-
-    /**
-     * @param array $other
-     * @param string $description
-     * @param bool $returnResult
-     *
-     * @throws \PHPUnit_Framework_ExpectationFailedException
-     *
-     * @return bool
-     */
-    public function evaluate($other, $description = '', $returnResult = false)
-    {
-        if (!is_array($other)) {
-            if ($returnResult) {
-                return false;
-            }
-
-            throw new PHPUnit_Framework_ExpectationFailedException(
-                trim($description . "\n" . 'Value is not an array')
-            );
-        }
-
-        if (!isset($other[$this->key])) {
-            if ($returnResult) {
-                return false;
-            }
-
-            throw new PHPUnit_Framework_ExpectationFailedException(
-                trim($description . "\n" . 'Array does not contain the expected key ' . $this->key)
-            );
-        }
-
-        $comparatorFactory = Factory::getInstance();
-
-        try {
-            $comparator = $comparatorFactory->getComparatorFor(
-                $other[$this->key],
-                $this->value
-            );
-
-            $comparator->assertEquals(
-                $this->value,
-                $other[$this->key]
-            );
-        } catch (ComparisonFailure $f) {
-            if ($returnResult) {
-                return false;
-            }
-
-            throw new PHPUnit_Framework_ExpectationFailedException(
-                trim($description . "\n" . $f->getMessage()),
-                $f
-            );
-        }
-
-        return true;
-    }
-
-    /**
-     * Returns a string representation of the object.
-     *
-     * @return string
-     */
-    public function toString()
-    {
-        if (is_string($this->value)) {
-            return sprintf('Key %s is equal to %s', $this->key, $this->value);
-        } else {
-            return sprintf(
-                'key %s is equal to %s',
-                $this->key,
-                PHPUnit_Util_Type::export($this->value)
-            );
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMeta.php b/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMeta.php
deleted file mode 100644
index 1e98ec2..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMeta.php
+++ /dev/null
@@ -1,151 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Reader\Csv;
-
-use SplFileObject;
-
-class CsvMeta implements CsvMetaInterface
-{
-
-    /**
-     * @var \SplFileObject
-     */
-    protected $csvFile;
-
-    /**
-     * @var array
-     */
-    protected $columns;
-
-    /**
-     * @var string
-     */
-    protected $columnsAsString;
-
-    /**
-     * @var int
-     */
-    protected $columnsOffset;
-
-    /**
-     * @var string
-     */
-    protected $delimiter;
-
-    /**
-     * @var string
-     */
-    protected $enclosure;
-
-    /**
-     * @var string
-     */
-    protected $lineSeparator;
-
-    /**
-     * @var int
-     */
-    protected $total;
-
-    /**
-     * @param \SplFileObject $csvFile
-     */
-    public function __construct(SplFileObject $csvFile, $lineSeparator = "\n")
-    {
-        $this->csvFile = $csvFile;
-        $this->lineSeparator = $lineSeparator;
-    }
-
-    /**
-     * @return \SplFileObject
-     */
-    public function getCsvFile()
-    {
-        return $this->csvFile;
-    }
-
-    /**
-     * @return array
-     */
-    public function getColumns()
-    {
-        if ($this->columns === null) {
-            $this->csvFile->fseek(0);
-            $this->columns = $this->csvFile->fgetcsv();
-        }
-
-        return $this->columns;
-    }
-
-    /**
-     * @return string
-     */
-    public function getColumnsAsString()
-    {
-        if ($this->columnsAsString === null) {
-            $this->columnsAsString = implode($this->getDelimiter(), $this->getColumns());
-        }
-
-        return $this->columnsAsString;
-    }
-
-    /**
-     * @return int
-     */
-    public function getTotal()
-    {
-        if ($this->total === null) {
-            $this->csvFile->fseek(0);
-
-            $lines = 0;
-            while (!$this->csvFile->eof()) {
-                $lines += substr_count($this->csvFile->fread(8192), $this->lineSeparator);
-            }
-
-            $this->total = (int)$lines;
-        }
-
-        return $this->total;
-    }
-
-    /**
-     * @return string
-     */
-    public function getDelimiter()
-    {
-        if ($this->delimiter === null) {
-            list($this->delimiter, $enclosure) = $this->csvFile->getCsvControl();
-        }
-
-        return $this->delimiter;
-    }
-
-    /**
-     * @return string
-     */
-    public function getEnclosure()
-    {
-        if ($this->enclosure === null) {
-            list($delimiter, $this->enclosure) = $this->csvFile->getCsvControl();
-        }
-
-        return $this->enclosure;
-    }
-
-    /**
-     * @return int
-     */
-    public function getColumnsOffset()
-    {
-        if ($this->columnsOffset === null) {
-            $this->columnsOffset = strlen($this->getColumnsAsString() . $this->lineSeparator);
-        }
-        return $this->columnsOffset;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMetaInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMetaInterface.php
deleted file mode 100644
index 0cac323..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvMetaInterface.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-namespace Spryker\Shared\Library\Reader\Csv;
-
-interface CsvMetaInterface
-{
-
-    /**
-     * @return \SplFileObject
-     */
-    public function getCsvFile();
-
-    /**
-     * @return array
-     */
-    public function getColumns();
-
-    /**
-     * @return string
-     */
-    public function getColumnsAsString();
-
-    /**
-     * @return int
-     */
-    public function getTotal();
-
-    /**
-     * @return string
-     */
-    public function getDelimiter();
-
-    /**
-     * @return string
-     */
-    public function getEnclosure();
-
-    /**
-     * @return int
-     */
-    public function getColumnsOffset();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReader.php b/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReader.php
deleted file mode 100644
index 97a5c6e..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReader.php
+++ /dev/null
@@ -1,253 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Reader\Csv;
-
-use SplFileObject;
-use Spryker\Shared\Library\Exception\ResourceNotFoundException;
-use UnexpectedValueException;
-
-class CsvReader implements CsvReaderInterface
-{
-
-    /**
-     * @var \SplFileObject
-     */
-    protected $csvFile;
-
-    /**
-     * @var \Spryker\Shared\Library\Reader\Csv\CsvMetaInterface
-     */
-    protected $csvMeta;
-
-    /**
-     * @var string
-     */
-    protected $csvFilename;
-
-    /**
-     * @var int
-     */
-    protected $readIndex = 1;
-
-    /**
-     * @param string $filename
-     *
-     * @throws \Spryker\Shared\Library\Exception\ResourceNotFoundException
-     *
-     * @return \SplFileObject
-     */
-    protected function createCsvFile($filename)
-    {
-        if (!is_file($filename) || !is_readable($filename)) {
-            throw new ResourceNotFoundException(sprintf(
-                'Could not open CSV file "%s"',
-                $filename
-            ));
-        }
-
-        $csvFile = new SplFileObject($filename);
-        $csvFile->setCsvControl(',', '"');
-        $csvFile->setFlags(SplFileObject::READ_CSV | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
-
-        return $csvFile;
-    }
-
-    /**
-     * @param string $filename
-     *
-     * @return \Spryker\Shared\Library\Reader\Csv\CsvMetaInterface
-     */
-    protected function createCsvMeta($filename)
-    {
-        $csvFile = $this->createCsvFile($filename);
-        return new CsvMeta($csvFile);
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Reader\Csv\CsvMetaInterface
-     */
-    public function getCsvMeta()
-    {
-        if ($this->csvMeta === null) {
-            $this->csvMeta = $this->createCsvMeta($this->getFile()->getPathname());
-        }
-
-        return $this->csvMeta;
-    }
-
-    /**
-     * @param array $columns
-     * @param array $data
-     *
-     * @return array
-     */
-    public function composeItem(array $columns, array $data)
-    {
-        if (count($columns) !== count($data)) {
-            return [];
-        }
-
-        return array_combine(
-            array_values($columns),
-            array_values($data)
-        );
-    }
-
-    /**
-     * @param array $columns
-     * @param array $data
-     * @param string $filename
-     * @param int $lineNumber
-     *
-     * @throws \UnexpectedValueException
-     *
-     * @return array
-     */
-    protected function composeAndValidateLine(array $columns, array $data, $filename, $lineNumber)
-    {
-        $data = array_values($data);
-        $columns = array_values($columns);
-
-        if (empty($data)) {
-            throw new UnexpectedValueException(sprintf(
-                'Expected %d column(s) but received data with %d column(s) in %s on line %d',
-                count($columns),
-                count($data),
-                $filename,
-                $lineNumber
-            ));
-        }
-
-        return $this->composeItem($columns, $data);
-    }
-
-    /**
-     * @return array
-     */
-    public function getColumns()
-    {
-        return $this->getCsvMeta()->getColumns();
-    }
-
-    /**
-     * @return \SplFileObject
-     */
-    public function getFile()
-    {
-        if ($this->csvFile === null) {
-            $this->csvFile = $this->createCsvFile($this->csvFilename);
-        }
-
-        return $this->csvFile;
-    }
-
-    /**
-     * @return int
-     */
-    public function getTotal()
-    {
-        return $this->getCsvMeta()->getTotal();
-    }
-
-    /**
-     * @param string $filename
-     *
-     * @return $this
-     */
-    public function load($filename)
-    {
-        $this->csvFilename = $filename;
-        $this->csvFile = null;
-        $this->csvMeta = null;
-        $this->readIndex = 1;
-
-        $this->getFile()->rewind();
-
-        return $this;
-    }
-
-    /**
-     * @throws \UnexpectedValueException
-     *
-     * @return array
-     */
-    public function read()
-    {
-        $data = $this->getFile()->fgetcsv();
-        if (empty($data)) {
-            throw new UnexpectedValueException(sprintf(
-                'Malformed data at line %d in %s',
-                $this->readIndex,
-                $this->csvFilename
-            ));
-        }
-
-        $data = $this->composeAndValidateLine(
-            $this->getCsvMeta()->getColumns(),
-            $data,
-            $this->getFile()->getRealPath(),
-            $this->readIndex + 1
-        );
-
-        $this->readIndex++;
-
-        return $data;
-    }
-
-    /**
-     * @return bool
-     */
-    public function valid()
-    {
-        return !$this->getFile()->eof();
-    }
-
-    /**
-     * @param bool $skipColumns
-     *
-     * @return void
-     */
-    public function rewind($skipColumns = true)
-    {
-        $this->csvFile->fseek(0);
-
-        if ($skipColumns) {
-            $this->getFile()->fseek($this->getCsvMeta()->getColumnsOffset());
-            return;
-        }
-    }
-
-    /**
-     * @return array
-     */
-    public function toArray()
-    {
-        $data = [];
-        $csvFile = $this->createCsvFile($this->getFile()->getPathname());
-        $csvMeta = $this->createCsvMeta($this->getFile()->getPathname());
-        $currentLine = 1;
-
-        $csvFile->rewind();
-        while (!$csvFile->eof()) {
-            $line = $csvFile->fgetcsv();
-            if (!$line) {
-                break;
-            }
-
-            $data[] = $this->composeAndValidateLine(
-                $csvMeta->getColumns(),
-                $line,
-                $csvFile->getRealPath(),
-                $currentLine++
-            );
-        }
-
-        return $data;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReaderInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReaderInterface.php
deleted file mode 100644
index dbe2c15..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Reader/Csv/CsvReaderInterface.php
+++ /dev/null
@@ -1,65 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Reader\Csv;
-
-interface CsvReaderInterface
-{
-
-    /**
-     * @param array $columns
-     * @param array $data
-     *
-     * @return array
-     */
-    public function composeItem(array $columns, array $data);
-
-    /**
-     * @return array
-     */
-    public function getColumns();
-
-    /**
-     * @return \SplFileObject
-     */
-    public function getFile();
-
-    /**
-     * @return int
-     */
-    public function getTotal();
-
-    /**
-     * @param string $filename
-     *
-     * @return $this
-     */
-    public function load($filename);
-
-    /**
-     * @throws \UnexpectedValueException
-     *
-     * @return array
-     */
-    public function read();
-
-    /**
-     * @return bool
-     */
-    public function valid();
-
-    /**
-     * @return void
-     */
-    public function rewind($skipColumns = true);
-
-    /**
-     * @return array
-     */
-    public function toArray();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/AbstractKeyValue.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/AbstractKeyValue.php
deleted file mode 100644
index cb08939..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/AbstractKeyValue.php
+++ /dev/null
@@ -1,144 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use Spryker\Shared\Library\Storage\AdapterInterface;
-use Spryker\Shared\Library\Storage\AdapterTrait;
-
-/**
- * Class AbstractKeyValue
- */
-abstract class AbstractKeyValue implements AdapterInterface
-{
-
-    use AdapterTrait;
-
-    /**
-     * @var array
-     */
-    protected $accessStats;
-
-    /**
-     * @param array $config
-     * @param bool $debug
-     */
-    public function __construct(array $config, $debug = false)
-    {
-        $this->config = $config;
-        $this->debug = $debug;
-        $this->resetAccessStats();
-    }
-
-    /**
-     * set read write stats array
-     *
-     * @return void
-     */
-    public function resetAccessStats()
-    {
-        $this->accessStats = [
-            'count' => [
-                'read' => 0,
-                'write' => 0,
-                'delete' => 0,
-            ],
-            'keys' => [
-                'read' => [],
-                'write' => [],
-                'delete' => [],
-            ],
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public function getAccessStats()
-    {
-        return $this->accessStats;
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addReadAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['read']++;
-            $this->accessStats['keys']['read'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    protected function addMultiReadAccessStats(array $keys)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['read'] += count($keys);
-            $this->accessStats['keys']['read'] = $this->accessStats['keys']['read'] + $keys;
-        }
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addWriteAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['write']++;
-            $this->accessStats['keys']['write'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $items
-     *
-     * @return void
-     */
-    protected function addMultiWriteAccessStats(array $items)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['write'] += count($items);
-            $this->accessStats['keys']['write'] = $this->accessStats['keys']['write'] + array_keys($items);
-        }
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addDeleteAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['delete']++;
-            $this->accessStats['keys']['delete'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    protected function addMultiDeleteAccessStats(array $keys)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['delete'] += count($keys);
-            $this->accessStats['keys']['delete'] = $this->accessStats['keys']['delete'] + $keys;
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Memcached.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Memcached.php
deleted file mode 100644
index 752e6fe..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Memcached.php
+++ /dev/null
@@ -1,58 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use Memcached as PhpMemcached;
-use MemcachedException;
-
-/**
- * @property \Memcached $resource
- *
- * @method \Memcached getResource()
- */
-abstract class Memcached extends AbstractKeyValue
-{
-
-    /**
-     * @throws \MemcachedException
-     *
-     * @return void
-     */
-    public function connect()
-    {
-        if (!$this->resource) {
-            $resource = new PhpMemcached();
-            $resource->addServer(
-                isset($this->config['host']) ? $this->config['host'] : '',
-                isset($this->config['port']) ? $this->config['port'] : null
-            );
-
-            //ensure that values from multi calls are returned in the same order as requested
-            //@see http://www.php.net/manual/de/memcached.constants.php
-            $resource->setOption(PhpMemcached::GET_PRESERVE_ORDER, true);
-
-            $resource->getVersion();
-            if ($resource->getResultCode() !== 0) {
-                throw new MemcachedException('Could not connect to any memcached server');
-            }
-
-            $this->resource = $resource;
-        }
-    }
-
-    /**
-     * close memcache connection
-     */
-    public function __destruct()
-    {
-        if ($this->resource) {
-            $this->resource->quit();
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedRead.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedRead.php
deleted file mode 100644
index 519f3ca..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedRead.php
+++ /dev/null
@@ -1,72 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-class MemcachedRead extends Memcached implements ReadInterface
-{
-
-    /**
-     * @param string $key
-     *
-     * @return mixed
-     */
-    public function get($key)
-    {
-        $value = $this->getResource()->get($key);
-        $this->addReadAccessStats($key);
-
-        return $value;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return array
-     */
-    public function getMulti(array $keys)
-    {
-        $values = array_fill_keys($keys, null);
-        $values = array_merge($values, $this->getResource()->getMulti($keys));
-        $this->addMultiReadAccessStats($keys);
-
-        return $values;
-    }
-
-    /**
-     * @return array
-     */
-    public function getStats()
-    {
-        $stats = $this->getResource()->getStats();
-        if (!$stats) {
-            $stats = [];
-        }
-
-        return $stats;
-    }
-
-    /**
-     * @return array
-     */
-    public function getAllKeys()
-    {
-        return $this->getResource()->getAllKeys();
-    }
-
-    /**
-     * @return int
-     */
-    public function getCountItems()
-    {
-        $stats = $this->getStats();
-        $currentStats = array_pop($stats);
-
-        return (int)$currentStats['curr_items'];
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedReadWrite.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedReadWrite.php
deleted file mode 100644
index 1a5234a..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MemcachedReadWrite.php
+++ /dev/null
@@ -1,97 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use Exception;
-
-class MemcachedReadWrite extends MemcachedRead implements ReadWriteInterface
-{
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     *
-     * @throws \Exception
-     *
-     * @return bool
-     */
-    public function set($key, $value)
-    {
-        $result = $this->getResource()->set($key, $value);
-        $this->addWriteAccessStats($key);
-        if (!$result) {
-            throw new Exception(
-                'could not set memcacheKey: "' . $key . '" with value: "' . json_encode($value) . '"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $items
-     *
-     * @throws \Exception
-     *
-     * @return bool
-     */
-    public function setMulti(array $items)
-    {
-        $result = $this->getResource()->setMulti($items);
-        $this->addMultiWriteAccessStats($items);
-        if (!$result) {
-            throw new Exception(
-                'could not set memcacheKeys for items: "[' . implode(',', array_keys($items)) . ']" with values: "[' . implode(',', array_values($items)) . ']"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return bool
-     */
-    public function delete($key)
-    {
-        $result = $this->getResource()->delete($key);
-        $this->addDeleteAccessStats($key);
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    public function deleteMulti(array $keys)
-    {
-        $this->getResource()->deleteMulti($keys);
-        $this->addMultiDeleteAccessStats($keys);
-    }
-
-    /**
-     * @return int
-     */
-    public function deleteAll()
-    {
-        $deleteCount = 0;
-        while ($keys = $this->getAllKeys()) {
-            foreach ($keys as $key) {
-                if ($this->getResource()->delete($key)) {
-                    $deleteCount++;
-                }
-            }
-        }
-
-        return $deleteCount;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Mysql.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Mysql.php
deleted file mode 100644
index 3474a92..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Mysql.php
+++ /dev/null
@@ -1,88 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use PDO;
-use RuntimeException;
-
-/**
- * @property \PDO $resource
- *
- * @method \PDO getResource()
- */
-
-abstract class Mysql extends AbstractKeyValue
-{
-
-    const TABLE_NAME = 'shared_data';
-    const FIELD_KEY = 'key';
-    const FIELD_VALUE = 'value';
-
-    const FIELD_STATS_VARIABLE_NAME = 'Variable_name';
-    const FIELD_STATS_VALUE = 'Value';
-
-    /**
-     * @return void
-     */
-    public function connect()
-    {
-        if (!$this->resource) {
-            $host = $this->config['host'] ? $this->config['host'] : null;
-            $database = $this->config['database'] ? $this->config['database'] : null;
-            $port = $this->config['port'] ? $this->config['port'] : null;
-
-            $dsn = 'mysql:host=' . $host . ';port=' . $port . ';dbname=' . $database;
-            $resource = new PDO(
-                $dsn,
-                $this->config['user'] ? $this->config['user'] : null,
-                $this->config['password'] ? $this->config['password'] : null
-            );
-
-            $this->resource = $resource;
-            $this->initDb();
-        }
-    }
-
-    /**
-     * @throws \RuntimeException
-     *
-     * @return bool|\mysqli_result
-     */
-    protected function initDb()
-    {
-        if (empty($this->config['database'])) {
-            throw new RuntimeException('Database is not defined in config');
-        }
-
-        $query = 'CREATE TABLE IF NOT EXISTS  ' . $this->getTableName() . " (
-  `key` varchar(255) NOT NULL DEFAULT '',
-  `value` text,
-  PRIMARY KEY (`key`)
-) ENGINE=InnoDB DEFAULT CHARSET=utf8;";
-
-        $statement = $this->getResource()->query($query);
-
-        return $statement->execute();
-    }
-
-    /**
-     * @return string
-     */
-    protected function getTableName()
-    {
-        return $this->config['table'];
-    }
-
-    public function __destruct()
-    {
-        if ($this->resource) {
-            unset($this->resource);
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlRead.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlRead.php
deleted file mode 100644
index 058f6d8..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlRead.php
+++ /dev/null
@@ -1,149 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-class MysqlRead extends Mysql implements ReadInterface
-{
-
-    /**
-     * @param string $key
-     *
-     * @return mixed
-     */
-    public function get($key)
-    {
-        $value = $this->runGet($key);
-        $this->addReadAccessStats($key);
-
-        return $value;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return array
-     */
-    public function getMulti(array $keys)
-    {
-        $values = $this->runGetMulti($keys);
-        $this->addMultiReadAccessStats($keys);
-
-        return $values;
-    }
-
-    /**
-     * @return array
-     */
-    public function getStats()
-    {
-        //        $stats = [];
-////        $result = $this->runQuery('SHOW GLOBAL STATUS');
-//
-//        $statement = $this->resource->query('SHOW GLOBAL STATUS');
-//        $statement->execute();
-//
-//        while ($row = $statement->fetch()) {
-//            $stats[$row[self::FIELD_STATS_VARIABLE_NAME]] = $row[self::FIELD_STATS_VALUE];
-//        }
-//
-//        return $stats;
-    }
-
-    /**
-     * @return array
-     */
-    public function getAllKeys()
-    {
-        //        $keys = [];
-//        $query = sprintf(
-//            'SELECT `%s` FROM `%s`',
-//            $this->getResource()->escape_string(self::FIELD_KEY),
-//            $this->getResource()->escape_string(self::TABLE_NAME)
-//        );
-//        $result = $this->runQuery($query);
-//        while ($row = $result->fetch_array(MYSQL_ASSOC)) {
-//            $keys[] = $row[self::FIELD_KEY];
-//        }
-//
-//        return $keys;
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return mixed
-     */
-    protected function runGet($key)
-    {
-        $value = null;
-        $tableName = $this->getTableName();
-        $query = 'SELECT ' . self::FIELD_VALUE . ' FROM ' . $tableName . ' WHERE ' . $tableName . '.' . self::FIELD_KEY . ' = ?';
-
-        $resource = $this->getResource();
-        $statement = $resource->prepare($query);
-        $statement->execute([$key]);
-
-        $result = $statement->fetch();
-
-        if ($result) {
-            $value = json_decode($result[self::FIELD_VALUE], true);
-        }
-
-        return $value;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    protected function runGetMulti(array $keys)
-    {
-        //        if (empty($keys)) {
-//            return [];
-//        }
-//
-//        $valueMulti = array_fill_keys($keys, null);
-//        $keysQuery = [];
-//        foreach ($keys as $key) {
-//            $keysQuery[]= sprintf(
-//                '`%s` = \'%s\'',
-//                $this->getResource()->escape_string(self::FIELD_KEY),
-//                $this->getResource()->real_escape_string($key)
-//            );
-//        }
-//
-//        $query = sprintf(
-//            'SELECT * FROM `%s` WHERE (%s)',
-//            $this->getResource()->escape_string(self::TABLE_NAME),
-//            implode(' OR ', $keysQuery)
-//        );
-//
-//        $tmpValueMulti = [];
-//        $result = $this->runQuery($query);
-//        while (($row = $result->fetch_assoc()) !== null) {
-//            $tmpValueMulti[$row[self::FIELD_KEY]] = unserialize($row[self::FIELD_VALUE]);
-//        }
-//
-//        return array_merge($valueMulti, $tmpValueMulti);
-    }
-
-    /**
-     * @return int
-     */
-    public function getCountItems()
-    {
-        $query = 'SELECT count(*) as items FROM ' . $this->getTableName();
-        $statement = $this->getResource()->query($query);
-        $statement->execute();
-        $result = $statement->fetch();
-
-        return (int)$result['items'];
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlReadWrite.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlReadWrite.php
deleted file mode 100644
index 5d6e29e..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/MysqlReadWrite.php
+++ /dev/null
@@ -1,137 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-class MysqlReadWrite extends MysqlRead implements ReadWriteInterface
-{
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     *
-     * @return mixed|void
-     */
-    public function set($key, $value)
-    {
-        $result = $this->runInsert($key, $value);
-        $this->addWriteAccessStats($key);
-
-        return $result;
-    }
-
-    /**
-     * @param array $items
-     *
-     * @return mixed
-     */
-    public function setMulti(array $items)
-    {
-        $result = [];
-        foreach ($items as $key => $value) {
-            $result[] = $this->runInsert($key, $value);
-        }
-        $this->addMultiWriteAccessStats($items);
-
-        return $result;
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return bool|mixed|\mysqli_result
-     */
-    public function delete($key)
-    {
-        $result = $this->runDelete($key);
-        $this->addDeleteAccessStats($key);
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return array
-     */
-    public function deleteMulti(array $keys)
-    {
-        $result = [];
-        foreach ($keys as $key) {
-            $result[] = $this->runDelete($key);
-        }
-        $this->addMultiDeleteAccessStats($keys);
-
-        return $result;
-    }
-
-    /**
-     * @return int
-     */
-    public function deleteAll()
-    {
-        return $this->runDeleteAll();
-    }
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     *
-     * @return bool|\mysqli_result
-     */
-    protected function runInsert($key, $value)
-    {
-        $query = sprintf(
-            'REPLACE INTO `%s` (`%s`,`%s`) VALUES (?, ?)',
-            $this->getTableName(),
-            self::FIELD_KEY,
-            self::FIELD_VALUE
-        );
-
-        $statement = $this->getResource()->prepare($query);
-
-        return $statement->execute([
-            $key,
-            json_encode($value),
-        ]);
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return bool|\mysqli_result
-     */
-    protected function runDelete($key)
-    {
-        $query = sprintf(
-            'DELETE FROM `%s` WHERE `%s` = ?',
-            $this->getTableName(),
-            self::FIELD_KEY
-        );
-
-        $statement = $this->getResource()->prepare($query);
-
-        return $statement->execute([$key]);
-    }
-
-    /**
-     * @return int
-     */
-    protected function runDeleteAll()
-    {
-        $query = sprintf(
-            'DELETE FROM `%s`',
-            $this->getTableName()
-        );
-
-        $statement = $this->getResource()->query($query);
-        $statement->execute();
-
-        return $statement->rowCount();
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadInterface.php
deleted file mode 100644
index c443fa4..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadInterface.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-/**
- * Interface ReadInterface
- */
-
-interface ReadInterface
-{
-
-    /**
-     * @param string $key
-     *
-     * @return mixed
-     */
-    public function get($key);
-
-    /**
-     * @param array $keys
-     *
-     * @return array
-     */
-    public function getMulti(array $keys);
-
-    /**
-     * @return array
-     */
-    public function getStats();
-
-    /**
-     * @return array
-     */
-    public function getAllKeys();
-
-    /**
-     * @return void
-     */
-    public function resetAccessStats();
-
-    /**
-     * @return array
-     */
-    public function getAccessStats();
-
-    /**
-     * @return int
-     */
-    public function getCountItems();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadWriteInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadWriteInterface.php
deleted file mode 100644
index f253fa9..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/ReadWriteInterface.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-/**
- * Interface ReadWriteInterface
- */
-
-interface ReadWriteInterface extends ReadInterface
-{
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     *
-     * @return void
-     */
-    public function set($key, $value);
-
-    /**
-     * @param array $items
-     * @param string $prefix
-     *
-     * @return bool|mixed
-     */
-    public function setMulti(array $items, $prefix = RedisRead::KV_PREFIX);
-
-    /**
-     * @param string $key
-     * @param string $prefix
-     *
-     * @return bool|mixed
-     */
-    public function delete($key, $prefix = RedisRead::KV_PREFIX);
-
-    /**
-     * @param array $keys
-     * @param string $prefix
-     *
-     * @return bool|mixed
-     */
-    public function deleteMulti(array $keys, $prefix = RedisRead::KV_PREFIX);
-
-    /**
-     * @return mixed
-     */
-    public function deleteAll();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Redis.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Redis.php
deleted file mode 100644
index 5c52b7d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/Redis.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use Predis\Client;
-use Predis\Connection\ConnectionException;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\LibraryConstants;
-
-/**
- * @property \Predis\Client $resource
- *
- * @method \Predis\Client getResource()
- */
-abstract class Redis extends AbstractKeyValue
-{
-
-    /**
-     * @throws \Predis\Connection\ConnectionException
-     *
-     * @return void
-     */
-    public function connect()
-    {
-        if (!$this->resource) {
-            $resource = new Client($this->config);
-
-            if (!$resource) {
-                throw new ConnectionException($resource, 'Could not connect to redis server');
-            }
-
-            $this->resource = $resource;
-        }
-    }
-
-    /**
-     * close redis connection
-     */
-    public function __destruct()
-    {
-        $isPersistent = false;
-        if (Config::hasKey(LibraryConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION)) {
-            $isPersistent = (bool)Config::get(LibraryConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION);
-        }
-
-        if (!$isPersistent && $this->resource) {
-            $this->resource->disconnect();
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisRead.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisRead.php
deleted file mode 100644
index 3384a61..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisRead.php
+++ /dev/null
@@ -1,110 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-/**
- * Class RedisRead
- */
-
-class RedisRead extends Redis implements ReadInterface
-{
-
-    const KV_PREFIX = 'kv:';
-
-    /**
-     * @param string $key
-     * @param string $prefix
-     *
-     * @return mixed|string
-     */
-    public function get($key, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $value = $this->getResource()->get($key);
-        $this->addReadAccessStats($key);
-
-        $result = json_decode($value, true);
-
-        if (json_last_error() === \JSON_ERROR_SYNTAX) {
-            return $value;
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     * @param string $prefix
-     *
-     * @return array
-     */
-    public function getMulti(array $keys, $prefix = self::KV_PREFIX)
-    {
-        $transformedKeys = [];
-        foreach ($keys as $key) {
-            $transformedKeys[] = $this->getKeyName($key, $prefix);
-        }
-
-        $values = array_combine($transformedKeys, $this->getResource()->mget($transformedKeys));
-        $this->addMultiReadAccessStats($keys);
-
-        return $values;
-    }
-
-    /**
-     * @param string|null $section
-     *
-     * @return array
-     */
-    public function getStats($section = null)
-    {
-        return $this->getResource()->info($section);
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return array
-     */
-    public function getAllKeys($prefix = self::KV_PREFIX)
-    {
-        return $this->getResource()->keys($this->getSearchPattern($prefix));
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return int
-     */
-    public function getCountItems($prefix = self::KV_PREFIX)
-    {
-        return count($this->getResource()->keys($this->getSearchPattern($prefix)));
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return string
-     */
-    protected function getSearchPattern($prefix = self::KV_PREFIX)
-    {
-        return $prefix ? $prefix . '*' : '*';
-    }
-
-    /**
-     * @param string $key
-     * @param string $prefix
-     *
-     * @return string
-     */
-    protected function getKeyName($key, $prefix = self::KV_PREFIX)
-    {
-        return $prefix ? $prefix . $key : $key;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisReadWrite.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisReadWrite.php
deleted file mode 100644
index b7d6b6a..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/KeyValue/RedisReadWrite.php
+++ /dev/null
@@ -1,121 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\KeyValue;
-
-use Exception;
-
-class RedisReadWrite extends RedisRead implements ReadWriteInterface
-{
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     * @param string $prefix
-     *
-     * @throws \Exception
-     *
-     * @return mixed
-     */
-    public function set($key, $value, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $result = $this->getResource()->set($key, $value);
-        $this->addWriteAccessStats($key);
-        if (!$result) {
-            throw new Exception(
-                'could not set redisKey: "' . $key . '" with value: "' . json_encode($value) . '"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $items
-     * @param string $prefix
-     *
-     * @throws \Exception
-     *
-     * @return bool|mixed
-     */
-    public function setMulti(array $items, $prefix = self::KV_PREFIX)
-    {
-        $data = [];
-
-        foreach ($items as $key => $value) {
-            $dataKey = $this->getKeyName($key, $prefix);
-
-            if (!is_scalar($value)) {
-                $value = json_encode($value);
-            }
-
-            $data[$dataKey] = $value;
-        }
-
-        if (count($data) === 0) {
-            return false;
-        }
-
-        $result = $this->getResource()->mset($data);
-        $this->addMultiWriteAccessStats($data);
-
-        if (!$result) {
-            throw new Exception(
-                'could not set redisKeys for items: "[' . implode(',', array_keys($items)) . ']" with values: "[' . implode(',', array_values($items)) . ']"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param string $key
-     * @param string|null $prefix
-     *
-     * @return int
-     */
-    public function delete($key, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $result = $this->getResource()->del([$key]);
-        $this->addDeleteAccessStats($key);
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     * @param string $prefix
-     *
-     * @return void
-     */
-    public function deleteMulti(array $keys, $prefix = self::KV_PREFIX)
-    {
-        $items = [];
-        foreach ($keys as $key => $value) {
-            $dataKey = $this->getKeyName($key, $prefix);
-            $items[] = $dataKey;
-        }
-
-        $this->getResource()->del($items);
-        $this->addMultiDeleteAccessStats($items);
-    }
-
-    /**
-     * @return int
-     */
-    public function deleteAll()
-    {
-        $keys = $this->getAllKeys();
-        $deleteCount = count($keys);
-        $this->deleteMulti($keys);
-
-        return $deleteCount;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/LocalInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/LocalInterface.php
deleted file mode 100644
index 30d6b10..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/LocalInterface.php
+++ /dev/null
@@ -1,55 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-
-/**
- * Class LocalInterface
- */
-interface LocalInterface
-{
-
-    /**
-     * @param string $type
-     * @param array|null $options
-     *
-     * @return \Solarium\Core\Query\Query
-     */
-    public function createQuery($type, $options = null);
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\Core\Query\Result\ResultInterface
-     */
-    public function execute(QueryInterface $query);
-
-    /**
-     * @param string $coreName
-     *
-     * @return void
-     */
-    public function reloadCore($coreName);
-
-    /**
-     * @param string $coreName
-     * @param string $coreDir
-     *
-     * @return void
-     */
-    public function createCore($coreName, $coreDir);
-
-    /**
-     * @param string $coreName
-     *
-     * @return void
-     */
-    public function unloadCore($coreName);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadInterface.php
deleted file mode 100644
index ebc38d3..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadInterface.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-
-/**
- * Class ReadInterface
- */
-interface ReadInterface
-{
-
-    /**
-     * @return \Solarium\QueryType\Select\Query\Query
-     */
-    public function createSelect();
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\QueryType\Select\Result\Result
-     */
-    public function select(QueryInterface $query);
-
-    /**
-     * @return int
-     */
-    public function getNumDocs();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadWriteInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadWriteInterface.php
deleted file mode 100644
index 85126aa..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/ReadWriteInterface.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-
-/**
- * Class ReadWriteInterface
- */
-interface ReadWriteInterface
-{
-
-    /**
-     * @param string $type
-     *
-     * @return \Solarium\Core\Query\Query
-     */
-    public function createQuery($type);
-
-    /**
-     * @return \Solarium\QueryType\Select\Query\Query
-     */
-    public function createSelect();
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\QueryType\Select\Result\Result
-     */
-    public function select(QueryInterface $query);
-
-    /**
-     * @return int
-     */
-    public function getNumDocs();
-
-    /**
-     * @return \Solarium\QueryType\Update\Query\Query
-     */
-    public function createUpdate();
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\Core\Query\Result\ResultInterface
-     */
-    public function execute(QueryInterface $query);
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\QueryType\Update\Result
-     */
-    public function update(QueryInterface $query);
-
-    /**
-     * @param bool $commit
-     *
-     * @return mixed
-     */
-    public function deleteAll($commit = true);
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/Solr.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/Solr.php
deleted file mode 100644
index a77331a..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/Solr.php
+++ /dev/null
@@ -1,91 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Client;
-use Spryker\Shared\Library\Storage\AdapterInterface;
-use Spryker\Shared\Library\Storage\AdapterTrait;
-use Spryker\Shared\Library\Storage\Adapter\Solr\Solarium\QueryType\Admin\Query;
-
-/**
- * Class Solr
- *
- * @property \Solarium\Client $resource
- *
- * @method \Solarium\Client getResource()
- */
-abstract class Solr implements AdapterInterface
-{
-
-    use AdapterTrait;
-
-    /**
-     * @var string
-     */
-    protected $endpoint;
-
-    /**
-     * @param array $config
-     * @param string|null $endpoint
-     * @param bool $debug
-     */
-    public function __construct(array $config, $endpoint = null, $debug = false)
-    {
-        $this->config = $config;
-        $this->debug = $debug;
-        $this->endpoint = $endpoint;
-    }
-
-    /**
-     * @return mixed|void
-     */
-    public function connect()
-    {
-        if (!$this->resource) {
-            $resource = new Client($this->config);
-            $resource->registerQueryType(
-                Query::QUERY_ADMIN,
-                'Spryker\Shared\Library\Storage\Adapter\Solr\Solarium\QueryType\Admin\Query'
-            );
-            if ($this->endpoint) {
-                $resource->setDefaultEndpoint($this->endpoint);
-            }
-
-            $this->resource = $resource;
-        }
-    }
-
-    /**
-     * close solarium connection
-     */
-    public function __destruct()
-    {
-        if ($this->resource) {
-            $this->resource = null;
-        }
-    }
-
-    /**
-     * @return string
-     */
-    public function getEndpoint()
-    {
-        return $this->endpoint;
-    }
-
-    /**
-     * @param string $endpoint
-     *
-     * @return void
-     */
-    public function setEndpoint($endpoint)
-    {
-        $this->endpoint = $endpoint;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrLocal.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrLocal.php
deleted file mode 100644
index 4973733..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrLocal.php
+++ /dev/null
@@ -1,82 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-use Spryker\Shared\Library\Storage\Adapter\Solr\Solarium\QueryType\Admin\Query;
-
-/**
- * Class SolrReadWrite
- */
-class SolrLocal extends Solr implements LocalInterface
-{
-
-    /**
-     * @param string $type
-     * @param array|null $options
-     *
-     * @return \Solarium\Core\Query\Query
-     */
-    public function createQuery($type, $options = null)
-    {
-        return $this->getResource()->createQuery($type, $options);
-    }
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\Core\Query\Result\ResultInterface
-     */
-    public function execute(QueryInterface $query)
-    {
-        return $this->getResource()->execute($query);
-    }
-
-    /**
-     * @param string $coreName
-     *
-     * @return void
-     */
-    public function reloadCore($coreName)
-    {
-        $query = $this->getResource()->createQuery(Query::QUERY_ADMIN);
-        $query->addParam('action', 'RELOAD');
-        $query->addParam('core', $coreName);
-        $this->getResource()->execute($query);
-    }
-
-    /**
-     * @param string $coreName
-     * @param string $coreDir
-     *
-     * @return void
-     */
-    public function createCore($coreName, $coreDir)
-    {
-        $query = $this->getResource()->createQuery(Query::QUERY_ADMIN);
-        $query->addParam('action', 'CREATE');
-        $query->addParam('name', $coreName);
-        $query->addParam('instanceDir', $coreDir);
-        $this->getResource()->execute($query);
-    }
-
-    /**
-     * @param string $coreName
-     *
-     * @return void
-     */
-    public function unloadCore($coreName)
-    {
-        $query = $this->getResource()->createQuery(Query::QUERY_ADMIN);
-        $query->addParam('action', 'UNLOAD');
-        $query->addParam('deleteIndex', 'true');
-        $query->addParam('core', $coreName);
-        $this->getResource()->execute($query);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrRead.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrRead.php
deleted file mode 100644
index 048f75d..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrRead.php
+++ /dev/null
@@ -1,49 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-
-/**
- * Class SolrRead
- *
- * @property \Solarium\Client $resource
- */
-class SolrRead extends Solr implements ReadInterface
-{
-
-    /**
-     * @return \Solarium\QueryType\Select\Query\Query
-     */
-    public function createSelect()
-    {
-        return $this->getResource()->createSelect();
-    }
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\QueryType\Select\Result\Result
-     */
-    public function select(QueryInterface $query)
-    {
-        return $this->getResource()->select($query);
-    }
-
-    /**
-     * @return int
-     */
-    public function getNumDocs()
-    {
-        $select = $this->getResource()->createSelect();
-        $result = $this->getResource()->select($select);
-
-        return $result->getNumFound();
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrReadWrite.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrReadWrite.php
deleted file mode 100644
index af36c19..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/Adapter/Solr/SolrReadWrite.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage\Adapter\Solr;
-
-use Solarium\Core\Query\QueryInterface;
-
-/**
- * Class SolrReadWrite
- */
-class SolrReadWrite extends SolrRead implements ReadWriteInterface
-{
-
-    /**
-     * @return \Solarium\QueryType\Update\Query\Query
-     */
-    public function createUpdate()
-    {
-        return $this->getResource()->createUpdate();
-    }
-
-    /**
-     * @param string $type
-     * @param array|null $options
-     *
-     * @return \Solarium\Core\Query\Query
-     */
-    public function createQuery($type, $options = null)
-    {
-        return $this->getResource()->createQuery($type, $options);
-    }
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\QueryType\Update\Result
-     */
-    public function update(QueryInterface $query)
-    {
-        return $this->getResource()->update($query);
-    }
-
-    /**
-     * @param \Solarium\Core\Query\QueryInterface $query
-     *
-     * @return \Solarium\Core\Query\Result\ResultInterface
-     */
-    public function execute(QueryInterface $query)
-    {
-        return $this->getResource()->execute($query);
-    }
-
-    /**
-     * @param bool $commit
-     *
-     * @return mixed|\Solarium\QueryType\Update\Result
-     */
-    public function deleteAll($commit = true)
-    {
-        $update = $this->getResource()->createUpdate();
-        $update->addDeleteQuery('*:*');
-        if ($commit) {
-            $update->addCommit();
-        }
-        $result = $this->getResource()->update($update);
-
-        return $result;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterInterface.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterInterface.php
deleted file mode 100644
index 627cace..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterInterface.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage;
-
-/**
- * Class AdapterInterface
- */
-
-interface AdapterInterface
-{
-
-    /**
-     * @param array $config
-     *
-     * @return $this
-     */
-    public function setConfig(array $config);
-
-    /**
-     * @return array
-     */
-    public function getConfig();
-
-    /**
-     * @return bool
-     */
-    public function getDebug();
-
-    /**
-     * @param bool $debug
-     *
-     * @return $this
-     */
-    public function setDebug($debug);
-
-    /**
-     * @return void
-     */
-    public function connect();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterTrait.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterTrait.php
deleted file mode 100644
index 71da89c..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/AdapterTrait.php
+++ /dev/null
@@ -1,101 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage;
-
-/**
- * Class AdapterTrait
- */
-
-trait AdapterTrait
-{
-
-    /**
-     * @var array
-     */
-    protected $config;
-
-    /**
-     * @var mixed
-     */
-    protected $resource;
-
-    /**
-     * @var bool
-     */
-    protected $debug;
-
-    /**
-     * @param array $config
-     *
-     * @return $this
-     */
-    public function setConfig(array $config)
-    {
-        $this->config = $config;
-
-        return $this;
-    }
-
-    /**
-     * @return array
-     */
-    public function getConfig()
-    {
-        return $this->config;
-    }
-
-    /**
-     * @param resource $resource
-     *
-     * @return $this
-     */
-    protected function setResource($resource)
-    {
-        $this->resource = $resource;
-
-        return $this;
-    }
-
-    /**
-     * @return mixed
-     */
-    protected function getResource()
-    {
-        if (!$this->resource) {
-            $this->connect();
-        }
-
-        return $this->resource;
-    }
-
-    /**
-     * @return bool
-     */
-    public function getDebug()
-    {
-        return $this->debug;
-    }
-
-    /**
-     * @param bool $debug
-     *
-     * @return $this
-     */
-    public function setDebug($debug)
-    {
-        $this->debug = $debug;
-
-        return $this;
-    }
-
-    /**
-     * @return void
-     */
-    abstract public function connect();
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageInstanceBuilder.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageInstanceBuilder.php
deleted file mode 100644
index 536c728..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageInstanceBuilder.php
+++ /dev/null
@@ -1,173 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage;
-
-use Elastica\Client;
-use ErrorException;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\LibraryConstants;
-use Spryker\Shared\Storage\StorageConstants;
-
-class StorageInstanceBuilder
-{
-
-    const KV_NAMESPACE = '\Spryker\Shared\Library\Storage\Adapter\KeyValue\\';
-    const SEARCH_ELASTICA_ADAPTER = 'elastica';
-    const ADAPTER_READ_WRITE = 'ReadWrite';
-    const ADAPTER_READ = 'Read';
-    const ADAPTER_LOCAL = 'Local';
-    const KV_ADAPTER_REDIS = 'redis';
-    const DEFAULT_REDIS_DATABASE = 0;
-
-    /**
-     * @var \Spryker\Shared\Library\Storage\AdapterInterface[]
-     */
-    protected static $storageInstances = [];
-
-    /**
-     * @var array
-     */
-    protected static $searchInstances = [];
-
-    /**
-     * @return \Elastica\Client
-     */
-    public static function getElasticsearchInstance()
-    {
-        $adapterName = self::SEARCH_ELASTICA_ADAPTER;
-
-        if (array_key_exists($adapterName, self::$searchInstances) === false) {
-            $config = [
-                'transport' => ucfirst(Config::get(LibraryConstants::ELASTICA_PARAMETER__TRANSPORT)),
-                'port' => Config::get(LibraryConstants::ELASTICA_PARAMETER__PORT),
-                'host' => Config::get(LibraryConstants::ELASTICA_PARAMETER__HOST),
-            ];
-
-            if (Config::hasValue(LibraryConstants::ELASTICA_PARAMETER__AUTH_HEADER)) {
-                $config['headers'] = [
-                    'Authorization' => 'Basic ' . Config::get(LibraryConstants::ELASTICA_PARAMETER__AUTH_HEADER),
-                ];
-            }
-
-            self::$searchInstances[$adapterName] = new Client($config);
-        }
-
-        return self::$searchInstances[$adapterName];
-    }
-
-    /**
-     * @param bool $debug
-     *
-     * @return \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadWriteInterface
-     */
-    public static function getStorageReadWriteInstance($debug = false)
-    {
-        return self::getStorageInstance(self::ADAPTER_READ_WRITE, $debug);
-    }
-
-    /**
-     * @param bool $debug
-     *
-     * @return \Spryker\Shared\Library\Storage\Adapter\KeyValue\ReadInterface
-     */
-    public static function getStorageReadInstance($debug = false)
-    {
-        return self::getStorageInstance(self::ADAPTER_READ, $debug);
-    }
-
-    /**
-     * @param string $type
-     * @param bool $debug
-     *
-     * @return \Spryker\Shared\Library\Storage\AdapterInterface
-     */
-    protected static function getStorageInstance($type, $debug = false)
-    {
-        $kvAdapter = Config::get(LibraryConstants::STORAGE_KV_SOURCE);
-
-        $storageAdapter = self::createStorageAdapterName($type, $kvAdapter);
-        $configArray = self::createAdapterConfig($kvAdapter);
-
-        $storage = new $storageAdapter($configArray, $debug);
-        self::$storageInstances[$storageAdapter] = $storage;
-
-        return self::$storageInstances[$storageAdapter];
-    }
-
-    /**
-     * @param string $kvAdapter
-     *
-     * @throws \ErrorException
-     *
-     * @return array
-     */
-    protected static function createAdapterConfig($kvAdapter)
-    {
-        $config = null;
-
-        switch ($kvAdapter) {
-            case static::KV_ADAPTER_REDIS:
-                $config = [
-                    'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL, Config::get(LibraryConstants::YVES_STORAGE_SESSION_REDIS_PROTOCOL)),
-                    'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT, Config::get(LibraryConstants::YVES_STORAGE_SESSION_REDIS_PORT)),
-                    'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST, Config::get(LibraryConstants::YVES_STORAGE_SESSION_REDIS_HOST)),
-                    'database' => Config::get(StorageConstants::STORAGE_REDIS_DATABASE, static::DEFAULT_REDIS_DATABASE),
-                ];
-
-                // TODO: Remove elseif, only there for BC
-                if (Config::hasKey(StorageConstants::STORAGE_REDIS_PASSWORD)) {
-                    $config['password'] = Config::get(StorageConstants::STORAGE_REDIS_PASSWORD);
-                } elseif (Config::hasKey(LibraryConstants::YVES_STORAGE_SESSION_REDIS_PASSWORD)) {
-                    $config['password'] = Config::get(LibraryConstants::YVES_STORAGE_SESSION_REDIS_PASSWORD);
-                }
-
-                // TODO: Remove elseif, only there for BC
-                $config['persistent'] = false;
-                if (Config::hasKey(StorageConstants::STORAGE_PERSISTENT_CONNECTION)) {
-                    $config['persistent'] = (bool)Config::get(StorageConstants::STORAGE_PERSISTENT_CONNECTION);
-                } elseif (Config::hasKey(LibraryConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION)) {
-                    $config['persistent'] = Config::get(LibraryConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION);
-                }
-                break;
-
-            case static::SEARCH_ELASTICA_ADAPTER:
-                $config = [
-                    'transport' => ucfirst(Config::get(LibraryConstants::ELASTICA_PARAMETER__TRANSPORT)),
-                    'port' => Config::get(LibraryConstants::ELASTICA_PARAMETER__PORT),
-                    'host' => Config::get(LibraryConstants::ELASTICA_PARAMETER__HOST),
-                ];
-
-                if (Config::hasValue(LibraryConstants::ELASTICA_PARAMETER__AUTH_HEADER)) {
-                    $config['headers'] = [
-                        'Authorization' => 'Basic ' . Config::get(LibraryConstants::ELASTICA_PARAMETER__AUTH_HEADER),
-                    ];
-                }
-                break;
-        }
-
-        if ($config === null) {
-            throw new ErrorException('Missing implementation for adapter ' . $kvAdapter);
-        }
-
-        return $config;
-    }
-
-    /**
-     * @param string $type
-     * @param string $kvAdapter
-     *
-     * @return string
-     */
-    protected static function createStorageAdapterName($type, $kvAdapter)
-    {
-        $storageAdapter = self::KV_NAMESPACE . ucfirst(strtolower($kvAdapter)) . $type;
-
-        return $storageAdapter;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageKeyGenerator.php b/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageKeyGenerator.php
deleted file mode 100644
index c50fadc..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Storage/StorageKeyGenerator.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Storage;
-
-use Spryker\Shared\Kernel\Store;
-
-abstract class StorageKeyGenerator
-{
-
-    const KEY_SEPARATOR = '.';
-
-    /**
-     * @param string $key
-     *
-     * @return string
-     */
-    protected static function escapeKey($key)
-    {
-        $charsToReplace = ['"', "'", ' ', "\0", "\n", "\r"];
-
-        return str_replace($charsToReplace, '-', mb_strtolower(trim($key)));
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return string
-     */
-    protected static function prependStoreName($key)
-    {
-        $storeName = Store::getInstance()->getStoreName();
-
-        return $storeName . self::KEY_SEPARATOR . $key;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/System.php b/Bundles/Library/src/Spryker/Shared/Library/System.php
deleted file mode 100644
index f1c72af..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/System.php
+++ /dev/null
@@ -1,43 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Spryker\Service\UtilNetwork\Model\Host AS UtilNetworkHost;
-
-/**
- * @deprecated use \Spryker\Service\UtilNetwork\UtilNetworkService instead
- */
-class System
-{
-
-    /**
-     * @var \Spryker\Service\UtilNetwork\Model\Host
-     */
-    protected static $utilNetworkHost;
-
-    /**
-     * @return string
-     */
-    public static function getHostname()
-    {
-        return self::createUtilNetworkHost()->getHostname();
-    }
-
-    /**
-     * @return \Spryker\Service\UtilNetwork\Model\Host
-     */
-    protected static function createUtilNetworkHost()
-    {
-        if (static::$utilNetworkHost === null) {
-            static::$utilNetworkHost = new UtilNetworkHost();
-        }
-
-        return static::$utilNetworkHost;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/TestAutoloader.php b/Bundles/Library/src/Spryker/Shared/Library/TestAutoloader.php
deleted file mode 100644
index 732fa85..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/TestAutoloader.php
+++ /dev/null
@@ -1,225 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library;
-
-use Exception;
-
-class TestAutoloader
-{
-
-    /**
-     * @var array
-     */
-    private static $allowedNamespaces = [
-        'Unit',
-        'YvesUnit',
-        'Functional',
-        'Acceptance',
-    ];
-
-    /**
-     * @var \Spryker\Shared\Library\Autoloader
-     */
-    private static $instance;
-
-    /**
-     * @var string
-     */
-    private $application;
-
-    /**
-     * @var bool
-     */
-    private $disableApplicationCheck;
-
-    /**
-     * @var array
-     */
-    private $classMap = [];
-
-    /**
-     * @param string $rootDirectory
-     * @param string $vendorDirectory
-     * @param string|null $application
-     * @param bool $disableApplicationCheck
-     */
-    private function __construct($rootDirectory, $vendorDirectory, $application = null, $disableApplicationCheck = false)
-    {
-        $this->application = $application;
-        $this->rootDirectory = $rootDirectory;
-        $this->disableApplicationCheck = $disableApplicationCheck;
-
-        require_once $vendorDirectory . '/autoload.php';
-    }
-
-    /**
-     * @param string $rootDirectory
-     * @param string $vendorDirectory
-     * @param string|null $application
-     * @param bool $disableApplicationCheck
-     *
-     * @return void
-     */
-    public static function register($rootDirectory, $vendorDirectory, $application = null, $disableApplicationCheck = false)
-    {
-        if (!self::$instance) {
-            self::$instance = new self($rootDirectory, $vendorDirectory, $application, $disableApplicationCheck);
-            spl_autoload_register([self::$instance, 'autoload'], true, false);
-        }
-    }
-
-    /**
-     * @return \Spryker\Shared\Library\Autoloader
-     */
-    public static function unregister()
-    {
-        if (self::$instance) {
-            spl_autoload_unregister([self::$instance, 'autoload']);
-            self::$instance = null;
-        }
-    }
-
-    /**
-     * Transform resource name into its relative resource path representation.
-     *
-     * @param string $resourceParts
-     *
-     * @return string Resource relative path.
-     */
-    private function getResourceRelativePath($resourceParts)
-    {
-        $bundle = $resourceParts[3];
-        $relativeResourcePath = '/' . $bundle . '/tests/' . implode(DIRECTORY_SEPARATOR, $resourceParts);
-
-        return $relativeResourcePath . '.php';
-    }
-
-    /**
-     * Transform relative path into its absolute resource path representation.
-     *
-     * @param string $relativePath
-     *
-     * @return string|null Resource relative path.
-     */
-    private function getResourceAbsolutePath($relativePath)
-    {
-        $absolutePath = $this->rootDirectory . DIRECTORY_SEPARATOR . $relativePath;
-
-        return $absolutePath;
-    }
-
-    /**
-     * Try to load a Yves or Zed class
-     * with fallback to composer
-     *
-     * @param string $resourceName
-     *
-     * @return bool
-     */
-    protected function autoload($resourceName)
-    {
-        $file = $this->findFile($resourceName);
-        if ($file !== false) {
-            include $file;
-        } else {
-            $this->classMap[$resourceName] = false;
-
-            return false;
-        }
-    }
-
-    /**
-     * @param int $resourceName
-     *
-     * @return bool|string
-     */
-    protected function findFile($resourceName)
-    {
-        // We always work with FQCN in our context
-        // php bug from 5.3.0 to 5.3.2
-        $resourceName = ltrim($resourceName, '\\');
-
-        if (isset($this->classMap[$resourceName])) {
-            return $this->classMap[$resourceName];
-        }
-
-        if (!$this->isLoadingAllowed($resourceName)) {
-            return false;
-        }
-
-        $resourceName = str_replace('_', '\\', $resourceName);
-        $resourceParts = explode('\\', $resourceName);
-
-        if (!$this->disableApplicationCheck) {
-            $this->checkApplication($resourceParts);
-        }
-
-        $relativePath = $this->getResourceRelativePath($resourceParts);
-        $absolutePath = $this->getResourceAbsolutePath($relativePath);
-
-        if (file_exists($absolutePath)) {
-            return $absolutePath;
-        }
-
-        return false;
-    }
-
-    /**
-     * @param string $resourceName
-     *
-     * @return bool
-     */
-    private function isLoadingAllowed($resourceName)
-    {
-        foreach (self::$allowedNamespaces as $ns) {
-            $namespaceLength = strlen($ns);
-            if (substr($resourceName, 0, $namespaceLength) !== $ns) {
-                continue;
-            }
-            if ($resourceName[$namespaceLength] === '_' || $resourceName[$namespaceLength] === '\\') {
-                return true;
-            }
-        }
-
-        return false;
-    }
-
-    /**
-     * @param string $namespace
-     *
-     * @return void
-     */
-    public static function allowNamespace($namespace)
-    {
-        if (!in_array($namespace, self::$allowedNamespaces)) {
-            self::$allowedNamespaces[] = $namespace;
-        }
-    }
-
-    /**
-     * Checks if the class is allowed inside Yves or Zed
-     *
-     * @param array $resourceParts
-     *
-     * @throws \Exception
-     *
-     * @return void
-     */
-    protected function checkApplication($resourceParts)
-    {
-        if (!$this->application) {
-            return;
-        }
-
-        $app = ucfirst(strtolower($this->application));
-        if (($resourceParts[1] !== $app && ($resourceParts[1] === 'Yves' || $resourceParts[1] === 'Zed')) && $resourceParts[1] !== 'Shared') {
-            throw new Exception('You are not allowed to load this class in your app. (' . implode('\\', $resourceParts) . ')');
-        }
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Twig/DateFormatterTwigExtension.php b/Bundles/Library/src/Spryker/Shared/Library/Twig/DateFormatterTwigExtension.php
deleted file mode 100644
index 598d14b..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Twig/DateFormatterTwigExtension.php
+++ /dev/null
@@ -1,130 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Twig;
-
-use DateTimeZone;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Twig\TwigExtension;
-use Spryker\Shared\Twig\TwigFilter;
-
-class DateFormatterTwigExtension extends TwigExtension
-{
-
-    private static $filterFunctions = [
-        'formatDateShort',
-        'formatDateMedium',
-        'formatDateRFC',
-        'formatDateTime',
-    ];
-
-    /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
-     */
-    private $dateFormatter;
-
-    /**
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
-     */
-    public function __construct(DateFormatterInterface $dateFormatter)
-    {
-        $this->dateFormatter = $dateFormatter;
-    }
-
-    /**
-     * @return array
-     */
-    public function getFilters()
-    {
-        $filters = [];
-
-        foreach (self::$filterFunctions as $dateFormatterFunction) {
-            $filters[] = new TwigFilter(
-                $dateFormatterFunction,
-                [$this, $dateFormatterFunction],
-                ['is_safe' => ['html']]
-            );
-        }
-
-        return $filters;
-    }
-
-    /**
-     * @return array
-     */
-    public function getFunctions()
-    {
-        return [];
-    }
-
-    /**
-     * @return string
-     */
-    public function getName()
-    {
-        return 'DateFormatterTwigExtension';
-    }
-
-    /**
-     * @param string $date
-     * @param string|null $timezone
-     *
-     * @return string
-     */
-    public function formatDateShort($date, $timezone = null)
-    {
-        return $this->dateFormatter->dateShort($date, $this->convertDateTimeZone($timezone));
-    }
-
-    /**
-     * @param string $date
-     * @param string|null $timezone
-     *
-     * @return string
-     */
-    public function formatDateMedium($date, $timezone = null)
-    {
-        return $this->dateFormatter->dateMedium($date, $this->convertDateTimeZone($timezone));
-    }
-
-    /**
-     * @param string $date
-     * @param string|null $timezone
-     *
-     * @return string
-     */
-    public function formatDateRFC($date, $timezone = null)
-    {
-        return $this->dateFormatter->dateRFC($date, $this->convertDateTimeZone($timezone));
-    }
-
-    /**
-     * @param string $date
-     * @param string|null $timezone
-     *
-     * @return string
-     */
-    public function formatDateTime($date, $timezone = null)
-    {
-        return $this->dateFormatter->dateTime($date, $this->convertDateTimeZone($timezone));
-    }
-
-    /**
-     * @param string|null $timezone
-     *
-     * @return \DateTimeZone|null
-     */
-    private function convertDateTimeZone($timezone = null)
-    {
-        if ($timezone !== null) {
-            return new DateTimeZone($timezone);
-        }
-
-        return null;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Zed/Exception/InvalidZedResponseException.php b/Bundles/Library/src/Spryker/Shared/Library/Zed/Exception/InvalidZedResponseException.php
deleted file mode 100644
index a300f85..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Zed/Exception/InvalidZedResponseException.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Zed\Exception;
-
-use Psr\Http\Message\ResponseInterface;
-use RuntimeException;
-
-/**
- * @deprecated Moved to ZedRequest Bundle
- */
-class InvalidZedResponseException extends RuntimeException
-{
-
-    public function __construct($reason, ResponseInterface $response)
-    {
-        $message = 'Invalid response from Zed' . PHP_EOL . implode(PHP_EOL, [
-            '[status code] ' . $response->getStatusCode(),
-            '[reason phrase] ' . $reason,
-            '[raw body] ' . htmlentities(substr($response->getBody(), 0, 80)) . '...',
-        ]);
-
-        parent::__construct($message);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Shared/Library/Zed/ZedClient.php b/Bundles/Library/src/Spryker/Shared/Library/Zed/ZedClient.php
deleted file mode 100644
index 1bf209f..0000000
--- a/Bundles/Library/src/Spryker/Shared/Library/Zed/ZedClient.php
+++ /dev/null
@@ -1,346 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Library\Zed;
-
-use GuzzleHttp\Client;
-use GuzzleHttp\Cookie\CookieJar;
-use GuzzleHttp\Cookie\SetCookie;
-use GuzzleHttp\Psr7\Request as Psr7Request;
-use LogicException;
-use Psr\Http\Message\RequestInterface;
-use Psr\Http\Message\ResponseInterface;
-use Spryker\Client\EventJournal\EventJournal;
-use Spryker\Client\EventJournal\EventJournalClient;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\EventJournal\Model\Event;
-use Spryker\Shared\Library\Communication\ObjectInterface;
-use Spryker\Shared\Library\Communication\Request;
-use Spryker\Shared\Library\Communication\Response as CommunicationResponse;
-use Spryker\Shared\Library\LibraryConstants;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface;
-use Spryker\Shared\ZedRequest\Client\Exception\InvalidZedResponseException;
-
-/**
- * @deprecated Use \Spryker\Shared\ZedRequest\Client\AbstractHttpClient instead.
- */
-class ZedClient
-{
-
-    const EVENT_NAME_TRANSFER_REQUEST = 'transfer_request';
-
-    const EVENT_NAME_TRANSFER_RESPONSE = 'transfer_response';
-
-    /**
-     * @var bool
-     */
-    protected static $alreadyRequested = false;
-
-    /**
-     * @var int
-     */
-    protected static $requestCounter = 0;
-
-    /**
-     * @var string
-     */
-    protected $baseUrl;
-
-    /**
-     * @var string
-     */
-    protected $username;
-
-    /**
-     * @var string
-     */
-    protected $password;
-
-    /**
-     * @var int in seconds
-     */
-    protected static $timeoutInSeconds = 10;
-
-    /**
-     * @param string $baseUrl
-     * @param string|null $username
-     * @param string|null $password
-     */
-    public function __construct($baseUrl, $username = null, $password = null)
-    {
-        $this->baseUrl = $baseUrl;
-        $this->username = $username;
-        $this->password = $password;
-    }
-
-    /**
-     * @deprecated Moved to ZedRequest Bundle
-     *
-     * @param int $timeoutInSeconds
-     *
-     * @return void
-     */
-    public static function setDefaultTimeout($timeoutInSeconds)
-    {
-        self::$timeoutInSeconds = $timeoutInSeconds;
-    }
-
-    /**
-     * @deprecated Moved to ZedRequest Bundle
-     *
-     * @param string $pathInfo
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transferObject
-     * @param array $metaTransfers
-     * @param int|null $timeoutInSeconds
-     * @param bool $isBackgroundRequest
-     *
-     * @throws \LogicException
-     *
-     * @return \Spryker\Shared\Library\Communication\Response
-     */
-    public function request($pathInfo, TransferInterface $transferObject = null, array $metaTransfers = [], $timeoutInSeconds = null, $isBackgroundRequest = false)
-    {
-        if (!$this->isRequestAllowed($isBackgroundRequest)) {
-            throw new LogicException('You cannot make more than one request from Yves to Zed.');
-        }
-        self::$requestCounter++;
-
-        $requestTransfer = $this->createRequestTransfer($transferObject, $metaTransfers);
-        $request = $this->createGuzzleRequest($pathInfo);
-        $this->logRequest($pathInfo, $requestTransfer, $request->getBody());
-
-        $response = $this->sendRequest($request, $requestTransfer, $timeoutInSeconds);
-        $responseTransfer = $this->getTransferFromResponse($response);
-        $this->logResponse($pathInfo, $responseTransfer, $response->getBody());
-
-        return $responseTransfer;
-    }
-
-    /**
-     * @param string $pathInfo
-     *
-     * @return bool
-     */
-    protected function isLoggingAllowed($pathInfo)
-    {
-        return mb_strpos($pathInfo, 'heartbeat') !== false;
-    }
-
-    /**
-     * @param bool $isBackgroundRequest
-     *
-     * @return bool
-     */
-    protected function isRequestAllowed($isBackgroundRequest)
-    {
-        if (!$isBackgroundRequest) {
-            if (self::$alreadyRequested === true) {
-                return false;
-            }
-            self::$alreadyRequested = true;
-        }
-
-        return true;
-    }
-
-    /**
-     * @param string $pathInfo
-     *
-     * @return \Psr\Http\Message\RequestInterface
-     */
-    protected function createGuzzleRequest($pathInfo)
-    {
-        $char = (strpos($pathInfo, '?') === false) ? '?' : '&';
-
-        $eventJournal = new EventJournal();
-        $event = new Event();
-        $eventJournal->applyCollectors($event);
-        $requestId = $event->getFields()['request_id'];
-        $pathInfo .= $char . 'yvesRequestId=' . $requestId;
-
-        $headers = [
-            'User-Agent' => 'Yves 2.0',
-            'X-Yves-Host' => 1,
-        ];
-        $request = new Psr7Request('POST', $this->baseUrl . $pathInfo, $headers);
-
-        return $request;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     * @param array $metaTransfers
-     *
-     * @throws \LogicException
-     *
-     * @return \Spryker\Shared\Library\Communication\Request
-     */
-    protected function createRequestTransfer(TransferInterface $transferObject, array $metaTransfers)
-    {
-        $request = new Request();
-        $request->setSessionId(session_id());
-        $request->setTime(time());
-        $request->setHost(System::getHostname() ?: 'n/a');
-
-        foreach ($metaTransfers as $name => $metaTransfer) {
-            if (!is_string($name) || is_numeric($name) || !$metaTransfer instanceof TransferInterface) {
-                throw new LogicException('Adding MetaTransfer failed. Either name missing/invalid or no object of TransferInterface provided.');
-            }
-            $request->addMetaTransfer($name, $metaTransfer);
-        }
-        if ($this->username) {
-            $request->setUsername($this->username);
-        }
-        if ($this->password) {
-            $request->setPassword($this->password);
-        }
-        if ($transferObject) {
-            $request->setTransfer($transferObject);
-        }
-
-        return $request;
-    }
-
-    /**
-     * @param \Psr\Http\Message\RequestInterface $request
-     * @param \Spryker\Shared\Library\Communication\ObjectInterface $requestTransfer
-     * @param int|null $timeoutInSeconds
-
-     * @throws \Spryker\Shared\ZedRequest\Client\Exception\InvalidZedResponseException
-     *
-     * @return \Psr\Http\Message\ResponseInterface
-     */
-    protected function sendRequest(RequestInterface $request, ObjectInterface $requestTransfer, $timeoutInSeconds = null)
-    {
-        $config = [
-            'timeout' => ($timeoutInSeconds ?: static::$timeoutInSeconds),
-            'connect_timeout' => 1.5,
-        ];
-        $config = $this->addCookiesToForwardDebugSession($config);
-        $client = new Client($config);
-
-        $options = [
-            'json' => $requestTransfer->toArray(),
-        ];
-        $response = $client->send($request, $options);
-
-        if (!$response || $response->getStatusCode() !== 200 || !$response->getBody()->getSize()) {
-            throw new InvalidZedResponseException('Invalid or empty response', $response, $request->getUri());
-        }
-
-        return $response;
-    }
-
-    /**
-     * @param \Psr\Http\Message\ResponseInterface $response
-     *
-     * @throws \Spryker\Shared\ZedRequest\Client\Exception\InvalidZedResponseException
-     *
-     * @return \Spryker\Shared\Library\Communication\Response
-     */
-    protected function getTransferFromResponse(ResponseInterface $response)
-    {
-        $data = json_decode(trim($response->getBody()), true);
-        if (!$data || !is_array($data)) {
-            throw new InvalidZedResponseException('no valid JSON', $response, '');
-        }
-
-        $responseTransfer = new CommunicationResponse();
-        $responseTransfer->fromArray($data);
-
-        return $responseTransfer;
-    }
-
-    /**
-     * @param string $pathInfo
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $requestTransfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function logRequest($pathInfo, EmbeddedTransferInterface $requestTransfer, $rawBody)
-    {
-        $this->doLog($pathInfo, static::EVENT_NAME_TRANSFER_REQUEST, $requestTransfer, $rawBody);
-    }
-
-    /**
-     * @param string $pathInfo
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $responseTransfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function logResponse($pathInfo, EmbeddedTransferInterface $responseTransfer, $rawBody)
-    {
-        $this->doLog($pathInfo, static::EVENT_NAME_TRANSFER_RESPONSE, $responseTransfer, $rawBody);
-    }
-
-    /**
-     * @param string $pathInfo
-     * @param string $subType
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $transfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function doLog($pathInfo, $subType, EmbeddedTransferInterface $transfer, $rawBody)
-    {
-        $eventJournalClient = new EventJournalClient();
-        $event = new Event();
-        $responseTransfer = $transfer->getTransfer();
-        if ($responseTransfer instanceof TransferInterface) {
-            $event->setField('transfer_data', $responseTransfer->toArray());
-            $event->setField('transfer_class', get_class($responseTransfer));
-        } else {
-            $event->setField('transfer_data', null);
-            $event->setField('transfer_class', null);
-        }
-        $event->setField('raw_body', $rawBody);
-
-        $event->setField('name', 'transfer');
-        $event->setField('path_info', $pathInfo);
-        $event->setField('sub_type', $subType);
-        $eventJournalClient->saveEvent($event);
-    }
-
-    /**
-     * Used for debug output
-     *
-     * @return int
-     */
-    public static function getRequestCounter()
-    {
-        return self::$requestCounter;
-    }
-
-    /**
-     * @param array $config
-     *
-     * @return array
-     */
-    protected function addCookiesToForwardDebugSession(array $config)
-    {
-        if (!Config::get(LibraryConstants::TRANSFER_DEBUG_SESSION_FORWARD_ENABLED)) {
-            return $config;
-        }
-
-        $cookie = new SetCookie();
-        $cookie->setName(trim(Config::get(LibraryConstants::TRANSFER_DEBUG_SESSION_NAME)));
-        $cookie->setValue($_COOKIE[Config::get(LibraryConstants::TRANSFER_DEBUG_SESSION_NAME)]);
-        $cookie->setDomain(Config::get(LibraryConstants::HOST_ZED_API));
-
-        $cookieJar = new CookieJar();
-        $cookieJar->setCookie($cookie);
-
-        $config['cookies'] = $cookieJar;
-
-        return $config;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Yves/Library/Session/TransferSession.php b/Bundles/Library/src/Spryker/Yves/Library/Session/TransferSession.php
deleted file mode 100644
index 054daa1..0000000
--- a/Bundles/Library/src/Spryker/Yves/Library/Session/TransferSession.php
+++ /dev/null
@@ -1,76 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Yves\Library\Session;
-
-use Spryker\Shared\Transfer\TransferInterface;
-use Symfony\Component\HttpFoundation\Session\Session;
-
-class TransferSession
-{
-
-    /**
-     * @var \Symfony\Component\HttpFoundation\Session\Session
-     */
-    protected $session;
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Session\Session $session
-     */
-    public function __construct(Session $session)
-    {
-        $this->session = $session;
-    }
-
-    /**
-     * @param string $name
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return void
-     */
-    public function set($name, TransferInterface $transferObject)
-    {
-        $this->session->set($name, $transferObject->toArray(false));
-    }
-
-    /**
-     * @param string $name
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function get($name, TransferInterface $transferObject)
-    {
-        $transferArray = $this->session->get($name);
-        if (!empty($transferArray)) {
-            $transferObject->fromArray($transferArray, true);
-        }
-
-        return $transferObject;
-    }
-
-    /**
-     * @param string $name
-     *
-     * @return bool
-     */
-    public function has($name)
-    {
-        return $this->session->has($name);
-    }
-
-    /**
-     * @param string $name
-     *
-     * @return mixed The removed value or null when it does not exist
-     */
-    public function remove($name)
-    {
-        return $this->session->remove($name);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Generator/StringGenerator.php b/Bundles/Library/src/Spryker/Zed/Library/Generator/StringGenerator.php
deleted file mode 100644
index c5ac317..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Generator/StringGenerator.php
+++ /dev/null
@@ -1,62 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Generator;
-
-use Spryker\Service\UtilText\Model\StringGenerator AS UtilStringGenerator;
-
-/**
- * @deprecated use \Spryker\Service\UtilText\UtilTextService instead
- */
-class StringGenerator
-{
-
-    /**
-     * @var \Spryker\Service\UtilText\Model\StringGenerator
-     */
-    protected static $utilStringGenerator = null;
-
-    /**
-     * @var int
-     */
-    private $length = 32;
-
-    /**
-     * @param int $length
-     *
-     * @return $this
-     */
-    public function setLength($length)
-    {
-        $this->length = $length;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function generateRandomString()
-    {
-        return static::createUtilStringGenerator()->generateRandomString($this->length);
-    }
-
-    /**
-     * @var \Spryker\Service\UtilText\Model\StringGenerator
-     *
-     * @return \Spryker\Service\UtilText\Model\StringGenerator
-     */
-    protected static function createUtilStringGenerator()
-    {
-        if (static::$utilStringGenerator === null) {
-            static::$utilStringGenerator = new UtilStringGenerator();
-        }
-
-        return static::$utilStringGenerator;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/LibraryDependencyProvider.php b/Bundles/Library/src/Spryker/Zed/Library/LibraryDependencyProvider.php
deleted file mode 100644
index 9b7bb52..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/LibraryDependencyProvider.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library;
-
-use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
-
-class LibraryDependencyProvider extends AbstractBundleDependencyProvider
-{
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/ArrayFilter.php b/Bundles/Library/src/Spryker/Zed/Library/Sanitize/ArrayFilter.php
deleted file mode 100644
index 807f072..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/ArrayFilter.php
+++ /dev/null
@@ -1,251 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Sanitize;
-
-use ArrayAccess;
-use Countable;
-use Iterator;
-
-class ArrayFilter implements Iterator, Countable, ArrayAccess
-{
-
-    /**
-     * @var array
-     */
-    protected $filters = [];
-
-    /**
-     * @var array
-     */
-    protected $array;
-
-    /**
-     * @param array $array
-     * @param string|\Spryker\Zed\Library\Sanitize\FilterSetInterface $filterSet
-     */
-    public function __construct(array $array, $filterSet)
-    {
-        $this->initFilters($filterSet);
-        $this->array = $this->filter($array);
-    }
-
-    /**
-     * @param string|\Spryker\Zed\Library\Sanitize\FilterSetInterface $filterSet
-     *
-     * @return void
-     */
-    protected function initFilters($filterSet)
-    {
-        if (is_string($filterSet) && class_exists($filterSet)) {
-            /** @var \Spryker\Zed\Library\Sanitize\FilterSetInterface $filterSetClass */
-            $filterSetClass = new $filterSet();
-            $this->filters = $filterSetClass->getFilters();
-        } elseif ($filterSet instanceof FilterSetInterface) {
-            $this->filters = $filterSet->getFilters();
-        }
-    }
-
-    /**
-     * @param array $array
-     *
-     * @return array
-     */
-    protected function filter(array $array)
-    {
-        if (count($this->filters) < 1) {
-            return $array;
-        }
-
-        $result = $array;
-
-        /** @var \Spryker\Zed\Library\Sanitize\FilterInterface $filter */
-        foreach ($this->filters as $filter) {
-            $result = $filter->filter($result);
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $array
-     * @param string|\Spryker\Zed\Library\Sanitize\FilterSetInterface $filterSet
-     *
-     * @return $this
-     */
-    public static function fromArray(array $array, $filterSet)
-    {
-        return new static($array, $filterSet);
-    }
-
-    /**
-     * @return array
-     */
-    public function toArray()
-    {
-        return $this->array;
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Return the current element
-     *
-     * @link http://php.net/manual/en/iterator.current.php
-     *
-     * @return mixed Can return any type.
-     */
-    public function current()
-    {
-        return current($this->array);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Move forward to next element
-     *
-     * @link http://php.net/manual/en/iterator.next.php
-     *
-     * @return void
-     */
-    public function next()
-    {
-        next($this->array);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Return the key of the current element
-     *
-     * @link http://php.net/manual/en/iterator.key.php
-     *
-     * @return mixed scalar on success, or null on failure.
-     */
-    public function key()
-    {
-        return key($this->array);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Checks if current position is valid
-     *
-     * @link http://php.net/manual/en/iterator.valid.php
-     *
-     * @return bool The return value will be casted to boolean and then evaluated.
-     *   Returns true on success or false on failure.
-     */
-    public function valid()
-    {
-        return $this->offsetExists($this->key());
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Rewind the Iterator to the first element
-     *
-     * @link http://php.net/manual/en/iterator.rewind.php
-     *
-     * @return void
-     */
-    public function rewind()
-    {
-        reset($this->array);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Whether a offset exists
-     *
-     * @link http://php.net/manual/en/arrayaccess.offsetexists.php
-     *
-     * @param mixed $offset <p>
-     *   An offset to check for.
-     *   </p>
-     *
-     * @return bool true on success or false on failure.
-     *   </p>
-     *   <p>
-     *   The return value will be casted to boolean if non-boolean was returned.
-     */
-    public function offsetExists($offset)
-    {
-        return isset($this->array[$offset]);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Offset to retrieve
-     *
-     * @link http://php.net/manual/en/arrayaccess.offsetget.php
-     *
-     * @param mixed $offset <p>
-     *   The offset to retrieve.
-     *   </p>
-     *
-     * @return mixed Can return all value types.
-     */
-    public function offsetGet($offset)
-    {
-        return $this->array[$offset];
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Offset to set
-     *
-     * @link http://php.net/manual/en/arrayaccess.offsetset.php
-     *
-     * @param mixed $offset <p>
-     *   The offset to assign the value to.
-     *   </p>
-     * @param mixed $value <p>
-     *   The value to set.
-     *   </p>
-     *
-     * @return void
-     */
-    public function offsetSet($offset, $value)
-    {
-        $array = $this->array;
-        $array[$offset] = $value;
-        $this->array = $this->filter($array);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.0.0)<br/>
-     * Offset to unset
-     *
-     * @link http://php.net/manual/en/arrayaccess.offsetunset.php
-     *
-     * @param mixed $offset <p>
-     *   The offset to unset.
-     *   </p>
-     *
-     * @return void
-     */
-    public function offsetUnset($offset)
-    {
-        unset($this->array[$offset]);
-    }
-
-    /**
-     * (PHP 5 &gt;= 5.1.0)<br/>
-     * Count elements of an object
-     *
-     * @link http://php.net/manual/en/countable.count.php
-     *
-     * @return int The custom count as an integer.
-     *   </p>
-     *   <p>
-     *   The return value is cast to an integer.
-     */
-    public function count()
-    {
-        return count($this->array);
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterInterface.php b/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterInterface.php
deleted file mode 100644
index 1f79c9f..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterInterface.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Sanitize;
-
-interface FilterInterface
-{
-
-    /**
-     * @param array $array
-     *
-     * @return array
-     */
-    public function filter(array $array);
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterSetInterface.php b/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterSetInterface.php
deleted file mode 100644
index 9a1d868..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/FilterSetInterface.php
+++ /dev/null
@@ -1,18 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Sanitize;
-
-interface FilterSetInterface
-{
-
-    /**
-     * @return mixed
-     */
-    public function getFilters();
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/Html.php b/Bundles/Library/src/Spryker/Zed/Library/Sanitize/Html.php
deleted file mode 100644
index b48c880..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Sanitize/Html.php
+++ /dev/null
@@ -1,52 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Sanitize;
-
-use Spryker\Service\UtilSanitize\Model\Html AS UtilSanitizeHtml;
-
-/**
- * @deprecated use \Spryker\Service\UtilSanitize\UtilSanitizeService instead
- */
-class Html
-{
-
-    /**
-     * @var \Spryker\Service\UtilSanitize\Model\Html
-     */
-    protected static $utilSanitizeHtml;
-
-    /**
-     * Convenience method for htmlspecialchars to use UTF8 by default.
-     *
-     * @param string|array|object $text Text to wrap through htmlspecialchars. Also works with arrays, and objects.
-     *   Arrays will be mapped and have all their elements escaped. Objects will be string cast if they
-     *   implement a `__toString` method. Otherwise the class name will be used.
-     * @param bool $double Encode existing html entities.
-     * @param string|null $charset Character set to use when escaping. Defaults to config value in `mb_internal_encoding()`
-     *   or 'UTF-8'.
-     *
-     * @return string Wrapped text.
-     */
-    public static function escape($text, $double = true, $charset = null)
-    {
-        return static::createUtilSanitizeHtml()->escape($text, $double, $charset);
-    }
-
-    /**
-     * @return \Spryker\Service\UtilSanitize\Model\Html
-     */
-    protected static function createUtilSanitizeHtml()
-    {
-        if (static::$utilSanitizeHtml === null) {
-            static::$utilSanitizeHtml = new UtilSanitizeHtml();
-        }
-
-        return static::$utilSanitizeHtml;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Service/GoogleGraph.php b/Bundles/Library/src/Spryker/Zed/Library/Service/GoogleGraph.php
deleted file mode 100644
index 85c1f02..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Service/GoogleGraph.php
+++ /dev/null
@@ -1,414 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Service;
-
-use Exception;
-use Zend\Http\Client;
-use Zend\Http\Request;
-
-class GoogleGraph
-{
-
-    const URI = 'https://chart.googleapis.com/chart';
-
-    /**
-     * @var string
-     */
-    protected $chf;
-
-    /**
-     * @var string
-     */
-    protected $chtt;
-
-    /**
-     * @var string
-     */
-    protected $cht;
-
-    /**
-     * @var string
-     */
-    protected $chof;
-
-    /**
-     * @var string
-     */
-    protected $chl;
-
-    /**
-     * @var string
-     */
-    protected $chd;
-
-    /**
-     * @var string
-     */
-    protected $chs;
-
-    /**
-     * @var string
-     */
-    protected $chld;
-
-    /**
-     * @var string
-     */
-    protected $chdl;
-
-    /**
-     * @var string
-     */
-    protected $chdlp;
-
-    /**
-     * @var string
-     */
-    protected $chdls;
-
-    /**
-     * @var string
-     */
-    protected $chco;
-
-    /**
-     * @var string
-     */
-    protected $chxl;
-
-    /**
-     * @var string
-     */
-    protected $chxr;
-
-    /**
-     * @var string
-     */
-    protected $chxt;
-
-    /**
-     * @var string
-     */
-    protected $chds;
-
-    /**
-     * @var string
-     */
-    protected $chls;
-
-    /**
-     * @var string
-     */
-    protected $chg;
-
-    /**
-     * @var string
-     */
-    protected $chm;
-
-    /**
-     * @var string
-     */
-    protected $chxp;
-
-    /**
-     * @var string
-     */
-    protected $chbh;
-
-    /**
-     * @param bool $sendHeader
-     * @param string $contentType
-     *
-     * @throws \Exception
-     *
-     * @return string
-     */
-    public function request($sendHeader = true, $contentType = 'gif')
-    {
-        if (!in_array($contentType, ['gif', 'png', 'json'])) {
-            throw new Exception(sprintf('Content type "%s" is not a valid content type for this operation', $contentType));
-        }
-
-        $client = new Client();
-        $client->setUri(self::URI);
-
-        $vars = get_object_vars($this);
-        $client->setParameterPost($vars);
-
-        $client->setMethod(Request::METHOD_POST);
-        $response = $client->send();
-        if ($sendHeader) {
-            header('content-type: image/' . $contentType);
-        }
-
-        return $response->getBody();
-    }
-
-    /**
-     * @return string
-     */
-    public function renderAsForm()
-    {
-        $vars = get_object_vars($this);
-        $form = '<form action="https://chart.googleapis.com/chart" method="POST" >';
-        foreach ($vars as $k => $v) {
-            $form = $form . '<input type="hidden" name="' . $k . '" value="' . $v . '"  />';
-        }
-
-        $form = $form . '<input type="submit"  /></form>';
-
-        return $form;
-    }
-
-    /**
-     * @param string $chf
-     *
-     * @return void
-     */
-    public function setChf($chf)
-    {
-        $this->chf = $chf;
-    }
-
-    /**
-     * The chart title.
-     *
-     * @param string $chtt
-     *
-     * @return void
-     */
-    public function setChtt($chtt)
-    {
-        $this->chtt = $chtt;
-    }
-
-    /**
-     * The slice labels.
-     *
-     * @param string $chl
-     *
-     * @return void
-     */
-    public function setChl($chl)
-    {
-        $this->chl = $chl;
-    }
-
-    /**
-     * @param string $chof
-     *
-     * @return void
-     */
-    public function setChof($chof)
-    {
-        $this->chof = $chof;
-    }
-
-    /**
-     * Chart type
-     *
-     * @param string $cht
-     *
-     * @return void
-     */
-    public function setCht($cht)
-    {
-        $this->cht = $cht;
-    }
-
-    /**
-     * The chart data.
-     *
-     * @param string $chd
-     *
-     * @return void
-     */
-    public function setChd($chd)
-    {
-        $this->chd = $chd;
-    }
-
-    /**
-     * @param string $chs
-     *
-     * @return void
-     */
-    public function setChs($chs)
-    {
-        $this->chs = $chs;
-    }
-
-    /**
-     * Chart Label Data (various types)
-     *
-     * @param string $chld
-     *
-     * @return void
-     */
-    public function setChld($chld)
-    {
-        $this->chld = $chld;
-    }
-
-    /**
-     * Chart legend text and style
-     *
-     * @link https://developers.google.com/chart/image/docs/chart_params#gcharts_legend
-     *
-     * @param string $chdl
-     *
-     * @return void
-     */
-    public function setChdl($chdl)
-    {
-        $this->chdl = $chdl;
-    }
-
-    /**
-     * Chart legend text and style
-     *
-     * @link https://developers.google.com/chart/image/docs/chart_params#gcharts_legend
-     *
-     * @param string $chdlp
-     *
-     * @return void
-     */
-    public function setChdlp($chdlp)
-    {
-        $this->chdlp = $chdlp;
-    }
-
-    /**
-     * Chart legend text and style
-     *
-     * @link https://developers.google.com/chart/image/docs/chart_params#gcharts_legend
-     *
-     * @param string $chdls
-     *
-     * @return void
-     */
-    public function setChdls($chdls)
-    {
-        $this->chdls = $chdls;
-    }
-
-    /**
-     * Custom Axis Labels
-     *
-     * @param string $chxl
-     *
-     * @return void
-     */
-    public function setChxl($chxl)
-    {
-        $this->chxl = $chxl;
-    }
-
-    /**
-     * @param string $chxt
-     *
-     * @return void
-     */
-    public function setChxt($chxt)
-    {
-        $this->chxt = $chxt;
-    }
-
-    /**
-     * @param string $chxr
-     *
-     * @return void
-     */
-    public function setChxr($chxr)
-    {
-        $this->chxr = $chxr;
-    }
-
-    /**
-     * @param string $chds
-     *
-     * @return void
-     */
-    public function setChds($chds)
-    {
-        $this->chds = $chds;
-    }
-
-    /**
-     * @param string $chco
-     *
-     * @return void
-     */
-    public function setChco($chco)
-    {
-        $this->chco = $chco;
-    }
-
-    /**
-     * @param string $chls
-     *
-     * @return void
-     */
-    public function setChls($chls)
-    {
-        $this->chls = $chls;
-    }
-
-    /**
-     * @param string $chg
-     *
-     * @return void
-     */
-    public function setChg($chg)
-    {
-        $this->chg = $chg;
-    }
-
-    /**
-     * @param string $chm
-     *
-     * @return void
-     */
-    public function setChm($chm)
-    {
-        $this->chm = $chm;
-    }
-
-    /**
-     * @param string $chxp
-     *
-     * @return void
-     */
-    public function setChxp($chxp)
-    {
-        $this->chxp = $chxp;
-    }
-
-    /**
-     * @param string $chbh
-     *
-     * @return void
-     */
-    public function setChbh($chbh)
-    {
-        $this->chbh = $chbh;
-    }
-
-    /**
-     * @return string
-     */
-    public function toQueryString()
-    {
-        $params = get_object_vars($this);
-        $out = http_build_query($params);
-
-        return self::URI . '?' . $out;
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Twig/Loader/Filesystem.php b/Bundles/Library/src/Spryker/Zed/Library/Twig/Loader/Filesystem.php
deleted file mode 100644
index aeb6a02..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Twig/Loader/Filesystem.php
+++ /dev/null
@@ -1,164 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Twig\Loader;
-
-use Twig_Error_Loader;
-use Twig_Loader_Filesystem;
-use Zend\Filter\Word\CamelCaseToDash;
-
-class Filesystem extends Twig_Loader_Filesystem
-{
-
-    /**
-     * @param array $paths
-     * @param string $namespace
-     *
-     * @return void
-     */
-    public function setPaths($paths, $namespace = self::MAIN_NAMESPACE)
-    {
-        $this->paths = [];
-        foreach ($paths as $path) {
-            $this->addPath($path);
-        }
-    }
-
-    /**
-     * @param string $path
-     * @param string $namespace
-     *
-     * @return void
-     */
-    public function addPath($path, $namespace = self::MAIN_NAMESPACE)
-    {
-        // invalidate the cache
-        $this->cache = [];
-        $this->paths[] = rtrim($path, '/\\');
-    }
-
-    /**
-     * @param string $path
-     * @param string $namespace
-     *
-     * @return void
-     */
-    public function prependPath($path, $namespace = self::MAIN_NAMESPACE)
-    {
-        // invalidate the cache
-        $this->cache = [];
-
-        $path = rtrim($path, '/\\');
-
-        if (empty($this->paths)) {
-            $this->paths[] = $path;
-        } else {
-            array_unshift($this->paths, $path);
-        }
-    }
-
-    /**
-     * @param string $bundle
-     *
-     * @return array
-     */
-    protected function getPathsForBundle($bundle)
-    {
-        $paths = [];
-        $filter = new CamelCaseToDash();
-        foreach ($this->paths as $path) {
-            $formattedBundleName = $bundle;
-            if (strpos($path, 'vendor/spryker/spryker/Bundles') === false && strpos($path, 'vendor/spryker/') > 0) {
-                $formattedBundleName = strtolower($filter->filter($bundle));
-            }
-            $path = sprintf($path, $bundle, $formattedBundleName);
-            if (strpos($path, '*') !== false) {
-                $path = glob($path);
-                if (count($path) > 0) {
-                    $paths[] = $path[0];
-                }
-            } else {
-                $paths[] = $path;
-            }
-        }
-
-        return $paths;
-    }
-
-    /**
-     * {@inheritdoc}
-     * @throws \Twig_Error_Loader
-     */
-    protected function findTemplate($name)
-    {
-        $name = (string)$name;
-
-        // normalize name
-        $name = str_replace(['///', '//', '\\'], '/', $name);
-
-        $nameParts = explode('/', $name);
-        $templateName = array_pop($nameParts);
-        array_push($nameParts, $templateName);
-        $name = implode('/', $nameParts);
-
-        if (isset($this->cache[$name])) {
-            if ($this->cache[$name] !== false) {
-                return $this->cache[$name];
-            } else {
-                throw new Twig_Error_Loader(sprintf('Unable to find template "%s" (cached).', $name));
-            }
-        }
-
-        $this->validateName($name);
-
-        if (isset($name[0]) && $name[0] === '@') {
-            $pos = strpos($name, '/');
-            if ($pos === false) {
-                $this->cache[$name] = false;
-                throw new Twig_Error_Loader(sprintf('Malformed bundle template name "%s" (expecting "@bundle/template_name").', $name));
-            }
-            $bundle = ucfirst(substr($name, 1, $pos - 1));
-            $templateName = ucfirst(substr($name, $pos + 1));
-
-            return $this->load($name, $bundle, $templateName);
-        }
-
-        $name = '/' . ltrim($name, '/');
-        $pos = strpos(ltrim($name, '/'), '/');
-        if ($pos === false) {
-            $this->cache[$name] = false;
-            throw new Twig_Error_Loader(sprintf('Malformed bundle template name "%s" (expecting "@bundle/template_name").', $name));
-        }
-        $bundle = ucfirst(substr($name, 1, $pos));
-        $templateName = ucfirst(substr($name, $pos + 2));
-
-        return $this->load($name, $bundle, $templateName);
-    }
-
-    /**
-     * @param string $name
-     * @param string $bundle
-     * @param string $templateName
-     *
-     * @throws \Twig_Error_Loader
-     *
-     * @return string
-     */
-    protected function load($name, $bundle, $templateName)
-    {
-        $paths = $this->getPathsForBundle($bundle);
-        foreach ($paths as $path) {
-            if (is_file($path . '/' . $templateName)) {
-                return $this->cache[$name] = $path . '/' . $templateName;
-            }
-        }
-
-        $this->cache[$name] = false;
-        throw new Twig_Error_Loader(sprintf('Unable to find template "%s" (looked into: %s).', $templateName, implode(', ', $paths)));
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFilter.php b/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFilter.php
deleted file mode 100644
index 6a5c691..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFilter.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Twig;
-
-use Twig_SimpleFilter;
-
-/**
- * @deprecated Use Twig bundle instead.
- */
-abstract class TwigFilter extends Twig_SimpleFilter
-{
-
-    public function __construct()
-    {
-        parent::__construct($this->getFilterName(), $this->getFunction(), $this->getOptions());
-    }
-
-    /**
-     * @return string
-     */
-    abstract protected function getFilterName();
-
-    /**
-     * @return callable
-     */
-    abstract protected function getFunction();
-
-    /**
-     * @return array
-     */
-    protected function getOptions()
-    {
-        return ['is_safe' => ['html']];
-    }
-
-}
diff --git a/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFunction.php b/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFunction.php
deleted file mode 100644
index d40b3b8..0000000
--- a/Bundles/Library/src/Spryker/Zed/Library/Twig/TwigFunction.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Library\Twig;
-
-use Twig_SimpleFunction;
-
-/**
- * @deprecated Use Twig bundle instead.
- */
-abstract class TwigFunction extends Twig_SimpleFunction
-{
-
-    public function __construct()
-    {
-        parent::__construct($this->getFunctionName(), $this->getFunction(), $this->getOptions());
-    }
-
-    /**
-     * @return string
-     */
-    abstract protected function getFunctionName();
-
-    /**
-     * @return callable
-     */
-    abstract protected function getFunction();
-
-    /**
-     * @return array
-     */
-    protected function getOptions()
-    {
-        return ['is_safe' => ['html']];
-    }
-
-}
diff --git a/Bundles/Library/tests/Functional.suite.yml b/Bundles/Library/tests/Functional.suite.yml
deleted file mode 100644
index c428d89..0000000
--- a/Bundles/Library/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \Library\Module\Functional
diff --git a/Bundles/Library/tests/Functional/_bootstrap.php b/Bundles/Library/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Library/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Library/tests/Unit.suite.yml b/Bundles/Library/tests/Unit.suite.yml
deleted file mode 100644
index a6a540a..0000000
--- a/Bundles/Library/tests/Unit.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: UnitTester
-modules:
-    enabled:
-        - Asserts
-        - \Library\Module\Unit
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Currency/CurrencyManagerTest.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/Currency/CurrencyManagerTest.php
deleted file mode 100644
index afe09d8..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Currency/CurrencyManagerTest.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Library\Currency;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\Currency\CurrencyManager;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Library
- * @group Currency
- * @group CurrencyManagerTest
- */
-class CurrencyManagerTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return array
-     */
-    public function dataProvider()
-    {
-        return [
-            [100, '100,00 €', true, 'EUR'],
-            ['95.00', '95,00 €', true, 'EUR'],
-            ['1090.00', '1.090,00 €', true, 'EUR'],
-        ];
-    }
-
-    /**
-     * @dataProvider dataProvider
-     *
-     * @param float $given
-     * @param string $expected
-     * @param bool $includeSymbol
-     * @param string $currencyIsoCode
-     *
-     * @return void
-     */
-    public function testFormat($given, $expected, $includeSymbol, $currencyIsoCode)
-    {
-        $currencyManager = CurrencyManager::getInstance();
-        $currencyManager->setDefaultCurrencyIso($currencyIsoCode);
-        $result = $currencyManager->format($given, $includeSymbol);
-        $this->assertSame($expected, $result);
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilterTest.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilterTest.php
deleted file mode 100644
index 3664c6a..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/CamelCaseToSeparatorFilterTest.php
+++ /dev/null
@@ -1,50 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Library\Filter;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\Filter\CamelCaseToSeparatorFilter;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Library
- * @group Filter
- * @group CamelCaseToSeparatorFilterTest
- */
-class CamelCaseToSeparatorFilterTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return array
-     */
-    public function dataProvider()
-    {
-        return [
-            ['camelCase', '-', 'camel-case'],
-            ['camelCase', '_', 'camel_case'],
-            ['camelCase', '\'', 'camel\'case'],
-            ['camelCase', '@', 'camel@case'],
-            ['camelCase', '$1', 'camel$1case'],
-            ['camelCase', 'asd', 'camelasdcase'],
-        ];
-    }
-
-    /**
-     * @dataProvider dataProvider
-     *
-     * @return void
-     */
-    public function testWithDifferentSeparator($camelCase, $separator, $expected)
-    {
-        $filter = new CamelCaseToSeparatorFilter($separator);
-        $this->assertEquals($expected, $filter->filter($camelCase));
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilterTest.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilterTest.php
deleted file mode 100644
index 55a4161..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Filter/SeparatorToCamelCaseFilterTest.php
+++ /dev/null
@@ -1,56 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Library\Filter;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\Filter\SeparatorToCamelCaseFilter;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Library
- * @group Filter
- * @group SeparatorToCamelCaseFilterTest
- */
-class SeparatorToCamelCaseFilterTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return array
-     */
-    public function dataProvider()
-    {
-        return [
-            ['camelCase', '-', 'camel-case', false],
-            ['camelCase', '_', 'camel_case', false],
-            ['camelCase', '\'', 'camel\'case', false],
-            ['camelCase', '@', 'camel@case', false],
-            ['camelCase', '$1', 'camel$1case', false],
-            ['camelCase', 'asd', 'camelasdcase', false],
-            ['CamelCase', '-', 'camel-case', true],
-            ['CamelCase', '_', 'camel_case', true],
-            ['CamelCase', '\'', 'camel\'case', true],
-            ['CamelCase', '@', 'camel@case', true],
-            ['CamelCase', '$1', 'camel$1case', true],
-            ['CamelCase', 'asd', 'camelasdcase', true],
-        ];
-    }
-
-    /**
-     * @dataProvider dataProvider
-     *
-     * @return void
-     */
-    public function testWithDifferentSeparator($expected, $separator, $string, $upperCase)
-    {
-        $filter = new SeparatorToCamelCaseFilter($separator, $upperCase);
-        $this->assertEquals($expected, $filter->filter($string));
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Fixtures/KernelLocator.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/Fixtures/KernelLocator.php
deleted file mode 100644
index c3dc0ec..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Fixtures/KernelLocator.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Unit\Spryker\Shared\Library\Fixtures;
-
-use Spryker\Shared\Kernel\BundleProxy;
-use Spryker\Shared\Kernel\TransferLocator;
-use Unit\Spryker\Shared\Kernel\Fixtures\LocatorLocator;
-
-class KernelLocator extends LocatorLocator
-{
-
-    /**
-     * @return BundleProxy
-     */
-    protected function getBundleProxy()
-    {
-        $bundleProxy = new BundleProxy();
-
-        return $bundleProxy;
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/JsonTest.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/JsonTest.php
deleted file mode 100644
index 1527fff..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/JsonTest.php
+++ /dev/null
@@ -1,57 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Library;
-use Spryker\Shared\Library\Json;
-
-/**
- * @group Library
- * @group Json
- */
-class JsonTest extends \PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return array
-     */
-    public function dataProvider()
-    {
-        return [
-            [[], '[]'],
-            [['foo' => 'bar'], '{"foo":"bar"}'],
-            [['foo' => ['bar' => ['baz']]], '{"foo":{"bar":["baz"]}}'],
-        ];
-    }
-
-    /**
-     * @param mixed $given
-     * @param string $expected
-     *
-     * @dataProvider dataProvider
-     *
-     * @return void
-     */
-    public function testEncode($given, $expected)
-    {
-        $this->assertEquals($expected, Json::encode($given));
-    }
-
-
-    /**
-     * @param mixed $expected
-     * @param string $given
-     *
-     * @dataProvider dataProvider
-     *
-     * @return void
-     */
-    public function testDecode($expected, $given)
-    {
-        $this->assertEquals($expected, Json::decode($given, true));
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Sanitize/HtmlTest.php b/Bundles/Library/tests/Unit/Spryker/Shared/Library/Sanitize/HtmlTest.php
deleted file mode 100644
index 3535a12..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Shared/Library/Sanitize/HtmlTest.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Library\Sanitize;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Library\Sanitize\Html;
-use stdClass;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Library
- * @group Sanitize
- * @group HtmlTest
- */
-class HtmlTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return array
-     */
-    public function dataProvider()
-    {
-        return [
-            ['my<nonhtml>?&x', 'my&lt;nonhtml&gt;?&amp;x'],
-            [
-                ['<foo>', '&nbsp;'],
-                ['&lt;foo&gt;', '&amp;nbsp;'],
-            ],
-            [false, false],
-            [new stdClass(), '(object)stdClass'],
-        ];
-    }
-
-    /**
-     * @dataProvider dataProvider
-     *
-     * @param string $string
-     * @param string $expected
-     *
-     * @return void
-     */
-    public function testEscape($string, $expected)
-    {
-        $this->assertSame($expected, Html::escape($string));
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/Spryker/Zed/Library/Generator/StringGeneratorTest.php b/Bundles/Library/tests/Unit/Spryker/Zed/Library/Generator/StringGeneratorTest.php
deleted file mode 100644
index 8c3a977..0000000
--- a/Bundles/Library/tests/Unit/Spryker/Zed/Library/Generator/StringGeneratorTest.php
+++ /dev/null
@@ -1,86 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Library\Generator;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Library\Generator\StringGenerator;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Library
- * @group Generator
- * @group StringGeneratorTest
- */
-class StringGeneratorTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testCreateInstance()
-    {
-        $generator = new StringGenerator();
-        $this->assertInstanceOf(StringGenerator::class, $generator);
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetLengthMustReturnFluentInterface()
-    {
-        $generator = new StringGenerator();
-        $this->assertInstanceOf(StringGenerator::class, $generator->setLength(10));
-    }
-
-    /**
-     * @return void
-     */
-    public function testGenerateRandomStringWithoutModifyLength()
-    {
-        $generator = new StringGenerator();
-
-        $string = $generator->generateRandomString();
-
-        $this->assertInternalType('string', $string);
-    }
-
-    /**
-     * @dataProvider randomStringProvider
-     *
-     * @param int $length
-     *
-     * @return void
-     */
-    public function testGenerateRandomString($length)
-    {
-        $generator = new StringGenerator();
-        $generator->setLength($length);
-
-        $string = $generator->generateRandomString();
-
-        $this->assertSame($length, strlen($string));
-    }
-
-    /**
-     * @return array
-     */
-    public function randomStringProvider()
-    {
-        return [
-            [10],
-            [9],
-            [8],
-            [7],
-            [6],
-            [5],
-        ];
-    }
-
-}
diff --git a/Bundles/Library/tests/Unit/_bootstrap.php b/Bundles/Library/tests/Unit/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Library/tests/Unit/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Library/tests/_bootstrap.php b/Bundles/Library/tests/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Library/tests/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Library/tests/_data/dump.sql b/Bundles/Library/tests/_data/dump.sql
deleted file mode 100644
index 4bc742c..0000000
--- a/Bundles/Library/tests/_data/dump.sql
+++ /dev/null
@@ -1 +0,0 @@
-/* Replace this file with actual dump of your database */
\ No newline at end of file
diff --git a/Bundles/Library/tests/_output/.gitkeep b/Bundles/Library/tests/_output/.gitkeep
deleted file mode 100644
index e69de29..0000000
diff --git a/Bundles/Library/tests/_support/FunctionalTester.php b/Bundles/Library/tests/_support/FunctionalTester.php
deleted file mode 100644
index 691f9f2..0000000
--- a/Bundles/Library/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Library;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Library/tests/_support/Module/Functional.php b/Bundles/Library/tests/_support/Module/Functional.php
deleted file mode 100644
index 23e1459..0000000
--- a/Bundles/Library/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Library\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Library/tests/_support/Module/Unit.php b/Bundles/Library/tests/_support/Module/Unit.php
deleted file mode 100644
index 36adbeb..0000000
--- a/Bundles/Library/tests/_support/Module/Unit.php
+++ /dev/null
@@ -1,13 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Library\Module;
-
-use Codeception\Module;
-
-class Unit extends Module
-{
-}
diff --git a/Bundles/Library/tests/_support/UnitTester.php b/Bundles/Library/tests/_support/UnitTester.php
deleted file mode 100644
index 317a392..0000000
--- a/Bundles/Library/tests/_support/UnitTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Library;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class UnitTester extends Actor
-{
-
-    use _generated\UnitTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Locale/composer.json b/Bundles/Locale/composer.json
index e0e0dcb..54ba148 100644
--- a/Bundles/Locale/composer.json
+++ b/Bundles/Locale/composer.json
@@ -6,14 +6,18 @@
     }
   },
   "require": {
-    "spryker/installer": "^2.0.0 || ^3.0.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/messenger": "^2.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer."
+  },
   "description": "Locale bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstaller.php b/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstaller.php
index 420e458..64fb359 100644
--- a/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstaller.php
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstaller.php
@@ -8,10 +8,9 @@
 namespace Spryker\Zed\Locale\Business\Internal\Install;
 
 use Orm\Zed\Locale\Persistence\SpyLocale;
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 use Spryker\Zed\Locale\Persistence\LocaleQueryContainerInterface;
 
-class LocaleInstaller extends AbstractInstaller
+class LocaleInstaller implements LocaleInstallerInterface
 {
 
     /**
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstallerInterface.php b/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstallerInterface.php
new file mode 100644
index 0000000..94c58fe
--- /dev/null
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Business/Internal/Install/LocaleInstallerInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Locale\Business\Internal\Install;
+
+interface LocaleInstallerInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install();
+
+}
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleBusinessFactory.php b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleBusinessFactory.php
index 777353b..7149640 100644
--- a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleBusinessFactory.php
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleBusinessFactory.php
@@ -10,7 +10,6 @@ namespace Spryker\Zed\Locale\Business;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 use Spryker\Zed\Locale\Business\Internal\Install\LocaleInstaller;
 use Spryker\Zed\Locale\Business\Manager\LocaleManager;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Locale\LocaleConfig getConfig()
@@ -39,17 +38,14 @@ class LocaleBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return \Spryker\Zed\Locale\Business\Internal\Install\LocaleInstaller
      */
-    public function createInstaller(MessengerInterface $messenger)
+    public function createInstaller()
     {
         $installer = new LocaleInstaller(
             $this->getQueryContainer(),
             $this->getConfig()->getLocaleFile()
         );
-        $installer->setMessenger($messenger);
 
         return $installer;
     }
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacade.php b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacade.php
index aaf8b46..2898a9a 100644
--- a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacade.php
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacade.php
@@ -9,7 +9,6 @@ namespace Spryker\Zed\Locale\Business;
 
 use Spryker\Shared\Kernel\Store;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Locale\Business\LocaleBusinessFactory getFactory()
@@ -177,13 +176,11 @@ class LocaleFacade extends AbstractFacade implements LocaleFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger)
+    public function install()
     {
-        $this->getFactory()->createInstaller($messenger)->install();
+        $this->getFactory()->createInstaller()->install();
     }
 
     /**
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacadeInterface.php b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacadeInterface.php
index 1dcf3eb..fd85f41 100644
--- a/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacadeInterface.php
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Business/LocaleFacadeInterface.php
@@ -7,8 +7,6 @@
 
 namespace Spryker\Zed\Locale\Business;
 
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-
 interface LocaleFacadeInterface
 {
 
@@ -135,11 +133,9 @@ interface LocaleFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger);
+    public function install();
 
     /**
      * Specification:
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/Installer.php b/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/Installer.php
deleted file mode 100644
index 2b82dab..0000000
--- a/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Locale\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Locale\Communication\LocaleCommunicationFactory getFactory()
- * @method \Spryker\Zed\Locale\Business\LocaleFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install($this->messenger);
-    }
-
-}
diff --git a/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/LocaleInstallerPlugin.php b/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/LocaleInstallerPlugin.php
new file mode 100644
index 0000000..325ae0a
--- /dev/null
+++ b/Bundles/Locale/src/Spryker/Zed/Locale/Communication/Plugin/LocaleInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Locale\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Locale\Communication\LocaleCommunicationFactory getFactory()
+ * @method \Spryker\Zed\Locale\Business\LocaleFacade getFacade()
+ */
+class LocaleInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Log/composer.json b/Bundles/Log/composer.json
index 9ebc9fc..5e245b3 100644
--- a/Bundles/Log/composer.json
+++ b/Bundles/Log/composer.json
@@ -13,8 +13,10 @@
   "require": {
     "psr/log": "~1.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/monolog": "^2.0.0",
-    "spryker/silex": "^2.0.0"
+    "spryker/monolog": "^2.0.0"
+  },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/Mail/composer.json b/Bundles/Mail/composer.json
index 284d00f..d457737 100644
--- a/Bundles/Mail/composer.json
+++ b/Bundles/Mail/composer.json
@@ -1,13 +1,12 @@
 {
   "name": "spryker/mail",
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/glossary": "^2.0.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/twig": "^2.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/twig": "*",
     "spryker/testify": "*"
   },
   "suggest": {
diff --git a/Bundles/Mail/dependency.json b/Bundles/Mail/dependency.json
deleted file mode 100644
index 205e6ae..0000000
--- a/Bundles/Mail/dependency.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "Twig": "Required by renderer. Can be replaced with anything else which is able to render views, default is Twig_Environment."
-  }
-}
diff --git a/Bundles/Mail/src/Spryker/Zed/Mail/MailDependencyProvider.php b/Bundles/Mail/src/Spryker/Zed/Mail/MailDependencyProvider.php
index 683edaf..68431ec 100644
--- a/Bundles/Mail/src/Spryker/Zed/Mail/MailDependencyProvider.php
+++ b/Bundles/Mail/src/Spryker/Zed/Mail/MailDependencyProvider.php
@@ -7,9 +7,9 @@
 
 namespace Spryker\Zed\Mail;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Glossary\Communication\Plugin\TwigTranslatorPlugin;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Mail\Business\Model\Mail\MailTypeCollection;
 use Spryker\Zed\Mail\Business\Model\Provider\MailProviderCollection;
diff --git a/Bundles/Mail/tests/Unit/Spryker/Zed/Mail/MailDependencyProviderTest.php b/Bundles/Mail/tests/Unit/Spryker/Zed/Mail/MailDependencyProviderTest.php
index 61138cd..263e24b 100644
--- a/Bundles/Mail/tests/Unit/Spryker/Zed/Mail/MailDependencyProviderTest.php
+++ b/Bundles/Mail/tests/Unit/Spryker/Zed/Mail/MailDependencyProviderTest.php
@@ -8,8 +8,8 @@
 namespace Unit\Spryker\Zed\Mail;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Application\Communication\Application;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
+use Spryker\Shared\Kernel\Communication\Application;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Mail\Business\Model\Mail\MailTypeCollectionAddInterface;
 use Spryker\Zed\Mail\Business\Model\Provider\MailProviderCollectionAddInterface;
diff --git a/Bundles/Maintenance/composer.json b/Bundles/Maintenance/composer.json
index 26085cc..3588810 100644
--- a/Bundles/Maintenance/composer.json
+++ b/Bundles/Maintenance/composer.json
@@ -7,7 +7,6 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/config": "^2.2.1",
     "spryker/error-handler": "^1.0.4",
     "spryker/kernel": "^2.0.0"
diff --git a/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/IndexController.php b/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/IndexController.php
index 198b7b0..6634fc4 100644
--- a/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/IndexController.php
+++ b/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/IndexController.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Maintenance\Communication\Controller;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\ErrorHandler\ErrorHandlerConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Maintenance\Business\MaintenanceFacade getFacade()
diff --git a/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/PhpInfoController.php b/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/PhpInfoController.php
index 41a75a4..9e56877 100644
--- a/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/PhpInfoController.php
+++ b/Bundles/Maintenance/src/Spryker/Zed/Maintenance/Communication/Controller/PhpInfoController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Maintenance\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Maintenance\Business\MaintenanceFacade getFacade()
diff --git a/Bundles/Messenger/composer.json b/Bundles/Messenger/composer.json
index ee2f007..cbd19b2 100644
--- a/Bundles/Messenger/composer.json
+++ b/Bundles/Messenger/composer.json
@@ -6,17 +6,16 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/glossary": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/log": "^2.0.0",
-    "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Messenger bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/MessengerBusinessFactory.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/MessengerBusinessFactory.php
index f2dd8c0..cbd51a2 100644
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/MessengerBusinessFactory.php
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/MessengerBusinessFactory.php
@@ -37,7 +37,7 @@ class MessengerBusinessFactory extends AbstractBusinessFactory
      */
     public function createInMemoryMessageTray()
     {
-        return new InMemoryMessageTray($this->getGlossaryFacade());
+        return new InMemoryMessageTray($this->getTranslationPlugin());
     }
 
     /**
@@ -45,7 +45,7 @@ class MessengerBusinessFactory extends AbstractBusinessFactory
      */
     public function createSessionMessageTray()
     {
-        return new SessionMessageTray($this->getSession(), $this->getGlossaryFacade());
+        return new SessionMessageTray($this->getSession(), $this->getTranslationPlugin());
     }
 
     /**
@@ -57,11 +57,11 @@ class MessengerBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface
+     * @return \Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface
      */
-    public function getGlossaryFacade()
+    public function getTranslationPlugin()
     {
-        return $this->getProvidedDependency(MessengerDependencyProvider::FACADE_GLOSSARY);
+        return $this->getProvidedDependency(MessengerDependencyProvider::PLUGIN_TRANSLATION);
     }
 
 }
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/BaseMessageTray.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/BaseMessageTray.php
index 6303b2c..9d99b4c 100644
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/BaseMessageTray.php
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/BaseMessageTray.php
@@ -7,22 +7,22 @@
 
 namespace Spryker\Zed\Messenger\Business\Model;
 
-use Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface;
+use Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface;
 
 class BaseMessageTray
 {
 
     /**
-     * @var \Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface
+     * @var \Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface
      */
-    protected $glossaryFacade;
+    protected $translationPlugin;
 
     /**
-     * @param \Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface $glossaryFacade
+     * @param \Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface $translationPlugin
      */
-    public function __construct(MessengerToGlossaryInterface $glossaryFacade)
+    public function __construct(TranslationPluginInterface $translationPlugin)
     {
-        $this->glossaryFacade = $glossaryFacade;
+        $this->translationPlugin = $translationPlugin;
     }
 
     /**
@@ -34,8 +34,8 @@ class BaseMessageTray
     protected function translate($keyName, array $data = [])
     {
         $translation = $keyName;
-        if ($this->glossaryFacade->hasKey($keyName)) {
-            $translation = $this->glossaryFacade->translate($keyName, $data);
+        if ($this->translationPlugin->hasKey($keyName)) {
+            $translation = $this->translationPlugin->translate($keyName, $data);
         }
 
         return $translation;
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/MessengerInterface.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/MessengerInterface.php
deleted file mode 100644
index 4684395..0000000
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/MessengerInterface.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Messenger\Business\Model;
-
-use Psr\Log\LoggerInterface;
-
-interface MessengerInterface extends LoggerInterface
-{
-}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/SessionMessageTray.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/SessionMessageTray.php
index 1a43e7c..10f5c1e 100644
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/SessionMessageTray.php
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Business/Model/SessionMessageTray.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Messenger\Business\Model;
 
 use Generated\Shared\Transfer\FlashMessagesTransfer;
 use Generated\Shared\Transfer\MessageTransfer;
-use Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface;
+use Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface;
 use Symfony\Component\HttpFoundation\Session\SessionInterface;
 
 class SessionMessageTray extends BaseMessageTray implements MessageTrayInterface
@@ -22,11 +22,11 @@ class SessionMessageTray extends BaseMessageTray implements MessageTrayInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
-     * @param \Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryInterface $glossaryFacade
+     * @param \Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface $translationPlugin
      */
-    public function __construct(SessionInterface $session, MessengerToGlossaryInterface $glossaryFacade)
+    public function __construct(SessionInterface $session, TranslationPluginInterface $translationPlugin)
     {
-        parent::__construct($glossaryFacade);
+        parent::__construct($translationPlugin);
         $this->session = $session;
     }
 
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/ServiceProvider/MessengerServiceProvider.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/ServiceProvider/MessengerServiceProvider.php
new file mode 100644
index 0000000..ae1d201
--- /dev/null
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/ServiceProvider/MessengerServiceProvider.php
@@ -0,0 +1,41 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Messenger\Communication\Plugin\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Messenger\Business\MessengerFacade getFacade()
+ */
+class MessengerServiceProvider extends AbstractPlugin implements ServiceProviderInterface
+{
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $app['messenger'] = function () {
+            return $this->getFacade();
+        };
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/TranslationPlugin.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/TranslationPlugin.php
new file mode 100644
index 0000000..f872843
--- /dev/null
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Communication/Plugin/TranslationPlugin.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Messenger\Communication\Plugin;
+
+use Spryker\Zed\Messenger\Dependency\Plugin\TranslationPluginInterface;
+
+class TranslationPlugin implements TranslationPluginInterface
+{
+
+    /**
+     * @param string $keyName
+     *
+     * @return bool
+     */
+    public function hasKey($keyName)
+    {
+        return false;
+    }
+
+    /**
+     * @param string $keyName
+     * @param array $data
+     *
+     * @return string
+     */
+    public function translate($keyName, array $data = [])
+    {
+        return $keyName;
+    }
+
+}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryBridge.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryBridge.php
deleted file mode 100644
index 4012807..0000000
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryBridge.php
+++ /dev/null
@@ -1,60 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Messenger\Dependency\Facade;
-
-use Generated\Shared\Transfer\LocaleTransfer;
-
-class MessengerToGlossaryBridge implements MessengerToGlossaryInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Glossary\Business\GlossaryFacadeInterface
-     */
-    protected $glossaryFacade;
-
-    /**
-     * @param \Spryker\Zed\Glossary\Business\GlossaryFacadeInterface $glossaryFacade
-     */
-    public function __construct($glossaryFacade)
-    {
-        $this->glossaryFacade = $glossaryFacade;
-    }
-
-    /**
-     * @param string $keyName
-     * @param \Generated\Shared\Transfer\LocaleTransfer|null $locale
-     *
-     * @return bool
-     */
-    public function hasTranslation($keyName, LocaleTransfer $locale = null)
-    {
-        return $this->glossaryFacade->hasTranslation($keyName, $locale);
-    }
-
-    /**
-     * @param string $keyName
-     * @param array $data
-     *
-     * @return string
-     */
-    public function translate($keyName, array $data = [])
-    {
-        return $this->glossaryFacade->translate($keyName, $data);
-    }
-
-    /**
-     * @param string $keyName
-     *
-     * @return bool
-     */
-    public function hasKey($keyName)
-    {
-        return $this->glossaryFacade->hasKey($keyName);
-    }
-
-}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryInterface.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryInterface.php
deleted file mode 100644
index f650596..0000000
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Facade/MessengerToGlossaryInterface.php
+++ /dev/null
@@ -1,40 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Messenger\Dependency\Facade;
-
-use Generated\Shared\Transfer\LocaleTransfer;
-
-interface MessengerToGlossaryInterface
-{
-
-    /**
-     * @param string $keyName
-     * @param \Generated\Shared\Transfer\LocaleTransfer|null $locale
-     *
-     * @return bool
-     */
-    public function hasTranslation($keyName, LocaleTransfer $locale = null);
-
-    /**
-     * @param string $keyName
-     * @param array $data
-     *
-     * @throws \Spryker\Zed\Glossary\Business\Exception\MissingTranslationException
-     *
-     * @return string
-     */
-    public function translate($keyName, array $data = []);
-
-    /**
-     * @param string $keyName
-     *
-     * @return bool
-     */
-    public function hasKey($keyName);
-
-}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Plugin/TranslationPluginInterface.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Plugin/TranslationPluginInterface.php
new file mode 100644
index 0000000..9b780eb
--- /dev/null
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/Dependency/Plugin/TranslationPluginInterface.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Messenger\Dependency\Plugin;
+
+interface TranslationPluginInterface
+{
+
+    /**
+     * @api
+     *
+     * @param string $keyName
+     *
+     * @return bool
+     */
+    public function hasKey($keyName);
+
+    /**
+     * @api
+     *
+     * @param string $keyName
+     * @param array $data
+     *
+     * @return string
+     */
+    public function translate($keyName, array $data = []);
+
+}
diff --git a/Bundles/Messenger/src/Spryker/Zed/Messenger/MessengerDependencyProvider.php b/Bundles/Messenger/src/Spryker/Zed/Messenger/MessengerDependencyProvider.php
index 554275c..139a554 100644
--- a/Bundles/Messenger/src/Spryker/Zed/Messenger/MessengerDependencyProvider.php
+++ b/Bundles/Messenger/src/Spryker/Zed/Messenger/MessengerDependencyProvider.php
@@ -7,16 +7,16 @@
 
 namespace Spryker\Zed\Messenger;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Messenger\Dependency\Facade\MessengerToGlossaryBridge;
+use Spryker\Zed\Messenger\Communication\Plugin\TranslationPlugin;
 
 class MessengerDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const SESSION = 'session';
-    const FACADE_GLOSSARY = 'glossary facade';
+    const PLUGIN_TRANSLATION = 'translation plugin';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -25,12 +25,35 @@ class MessengerDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideBusinessLayerDependencies(Container $container)
     {
-        $container[self::SESSION] = function (Container $container) {
+        $container = $this->addSession($container);
+        $container = $this->addTranslationPlugin($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addSession(Container $container)
+    {
+        $container[static::SESSION] = function (Container $container) {
             return (new Pimple())->getApplication()['request']->getSession();
         };
 
-        $container[self::FACADE_GLOSSARY] = function (Container $container) {
-            return new MessengerToGlossaryBridge($container->getLocator()->glossary()->facade());
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addTranslationPlugin(Container $container)
+    {
+        $container[static::PLUGIN_TRANSLATION] = function (Container $container) {
+            return new TranslationPlugin();
         };
 
         return $container;
diff --git a/Bundles/Money/composer.json b/Bundles/Money/composer.json
index eac922d..c59a972 100644
--- a/Bundles/Money/composer.json
+++ b/Bundles/Money/composer.json
@@ -3,14 +3,18 @@
   "require": {
     "moneyphp/money": "~3.0.0",
     "spryker/currency": "^1.0.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/silex": "^2.0.0",
-    "spryker/twig": "^2.1.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/config": "^2.0.0",
-    "spryker/testify": "*"
+    "spryker/silex": "*",
+    "spryker/testify": "*",
+    "spryker/twig": "*"
+  },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex.",
+    "spryker/twig": "If you want to use Money in Twig you need to install spryker/twig."
   },
   "description": "Money bundle",
   "license": "proprietary",
diff --git a/Bundles/NewRelic/composer.json b/Bundles/NewRelic/composer.json
index 4a3c158..2ce2b31 100644
--- a/Bundles/NewRelic/composer.json
+++ b/Bundles/NewRelic/composer.json
@@ -2,17 +2,19 @@
   "name": "spryker/new-relic",
   "require": {
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/guzzle": "^2.1.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/silex": "^1.0.0 || ^2.0.0",
-    "spryker/symfony": "^2.0.0"
+    "spryker/new-relic-api": "^1.0.0",
+    "spryker/symfony": "^2.0.0",
+    "spryker/util-network": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "NewRelic bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Api.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Api.php
deleted file mode 100644
index 4a2054c..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Api.php
+++ /dev/null
@@ -1,15 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic;
-
-/**
- * @deprecated Use NewRelicApi instead, you can also use NewRelicApiTrait to retrieve the NewRelicApi
- */
-class Api extends NewRelicApi
-{
-}
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/ApiInterface.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/ApiInterface.php
deleted file mode 100644
index 6e12eea..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/ApiInterface.php
+++ /dev/null
@@ -1,15 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic;
-
-/**
- * @deprecated Use NewRelicApiInterface instead.
- */
-interface ApiInterface
-{
-}
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Exception/RecordDeploymentException.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Exception/RecordDeploymentException.php
deleted file mode 100644
index f207fc9..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/Exception/RecordDeploymentException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic\Exception;
-
-use Exception;
-
-class RecordDeploymentException extends Exception
-{
-}
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApi.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApi.php
deleted file mode 100644
index 463b1a0..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApi.php
+++ /dev/null
@@ -1,363 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic;
-
-use GuzzleHttp\Client;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\NewRelic\Exception\RecordDeploymentException;
-
-/**
- * The PHP API for New Relic
- *
- * @link https://newrelic.com/docs/php/the-php-api
- */
-class NewRelicApi implements NewRelicApiInterface
-{
-
-    const NEWRELIC_DEPLOYMENT_API_URL = 'https://api.newrelic.com/deployments.xml';
-    const STATUS_CODE_OK = 200;
-
-    /**
-     * @var bool
-     */
-    protected $active = false;
-
-    /**
-     * @var string
-     */
-    protected $nameOfTransaction;
-
-    public function __construct()
-    {
-        $this->active = extension_loaded('newrelic');
-    }
-
-    /**
-     * Report an error at this line of code, with a complete stack trace.
-     *
-     * @param string $message
-     * @param \Exception|\Throwable $exception
-     *
-     * @return $this
-     */
-    public function noticeError($message, $exception)
-    {
-        if ($this->active) {
-            newrelic_notice_error($message, $exception);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Sets the name of the application to string. The string uses the same format as newrelic.appname and can set
-     * multiple application names by separating each with a semi-colon. The first application name is the primary name,
-     * and up to two extra application names can be specified. This function should be called as early as possible, and
-     * will have no effect if called after the RUM footer has been sent. You may want to consider setting the
-     * application name in a file loaded by PHP's auto_prepend_file INI setting. This function returns true if it
-     * succeeded or false otherwise.
-     *
-     * @param string $name
-     *
-     * @return $this
-     */
-    public function setAppName($name)
-    {
-        if ($this->active) {
-            newrelic_set_appname($name);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Sets the name of the transaction to the specified string. This can be useful if you have implemented your own
-     * dispatching scheme and wish to name transactions according to their purpose rather than their URL.
-     *
-     * Keep in mind that you want to make sure that you do not create too many unique transaction names.
-     * For example, if you have /product/123 and /product/234, if you generate a separate transaction name for each,
-     * then New Relic will store separate information for these two transaction names. This will make your graphs less
-     * useful, and may run into limits we set on the number of unique transaction names per account. It also can slow
-     * down the performance of your application. Instead, store the transaction as /product/*, or use something
-     * significant about the code itself to name the transaction, such as /Product/view. The limit for the total number
-     * of transactions should be less than 1000 unique transaction names -- exceeding that is not recommended.
-     *
-     * @param string $name
-     *
-     * @return $this
-     */
-    public function setNameOfTransaction($name)
-    {
-        $this->nameOfTransaction = $name;
-
-        if ($this->active) {
-            newrelic_name_transaction($name);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getNameOfTransaction()
-    {
-        return $this->nameOfTransaction;
-    }
-
-    /**
-     * Stop recording the web transaction immediately. Usually used when a page is done with all computation and is
-     * about to stream data (file download, audio or video streaming etc) and you don't want the time taken to stream to
-     * be counted as part of the transaction. This is especially relevant when the time taken to complete the operation
-     * is completely outside the bounds of your application. For example, a user on a very slow connection may take a
-     * very long time to download even small files, and you wouldn't want that download time to skew the real
-     * transaction time.
-     *
-     * @return $this
-     */
-    public function markEndOfTransaction()
-    {
-        if ($this->active) {
-            newrelic_end_of_transaction();
-        }
-
-        return $this;
-    }
-
-    /**
-     * Do not generate metrics for this transaction. This is useful when you have transactions that are particularly
-     * slow for known reasons and you do not want them always being reported as the transaction trace or skewing your
-     * site averages.
-     *
-     * @return $this
-     */
-    public function markIgnoreTransaction()
-    {
-        if ($this->active) {
-            newrelic_ignore_transaction();
-        }
-
-        return $this;
-    }
-
-    /**
-     * Do not generate Apdex metrics for this transaction. This is useful when you have either very short or very long
-     * transactions (such as file downloads) that can skew your apdex score.
-     *
-     * @return $this
-     */
-    public function markIgnoreApdex()
-    {
-        if ($this->active) {
-            newrelic_ignore_apdex();
-        }
-
-        return $this;
-    }
-
-    /**
-     * If no argument or true as an argument is given, mark the current transaction as a background job. If false is
-     * passed as an argument, mark the transaction as a web application.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function markAsBackgroundJob($flag = true)
-    {
-        if ($this->active) {
-            newrelic_background_job((bool)$flag);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Adds a custom metric with the specified name and value, which is of type double. These custom metrics can then
-     * be used in custom views in the New Relic User Interface.
-     *
-     * @param string $metricName
-     * @param mixed $value
-     *
-     * @return $this
-     */
-    public function addCustomMetric($metricName, $value)
-    {
-        if ($this->active) {
-            if (strpos($metricName, 'Custom/') !== 0) {
-                $metricName = 'Custom/' . $metricName;
-            }
-            newrelic_custom_metric($metricName, $value);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Add a custom parameter to the current web transaction with the specified value. For example, you can add a
-     * customer's full name from your customer database.
-     *
-     * @param string $key
-     * @param mixed $value
-     *
-     * @return $this
-     */
-    public function addCustomParameter($key, $value)
-    {
-        if ($this->active) {
-            newrelic_add_custom_parameter($key, $value);
-        }
-
-        return $this;
-    }
-
-    /**
-     * API equivalent of the newrelic.transaction_tracer.customi setting. It allows you to add functions or methods to
-     * the list to be instrumented.
-     *
-     * @param string $tracer
-     *
-     * @return $this
-     */
-    public function addCustomTracer($tracer = 'classname::function_name')
-    {
-        if ($this->active) {
-            newrelic_add_custom_tracer($tracer);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Returns the JavaScript string to inject as part of the header for browser timing (real user monitoring). If flag
-     * is specified it must be a boolean, and if omitted, defaults to true. This indicates whether or not surrounding
-     * script tags should be returned as part of the string.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function getBrowserTimingHeader($flag = true)
-    {
-        if ($this->active) {
-            newrelic_get_browser_timing_header($flag);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Returns the JavaScript string to inject at the very end of the HTML output for browser timing (real user
-     * monitoring). If flag is specified it must be a boolean, and if omitted, defaults to true. This indicates whether
-     * or not surrounding script tags should be returned as part of the string.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function getBrowserTimingFooter($flag = true)
-    {
-        if ($this->active) {
-            newrelic_get_browser_timing_footer($flag);
-        }
-
-        return $this;
-    }
-
-    /**
-     * Prevents the output filter from attempting to insert RUM JavaScript for this current transaction. Useful for
-     * AJAX calls, for example.
-     *
-     * RUM: Real User Management @see https://newrelic.com/browser-monitoring
-     *
-     * @return $this
-     */
-    public function disableAutoRUM()
-    {
-        if ($this->active) {
-            newrelic_disable_autorum();
-        }
-
-        return $this;
-    }
-
-    /**
-     * @param string $name
-     * @param array $attributes
-     *
-     * @return $this
-     */
-    public function recordCustomEvent($name, array $attributes = [])
-    {
-        if (!$this->active) {
-            return $this;
-        }
-
-        if (!isset($attributes['store'])) {
-            $attributes['store'] = Store::getInstance()->getStoreName();
-        }
-        newrelic_record_custom_event($name, $attributes);
-
-        return $this;
-    }
-
-    /**
-     * @param array $params
-     *
-     * @throws \Spryker\Shared\NewRelic\Exception\RecordDeploymentException
-     *
-     * @return $this
-     */
-    public function recordDeployment(array $params = [])
-    {
-        if (!$this->active) {
-            return $this;
-        }
-
-        $response = $this->createRecordDeploymentRequest($params);
-
-        if ($response->getStatusCode() !== static::STATUS_CODE_OK) {
-            throw new RecordDeploymentException(sprintf(
-                'Record deployment to New Relic request failed with code %d. %s',
-                $response->getStatusCode(),
-                $response->getBody()
-            ));
-        }
-
-        return $this;
-    }
-
-    /**
-     * @param array $params
-     *
-     * @return \Psr\Http\Message\ResponseInterface
-     */
-    protected function createRecordDeploymentRequest(array $params)
-    {
-        $options = [
-            'headers' => [
-                'x-api-key' => Config::get(NewRelicConstants::NEWRELIC_API_KEY),
-            ],
-        ];
-
-        $data = [];
-        $data['deployment'] = [];
-        foreach ($params as $key => $value) {
-            $data['deployment'][$key] = $value;
-        }
-        $options['form_params'] = $data;
-
-        $httpClient = new Client();
-
-        $request = $httpClient->post(self::NEWRELIC_DEPLOYMENT_API_URL, $options);
-
-        return $request;
-    }
-
-}
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiInterface.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiInterface.php
deleted file mode 100644
index a3df47f..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiInterface.php
+++ /dev/null
@@ -1,187 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic;
-
-/**
- * The PHP API for New Relic
- *
- * @link https://newrelic.com/docs/php/the-php-api
- */
-interface NewRelicApiInterface extends ApiInterface
-{
-
-    /**
-     * Report an error at this line of code, with a complete stack trace.
-     *
-     * @param string $message
-     * @param \Exception|\Throwable $exception
-     *
-     * @return $this
-     */
-    public function noticeError($message, $exception);
-
-    /**
-     * Sets the name of the application to string. The string uses the same format as newrelic.appname and can set
-     * multiple application names by separating each with a semi-colon. The first application name is the primary name,
-     * and up to two extra application names can be specified. This function should be called as early as possible, and
-     * will have no effect if called after the RUM footer has been sent. You may want to consider setting the
-     * application name in a file loaded by PHP's auto_prepend_file INI setting. This function returns true if it
-     * succeeded or false otherwise.
-     *
-     * @param string $name
-     *
-     * @return $this
-     */
-    public function setAppName($name);
-
-    /**
-     * Sets the name of the transaction to the specified string. This can be useful if you have implemented your own
-     * dispatching scheme and wish to name transactions according to their purpose rather than their URL.
-     *
-     * Keep in mind that you want to make sure that you do not create too many unique transaction names.
-     * For example, if you have /product/123 and /product/234, if you generate a separate transaction name for each,
-     * then New Relic will store separate information for these two transaction names. This will make your graphs less
-     * useful, and may run into limits we set on the number of unique transaction names per account. It also can slow
-     * down the performance of your application. Instead, store the transaction as /product/*, or use something
-     * significant about the code itself to name the transaction, such as /Product/view. The limit for the total number
-     * of transactions should be less than 1000 unique transaction names -- exceeding that is not recommended.
-     *
-     * @param string $name
-     *
-     * @return $this
-     */
-    public function setNameOfTransaction($name);
-
-    /**
-     * @return string
-     */
-    public function getNameOfTransaction();
-
-    /**
-     * Stop recording the web transaction immediately. Usually used when a page is done with all computation and is
-     * about to stream data (file download, audio or video streaming etc) and you don't want the time taken to stream to
-     * be counted as part of the transaction. This is especially relevant when the time taken to complete the operation
-     * is completely outside the bounds of your application. For example, a user on a very slow connection may take a
-     * very long time to download even small files, and you wouldn't want that download time to skew the real
-     * transaction time.
-     *
-     * @return $this
-     */
-    public function markEndOfTransaction();
-
-    /**
-     * Do not generate metrics for this transaction. This is useful when you have transactions that are particularly
-     * slow for known reasons and you do not want them always being reported as the transaction trace or skewing your
-     * site averages.
-     *
-     * @return $this
-     */
-    public function markIgnoreTransaction();
-
-    /**
-     * Do not generate Apdex metrics for this transaction. This is useful when you have either very short or very long
-     * transactions (such as file downloads) that can skew your apdex score.
-     *
-     * @return $this
-     */
-    public function markIgnoreApdex();
-
-    /**
-     * If no argument or true as an argument is given, mark the current transaction as a background job. If false is
-     * passed as an argument, mark the transaction as a web application.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function markAsBackgroundJob($flag = true);
-
-    /**
-     * Adds a custom metric with the specified name and value, which is of type double. These custom metrics can then
-     * be used in custom views in the New Relic User Interface.
-     *
-     * @param string $metricName
-     * @param mixed $value
-     *
-     * @return $this
-     */
-    public function addCustomMetric($metricName, $value);
-
-    /**
-     * Add a custom parameter to the current web transaction with the specified value. For example, you can add a
-     * customer's full name from your customer database.
-     *
-     * @param string $key
-     * @param mixed $value
-     *
-     * @return $this
-     */
-    public function addCustomParameter($key, $value);
-
-    /**
-     * API equivalent of the newrelic.transaction_tracer.customi setting. It allows you to add functions or methods to
-     * the list to be instrumented.
-     *
-     * @param string $tracer
-     *
-     * @return $this
-     */
-    public function addCustomTracer($tracer = 'classname::function_name');
-
-    /**
-     * Returns the JavaScript string to inject as part of the header for browser timing (real user monitoring). If flag
-     * is specified it must be a boolean, and if omitted, defaults to true. This indicates whether or not surrounding
-     * script tags should be returned as part of the string.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function getBrowserTimingHeader($flag = true);
-
-    /**
-     * Returns the JavaScript string to inject at the very end of the HTML output for browser timing (real user
-     * monitoring). If flag is specified it must be a boolean, and if omitted, defaults to true. This indicates whether
-     * or not surrounding script tags should be returned as part of the string.
-     *
-     * @param bool $flag
-     *
-     * @return $this
-     */
-    public function getBrowserTimingFooter($flag = true);
-
-    /**
-     * Prevents the output filter from attempting to insert RUM JavaScript for this current transaction. Useful for
-     * AJAX calls, for example.
-     *
-     * RUM: Real User Management @see https://newrelic.com/browser-monitoring
-     *
-     * @return $this
-     */
-    public function disableAutoRUM();
-
-    /**
-     * Records a custom event in New Relic insight with the specified attributes.
-     *
-     * @param string $name
-     * @param array $attributes
-     *
-     * @return $this
-     */
-    public function recordCustomEvent($name, array $attributes = []);
-
-    /**
-     * Send information about application deployments to New Relic.
-     *
-     * @param array $params
-     *
-     * @return $this
-     */
-    public function recordDeployment(array $params = []);
-
-}
diff --git a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiTrait.php b/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiTrait.php
deleted file mode 100644
index 49211c1..0000000
--- a/Bundles/NewRelic/src/Spryker/Shared/NewRelic/NewRelicApiTrait.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\NewRelic;
-
-trait NewRelicApiTrait
-{
-
-    /**
-     * @return \Spryker\Shared\NewRelic\NewRelicApiInterface
-     */
-    public function createNewRelicApi()
-    {
-        return new NewRelicApi();
-    }
-
-}
diff --git a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicDependencyProvider.php b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicDependencyProvider.php
index e7fba39..22024d3 100644
--- a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicDependencyProvider.php
+++ b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicDependencyProvider.php
@@ -7,8 +7,7 @@
 
 namespace Spryker\Yves\NewRelic;
 
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Yves\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Yves\Kernel\Container;
 
@@ -16,7 +15,7 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const NEW_RELIC_API = 'new relic api';
-    const SYSTEM = 'system';
+    const SERVICE_NETWORK = 'util network service';
 
     /**
      * @param \Spryker\Yves\Kernel\Container $container
@@ -26,7 +25,7 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
     public function provideDependencies(Container $container)
     {
         $container = $this->addNewRelicApi($container);
-        $container = $this->addSystem($container);
+        $container = $this->addUtilNetworkService($container);
 
         return $container;
     }
@@ -50,10 +49,10 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
      *
      * @return \Spryker\Yves\Kernel\Container
      */
-    protected function addSystem(Container $container)
+    protected function addUtilNetworkService(Container $container)
     {
-        $container[static::SYSTEM] = function () {
-            return new System();
+        $container[static::SERVICE_NETWORK] = function (Container $container) {
+            return $container->getLocator()->utilNetwork()->service();
         };
 
         return $container;
diff --git a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicFactory.php b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicFactory.php
index 7bfface..7e88e59 100644
--- a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicFactory.php
+++ b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/NewRelicFactory.php
@@ -25,7 +25,7 @@ class NewRelicFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApi()
     {
@@ -33,11 +33,11 @@ class NewRelicFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Library\System
+     * @return \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
      */
     protected function getSystem()
     {
-        return $this->getProvidedDependency(NewRelicDependencyProvider::SYSTEM);
+        return $this->getProvidedDependency(NewRelicDependencyProvider::SERVICE_NETWORK);
     }
 
 }
diff --git a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/Plugin/ControllerListener.php b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/Plugin/ControllerListener.php
index a324af2..4e249cf 100644
--- a/Bundles/NewRelic/src/Spryker/Yves/NewRelic/Plugin/ControllerListener.php
+++ b/Bundles/NewRelic/src/Spryker/Yves/NewRelic/Plugin/ControllerListener.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Yves\NewRelic\Plugin;
 
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 use Spryker\Yves\Kernel\AbstractPlugin;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
@@ -23,14 +23,14 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
     const PRIORITY = -255;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
-     * @var \Spryker\Shared\Library\System
+     * @var \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
      */
-    protected $system;
+    protected $utilNetworkService;
 
     /**
      * @var array
@@ -38,14 +38,14 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
     protected $ignorableTransactions;
 
     /**
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
-     * @param \Spryker\Shared\Library\System $system
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface $utilNetworkService
      * @param array $ignorableTransactions
      */
-    public function __construct(NewRelicApiInterface $newRelicApi, System $system, array $ignorableTransactions = [])
+    public function __construct(NewRelicApiInterface $newRelicApi, UtilNetworkServiceInterface $utilNetworkService, array $ignorableTransactions = [])
     {
         $this->newRelicApi = $newRelicApi;
-        $this->system = $system;
+        $this->utilNetworkService = $utilNetworkService;
         $this->ignorableTransactions = $ignorableTransactions;
     }
 
@@ -63,7 +63,7 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
         $request = $event->getRequest();
         $transactionName = $request->attributes->get('_route');
         $requestUri = $request->server->get('REQUEST_URI', 'n/a');
-        $host = $request->server->get('COMPUTERNAME', $this->system->getHostname());
+        $host = $request->server->get('COMPUTERNAME', $this->utilNetworkService->getHostname());
 
         $this->newRelicApi->setNameOfTransaction($transactionName);
         $this->newRelicApi->addCustomParameter('request_uri', $requestUri);
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Exception/RecordDeploymentException.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Exception/RecordDeploymentException.php
new file mode 100644
index 0000000..e227ff9
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Exception/RecordDeploymentException.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business\Exception;
+
+use Exception;
+
+class RecordDeploymentException extends Exception
+{
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeployment.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeployment.php
new file mode 100644
index 0000000..643736e
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeployment.php
@@ -0,0 +1,70 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business\Model;
+
+use GuzzleHttp\Client;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\NewRelic\NewRelicConstants;
+use Spryker\Zed\NewRelic\Business\Exception\RecordDeploymentException;
+
+class RecordDeployment implements RecordDeploymentInterface
+{
+
+    const NEWRELIC_DEPLOYMENT_API_URL = 'https://api.newrelic.com/deployments.xml';
+    const STATUS_CODE_OK = 200;
+
+    /**
+     * @param array $arguments
+     *
+     * @throws \Spryker\Zed\NewRelic\Business\Exception\RecordDeploymentException
+     *
+     * @return $this
+     */
+    public function recordDeployment(array $arguments = [])
+    {
+        $response = $this->createRecordDeploymentRequest($arguments);
+
+        if ($response->getStatusCode() !== static::STATUS_CODE_OK) {
+            throw new RecordDeploymentException(sprintf(
+                'Record deployment to New Relic request failed with code %d. %s',
+                $response->getStatusCode(),
+                $response->getBody()
+            ));
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param array $params
+     *
+     * @return \Psr\Http\Message\ResponseInterface
+     */
+    protected function createRecordDeploymentRequest(array $params)
+    {
+        $options = [
+            'headers' => [
+                'x-api-key' => Config::get(NewRelicConstants::NEWRELIC_API_KEY),
+            ],
+        ];
+
+        $data = [];
+        $data['deployment'] = [];
+        foreach ($params as $key => $value) {
+            $data['deployment'][$key] = $value;
+        }
+        $options['form_params'] = $data;
+
+        $httpClient = new Client();
+
+        $request = $httpClient->post(static::NEWRELIC_DEPLOYMENT_API_URL, $options);
+
+        return $request;
+    }
+
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeploymentInterface.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeploymentInterface.php
new file mode 100644
index 0000000..5de0c6b
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/Model/RecordDeploymentInterface.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business\Model;
+
+interface RecordDeploymentInterface
+{
+
+    /**
+     * @param array $arguments
+     *
+     * @throws \Spryker\Zed\NewRelic\Business\Exception\RecordDeploymentException
+     *
+     * @return $this
+     */
+    public function recordDeployment(array $arguments = []);
+
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicBusinessFactory.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicBusinessFactory.php
new file mode 100644
index 0000000..7ef7de4
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicBusinessFactory.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business;
+
+use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
+use Spryker\Zed\NewRelic\Business\Model\RecordDeployment;
+
+/**
+ * @method \Spryker\Zed\NewRelic\NewRelicConfig getConfig()
+ */
+class NewRelicBusinessFactory extends AbstractBusinessFactory
+{
+
+    /**
+     * @return \Spryker\Zed\NewRelic\Business\Model\RecordDeploymentInterface
+     */
+    public function createRecordDeployment()
+    {
+        return new RecordDeployment();
+    }
+
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacade.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacade.php
new file mode 100644
index 0000000..95e361d
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacade.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business;
+
+use Spryker\Zed\Kernel\Business\AbstractFacade;
+
+/**
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicBusinessFactory getFactory()
+ */
+class NewRelicFacade extends AbstractFacade implements NewRelicFacadeInterface
+{
+
+    /**
+     * @api
+     *
+     * @param array $arguments
+     *
+     * @return \Spryker\Zed\NewRelic\Business\Model\RecordDeploymentInterface
+     */
+    public function recordDeployment(array $arguments = [])
+    {
+        return $this->getFactory()->createRecordDeployment()->recordDeployment($arguments);
+    }
+
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacadeInterface.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacadeInterface.php
new file mode 100644
index 0000000..1ffa9f5
--- /dev/null
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Business/NewRelicFacadeInterface.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\NewRelic\Business;
+
+/**
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicBusinessFactory getFactory()
+ */
+interface NewRelicFacadeInterface
+{
+
+    /**
+     * @api
+     *
+     * @param array $arguments
+     *
+     * @return \Spryker\Zed\NewRelic\Business\Model\RecordDeploymentInterface
+     */
+    public function recordDeployment(array $arguments = []);
+
+}
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Console/RecordDeploymentConsole.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Console/RecordDeploymentConsole.php
index a29328f..cb2829d 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Console/RecordDeploymentConsole.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Console/RecordDeploymentConsole.php
@@ -7,12 +7,13 @@
 
 namespace Spryker\Zed\NewRelic\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputArgument;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
 /**
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicFacade getFacade()
  * @method \Spryker\Zed\NewRelic\Communication\NewRelicCommunicationFactory getFactory()
  */
 class RecordDeploymentConsole extends Console
@@ -93,8 +94,7 @@ class RecordDeploymentConsole extends Console
         $arguments = $input->getArguments();
         unset($arguments['command']);
 
-        $newRelicApi = $this->getFactory()->getNewRelicApi();
-        $newRelicApi->recordDeployment($arguments);
+        $this->getFacade()->recordDeployment($arguments);
 
         return 0;
     }
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/NewRelicCommunicationFactory.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/NewRelicCommunicationFactory.php
index 0d34852..5efd766 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/NewRelicCommunicationFactory.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/NewRelicCommunicationFactory.php
@@ -36,13 +36,13 @@ class NewRelicCommunicationFactory extends AbstractCommunicationFactory
         return new ControllerListener(
             $this->getNewRelicApi(),
             $this->getStore(),
-            $this->getSystem(),
+            $this->getUtilNetworkService(),
             $this->getConfig()->getIgnorableTransactions()
         );
     }
 
     /**
-     * @return \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     public function getNewRelicApi()
     {
@@ -58,11 +58,11 @@ class NewRelicCommunicationFactory extends AbstractCommunicationFactory
     }
 
     /**
-     * @return \Spryker\Shared\Library\System
+     * @return \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
      */
-    public function getSystem()
+    public function getUtilNetworkService()
     {
-        return $this->getProvidedDependency(NewRelicDependencyProvider::SYSTEM);
+        return $this->getProvidedDependency(NewRelicDependencyProvider::SERVICE_NETWORK);
     }
 
 }
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListener.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListener.php
index 4db10c1..f8ce9ed 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListener.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListener.php
@@ -7,9 +7,9 @@
 
 namespace Spryker\Zed\NewRelic\Communication\Plugin;
 
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -18,6 +18,7 @@ use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
  * @method \Spryker\Zed\NewRelic\Communication\NewRelicCommunicationFactory getFactory()
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicFacade getFacade()
  */
 class ControllerListener extends AbstractPlugin implements EventSubscriberInterface
 {
@@ -25,7 +26,7 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
     const PRIORITY = -255;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
@@ -35,9 +36,9 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
     protected $store;
 
     /**
-     * @var \Spryker\Shared\Library\System
+     * @var \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
      */
-    protected $system;
+    protected $utilNetworkService;
 
     /**
      * @var array
@@ -45,16 +46,16 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
     protected $ignorableTransactions;
 
     /**
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      * @param \Spryker\Shared\Kernel\Store $store
-     * @param \Spryker\Shared\Library\System $system
+     * @param \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface $utilNetworkService
      * @param array $ignorableTransactions
      */
-    public function __construct(NewRelicApiInterface $newRelicApi, Store $store, System $system, array $ignorableTransactions = [])
+    public function __construct(NewRelicApiInterface $newRelicApi, Store $store, UtilNetworkServiceInterface $utilNetworkService, array $ignorableTransactions = [])
     {
         $this->newRelicApi = $newRelicApi;
         $this->store = $store;
-        $this->system = $system;
+        $this->utilNetworkService = $utilNetworkService;
         $this->ignorableTransactions = $ignorableTransactions;
     }
 
@@ -72,7 +73,7 @@ class ControllerListener extends AbstractPlugin implements EventSubscriberInterf
         $request = $event->getRequest();
         $transactionName = $this->getTransactionName($request);
         $requestUri = $request->server->get('REQUEST_URI', 'n/a');
-        $host = $request->server->get('COMPUTERNAME', $this->system->getHostname());
+        $host = $request->server->get('COMPUTERNAME', $this->utilNetworkService->getHostname());
 
         $this->newRelicApi->setNameOfTransaction($transactionName);
         $this->newRelicApi->addCustomParameter('request_uri', $requestUri);
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/GatewayControllerListener.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/GatewayControllerListener.php
index e15b769..e821215 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/GatewayControllerListener.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/GatewayControllerListener.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\NewRelic\Communication\Plugin;
 
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
@@ -15,17 +15,18 @@ use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
  * @method \Spryker\Zed\NewRelic\Communication\NewRelicCommunicationFactory getFactory()
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicFacade getFacade()
  */
 class GatewayControllerListener extends AbstractPlugin implements EventSubscriberInterface
 {
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      */
     public function __construct(NewRelicApiInterface $newRelicApi)
     {
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePlugin.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePlugin.php
index 39b6f4a..d5449d7 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePlugin.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePlugin.php
@@ -14,6 +14,7 @@ use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
  * @method \Spryker\Zed\NewRelic\Communication\NewRelicCommunicationFactory getFactory()
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicFacade getFacade()
  */
 class NewRelicConsolePlugin extends AbstractPlugin implements EventSubscriberInterface
 {
@@ -28,7 +29,7 @@ class NewRelicConsolePlugin extends AbstractPlugin implements EventSubscriberInt
     public function onConsoleTerminate(ConsoleTerminateEvent $event)
     {
         $transactionName = $this->getTransactionName($event);
-        $hostName = $this->getFactory()->getSystem()->getHostname();
+        $hostName = $this->getFactory()->getUtilNetworkService()->getHostname();
 
         $this->getFactory()->getNewRelicApi()
             ->markAsBackgroundJob()
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ServiceProvider/NewRelicRequestTransactionServiceProvider.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ServiceProvider/NewRelicRequestTransactionServiceProvider.php
index ae383d2..50000fd 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ServiceProvider/NewRelicRequestTransactionServiceProvider.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/Communication/Plugin/ServiceProvider/NewRelicRequestTransactionServiceProvider.php
@@ -13,6 +13,7 @@ use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 
 /**
  * @method \Spryker\Zed\NewRelic\Communication\NewRelicCommunicationFactory getFactory()
+ * @method \Spryker\Zed\NewRelic\Business\NewRelicFacade getFacade()
  */
 class NewRelicRequestTransactionServiceProvider extends AbstractPlugin implements ServiceProviderInterface
 {
diff --git a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/NewRelicDependencyProvider.php b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/NewRelicDependencyProvider.php
index e36c6d8..0965376 100644
--- a/Bundles/NewRelic/src/Spryker/Zed/NewRelic/NewRelicDependencyProvider.php
+++ b/Bundles/NewRelic/src/Spryker/Zed/NewRelic/NewRelicDependencyProvider.php
@@ -8,8 +8,7 @@
 namespace Spryker\Zed\NewRelic;
 
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 
@@ -18,7 +17,7 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
 
     const NEW_RELIC_API = 'new relic api';
     const STORE = 'store';
-    const SYSTEM = 'system';
+    const SERVICE_NETWORK = 'util network service';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -29,7 +28,7 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
     {
         $container = $this->addNewRelicApi($container);
         $container = $this->addStore($container);
-        $container = $this->addSystem($container);
+        $container = $this->addUtilNetworkService($container);
 
         return $container;
     }
@@ -67,10 +66,10 @@ class NewRelicDependencyProvider extends AbstractBundleDependencyProvider
      *
      * @return \Spryker\Zed\Kernel\Container
      */
-    protected function addSystem(Container $container)
+    protected function addUtilNetworkService(Container $container)
     {
-        $container[static::SYSTEM] = function () {
-            return new System();
+        $container[static::SERVICE_NETWORK] = function (Container $container) {
+            return $container->getLocator()->utilNetwork()->service();
         };
 
         return $container;
diff --git a/Bundles/NewRelic/tests/Unit/Spryker/Yves/NewRelic/Plugin/ControllerListenerTest.php b/Bundles/NewRelic/tests/Unit/Spryker/Yves/NewRelic/Plugin/ControllerListenerTest.php
index 00d1e73..4108cc4 100644
--- a/Bundles/NewRelic/tests/Unit/Spryker/Yves/NewRelic/Plugin/ControllerListenerTest.php
+++ b/Bundles/NewRelic/tests/Unit/Spryker/Yves/NewRelic/Plugin/ControllerListenerTest.php
@@ -8,8 +8,8 @@
 namespace Unit\Spryker\Yves\NewRelic\Plugin;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Yves\NewRelic\Plugin\ControllerListener;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
@@ -34,7 +34,7 @@ class ControllerListenerTest extends PHPUnit_Framework_TestCase
         $newRelicApiMock = $this->getNewRelicApiMock();
         $newRelicApiMock->expects($this->once())->method('markIgnoreTransaction');
 
-        $controllerListener = new ControllerListener($newRelicApiMock, new System(), ['bar/baz']);
+        $controllerListener = new ControllerListener($newRelicApiMock, new UtilNetworkService(), ['bar/baz']);
         $request = new Request();
         $request->attributes->set('_route', 'foo/bar/baz');
 
@@ -50,7 +50,7 @@ class ControllerListenerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApiMock()
     {
diff --git a/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListenerTest.php b/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListenerTest.php
index 75957c9..5a0bade 100644
--- a/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListenerTest.php
+++ b/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/ControllerListenerTest.php
@@ -8,9 +8,9 @@
 namespace Unit\Spryker\Zed\NewRelic\Communication\Plugin;
 
 use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Zed\NewRelic\Communication\Plugin\ControllerListener;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
@@ -36,7 +36,7 @@ class ControllerListenerTest extends PHPUnit_Framework_TestCase
         $newRelicApiMock = $this->getNewRelicApiMock();
         $newRelicApiMock->expects($this->once())->method('markIgnoreTransaction');
 
-        $controllerListener = new ControllerListener($newRelicApiMock, Store::getInstance(), new System(), ['bar/baz']);
+        $controllerListener = new ControllerListener($newRelicApiMock, Store::getInstance(), new UtilNetworkService(), ['bar/baz']);
         $request = new Request();
         $request->attributes->set('module', 'foo');
         $request->attributes->set('controller', 'bar');
@@ -54,7 +54,7 @@ class ControllerListenerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApiMock()
     {
diff --git a/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePluginTest.php b/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePluginTest.php
index e638ddb..da414e4 100644
--- a/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePluginTest.php
+++ b/Bundles/NewRelic/tests/Unit/Spryker/Zed/NewRelic/Communication/Plugin/NewRelicConsolePluginTest.php
@@ -8,8 +8,8 @@
 namespace Unit\Spryker\Zed\NewRelic\Communication\Plugin;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Zed\Kernel\AbstractFactory;
 use Spryker\Zed\NewRelic\Communication\Plugin\NewRelicConsolePlugin;
 use Symfony\Component\Console\Command\Command;
@@ -116,19 +116,19 @@ class NewRelicConsolePluginTest extends PHPUnit_Framework_TestCase
     protected function getFactoryMock()
     {
         $factoryMock = $this->getMockBuilder(AbstractFactory::class)
-            ->setMethods(['getNewRelicApi', 'provideExternalDependencies', 'injectExternalDependencies', 'getSystem'])
+            ->setMethods(['getNewRelicApi', 'provideExternalDependencies', 'injectExternalDependencies', 'getUtilNetworkService'])
             ->getMock();
 
         $newRelicApiMock = $this->getNewRelicApiMock();
         $factoryMock->method('getNewRelicApi')->willReturn($newRelicApiMock);
 
-        $factoryMock->method('getSystem')->willReturn(new System());
+        $factoryMock->method('getUtilNetworkService')->willReturn(new UtilNetworkService());
 
         return $factoryMock;
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApi
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApi
      */
     protected function getNewRelicApiMock()
     {
diff --git a/Bundles/NewRelicApi/.coveralls.yml b/Bundles/NewRelicApi/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/NewRelicApi/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/NewRelicApi/.gitattributes b/Bundles/NewRelicApi/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/NewRelicApi/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/NewRelicApi/.gitignore b/Bundles/NewRelicApi/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/NewRelicApi/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/NewRelicApi/.travis.yml b/Bundles/NewRelicApi/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/NewRelicApi/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/NewRelicApi/CHANGELOG.md b/Bundles/NewRelicApi/CHANGELOG.md
new file mode 100644
index 0000000..b678d56
--- /dev/null
+++ b/Bundles/NewRelicApi/CHANGELOG.md
@@ -0,0 +1,3 @@
+# NewRelicApi Changelog
+
+[Release Changelog](https://github.com/spryker/NewRelicApi/releases)
diff --git a/Bundles/NewRelicApi/LICENSE b/Bundles/NewRelicApi/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/NewRelicApi/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/NewRelicApi/README.md b/Bundles/NewRelicApi/README.md
new file mode 100644
index 0000000..f77fb59
--- /dev/null
+++ b/Bundles/NewRelicApi/README.md
@@ -0,0 +1,14 @@
+# NewRelicApi Bundle
+[![Build Status](https://travis-ci.org/spryker/NewRelicApi.svg)](https://travis-ci.org/spryker/NewRelicApi)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/NewRelicApi/badge.svg)](https://coveralls.io/github/spryker/NewRelicApi)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/NewRelicApi/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/NewRelicApi/?branch=master)
+
+## Installation
+
+```
+composer require spryker/new-relic-api
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/NewRelicApi/composer.json b/Bundles/NewRelicApi/composer.json
new file mode 100644
index 0000000..47c3e08
--- /dev/null
+++ b/Bundles/NewRelicApi/composer.json
@@ -0,0 +1,30 @@
+{
+  "name": "spryker/new-relic-api",
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "description": "NewRelicApi bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  },
+  "autoload": {
+    "psr-4": {
+      "Spryker\\Shared\\NewRelicApi\\": "src/Spryker/Shared/NewRelicApi"
+    }
+  },
+  "repositories": [
+    {
+      "type": "composer",
+      "url": "https://code.spryker.com/repo/private"
+    }
+  ]
+}
diff --git a/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApi.php b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApi.php
new file mode 100644
index 0000000..6a553e1
--- /dev/null
+++ b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApi.php
@@ -0,0 +1,301 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\NewRelicApi;
+
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
+
+/**
+ * The PHP API for New Relic
+ *
+ * @link https://newrelic.com/docs/php/the-php-api
+ */
+class NewRelicApi implements NewRelicApiInterface
+{
+
+    /**
+     * @var bool
+     */
+    protected $active = false;
+
+    /**
+     * @var string
+     */
+    protected $nameOfTransaction;
+
+    public function __construct()
+    {
+        $this->active = extension_loaded('newrelic');
+    }
+
+    /**
+     * Report an error at this line of code, with a complete stack trace.
+     *
+     * @param string $message
+     * @param \Exception|\Throwable $exception
+     *
+     * @return $this
+     */
+    public function noticeError($message, $exception)
+    {
+        if ($this->active) {
+            newrelic_notice_error($message, $exception);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Sets the name of the application to string. The string uses the same format as newrelic.appname and can set
+     * multiple application names by separating each with a semi-colon. The first application name is the primary name,
+     * and up to two extra application names can be specified. This function should be called as early as possible, and
+     * will have no effect if called after the RUM footer has been sent. You may want to consider setting the
+     * application name in a file loaded by PHP's auto_prepend_file INI setting. This function returns true if it
+     * succeeded or false otherwise.
+     *
+     * @param string $name
+     *
+     * @return $this
+     */
+    public function setAppName($name)
+    {
+        if ($this->active) {
+            newrelic_set_appname($name);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Sets the name of the transaction to the specified string. This can be useful if you have implemented your own
+     * dispatching scheme and wish to name transactions according to their purpose rather than their URL.
+     *
+     * Keep in mind that you want to make sure that you do not create too many unique transaction names.
+     * For example, if you have /product/123 and /product/234, if you generate a separate transaction name for each,
+     * then New Relic will store separate information for these two transaction names. This will make your graphs less
+     * useful, and may run into limits we set on the number of unique transaction names per account. It also can slow
+     * down the performance of your application. Instead, store the transaction as /product/*, or use something
+     * significant about the code itself to name the transaction, such as /Product/view. The limit for the total number
+     * of transactions should be less than 1000 unique transaction names -- exceeding that is not recommended.
+     *
+     * @param string $name
+     *
+     * @return $this
+     */
+    public function setNameOfTransaction($name)
+    {
+        $this->nameOfTransaction = $name;
+
+        if ($this->active) {
+            newrelic_name_transaction($name);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getNameOfTransaction()
+    {
+        return $this->nameOfTransaction;
+    }
+
+    /**
+     * Stop recording the web transaction immediately. Usually used when a page is done with all computation and is
+     * about to stream data (file download, audio or video streaming etc) and you don't want the time taken to stream to
+     * be counted as part of the transaction. This is especially relevant when the time taken to complete the operation
+     * is completely outside the bounds of your application. For example, a user on a very slow connection may take a
+     * very long time to download even small files, and you wouldn't want that download time to skew the real
+     * transaction time.
+     *
+     * @return $this
+     */
+    public function markEndOfTransaction()
+    {
+        if ($this->active) {
+            newrelic_end_of_transaction();
+        }
+
+        return $this;
+    }
+
+    /**
+     * Do not generate metrics for this transaction. This is useful when you have transactions that are particularly
+     * slow for known reasons and you do not want them always being reported as the transaction trace or skewing your
+     * site averages.
+     *
+     * @return $this
+     */
+    public function markIgnoreTransaction()
+    {
+        if ($this->active) {
+            newrelic_ignore_transaction();
+        }
+
+        return $this;
+    }
+
+    /**
+     * Do not generate Apdex metrics for this transaction. This is useful when you have either very short or very long
+     * transactions (such as file downloads) that can skew your apdex score.
+     *
+     * @return $this
+     */
+    public function markIgnoreApdex()
+    {
+        if ($this->active) {
+            newrelic_ignore_apdex();
+        }
+
+        return $this;
+    }
+
+    /**
+     * If no argument or true as an argument is given, mark the current transaction as a background job. If false is
+     * passed as an argument, mark the transaction as a web application.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function markAsBackgroundJob($flag = true)
+    {
+        if ($this->active) {
+            newrelic_background_job((bool)$flag);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Adds a custom metric with the specified name and value, which is of type double. These custom metrics can then
+     * be used in custom views in the New Relic User Interface.
+     *
+     * @param string $metricName
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function addCustomMetric($metricName, $value)
+    {
+        if ($this->active) {
+            if (strpos($metricName, 'Custom/') !== 0) {
+                $metricName = 'Custom/' . $metricName;
+            }
+            newrelic_custom_metric($metricName, $value);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Add a custom parameter to the current web transaction with the specified value. For example, you can add a
+     * customer's full name from your customer database.
+     *
+     * @param string $key
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function addCustomParameter($key, $value)
+    {
+        if ($this->active) {
+            newrelic_add_custom_parameter($key, $value);
+        }
+
+        return $this;
+    }
+
+    /**
+     * API equivalent of the newrelic.transaction_tracer.customi setting. It allows you to add functions or methods to
+     * the list to be instrumented.
+     *
+     * @param string $tracer
+     *
+     * @return $this
+     */
+    public function addCustomTracer($tracer = 'classname::function_name')
+    {
+        if ($this->active) {
+            newrelic_add_custom_tracer($tracer);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Returns the JavaScript string to inject as part of the header for browser timing (real user monitoring). If flag
+     * is specified it must be a boolean, and if omitted, defaults to true. This indicates whether or not surrounding
+     * script tags should be returned as part of the string.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function getBrowserTimingHeader($flag = true)
+    {
+        if ($this->active) {
+            newrelic_get_browser_timing_header($flag);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Returns the JavaScript string to inject at the very end of the HTML output for browser timing (real user
+     * monitoring). If flag is specified it must be a boolean, and if omitted, defaults to true. This indicates whether
+     * or not surrounding script tags should be returned as part of the string.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function getBrowserTimingFooter($flag = true)
+    {
+        if ($this->active) {
+            newrelic_get_browser_timing_footer($flag);
+        }
+
+        return $this;
+    }
+
+    /**
+     * Prevents the output filter from attempting to insert RUM JavaScript for this current transaction. Useful for
+     * AJAX calls, for example.
+     *
+     * RUM: Real User Management @see https://newrelic.com/browser-monitoring
+     *
+     * @return $this
+     */
+    public function disableAutoRUM()
+    {
+        if ($this->active) {
+            newrelic_disable_autorum();
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param string $name
+     * @param array $attributes
+     *
+     * @return $this
+     */
+    public function recordCustomEvent($name, array $attributes = [])
+    {
+        if (!$this->active) {
+            return $this;
+        }
+
+        newrelic_record_custom_event($name, $attributes);
+
+        return $this;
+    }
+
+}
diff --git a/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiInterface.php b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiInterface.php
new file mode 100644
index 0000000..94c04fb
--- /dev/null
+++ b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiInterface.php
@@ -0,0 +1,178 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\NewRelicApi;
+
+/**
+ * The PHP API for New Relic
+ *
+ * @link https://newrelic.com/docs/php/the-php-api
+ */
+interface NewRelicApiInterface
+{
+
+    /**
+     * Report an error at this line of code, with a complete stack trace.
+     *
+     * @param string $message
+     * @param \Exception|\Throwable $exception
+     *
+     * @return $this
+     */
+    public function noticeError($message, $exception);
+
+    /**
+     * Sets the name of the application to string. The string uses the same format as newrelic.appname and can set
+     * multiple application names by separating each with a semi-colon. The first application name is the primary name,
+     * and up to two extra application names can be specified. This function should be called as early as possible, and
+     * will have no effect if called after the RUM footer has been sent. You may want to consider setting the
+     * application name in a file loaded by PHP's auto_prepend_file INI setting. This function returns true if it
+     * succeeded or false otherwise.
+     *
+     * @param string $name
+     *
+     * @return $this
+     */
+    public function setAppName($name);
+
+    /**
+     * Sets the name of the transaction to the specified string. This can be useful if you have implemented your own
+     * dispatching scheme and wish to name transactions according to their purpose rather than their URL.
+     *
+     * Keep in mind that you want to make sure that you do not create too many unique transaction names.
+     * For example, if you have /product/123 and /product/234, if you generate a separate transaction name for each,
+     * then New Relic will store separate information for these two transaction names. This will make your graphs less
+     * useful, and may run into limits we set on the number of unique transaction names per account. It also can slow
+     * down the performance of your application. Instead, store the transaction as /product/*, or use something
+     * significant about the code itself to name the transaction, such as /Product/view. The limit for the total number
+     * of transactions should be less than 1000 unique transaction names -- exceeding that is not recommended.
+     *
+     * @param string $name
+     *
+     * @return $this
+     */
+    public function setNameOfTransaction($name);
+
+    /**
+     * @return string
+     */
+    public function getNameOfTransaction();
+
+    /**
+     * Stop recording the web transaction immediately. Usually used when a page is done with all computation and is
+     * about to stream data (file download, audio or video streaming etc) and you don't want the time taken to stream to
+     * be counted as part of the transaction. This is especially relevant when the time taken to complete the operation
+     * is completely outside the bounds of your application. For example, a user on a very slow connection may take a
+     * very long time to download even small files, and you wouldn't want that download time to skew the real
+     * transaction time.
+     *
+     * @return $this
+     */
+    public function markEndOfTransaction();
+
+    /**
+     * Do not generate metrics for this transaction. This is useful when you have transactions that are particularly
+     * slow for known reasons and you do not want them always being reported as the transaction trace or skewing your
+     * site averages.
+     *
+     * @return $this
+     */
+    public function markIgnoreTransaction();
+
+    /**
+     * Do not generate Apdex metrics for this transaction. This is useful when you have either very short or very long
+     * transactions (such as file downloads) that can skew your apdex score.
+     *
+     * @return $this
+     */
+    public function markIgnoreApdex();
+
+    /**
+     * If no argument or true as an argument is given, mark the current transaction as a background job. If false is
+     * passed as an argument, mark the transaction as a web application.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function markAsBackgroundJob($flag = true);
+
+    /**
+     * Adds a custom metric with the specified name and value, which is of type double. These custom metrics can then
+     * be used in custom views in the New Relic User Interface.
+     *
+     * @param string $metricName
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function addCustomMetric($metricName, $value);
+
+    /**
+     * Add a custom parameter to the current web transaction with the specified value. For example, you can add a
+     * customer's full name from your customer database.
+     *
+     * @param string $key
+     * @param mixed $value
+     *
+     * @return $this
+     */
+    public function addCustomParameter($key, $value);
+
+    /**
+     * API equivalent of the newrelic.transaction_tracer.customi setting. It allows you to add functions or methods to
+     * the list to be instrumented.
+     *
+     * @param string $tracer
+     *
+     * @return $this
+     */
+    public function addCustomTracer($tracer = 'classname::function_name');
+
+    /**
+     * Returns the JavaScript string to inject as part of the header for browser timing (real user monitoring). If flag
+     * is specified it must be a boolean, and if omitted, defaults to true. This indicates whether or not surrounding
+     * script tags should be returned as part of the string.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function getBrowserTimingHeader($flag = true);
+
+    /**
+     * Returns the JavaScript string to inject at the very end of the HTML output for browser timing (real user
+     * monitoring). If flag is specified it must be a boolean, and if omitted, defaults to true. This indicates whether
+     * or not surrounding script tags should be returned as part of the string.
+     *
+     * @param bool $flag
+     *
+     * @return $this
+     */
+    public function getBrowserTimingFooter($flag = true);
+
+    /**
+     * Prevents the output filter from attempting to insert RUM JavaScript for this current transaction. Useful for
+     * AJAX calls, for example.
+     *
+     * RUM: Real User Management @see https://newrelic.com/browser-monitoring
+     *
+     * @return $this
+     */
+    public function disableAutoRUM();
+
+    /**
+     * Records a custom event in New Relic insight with the specified attributes.
+     *
+     * @param string $name
+     * @param array $attributes
+     *
+     * @return $this
+     */
+    public function recordCustomEvent($name, array $attributes = []);
+
+}
diff --git a/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiTrait.php b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiTrait.php
new file mode 100644
index 0000000..1cf2436
--- /dev/null
+++ b/Bundles/NewRelicApi/src/Spryker/Shared/NewRelicApi/NewRelicApiTrait.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\NewRelicApi;
+
+trait NewRelicApiTrait
+{
+
+    /**
+     * @return \Spryker\Shared\NewRelicApi\NewRelicApiInterface
+     */
+    public function createNewRelicApi()
+    {
+        return new NewRelicApi();
+    }
+
+}
diff --git a/Bundles/Newsletter/composer.json b/Bundles/Newsletter/composer.json
index ba6a959..535c733 100644
--- a/Bundles/Newsletter/composer.json
+++ b/Bundles/Newsletter/composer.json
@@ -7,19 +7,23 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/glossary": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.8.0",
-    "spryker/library": "^2.0.0",
     "spryker/mail": "^3.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer."
+  },
   "description": "Newsletter bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Newsletter/src/Spryker/Shared/Newsletter/NewsletterConstants.php b/Bundles/Newsletter/src/Spryker/Shared/Newsletter/NewsletterConstants.php
index 7071147..5d50962 100644
--- a/Bundles/Newsletter/src/Spryker/Shared/Newsletter/NewsletterConstants.php
+++ b/Bundles/Newsletter/src/Spryker/Shared/Newsletter/NewsletterConstants.php
@@ -14,4 +14,6 @@ interface NewsletterConstants
     const SHOP_MAIL_DOUBLE_OPT_IN_CONFIRMATION_SUBJECT = 'DOUBLE_OPT_IN_CONFIRMATION_SUBJECT';
     const MERGE_LANGUAGE_HANDLEBARS = 'MERGE_LANGUAGE_HANDLEBARS';
 
+    const HOST_YVES = 'HOST_YVES';
+
 }
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstaller.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstaller.php
index d25d7e2..7d40719 100644
--- a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstaller.php
+++ b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstaller.php
@@ -8,10 +8,9 @@
 namespace Spryker\Zed\Newsletter\Business\Internal;
 
 use Orm\Zed\Newsletter\Persistence\SpyNewsletterType;
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 use Spryker\Zed\Newsletter\Persistence\NewsletterQueryContainerInterface;
 
-class NewsletterTypeInstaller extends AbstractInstaller
+class NewsletterTypeInstaller implements NewsletterTypeInstallerInterface
 {
 
     /**
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstallerInterface.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstallerInterface.php
new file mode 100644
index 0000000..c761645
--- /dev/null
+++ b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Internal/NewsletterTypeInstallerInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Newsletter\Business\Internal;
+
+interface NewsletterTypeInstallerInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install();
+
+}
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Subscription/SubscriberKeyGenerator.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Subscription/SubscriberKeyGenerator.php
index ec1c98c..9ea11e8 100644
--- a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Subscription/SubscriberKeyGenerator.php
+++ b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Business/Subscription/SubscriberKeyGenerator.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Newsletter\Business\Subscription;
 
-use Spryker\Zed\Library\Generator\StringGenerator;
+use Spryker\Service\UtilText\UtilTextService;
 
 class SubscriberKeyGenerator implements SubscriberKeyGeneratorInterface
 {
@@ -17,9 +17,9 @@ class SubscriberKeyGenerator implements SubscriberKeyGeneratorInterface
      */
     public function generateKey()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator->generateRandomString();
+        return $utilTextService->generateRandomString(32);
     }
 
 }
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/Installer.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/Installer.php
deleted file mode 100644
index d8a5b6e..0000000
--- a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Newsletter\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Newsletter\Business\NewsletterFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install();
-    }
-
-}
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/NewsletterInstallerPlugin.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/NewsletterInstallerPlugin.php
new file mode 100644
index 0000000..bc61828
--- /dev/null
+++ b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/Communication/Plugin/NewsletterInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Newsletter\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Newsletter\Business\NewsletterFacade getFacade()
+ * @method \Spryker\Zed\Newsletter\Communication\NewsletterCommunicationFactory getFactory()
+ */
+class NewsletterInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/NewsletterConfig.php b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/NewsletterConfig.php
index 106d919..050ab0e 100644
--- a/Bundles/Newsletter/src/Spryker/Zed/Newsletter/NewsletterConfig.php
+++ b/Bundles/Newsletter/src/Spryker/Zed/Newsletter/NewsletterConfig.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Newsletter;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Newsletter\NewsletterConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
 
@@ -29,7 +28,7 @@ class NewsletterConfig extends AbstractBundleConfig
      */
     public function getHostYves()
     {
-        return $this->get(ApplicationConstants::HOST_YVES);
+        return $this->get(NewsletterConstants::HOST_YVES);
     }
 
     /**
diff --git a/Bundles/Nopayment/composer.json b/Bundles/Nopayment/composer.json
index 8ae3738..e46d30e 100644
--- a/Bundles/Nopayment/composer.json
+++ b/Bundles/Nopayment/composer.json
@@ -8,13 +8,15 @@
   },
   "require": {
     "spryker/kernel": "^2.0.0",
-    "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/oms": "If you want to use Oms command plugins you need to install spryker/oms."
+  },
   "description": "Nopayment bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Oms/composer.json b/Bundles/Oms/composer.json
index 22f8b3f..0113a4e 100644
--- a/Bundles/Oms/composer.json
+++ b/Bundles/Oms/composer.json
@@ -9,14 +9,11 @@
     }
   },
   "require": {
-    "spryker/application": "^2.4.4",
-    "spryker/console": "^2.0.0",
-    "spryker/country": "^2.0.0",
     "spryker/graph": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.8.0",
     "spryker/mail": "^3.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/sales-aggregator": "^3.0.0",
     "spryker/symfony": "^2.0.0",
@@ -26,9 +23,14 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/config": "^2.1.0",
+    "spryker/config": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Oms bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Oms/dependency.json b/Bundles/Oms/dependency.json
deleted file mode 100644
index 9305794..0000000
--- a/Bundles/Oms/dependency.json
+++ /dev/null
@@ -1,11 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "UtilNetwork": "Required by bridge",
-    "UtilSanitize": "Required by bridge",
-    "UtilText": "Required by bridge"
-  },
-  "exclude": {
-    "Config": "Required by tests only"
-  }
-}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OmsBusinessFactory.php b/Bundles/Oms/src/Spryker/Zed/Oms/Business/OmsBusinessFactory.php
index 80139e7..f639052 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OmsBusinessFactory.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Business/OmsBusinessFactory.php
@@ -11,7 +11,6 @@ use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 use Spryker\Zed\Oms\Business\Lock\TriggerLocker;
 use Spryker\Zed\Oms\Business\Mail\MailHandler;
 use Spryker\Zed\Oms\Business\OrderStateMachine\Builder;
-use Spryker\Zed\Oms\Business\OrderStateMachine\Dummy;
 use Spryker\Zed\Oms\Business\OrderStateMachine\Finder;
 use Spryker\Zed\Oms\Business\OrderStateMachine\LockedOrderStateMachine;
 use Spryker\Zed\Oms\Business\OrderStateMachine\OrderStateMachine;
@@ -111,16 +110,6 @@ class OmsBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Oms\Business\OrderStateMachine\DummyInterface
-     */
-    public function createModelDummy()
-    {
-        return new Dummy(
-            $this->createOrderStateMachineBuilder()
-        );
-    }
-
-    /**
      * @return \Spryker\Zed\Oms\Business\OrderStateMachine\FinderInterface
      */
     public function createOrderStateMachineFinder()
@@ -262,14 +251,6 @@ class OmsBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Oms\Dependency\Facade\OmsToSalesInterface
-     */
-    protected function getSalesFacade()
-    {
-        return $this->getProvidedDependency(OmsDependencyProvider::FACADE_SALES);
-    }
-
-    /**
      * @return \Spryker\Zed\Oms\Dependency\Facade\OmsToSalesAggregatorInterface
      */
     protected function getSalesAggregatorFacade()
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/Dummy.php b/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/Dummy.php
deleted file mode 100644
index 95c034c..0000000
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/Dummy.php
+++ /dev/null
@@ -1,138 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Oms\Business\OrderStateMachine;
-
-use Orm\Zed\Country\Persistence\SpyCountryQuery;
-use Orm\Zed\Oms\Persistence\SpyOmsOrderItemState;
-use Orm\Zed\Oms\Persistence\SpyOmsOrderProcessQuery;
-use Orm\Zed\Sales\Persistence\SpySalesOrder;
-use Orm\Zed\Sales\Persistence\SpySalesOrderAddress;
-use Orm\Zed\Sales\Persistence\SpySalesOrderItem;
-
-// FIXME core-120 move queries to queryContainer
-class Dummy implements DummyInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Oms\Business\OrderStateMachine\BuilderInterface
-     */
-    protected $builder;
-
-    /**
-     * @param \Spryker\Zed\Oms\Business\OrderStateMachine\BuilderInterface $builder
-     */
-    public function __construct(BuilderInterface $builder)
-    {
-        $this->builder = $builder;
-    }
-
-    /**
-     * @param string $processName
-     *
-     * @return array
-     */
-    public function prepareItems($processName)
-    {
-        $orderItemsArray = $this->getOrderItems($processName);
-
-        $orders = [];
-
-        $txtArray = [];
-        foreach ($orderItemsArray as $orderItemArray) {
-            if (!isset($orders[$orderItemArray['orderId']])) {
-                $order = new SpySalesOrder();
-
-                $order->setGrandTotal(10000);
-                $order->setSubtotal(9900);
-                $order->setIsTest(false);
-
-                $address = new SpySalesOrderAddress();
-                $address->setLastName('Doe');
-                $address->setFirstName('John');
-                $address->setCity('Berlin');
-                $address->setZipCode('12345');
-                $address->setAddress1('Blastr 1');
-
-                $country = SpyCountryQuery::create()->findOneByIdCountry(1);
-                $address->setCountry($country);
-
-                $order->setBillingAddress($address);
-                $order->setShippingAddress($address);
-
-                $orders[$orderItemArray['orderId']] = $order;
-            }
-        }
-
-        $states = [];
-
-        $orderItems = [];
-        foreach ($orderItemsArray as $orderItemArray) {
-            if (isset($states[$orderItemArray['state']])) {
-                $state = $states[$orderItemArray['state']];
-            } else {
-                $state = new SpyOmsOrderItemState();
-                $state->setName($orderItemArray['state']);
-                $state->save();
-                $states[$orderItemArray['state']] = $state;
-            }
-
-            $txtArray[] = 'State: ' . $state->getName();
-
-            $process = SpyOmsOrderProcessQuery::create()->filterByName($orderItemArray['process'])->findOneOrCreate();
-            $process->setName($orderItemArray['process']);
-            $process->save();
-            $txtArray[] = 'Process: ' . $process->getName();
-
-            $item = new SpySalesOrderItem();
-            $item->setState($state);
-            $item->setProcess($process);
-
-            $item->setName('Testproduct');
-            $item->setSku('12345ABC');
-            $item->setGrossPrice(10);
-
-            $orders[$orderItemArray['orderId']]->addItem($item);
-
-            $orderItems[] = $item;
-        }
-
-        foreach ($orderItems as $orderItem) {
-            $orderItem->save();
-            $txtArray[] = 'orderItem saved: ' . $orderItem->getIdSalesOrderItem();
-        }
-
-        return $txtArray;
-    }
-
-    /**
-     * @param string $processName
-     *
-     * @return array
-     */
-    public function getOrderItems($processName)
-    {
-        $orderItemsArray = [];
-        $c = 0;
-        $process = $this->builder->createProcess($processName);
-        for ($i = 0; $i < 2; $i++) {
-            foreach ($process->getAllStates() as $state) {
-                $orderItemsArray[] = [
-                    'id' => $c,
-                    'process' => $processName,
-                    'state' => $state->getName(),
-                    'orderId' => $i,
-                ];
-                $c++;
-                break 2;
-            }
-        }
-
-        return $orderItemsArray;
-    }
-
-}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/DummyInterface.php b/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/DummyInterface.php
deleted file mode 100644
index 7d26820..0000000
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Business/OrderStateMachine/DummyInterface.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Oms\Business\OrderStateMachine;
-
-interface DummyInterface
-{
-
-    /**
-     * @param string $processName
-     *
-     * @return mixed
-     */
-    public function prepareItems($processName);
-
-    /**
-     * @param string $processName
-     *
-     * @return array
-     */
-    public function getOrderItems($processName);
-
-}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckConditionConsole.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckConditionConsole.php
index 85bc3b3..762f50c 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckConditionConsole.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckConditionConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Oms\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckTimeoutConsole.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckTimeoutConsole.php
index f5fa61b..12ef64c 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckTimeoutConsole.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/CheckTimeoutConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Oms\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/ClearLocksConsole.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/ClearLocksConsole.php
index c2a2742..c8feaf1 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/ClearLocksConsole.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Console/ClearLocksConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\Oms\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/IndexController.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/IndexController.php
index 3fae0c0..9f0a2be 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/IndexController.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/IndexController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Oms\Communication\Controller;
 
 use Orm\Zed\Sales\Persistence\SpySalesOrderItemQuery;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/LogController.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/LogController.php
index 08b25aa..9e6626a 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/LogController.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/LogController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Oms\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/TriggerController.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/TriggerController.php
index ff180a1..3d4ec1c 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/TriggerController.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Controller/TriggerController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Oms\Communication\Controller;
 
 use Propel\Runtime\ActiveQuery\Criteria;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Plugin/Checkout/OmsPostSaveHookPlugin.php b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Plugin/Checkout/OmsPostSaveHookPlugin.php
new file mode 100644
index 0000000..0d05ee7
--- /dev/null
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/Communication/Plugin/Checkout/OmsPostSaveHookPlugin.php
@@ -0,0 +1,39 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Oms\Communication\Plugin\Checkout;
+
+use Generated\Shared\Transfer\CheckoutResponseTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
+use Spryker\Zed\Checkout\Dependency\Plugin\CheckoutPostSaveHookInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Oms\Business\OmsFacade getFacade()
+ * @method \Spryker\Zed\Oms\Communication\OmsCommunicationFactory getFactory()
+ */
+class OmsPostSaveHookPlugin extends AbstractPlugin implements CheckoutPostSaveHookInterface
+{
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Generated\Shared\Transfer\CheckoutResponseTransfer $checkoutResponseTransfer
+     *
+     * @return void
+     */
+    public function executeHook(QuoteTransfer $quoteTransfer, CheckoutResponseTransfer $checkoutResponseTransfer)
+    {
+        $salesOrderItemIds = [];
+
+        foreach ($checkoutResponseTransfer->getSaveOrder()->getOrderItems() as $itemTransfer) {
+            $salesOrderItemIds[] = $itemTransfer->getIdSalesOrderItem();
+        }
+
+        $this->getFacade()->triggerEventForNewOrderItems($salesOrderItemIds);
+    }
+
+}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesBridge.php b/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesBridge.php
deleted file mode 100644
index 8f338ca..0000000
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesBridge.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Oms\Dependency\Facade;
-
-class OmsToSalesBridge implements OmsToSalesInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Sales\Business\SalesFacadeInterface
-     */
-    protected $salesFacade;
-
-    /**
-     * @param \Spryker\Zed\Sales\Business\SalesFacadeInterface $salesFacade
-     */
-    public function __construct($salesFacade)
-    {
-        $this->salesFacade = $salesFacade;
-    }
-
-}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesInterface.php b/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesInterface.php
deleted file mode 100644
index 1d4056e..0000000
--- a/Bundles/Oms/src/Spryker/Zed/Oms/Dependency/Facade/OmsToSalesInterface.php
+++ /dev/null
@@ -1,12 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Oms\Dependency\Facade;
-
-interface OmsToSalesInterface
-{
-}
diff --git a/Bundles/Oms/src/Spryker/Zed/Oms/OmsDependencyProvider.php b/Bundles/Oms/src/Spryker/Zed/Oms/OmsDependencyProvider.php
index 8501a72..f9df7b3 100644
--- a/Bundles/Oms/src/Spryker/Zed/Oms/OmsDependencyProvider.php
+++ b/Bundles/Oms/src/Spryker/Zed/Oms/OmsDependencyProvider.php
@@ -14,7 +14,6 @@ use Spryker\Zed\Oms\Communication\Plugin\Oms\Command\CommandCollection;
 use Spryker\Zed\Oms\Communication\Plugin\Oms\Condition\ConditionCollection;
 use Spryker\Zed\Oms\Dependency\Facade\OmsToMailBridge;
 use Spryker\Zed\Oms\Dependency\Facade\OmsToSalesAggregatorBridge;
-use Spryker\Zed\Oms\Dependency\Facade\OmsToSalesBridge;
 use Spryker\Zed\Oms\Dependency\QueryContainer\OmsToSalesBridge AS PersistenceOmsToSalesBridge;
 use Spryker\Zed\Oms\Dependency\Service\OmsToUtilNetworkBridge;
 use Spryker\Zed\Oms\Dependency\Service\OmsToUtilSanitizeBridge;
@@ -31,7 +30,6 @@ class OmsDependencyProvider extends AbstractBundleDependencyProvider
     const PLUGIN_GRAPH = 'PLUGIN_GRAPH';
     const PLUGINS_RESERVATION = 'PLUGIN_RESERVATION';
 
-    const FACADE_SALES = 'FACADE_SALES';
     const FACADE_MAIL = 'FACADE_MAIL';
     const FACADE_SALES_AGGREGATOR = 'FACADE_SALES_AGGREGATOR';
     const FACADE_UTIL_TEXT = 'FACADE_UTIL_TEXT';
@@ -53,10 +51,6 @@ class OmsDependencyProvider extends AbstractBundleDependencyProvider
             return $this->getCommandPlugins($container);
         };
 
-        $container[self::FACADE_SALES] = function (Container $container) {
-            return new OmsToSalesBridge($container->getLocator()->sales()->facade());
-        };
-
         $container[self::FACADE_SALES_AGGREGATOR] = function (Container $container) {
             return new OmsToSalesAggregatorBridge($container->getLocator()->salesAggregator()->facade());
         };
diff --git a/Bundles/OmsDiscountConnector/composer.json b/Bundles/OmsDiscountConnector/composer.json
index 2843a86..4d56e19 100644
--- a/Bundles/OmsDiscountConnector/composer.json
+++ b/Bundles/OmsDiscountConnector/composer.json
@@ -7,14 +7,16 @@
   },
   "require": {
     "spryker/discount": "^2.0.0 || ^3.0.0",
-    "spryker/kernel": "^2.0.0",
-    "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
-    "spryker/sales": "^2.0.0 || ^3.0.0"
+    "spryker/kernel": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/oms": "If you want to use Oms command plugins you need to install spryker/oms.",
+    "spryker/sales": "If you want to use ReleaseUsedVoucherCodes plugin you need to install spryker/sales."
+  },
   "description": "OmsDiscountConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Payment/composer.json b/Bundles/Payment/composer.json
index e285d2f..c9cead2 100644
--- a/Bundles/Payment/composer.json
+++ b/Bundles/Payment/composer.json
@@ -6,7 +6,6 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/symfony": "^2.0.0"
   },
@@ -15,6 +14,9 @@
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Payment bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Payment/src/Spryker/Zed/Payment/Communication/Controller/SalesController.php b/Bundles/Payment/src/Spryker/Zed/Payment/Communication/Controller/SalesController.php
index dcec236..a2a8dbf 100644
--- a/Bundles/Payment/src/Spryker/Zed/Payment/Communication/Controller/SalesController.php
+++ b/Bundles/Payment/src/Spryker/Zed/Payment/Communication/Controller/SalesController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Payment\Communication\Controller;
 
 use DateTime;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 class SalesController extends AbstractController
diff --git a/Bundles/Payment/tests/Functional.suite.yml b/Bundles/Payment/tests/Functional.suite.yml
deleted file mode 100644
index 60f3b46..0000000
--- a/Bundles/Payment/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-    - Filesystem
-    - \Payment\Module\Functional
diff --git a/Bundles/Payment/tests/Functional/_bootstrap.php b/Bundles/Payment/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Payment/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Payment/tests/_support/FunctionalTester.php b/Bundles/Payment/tests/_support/FunctionalTester.php
deleted file mode 100644
index 7d97247..0000000
--- a/Bundles/Payment/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,31 +0,0 @@
-<?php
-
-namespace Payment;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Payment/tests/_support/Module/Functional.php b/Bundles/Payment/tests/_support/Module/Functional.php
deleted file mode 100644
index 7ba6d10..0000000
--- a/Bundles/Payment/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Payment\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Payolution/composer.json b/Bundles/Payolution/composer.json
index 06cbcae..bb085ec 100644
--- a/Bundles/Payolution/composer.json
+++ b/Bundles/Payolution/composer.json
@@ -7,31 +7,35 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/checkout": "^2.1.0",
-    "spryker/country": "^2.0.0",
-    "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/glossary": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/guzzle": "^2.1.0",
     "spryker/kernel": "^2.4.3",
-    "spryker/library": "^2.0.0",
     "spryker/mail": "^2.0.0 || ^3.0.0",
     "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
+    "spryker/money": "^1.0.0",
     "spryker/payment": "^2.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/sales": "^2.0.0 || ^3.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales-aggregator": "^1.0.0 || ^2.0.0 || ^3.0.0",
+    "spryker/session": "^3.0.0",
     "spryker/step-engine": "^1.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0",
-    "spryker/url": "^2.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
+    "spryker/country": "*",
+    "spryker/customer": "*",
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/sales": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/sales": "If you want to use Oms command plugins (they use spryker/sales) you need to install spryker/sales."
+  },
   "description": "Payolution bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Payolution/config/config.dist.php b/Bundles/Payolution/config/config.dist.php
index 65469da..d3eded3 100644
--- a/Bundles/Payolution/config/config.dist.php
+++ b/Bundles/Payolution/config/config.dist.php
@@ -3,7 +3,6 @@
  * Copy over the following configs to your config
  */
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Shared\Oms\OmsConstants;
 use Spryker\Shared\Payolution\PayolutionConstants;
@@ -47,7 +46,7 @@ $config[KernelConstants::DEPENDENCY_INJECTOR_ZED] = [
 
 $config[OmsConstants::PROCESS_LOCATION] = [
     OmsConfig::DEFAULT_PROCESS_LOCATION,
-    $config[ApplicationConstants::APPLICATION_SPRYKER_ROOT] . '/Payolution/config/Zed/Oms',
+    $config[KernelConstants::SPRYKER_ROOT] . '/Payolution/config/Zed/Oms',
 ];
 
 $config[OmsConstants::ACTIVE_PROCESSES] = [
diff --git a/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionDependencyProvider.php b/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionDependencyProvider.php
index 9d22639..38d8bd1 100644
--- a/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionDependencyProvider.php
+++ b/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionDependencyProvider.php
@@ -8,7 +8,53 @@
 namespace Spryker\Client\Payolution;
 
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class PayolutionDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_SESSION = 'session client';
+    const CLIENT_ZED_REQUEST = 'zed request client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addSessionClient($container);
+        $container = $this->addZedRequestClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addSessionClient(Container $container)
+    {
+        $container[static::CLIENT_SESSION] = function (Container $container) {
+            return $container->getLocator()->session()->client();
+        };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addZedRequestClient(Container $container)
+    {
+        $container[static::CLIENT_ZED_REQUEST] = function (Container $container) {
+            return $container->getLocator()->zedRequest()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionFactory.php b/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionFactory.php
index 14ac65d..e359ff2 100644
--- a/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionFactory.php
+++ b/Bundles/Payolution/src/Spryker/Client/Payolution/PayolutionFactory.php
@@ -15,7 +15,7 @@ class PayolutionFactory extends AbstractFactory
 {
 
     /**
-     * @return \Spryker\Client\Payolution\Session\PayolutionSession
+     * @return \Spryker\Client\Payolution\Session\PayolutionSessionInterface
      */
     public function createPayolutionSession()
     {
@@ -23,6 +23,14 @@ class PayolutionFactory extends AbstractFactory
     }
 
     /**
+     * @return \Spryker\Client\Session\SessionClientInterface
+     */
+    protected function getSessionClient()
+    {
+        return $this->getProvidedDependency(PayolutionDependencyProvider::CLIENT_SESSION);
+    }
+
+    /**
      * @return \Spryker\Client\Payolution\Zed\PayolutionStubInterface
      */
     public function createPayolutionStub()
@@ -30,4 +38,12 @@ class PayolutionFactory extends AbstractFactory
         return new PayolutionStub($this->getZedRequestClient());
     }
 
+    /**
+     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    protected function getZedRequestClient()
+    {
+        return $this->getProvidedDependency(PayolutionDependencyProvider::CLIENT_ZED_REQUEST);
+    }
+
 }
diff --git a/Bundles/Payolution/src/Spryker/Client/Payolution/Zed/PayolutionStub.php b/Bundles/Payolution/src/Spryker/Client/Payolution/Zed/PayolutionStub.php
index 2c0cff7..9c4b723 100644
--- a/Bundles/Payolution/src/Spryker/Client/Payolution/Zed/PayolutionStub.php
+++ b/Bundles/Payolution/src/Spryker/Client/Payolution/Zed/PayolutionStub.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Payolution\Zed;
 
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Client\ZedRequest\ZedRequestClient;
+use Spryker\Client\ZedRequest\ZedRequestClientInterface;
 
 class PayolutionStub implements PayolutionStubInterface
 {
@@ -19,9 +19,9 @@ class PayolutionStub implements PayolutionStubInterface
     protected $zedRequestClient;
 
     /**
-     * @param \Spryker\Client\ZedRequest\ZedRequestClient $zedRequestClient
+     * @param \Spryker\Client\ZedRequest\ZedRequestClientInterface $zedRequestClient
      */
-    public function __construct(ZedRequestClient $zedRequestClient)
+    public function __construct(ZedRequestClientInterface $zedRequestClient)
     {
         $this->zedRequestClient = $zedRequestClient;
     }
diff --git a/Bundles/Payolution/src/Spryker/Shared/Payolution/PayolutionConstants.php b/Bundles/Payolution/src/Spryker/Shared/Payolution/PayolutionConstants.php
index bc89b87..95de72b 100644
--- a/Bundles/Payolution/src/Spryker/Shared/Payolution/PayolutionConstants.php
+++ b/Bundles/Payolution/src/Spryker/Shared/Payolution/PayolutionConstants.php
@@ -50,4 +50,6 @@ interface PayolutionConstants
     const STATUS_REASON_CODE_SUCCESS = self::STATUS_CODE_SUCCESS . '.' . self::REASON_CODE_SUCCESS;
     const SUCCESSFUL_PRE_AUTHORIZATION_PROCESSING_CODE = 'VA.PA.90.00';
 
+    const HOST_YVES = 'HOST_YVES';
+
 }
diff --git a/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InstallmentFormDataProvider.php b/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InstallmentFormDataProvider.php
index 7783098..f2f7368 100644
--- a/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InstallmentFormDataProvider.php
+++ b/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InstallmentFormDataProvider.php
@@ -13,8 +13,8 @@ use Generated\Shared\Transfer\PayolutionCalculationResponseTransfer;
 use Generated\Shared\Transfer\PayolutionPaymentTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Spryker\Client\Payolution\PayolutionClientInterface;
-use Spryker\Shared\Library\Currency\CurrencyManager;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
+use Spryker\Shared\Money\Dependency\Plugin\MoneyPluginInterface;
 use Spryker\Yves\Payolution\Exception\InstallmentNotFoundException;
 use Spryker\Yves\Payolution\Form\InstallmentSubForm;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
@@ -28,24 +28,24 @@ class InstallmentFormDataProvider implements StepEngineFormDataProviderInterface
     protected $payolutionClient;
 
     /**
-     * @var \Spryker\Shared\Library\Currency\CurrencyManager
+     * @var \Spryker\Shared\Money\Dependency\Plugin\MoneyPluginInterface
      */
-    protected $currencyManager;
+    protected $moneyPlugin;
 
     /**
      * @param \Spryker\Client\Payolution\PayolutionClientInterface $payolutionClient
-     * @param \Spryker\Shared\Library\Currency\CurrencyManager $currencyManager
+     * @param \Spryker\Shared\Money\Dependency\Plugin\MoneyPluginInterface $moneyPlugin
      */
-    public function __construct(PayolutionClientInterface $payolutionClient, CurrencyManager $currencyManager)
+    public function __construct(PayolutionClientInterface $payolutionClient, MoneyPluginInterface $moneyPlugin)
     {
         $this->payolutionClient = $payolutionClient;
-        $this->currencyManager = $currencyManager;
+        $this->moneyPlugin = $moneyPlugin;
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -60,7 +60,7 @@ class InstallmentFormDataProvider implements StepEngineFormDataProviderInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
@@ -163,7 +163,7 @@ class InstallmentFormDataProvider implements StepEngineFormDataProviderInterface
      */
     protected function convertCentToDecimal($amount)
     {
-        return $this->currencyManager->convertCentToDecimal($amount);
+        return $this->moneyPlugin->convertIntegerToDecimal((int)$amount);
     }
 
 }
diff --git a/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InvoiceFormDataProvider.php b/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InvoiceFormDataProvider.php
index 1ecac0c..4808144 100644
--- a/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InvoiceFormDataProvider.php
+++ b/Bundles/Payolution/src/Spryker/Yves/Payolution/Form/DataProvider/InvoiceFormDataProvider.php
@@ -9,16 +9,16 @@ namespace Spryker\Yves\Payolution\Form\DataProvider;
 
 use Generated\Shared\Transfer\PaymentTransfer;
 use Generated\Shared\Transfer\PayolutionPaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
 class InvoiceFormDataProvider implements StepEngineFormDataProviderInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -33,7 +33,7 @@ class InvoiceFormDataProvider implements StepEngineFormDataProviderInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/Payolution/src/Spryker/Yves/Payolution/Handler/PayolutionHandler.php b/Bundles/Payolution/src/Spryker/Yves/Payolution/Handler/PayolutionHandler.php
index ceab8ef..7c86d1a 100644
--- a/Bundles/Payolution/src/Spryker/Yves/Payolution/Handler/PayolutionHandler.php
+++ b/Bundles/Payolution/src/Spryker/Yves/Payolution/Handler/PayolutionHandler.php
@@ -11,7 +11,6 @@ use Generated\Shared\Transfer\PayolutionPaymentTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Spryker\Client\Payolution\PayolutionClientInterface;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Currency\CurrencyManager;
 use Spryker\Shared\Payolution\PayolutionConstants;
 use Spryker\Yves\Payolution\Exception\PaymentMethodNotFoundException;
 use Spryker\Zed\Payolution\PayolutionConfig;
@@ -50,18 +49,11 @@ class PayolutionHandler
     protected $payolutionClient;
 
     /**
-     * @var \Spryker\Shared\Library\Currency\CurrencyManager
-     */
-    protected $currencyManager;
-
-    /**
      * @param \Spryker\Client\Payolution\PayolutionClientInterface $payolutionClient
-     * @param \Spryker\Shared\Library\Currency\CurrencyManager $currencyManager
      */
-    public function __construct(PayolutionClientInterface $payolutionClient, CurrencyManager $currencyManager)
+    public function __construct(PayolutionClientInterface $payolutionClient)
     {
         $this->payolutionClient = $payolutionClient;
-        $this->currencyManager = $currencyManager;
     }
 
     /**
diff --git a/Bundles/Payolution/src/Spryker/Yves/Payolution/PayolutionFactory.php b/Bundles/Payolution/src/Spryker/Yves/Payolution/PayolutionFactory.php
index 893e520..195c241 100644
--- a/Bundles/Payolution/src/Spryker/Yves/Payolution/PayolutionFactory.php
+++ b/Bundles/Payolution/src/Spryker/Yves/Payolution/PayolutionFactory.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Yves\Payolution;
 
-use Spryker\Shared\Library\Currency\CurrencyManager;
 use Spryker\Yves\Kernel\AbstractFactory;
+use Spryker\Yves\Money\Plugin\MoneyPlugin;
 use Spryker\Yves\Payolution\Form\DataProvider\InstallmentFormDataProvider;
 use Spryker\Yves\Payolution\Form\DataProvider\InvoiceFormDataProvider;
 use Spryker\Yves\Payolution\Form\InstallmentSubForm;
@@ -39,15 +39,15 @@ class PayolutionFactory extends AbstractFactory
      */
     public function createInstallmentFormDataProvider()
     {
-        return new InstallmentFormDataProvider($this->getPayolutionClient(), $this->getCurrencyManager());
+        return new InstallmentFormDataProvider($this->getPayolutionClient(), $this->getMoneyPlugin());
     }
 
     /**
-     * @return \Spryker\Shared\Library\Currency\CurrencyManager
+     * @return \Spryker\Shared\Money\Dependency\Plugin\MoneyPluginInterface
      */
-    public function getCurrencyManager()
+    public function getMoneyPlugin()
     {
-        return CurrencyManager::getInstance();
+        return new MoneyPlugin();
     }
 
     /**
@@ -63,7 +63,7 @@ class PayolutionFactory extends AbstractFactory
      */
     public function createPayolutionHandler()
     {
-        return new PayolutionHandler($this->getPayolutionClient(), $this->getCurrencyManager());
+        return new PayolutionHandler($this->getPayolutionClient());
     }
 
     /**
diff --git a/Bundles/Payolution/src/Spryker/Yves/Payolution/Plugin/PayolutionHandlerPlugin.php b/Bundles/Payolution/src/Spryker/Yves/Payolution/Plugin/PayolutionHandlerPlugin.php
index 946e97c..e8f32ac 100644
--- a/Bundles/Payolution/src/Spryker/Yves/Payolution/Plugin/PayolutionHandlerPlugin.php
+++ b/Bundles/Payolution/src/Spryker/Yves/Payolution/Plugin/PayolutionHandlerPlugin.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\Payolution\Plugin;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\Kernel\AbstractPlugin;
 use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginInterface;
 use Symfony\Component\HttpFoundation\Request;
@@ -20,7 +20,7 @@ class PayolutionHandlerPlugin extends AbstractPlugin implements StepHandlerPlugi
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Generated\Shared\Transfer\QuoteTransfer|\Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Api/Converter/Converter.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Api/Converter/Converter.php
index 4eb5b6d..6011126 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Api/Converter/Converter.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Api/Converter/Converter.php
@@ -13,13 +13,26 @@ use Generated\Shared\Transfer\PayolutionCalculationInstallmentTransfer;
 use Generated\Shared\Transfer\PayolutionCalculationPaymentDetailTransfer;
 use Generated\Shared\Transfer\PayolutionCalculationResponseTransfer;
 use Generated\Shared\Transfer\PayolutionTransactionResponseTransfer;
-use Spryker\Shared\Library\Currency\CurrencyManager;
 use Spryker\Zed\Payolution\Business\Payment\Method\ApiConstants;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface;
 
 class Converter implements ConverterInterface
 {
 
     /**
+     * @var \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected $moneyFacade;
+
+    /**
+     * @param \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface $moneyFacade
+     */
+    public function __construct(PayolutionToMoneyInterface $moneyFacade)
+    {
+        $this->moneyFacade = $moneyFacade;
+    }
+
+    /**
      * @param string $stringData
      *
      * @return \Generated\Shared\Transfer\PayolutionTransactionResponseTransfer
@@ -220,12 +233,12 @@ class Converter implements ConverterInterface
     protected function arrayToCalculationPaymentDetailTransfer(array $data)
     {
         $paymentDetailTransfer = (new PayolutionCalculationPaymentDetailTransfer())
-            ->setOriginalAmount($this->centsToDecimal($data['OriginalAmount']))
-            ->setTotalAmount($this->centsToDecimal($data['TotalAmount']))
-            ->setMinimumInstallmentFee($this->centsToDecimal($data['MinimumInstallmentFee']))
+            ->setOriginalAmount($this->decimalToInteger($data['OriginalAmount']))
+            ->setTotalAmount($this->decimalToInteger($data['TotalAmount']))
+            ->setMinimumInstallmentFee($this->decimalToInteger($data['MinimumInstallmentFee']))
             ->setDuration($data['Duration'])
-            ->setInterestRate($this->centsToDecimal($data['InterestRate']))
-            ->setEffectiveInterestRate($this->centsToDecimal($data['EffectiveInterestRate']))
+            ->setInterestRate($this->decimalToInteger($data['InterestRate']))
+            ->setEffectiveInterestRate($this->decimalToInteger($data['EffectiveInterestRate']))
             ->setUsage($data['Usage'])
             ->setCurrency($data['Currency'])
             ->setStandardCreditInformationUrl($data['StandardCreditInformationUrl']);
@@ -247,7 +260,7 @@ class Converter implements ConverterInterface
      */
     protected function arrayToCalculationInstallmentTransfer(array $data)
     {
-        $data['Amount'] = $this->centsToDecimal($data['Amount']);
+        $data['Amount'] = $this->decimalToInteger($data['Amount']);
 
         return (new PayolutionCalculationInstallmentTransfer())->fromArray($data);
     }
@@ -257,9 +270,9 @@ class Converter implements ConverterInterface
      *
      * @return int
      */
-    protected function centsToDecimal($amount)
+    protected function decimalToInteger($amount)
     {
-        return CurrencyManager::getInstance()->convertDecimalToCent($amount);
+        return $this->moneyFacade->convertDecimalToInteger((float)$amount);
     }
 
 }
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/AbstractPaymentMethod.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/AbstractPaymentMethod.php
index 0624635..fa249ce 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/AbstractPaymentMethod.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/AbstractPaymentMethod.php
@@ -10,8 +10,8 @@ namespace Spryker\Zed\Payolution\Business\Payment\Method;
 use Generated\Shared\Transfer\OrderTransfer;
 use Orm\Zed\Payolution\Persistence\Map\SpyPaymentPayolutionTableMap;
 use Orm\Zed\Payolution\Persistence\SpyPaymentPayolution;
-use Spryker\Shared\Library\Currency\CurrencyManager;
 use Spryker\Zed\Payolution\Business\Exception\GenderNotDefinedException;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface;
 use Spryker\Zed\Payolution\PayolutionConfig;
 
 abstract class AbstractPaymentMethod
@@ -33,11 +33,18 @@ abstract class AbstractPaymentMethod
     protected $config;
 
     /**
+     * @var \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected $moneyFacade;
+
+    /**
      * @param \Spryker\Zed\Payolution\PayolutionConfig $config
+     * @param \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface $moneyFacade
      */
-    public function __construct(PayolutionConfig $config)
+    public function __construct(PayolutionConfig $config, PayolutionToMoneyInterface $moneyFacade)
     {
         $this->config = $config;
+        $this->moneyFacade = $moneyFacade;
     }
 
     /**
@@ -83,7 +90,7 @@ abstract class AbstractPaymentMethod
             ApiConstants::SECURITY_SENDER => $this->getConfig()->getTransactionSecuritySender(),
             ApiConstants::USER_LOGIN => $this->getConfig()->getTransactionUserLogin(),
             ApiConstants::USER_PWD => $this->getConfig()->getTransactionUserPassword(),
-            ApiConstants::PRESENTATION_AMOUNT => $this->getCurrencyManager()->convertCentToDecimal($grandTotal),
+            ApiConstants::PRESENTATION_AMOUNT => $this->moneyFacade->convertIntegerToDecimal((int)$grandTotal),
             ApiConstants::PRESENTATION_USAGE => $idOrder,
             ApiConstants::PRESENTATION_CURRENCY => $currency,
             ApiConstants::IDENTIFICATION_TRANSACTIONID => $idOrder,
@@ -172,14 +179,4 @@ abstract class AbstractPaymentMethod
         ));
     }
 
-    /**
-     * @todo: use currency/money bundle #989
-     *
-     * @return \Spryker\Shared\Library\Currency\CurrencyManager
-     */
-    protected function getCurrencyManager()
-    {
-        return CurrencyManager::getInstance();
-    }
-
 }
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/Installment/Installment.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/Installment/Installment.php
index 674e12d..804dec1 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/Installment/Installment.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/Payment/Method/Installment/Installment.php
@@ -100,7 +100,7 @@ class Installment extends AbstractPaymentMethod implements InstallmentInterface
                         ],
                         [
                             ApiConstants::CALCULATION_XML_ELEMENT_NAME => ApiConstants::CALCULATION_XML_AMOUNT_ELEMENT,
-                            ApiConstants::CALCULATION_XML_ELEMENT_VALUE => $this->getCurrencyManager()->convertCentToDecimal($quoteTransfer->getTotals()->getGrandTotal()),
+                            ApiConstants::CALCULATION_XML_ELEMENT_VALUE => $this->moneyFacade->convertIntegerToDecimal($quoteTransfer->getTotals()->getGrandTotal()),
                         ],
                         [
                             ApiConstants::CALCULATION_XML_ELEMENT_NAME => ApiConstants::CALCULATION_XML_VAT_ELEMENT,
@@ -158,7 +158,7 @@ class Installment extends AbstractPaymentMethod implements InstallmentInterface
                 ApiConstants::CRITERION_PRE_CHECK => 'TRUE',
                 ApiConstants::CRITERION_CUSTOMER_LANGUAGE => $payolutionTransfer->getLanguageIso2Code(),
                 ApiConstants::CRITERION_CALCULATION_ID => $payolutionTransfer->getInstallmentCalculationId(),
-                ApiConstants::CRITERION_INSTALLMENT_AMOUNT => $this->getCurrencyManager()->convertCentToDecimal($payolutionTransfer->getInstallmentAmount()),
+                ApiConstants::CRITERION_INSTALLMENT_AMOUNT => $this->moneyFacade->convertIntegerToDecimal((int)$payolutionTransfer->getInstallmentAmount()),
                 ApiConstants::CRITERION_DURATION => $payolutionTransfer->getInstallmentDuration(),
                 ApiConstants::CRITERION_ACCOUNT_HOLDER => $payolutionTransfer->getBankAccountHolder(),
                 ApiConstants::CRITERION_ACCOUNT_BIC => $payolutionTransfer->getBankAccountBic(),
@@ -204,7 +204,7 @@ class Installment extends AbstractPaymentMethod implements InstallmentInterface
                 ApiConstants::CRITERION_PRE_CHECK_ID => $paymentEntity->getPreCheckId(),
                 ApiConstants::CRITERION_CUSTOMER_LANGUAGE => $paymentEntity->getLanguageIso2Code(),
                 ApiConstants::CRITERION_CALCULATION_ID => $paymentEntity->getInstallmentCalculationId(),
-                ApiConstants::CRITERION_INSTALLMENT_AMOUNT => $this->getCurrencyManager()->convertCentToDecimal($paymentEntity->getInstallmentAmount()),
+                ApiConstants::CRITERION_INSTALLMENT_AMOUNT => $this->moneyFacade->convertIntegerToDecimal((int)$paymentEntity->getInstallmentAmount()),
                 ApiConstants::CRITERION_DURATION => $paymentEntity->getInstallmentDuration(),
                 ApiConstants::CRITERION_ACCOUNT_HOLDER => $paymentEntity->getBankAccountHolder(),
                 ApiConstants::CRITERION_ACCOUNT_BIC => $paymentEntity->getBankAccountBic(),
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/PayolutionBusinessFactory.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/PayolutionBusinessFactory.php
index d442184..7a39c53 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/PayolutionBusinessFactory.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Business/PayolutionBusinessFactory.php
@@ -17,6 +17,7 @@ use Spryker\Zed\Payolution\Business\Payment\Handler\Transaction\Transaction;
 use Spryker\Zed\Payolution\Business\Payment\Method\ApiConstants;
 use Spryker\Zed\Payolution\Business\Payment\Method\Installment\Installment;
 use Spryker\Zed\Payolution\Business\Payment\Method\Invoice\Invoice;
+use Spryker\Zed\Payolution\PayolutionDependencyProvider;
 
 /**
  * @method \Spryker\Zed\Payolution\Persistence\PayolutionQueryContainerInterface getQueryContainer()
@@ -89,7 +90,15 @@ class PayolutionBusinessFactory extends AbstractBusinessFactory
      */
     public function createConverter()
     {
-        return new Converter();
+        return new Converter($this->getMoneyFacade());
+    }
+
+    /**
+     * @return \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected function getMoneyFacade()
+    {
+        return $this->getProvidedDependency(PayolutionDependencyProvider::FACADE_MONEY);
     }
 
     /**
@@ -105,7 +114,7 @@ class PayolutionBusinessFactory extends AbstractBusinessFactory
      */
     protected function createInvoice()
     {
-        return new Invoice($this->getConfig());
+        return new Invoice($this->getConfig(), $this->getMoneyFacade());
     }
 
     /**
@@ -113,7 +122,7 @@ class PayolutionBusinessFactory extends AbstractBusinessFactory
      */
     protected function createInstallment()
     {
-        return new Installment($this->getConfig());
+        return new Installment($this->getConfig(), $this->getMoneyFacade());
     }
 
 }
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/DetailsController.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/DetailsController.php
index ef17370..c120b02 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/DetailsController.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/DetailsController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Payolution\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/IndexController.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/IndexController.php
index 217f82e..30e1b4b 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/IndexController.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Payolution\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Payolution\Communication\PayolutionCommunicationFactory getFactory()
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Table/Payments.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Table/Payments.php
index f3c1d8f..e62212f 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Table/Payments.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Communication/Table/Payments.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Payolution\Communication\Table;
 
 use Orm\Zed\Payolution\Persistence\Map\SpyPaymentPayolutionTableMap;
 use Orm\Zed\Payolution\Persistence\SpyPaymentPayolutionQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyBridge.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyBridge.php
new file mode 100644
index 0000000..224dd70
--- /dev/null
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyBridge.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Payolution\Dependency\Facade;
+
+class PayolutionToMoneyBridge implements PayolutionToMoneyInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Money\Business\MoneyFacadeInterface
+     */
+    protected $moneyFacade;
+
+    /**
+     * @param \Spryker\Zed\Money\Business\MoneyFacadeInterface $moneyFacade
+     */
+    public function __construct($moneyFacade)
+    {
+        $this->moneyFacade = $moneyFacade;
+    }
+
+    /**
+     * @param float $value
+     *
+     * @return int
+     */
+    public function convertDecimalToInteger($value)
+    {
+        return $this->moneyFacade->convertDecimalToInteger($value);
+    }
+
+    /**
+     * @param int $value
+     *
+     * @return float
+     */
+    public function convertIntegerToDecimal($value)
+    {
+        return $this->moneyFacade->convertIntegerToDecimal($value);
+    }
+
+}
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyInterface.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyInterface.php
new file mode 100644
index 0000000..f11d781
--- /dev/null
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/Dependency/Facade/PayolutionToMoneyInterface.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Payolution\Dependency\Facade;
+
+interface PayolutionToMoneyInterface
+{
+
+    /**
+     * @param float $value
+     *
+     * @return int
+     */
+    public function convertDecimalToInteger($value);
+
+    /**
+     * @param int $value
+     *
+     * @return float
+     */
+    public function convertIntegerToDecimal($value);
+
+}
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionConfig.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionConfig.php
index 7efc1ac..532ae06 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionConfig.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionConfig.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Payolution;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Payolution\PayolutionConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
 
@@ -207,7 +206,7 @@ class PayolutionConfig extends AbstractBundleConfig
      */
     public function getWebshopUrl()
     {
-        return $this->get(ApplicationConstants::HOST_YVES);
+        return $this->get(PayolutionConstants::HOST_YVES);
     }
 
 }
diff --git a/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionDependencyProvider.php b/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionDependencyProvider.php
index d6b64ae..25e14c5 100644
--- a/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionDependencyProvider.php
+++ b/Bundles/Payolution/src/Spryker/Zed/Payolution/PayolutionDependencyProvider.php
@@ -11,6 +11,7 @@ use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToGlossaryBridge;
 use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMailBridge;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyBridge;
 use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToSalesAggregatorBridge;
 
 class PayolutionDependencyProvider extends AbstractBundleDependencyProvider
@@ -19,6 +20,7 @@ class PayolutionDependencyProvider extends AbstractBundleDependencyProvider
     const FACADE_MAIL = 'mail facade';
     const FACADE_GLOSSARY = 'glossary facade';
     const FACADE_SALES_AGGREGATOR = 'sales aggregor facade';
+    const FACADE_MONEY = 'money facade';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -39,6 +41,10 @@ class PayolutionDependencyProvider extends AbstractBundleDependencyProvider
             return new PayolutionToSalesAggregatorBridge($container->getLocator()->salesAggregator()->facade());
         };
 
+        $container[self::FACADE_MONEY] = function (Container $container) {
+            return new PayolutionToMoneyBridge($container->getLocator()->money()->facade());
+        };
+
         return $container;
     }
 
diff --git a/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/AbstractFacadeTest.php b/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/AbstractFacadeTest.php
index 7edef27..226ed63 100644
--- a/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/AbstractFacadeTest.php
+++ b/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/AbstractFacadeTest.php
@@ -22,8 +22,10 @@ use Orm\Zed\Payolution\Persistence\SpyPaymentPayolutionTransactionStatusLogQuery
 use Orm\Zed\Sales\Persistence\SpySalesOrder;
 use Orm\Zed\Sales\Persistence\SpySalesOrderAddress;
 use Spryker\Shared\Payolution\PayolutionConstants;
+use Spryker\Zed\Money\Business\MoneyFacade;
 use Spryker\Zed\Payolution\Business\Api\Adapter\AdapterInterface;
 use Spryker\Zed\Payolution\Business\Api\Converter\Converter as ResponseConverter;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyBridge;
 
 /**
  * @group Functional
@@ -69,12 +71,22 @@ class AbstractFacadeTest extends Test
         parent::_before();
         $this->setUpSalesOrderTestData();
         $this->setUpPaymentTestData();
-        $this->responseConverter = new ResponseConverter();
+        $this->responseConverter = new ResponseConverter($this->getMoneyFacade());
         $this->requestLogQuery = new SpyPaymentPayolutionTransactionRequestLogQuery();
         $this->statusLogQuery = new SpyPaymentPayolutionTransactionStatusLogQuery();
     }
 
     /**
+     * @return \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected function getMoneyFacade()
+    {
+        $payolutionToMoneyBridge = new PayolutionToMoneyBridge(new MoneyFacade());
+
+        return $payolutionToMoneyBridge;
+    }
+
+    /**
      * @return void
      */
     protected function setUpSalesOrderTestData()
diff --git a/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/PayolutionFacadeMockBuilder.php b/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/PayolutionFacadeMockBuilder.php
index 76da5ee..06d64b0 100644
--- a/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/PayolutionFacadeMockBuilder.php
+++ b/Bundles/Payolution/tests/Functional/Spryker/Zed/Payolution/Business/PayolutionFacadeMockBuilder.php
@@ -8,7 +8,9 @@
 namespace Functional\Spryker\Zed\Payolution\Business;
 
 use PHPUnit_Framework_TestCase;
+use Spryker\Zed\Money\Business\MoneyFacade;
 use Spryker\Zed\Payolution\Business\Api\Adapter\AdapterInterface;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyBridge;
 use Spryker\Zed\Payolution\PayolutionConfig;
 use Spryker\Zed\Payolution\Persistence\PayolutionQueryContainer;
 
@@ -58,9 +60,12 @@ class PayolutionFacadeMockBuilder
     {
         $businessFactoryMock = $testCase->getMock(
             'Spryker\Zed\Payolution\Business\PayolutionBusinessFactory',
-            ['createAdapter']
+            ['createAdapter', 'getMoneyFacade']
         );
 
+        $payolutionToMoneyBridge = new PayolutionToMoneyBridge(new MoneyFacade());
+        $businessFactoryMock->method('getMoneyFacade')->willReturn($payolutionToMoneyBridge);
+
         return $businessFactoryMock;
     }
 
diff --git a/Bundles/Payolution/tests/Unit/Spryker/Yves/Payolution/Handler/PayolutionHandlerTest.php b/Bundles/Payolution/tests/Unit/Spryker/Yves/Payolution/Handler/PayolutionHandlerTest.php
index 4213f64..bcebf51 100644
--- a/Bundles/Payolution/tests/Unit/Spryker/Yves/Payolution/Handler/PayolutionHandlerTest.php
+++ b/Bundles/Payolution/tests/Unit/Spryker/Yves/Payolution/Handler/PayolutionHandlerTest.php
@@ -14,7 +14,6 @@ use Generated\Shared\Transfer\PayolutionPaymentTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\Payolution\PayolutionClientInterface;
-use Spryker\Shared\Library\Currency\CurrencyManager;
 use Spryker\Yves\Payolution\Exception\PaymentMethodNotFoundException;
 use Spryker\Yves\Payolution\Handler\PayolutionHandler;
 use Symfony\Component\HttpFoundation\Request;
@@ -35,7 +34,7 @@ class PayolutionHandlerTest extends PHPUnit_Framework_TestCase
      */
     public function testAddPaymentToQuoteShouldReturnQuoteTransfer()
     {
-        $paymentHandler = new PayolutionHandler($this->getPayolutionClientMock(), CurrencyManager::getInstance());
+        $paymentHandler = new PayolutionHandler($this->getPayolutionClientMock());
 
         $request = Request::createFromGlobals();
         $quoteTransfer = new QuoteTransfer();
@@ -64,7 +63,7 @@ class PayolutionHandlerTest extends PHPUnit_Framework_TestCase
      */
     public function testGetPayolutionPaymentTransferShouldThrowExceptionIfPaymentSelectionNotFound()
     {
-        $paymentHandler = new PayolutionHandler($this->getPayolutionClientMock(), CurrencyManager::getInstance());
+        $paymentHandler = new PayolutionHandler($this->getPayolutionClientMock());
 
         $request = Request::createFromGlobals();
         $quoteTransfer = new QuoteTransfer();
diff --git a/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Api/Response/ConverterTest.php b/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Api/Response/ConverterTest.php
index 9e0e8ce..774399b 100644
--- a/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Api/Response/ConverterTest.php
+++ b/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Api/Response/ConverterTest.php
@@ -8,7 +8,9 @@
 namespace Unit\Spryker\Zed\Payolution\Business\Api\Response;
 
 use PHPUnit_Framework_TestCase;
+use Spryker\Zed\Money\Business\MoneyFacade;
 use Spryker\Zed\Payolution\Business\Api\Converter\Converter;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyBridge;
 
 /**
  * @group Unit
@@ -28,7 +30,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
      */
     public function testFromArray()
     {
-        $exporter = new Converter();
+        $exporter = new Converter($this->getMoneyFacade());
         $responseTransfer = $exporter->toTransactionResponseTransfer($this->getTestResponseData());
         $this->assertInstanceOf('Generated\Shared\Transfer\PayolutionTransactionResponseTransfer', $responseTransfer);
         $this->assertEquals('DE', $responseTransfer->getAddressCountry());
@@ -38,6 +40,16 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     }
 
     /**
+     * @return \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected function getMoneyFacade()
+    {
+        $payolutionToMoneyBridge = new PayolutionToMoneyBridge(new MoneyFacade());
+
+        return $payolutionToMoneyBridge;
+    }
+
+    /**
      * @return array
      */
     private function getTestResponseData()
diff --git a/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Payment/MethodMapper/InvoiceTest.php b/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Payment/MethodMapper/InvoiceTest.php
index 5c88f01..aa249f2 100644
--- a/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Payment/MethodMapper/InvoiceTest.php
+++ b/Bundles/Payolution/tests/Unit/Spryker/Zed/Payolution/Business/Payment/MethodMapper/InvoiceTest.php
@@ -17,9 +17,11 @@ use Generated\Shared\Transfer\TotalsTransfer;
 use Orm\Zed\Payolution\Persistence\Map\SpyPaymentPayolutionTableMap;
 use Orm\Zed\Payolution\Persistence\SpyPaymentPayolution;
 use Orm\Zed\Sales\Persistence\SpySalesOrder;
-use Spryker\Zed\Library\Generator\StringGenerator;
+use Spryker\Service\UtilText\UtilTextService;
+use Spryker\Zed\Money\Business\MoneyFacade;
 use Spryker\Zed\Payolution\Business\Payment\Method\ApiConstants;
 use Spryker\Zed\Payolution\Business\Payment\Method\Invoice\Invoice;
+use Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyBridge;
 use Spryker\Zed\Payolution\PayolutionConfig;
 
 /**
@@ -41,7 +43,8 @@ class InvoiceTest extends Test
     public function testMapToPreCheck()
     {
         $quoteTransfer = $this->getQuoteTransfer();
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
+
         $requestData = $methodMapper->buildPreCheckRequest($quoteTransfer);
 
         $this->assertSame(ApiConstants::BRAND_INVOICE, $requestData['ACCOUNT.BRAND']);
@@ -98,7 +101,7 @@ class InvoiceTest extends Test
      */
     public function testMapToPreAuthorization()
     {
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
         $paymentEntityMock = $this->getPaymentEntityMock();
         $orderTransfer = $this->createOrderTransfer();
         $requestData = $methodMapper->buildPreAuthorizationRequest($orderTransfer, $paymentEntityMock);
@@ -114,7 +117,7 @@ class InvoiceTest extends Test
     public function testMapToReAuthorization()
     {
         $uniqueId = $this->getRandomString();
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
         $paymentEntityMock = $this->getPaymentEntityMock();
         $orderTransfer = $this->createOrderTransfer();
         $requestData = $methodMapper->buildReAuthorizationRequest($orderTransfer, $paymentEntityMock, $uniqueId);
@@ -129,9 +132,9 @@ class InvoiceTest extends Test
      */
     private function getRandomString()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return 'test_' . $generator->generateRandomString();
+        return 'test_' . $utilTextService->generateRandomString(32);
     }
 
     /**
@@ -140,7 +143,7 @@ class InvoiceTest extends Test
     public function testMapToReversal()
     {
         $uniqueId = $this->getRandomString();
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
         $paymentEntityMock = $this->getPaymentEntityMock();
         $orderTransfer = $this->createOrderTransfer();
         $requestData = $methodMapper->buildRevertRequest($orderTransfer, $paymentEntityMock, $uniqueId);
@@ -156,7 +159,7 @@ class InvoiceTest extends Test
     public function testMapToCapture()
     {
         $uniqueId = $this->getRandomString();
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
         $paymentEntityMock = $this->getPaymentEntityMock();
         $orderTransfer = $this->createOrderTransfer();
         $requestData = $methodMapper->buildCaptureRequest($orderTransfer, $paymentEntityMock, $uniqueId);
@@ -172,7 +175,7 @@ class InvoiceTest extends Test
     public function testMapToRefund()
     {
         $uniqueId = $this->getRandomString();
-        $methodMapper = new Invoice($this->getBundleConfigMock());
+        $methodMapper = new Invoice($this->getBundleConfigMock(), $this->getMoneyFacade());
         $paymentEntityMock = $this->getPaymentEntityMock();
         $orderTransfer = $this->createOrderTransfer();
         $requestData = $methodMapper->buildRefundRequest($orderTransfer, $paymentEntityMock, $uniqueId);
@@ -196,7 +199,7 @@ class InvoiceTest extends Test
     }
 
     /**
-     * @return \Spryker\Zed\Payolution\PayolutionConfig
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Payolution\PayolutionConfig
      */
     private function getBundleConfigMock()
     {
@@ -242,4 +245,14 @@ class InvoiceTest extends Test
         return $paymentEntityMock;
     }
 
+    /**
+     * @return \Spryker\Zed\Payolution\Dependency\Facade\PayolutionToMoneyInterface
+     */
+    protected function getMoneyFacade()
+    {
+        $payolutionToMoneyBridge = new PayolutionToMoneyBridge(new MoneyFacade());
+
+        return $payolutionToMoneyBridge;
+    }
+
 }
diff --git a/Bundles/Payone/composer.json b/Bundles/Payone/composer.json
index 68b8349..ee53904 100644
--- a/Bundles/Payone/composer.json
+++ b/Bundles/Payone/composer.json
@@ -7,20 +7,24 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
+    "spryker/config": "^2.0.0",
     "spryker/guzzle": "^2.1.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/refund": "^3.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Payone bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Payone/src/Spryker/Client/Payone/ClientApi/Mode/ModeDetector.php b/Bundles/Payone/src/Spryker/Client/Payone/ClientApi/Mode/ModeDetector.php
index a3de77c..52fa71a 100644
--- a/Bundles/Payone/src/Spryker/Client/Payone/ClientApi/Mode/ModeDetector.php
+++ b/Bundles/Payone/src/Spryker/Client/Payone/ClientApi/Mode/ModeDetector.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Client\Payone\ClientApi\Mode;
 
-use Spryker\Shared\Library\Environment;
+use Spryker\Shared\Config\Environment;
 use Spryker\Shared\Payone\Dependency\ModeDetectorInterface;
 
 /**
diff --git a/Bundles/Payone/src/Spryker/Shared/Payone/PayoneConstants.php b/Bundles/Payone/src/Spryker/Shared/Payone/PayoneConstants.php
index cdfc08b..32ff80c 100644
--- a/Bundles/Payone/src/Spryker/Shared/Payone/PayoneConstants.php
+++ b/Bundles/Payone/src/Spryker/Shared/Payone/PayoneConstants.php
@@ -29,4 +29,6 @@ interface PayoneConstants
     const PAYONE_MODE_TEST = 'test';
     const PAYONE_MODE_LIVE = 'live';
 
+    const HOST_YVES = 'HOST_YVES';
+
 }
diff --git a/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TestController.php b/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TestController.php
index 5806c0a..c1108cd 100644
--- a/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TestController.php
+++ b/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TestController.php
@@ -18,7 +18,7 @@ use Generated\Shared\Transfer\PersonalDataTransfer;
 use Generated\Shared\Transfer\RefundTransfer;
 use Generated\Shared\Transfer\TotalsTransfer;
 use Spryker\Shared\Payone\PayoneApiConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Payone\Business\PayoneFacade getFacade()
diff --git a/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TransactionController.php b/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TransactionController.php
index 2ce5473..4191f0f 100644
--- a/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TransactionController.php
+++ b/Bundles/Payone/src/Spryker/Zed/Payone/Communication/Controller/TransactionController.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Payone\Communication\Controller;
 use Generated\Shared\Transfer\PayoneTransactionStatusUpdateTransfer;
 use Orm\Zed\Sales\Persistence\SpySalesOrderItemQuery;
 use Spryker\Shared\Payone\PayoneConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\Payone\Business\Api\TransactionStatus\TransactionStatusResponse;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Payone/src/Spryker/Zed/Payone/PayoneConfig.php b/Bundles/Payone/src/Spryker/Zed/Payone/PayoneConfig.php
index 7c2b5dd..fc15c1d 100644
--- a/Bundles/Payone/src/Spryker/Zed/Payone/PayoneConfig.php
+++ b/Bundles/Payone/src/Spryker/Zed/Payone/PayoneConfig.php
@@ -10,7 +10,6 @@ namespace Spryker\Zed\Payone;
 use Generated\Shared\Transfer\PayonePaymentTransfer;
 use Generated\Shared\Transfer\PayoneStandardParameterTransfer;
 use Orm\Zed\Sales\Persistence\SpySalesOrder;
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Kernel\Store;
 use Spryker\Shared\Payone\PayoneConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
@@ -92,7 +91,7 @@ class PayoneConfig extends AbstractBundleConfig
      */
     protected function getYvesBaseUrl()
     {
-        return $this->get(ApplicationConstants::HOST_YVES);
+        return $this->get(PayoneConstants::HOST_YVES);
     }
 
 }
diff --git a/Bundles/Price/composer.json b/Bundles/Price/composer.json
index 409ba3f..1e94cae 100644
--- a/Bundles/Price/composer.json
+++ b/Bundles/Price/composer.json
@@ -6,22 +6,22 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/silex": "^2.0.0",
-    "spryker/touch": "^2.0.0",
-    "spryker/twig": "^2.1.0"
+    "spryker/propel-orm": "^2.0.0",
+    "spryker/touch": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer.",
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex"
+  },
   "description": "Price bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/Install.php b/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/Install.php
index c624270..6084f66 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/Install.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/Install.php
@@ -7,11 +7,10 @@
 
 namespace Spryker\Zed\Price\Business\Internal;
 
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 use Spryker\Zed\Price\Business\Model\WriterInterface;
 use Spryker\Zed\Price\PriceConfig;
 
-class Install extends AbstractInstaller
+class Install implements InstallInterface
 {
 
     /**
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/InstallInterface.php b/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/InstallInterface.php
new file mode 100644
index 0000000..2834364
--- /dev/null
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/Internal/InstallInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Price\Business\Internal;
+
+interface InstallInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install();
+
+}
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/Model/Writer.php b/Bundles/Price/src/Spryker/Zed/Price/Business/Model/Writer.php
index e34a909..16b2770 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Business/Model/Writer.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/Model/Writer.php
@@ -17,7 +17,7 @@ use Spryker\Zed\Price\Business\Exception\UndefinedPriceTypeException;
 use Spryker\Zed\Price\Dependency\Facade\PriceToTouchInterface;
 use Spryker\Zed\Price\Persistence\PriceQueryContainerInterface;
 use Spryker\Zed\Price\PriceConfig;
-use Spryker\Zed\Propel\Business\Runtime\ActiveQuery\Criteria;
+use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
 
 class Writer implements WriterInterface
 {
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceBusinessFactory.php b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceBusinessFactory.php
index 5471496..5d31dc2 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceBusinessFactory.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceBusinessFactory.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Price\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 use Spryker\Zed\Price\Business\Internal\Install;
 use Spryker\Zed\Price\Business\Model\BulkWriter;
 use Spryker\Zed\Price\Business\Model\Reader;
@@ -77,17 +76,14 @@ class PriceBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
-     * @return \Spryker\Zed\Installer\Business\Model\AbstractInstaller
+     * @return \Spryker\Zed\Price\Business\Internal\InstallInterface
      */
-    public function createInstaller(MessengerInterface $messenger)
+    public function createInstaller()
     {
         $installer = new Install(
             $this->createWriterModel(),
             $this->getConfig()
         );
-        $installer->setMessenger($messenger);
 
         return $installer;
     }
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacade.php b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacade.php
index 8aa047d..f9a032d 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacade.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacade.php
@@ -11,7 +11,6 @@ use Generated\Shared\Transfer\PriceProductTransfer;
 use Generated\Shared\Transfer\ProductAbstractTransfer;
 use Generated\Shared\Transfer\ProductConcreteTransfer;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Price\Business\PriceBusinessFactory getFactory()
@@ -132,13 +131,11 @@ class PriceFacade extends AbstractFacade implements PriceFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger)
+    public function install()
     {
-        $this->getFactory()->createInstaller($messenger)->install();
+        $this->getFactory()->createInstaller()->install();
     }
 
     /**
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacadeInterface.php b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacadeInterface.php
index 123aed1..0fe9df4 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacadeInterface.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Business/PriceFacadeInterface.php
@@ -10,7 +10,6 @@ namespace Spryker\Zed\Price\Business;
 use Generated\Shared\Transfer\PriceProductTransfer;
 use Generated\Shared\Transfer\ProductAbstractTransfer;
 use Generated\Shared\Transfer\ProductConcreteTransfer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 interface PriceFacadeInterface
 {
@@ -108,11 +107,9 @@ interface PriceFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger);
+    public function install();
 
     /**
      * - Searches for a persisted price in database that has the given SKU for the given price type.
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Communication/Controller/IndexController.php b/Bundles/Price/src/Spryker/Zed/Price/Communication/Controller/IndexController.php
index f62fd75..2a8557a 100644
--- a/Bundles/Price/src/Spryker/Zed/Price/Communication/Controller/IndexController.php
+++ b/Bundles/Price/src/Spryker/Zed/Price/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Price\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 class IndexController extends AbstractController
 {
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Installer.php b/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Installer.php
deleted file mode 100644
index 49e1eae..0000000
--- a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Price\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Price\Communication\PriceCommunicationFactory getFactory()
- * @method \Spryker\Zed\Price\Business\PriceFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install($this->messenger);
-    }
-
-}
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/PriceInstallerPlugin.php b/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/PriceInstallerPlugin.php
new file mode 100644
index 0000000..629ebca
--- /dev/null
+++ b/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/PriceInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Price\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Price\Communication\PriceCommunicationFactory getFactory()
+ * @method \Spryker\Zed\Price\Business\PriceFacade getFacade()
+ */
+class PriceInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/Filters/PriceFilter.php b/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/Filters/PriceFilter.php
deleted file mode 100644
index 22ffbc2..0000000
--- a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/Filters/PriceFilter.php
+++ /dev/null
@@ -1,44 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Price\Communication\Plugin\Twig\Filters;
-
-use Spryker\Shared\Library\Currency\CurrencyManager;
-
-class PriceFilter
-{
-
-    const DECIMALS = 2;
-
-    const DIVIDER = 100;
-
-    /**
-     * @var \Spryker\Shared\Library\Currency\CurrencyManager
-     */
-    protected $currencyManager;
-
-    /**
-     * @param \Spryker\Shared\Library\Currency\CurrencyManager $currencyManager
-     */
-    public function __construct(CurrencyManager $currencyManager)
-    {
-        $this->currencyManager = $currencyManager;
-    }
-
-    /**
-     * @param int $price
-     *
-     * @return string
-     */
-    public function getConvertedPrice($price)
-    {
-        return $this->currencyManager->format(
-            $this->currencyManager->convertCentToDecimal($price)
-        );
-    }
-
-}
diff --git a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/PriceTwigExtension.php b/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/PriceTwigExtension.php
deleted file mode 100644
index b51ae53..0000000
--- a/Bundles/Price/src/Spryker/Zed/Price/Communication/Plugin/Twig/PriceTwigExtension.php
+++ /dev/null
@@ -1,54 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Price\Communication\Plugin\Twig;
-
-use Spryker\Shared\Library\Currency\CurrencyManager;
-use Spryker\Shared\Twig\TwigExtension;
-use Spryker\Shared\Twig\TwigFilter;
-use Spryker\Zed\Price\Communication\Plugin\Twig\Filters\PriceFilter;
-
-/**
- * @deprecated Use `TwigMoneyServiceProvider` instead.
- */
-class PriceTwigExtension extends TwigExtension
-{
-
-    /**
-     * @return \Spryker\Shared\Twig\TwigFilter[]
-     */
-    public function getFilters()
-    {
-        return [
-            new TwigFilter('currency', function ($price) {
-                $currencyManager = CurrencyManager::getInstance();
-                $priceFilter = new PriceFilter($currencyManager);
-
-                return $priceFilter->getConvertedPrice($price);
-            }, [
-                'is_safe' => ['html'],
-            ]),
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public function getFunctions()
-    {
-        return [];
-    }
-
-    /**
-     * @return string
-     */
-    public function getName()
-    {
-        return 'PriceTwigExtensions';
-    }
-
-}
diff --git a/Bundles/PriceCartConnector/composer.json b/Bundles/PriceCartConnector/composer.json
index e491df8..46bb8da 100644
--- a/Bundles/PriceCartConnector/composer.json
+++ b/Bundles/PriceCartConnector/composer.json
@@ -6,16 +6,17 @@
     }
   },
   "require": {
-    "spryker/calculation": "^2.0.0",
-    "spryker/cart": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/price": "^2.0.0 || ^3.0.0",
-    "spryker/transfer": "^2.0.0"
+    "spryker/price": "^2.0.0 || ^3.0.0"
   },
   "require-dev": {
+    "spryker/calculation": "*",
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/cart": "If you want to use Cart plugins you need to install spryker/cart."
+  },
   "description": "PriceCartConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/PriceCartConnector/tests/Functional.suite.yml b/Bundles/PriceCartConnector/tests/Functional.suite.yml
deleted file mode 100644
index 0540c22..0000000
--- a/Bundles/PriceCartConnector/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \PriceCartConnector\Module\Functional
diff --git a/Bundles/PriceCartConnector/tests/Functional/_bootstrap.php b/Bundles/PriceCartConnector/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/PriceCartConnector/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/PriceCartConnector/tests/Unit/Spryker/Zed/PriceCartConnector/Business/Fixture/CartItemFixture.php b/Bundles/PriceCartConnector/tests/Unit/Spryker/Zed/PriceCartConnector/Business/Fixture/CartItemFixture.php
index d2fcdaa..dcd4047 100644
--- a/Bundles/PriceCartConnector/tests/Unit/Spryker/Zed/PriceCartConnector/Business/Fixture/CartItemFixture.php
+++ b/Bundles/PriceCartConnector/tests/Unit/Spryker/Zed/PriceCartConnector/Business/Fixture/CartItemFixture.php
@@ -7,11 +7,9 @@
 
 namespace Unit\Spryker\Zed\PriceCartConnector\Business\Fixture;
 
-use Spryker\Shared\Cart\Transfer\ItemInterface;
-use Spryker\Shared\Kernel\LocatorLocatorInterface;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
-class CartItemFixture extends AbstractTransfer implements ItemInterface
+class CartItemFixture extends AbstractTransfer
 {
 
     /**
@@ -19,10 +17,6 @@ class CartItemFixture extends AbstractTransfer implements ItemInterface
      */
     private $id;
 
-    public function __construct(LocatorLocatorInterface $locator = null)
-    {
-    }
-
     /**
      * @return string
      */
diff --git a/Bundles/PriceCartConnector/tests/_support/FunctionalTester.php b/Bundles/PriceCartConnector/tests/_support/FunctionalTester.php
deleted file mode 100644
index 1b489ad..0000000
--- a/Bundles/PriceCartConnector/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace PriceCartConnector;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/PriceCartConnector/tests/_support/Module/Functional.php b/Bundles/PriceCartConnector/tests/_support/Module/Functional.php
deleted file mode 100644
index 4fea5ba..0000000
--- a/Bundles/PriceCartConnector/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace PriceCartConnector\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Product/composer.json b/Bundles/Product/composer.json
index 1ed74ac..3211c55 100644
--- a/Bundles/Product/composer.json
+++ b/Bundles/Product/composer.json
@@ -6,11 +6,10 @@
     }
   },
   "require": {
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.2.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/touch": "^2.0.0",
@@ -20,6 +19,8 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Product bundle",
diff --git a/Bundles/Product/dependency.json b/Bundles/Product/dependency.json
deleted file mode 100644
index e2df7e8..0000000
--- a/Bundles/Product/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "UtilEncoding": "Required by bridge"
-  },
-  "exclude": {
-  }
-}
diff --git a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/AttributeMapResourceKeyBuilder.php b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/AttributeMapResourceKeyBuilder.php
index 361cd5a..20aa4d7 100644
--- a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/AttributeMapResourceKeyBuilder.php
+++ b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/AttributeMapResourceKeyBuilder.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Client\Product\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 use Spryker\Shared\Product\ProductConfig;
 
 class AttributeMapResourceKeyBuilder extends SharedResourceKeyBuilder
diff --git a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductAbstractResourceKeyBuilder.php b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductAbstractResourceKeyBuilder.php
index 8dd9a86..8eaffa9 100644
--- a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductAbstractResourceKeyBuilder.php
+++ b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductAbstractResourceKeyBuilder.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Client\Product\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 use Spryker\Shared\Product\ProductConfig;
 
 class ProductAbstractResourceKeyBuilder extends SharedResourceKeyBuilder
diff --git a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductConcreteResourceKeyBuilder.php b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductConcreteResourceKeyBuilder.php
index 1cbb54e..9fb6ab3 100644
--- a/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductConcreteResourceKeyBuilder.php
+++ b/Bundles/Product/src/Spryker/Client/Product/KeyBuilder/ProductConcreteResourceKeyBuilder.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Client\Product\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\SharedResourceKeyBuilder;
+use Spryker\Shared\KeyBuilder\SharedResourceKeyBuilder;
 use Spryker\Shared\Product\ProductConfig;
 
 class ProductConcreteResourceKeyBuilder extends SharedResourceKeyBuilder
diff --git a/Bundles/Product/src/Spryker/Client/Product/ProductDependencyProvider.php b/Bundles/Product/src/Spryker/Client/Product/ProductDependencyProvider.php
index b320b28..fb89a9d 100644
--- a/Bundles/Product/src/Spryker/Client/Product/ProductDependencyProvider.php
+++ b/Bundles/Product/src/Spryker/Client/Product/ProductDependencyProvider.php
@@ -18,7 +18,7 @@ class ProductDependencyProvider extends AbstractDependencyProvider
 
     const CLIENT_LOCALE = 'client locale';
     const KV_STORAGE = 'kv storage';
-    const UTIL_ENCODING = 'util encoding';
+    const SERVICE_ENCODING = 'util encoding';
 
     /**
      * @param \Spryker\Client\Kernel\Container $container
@@ -35,7 +35,7 @@ class ProductDependencyProvider extends AbstractDependencyProvider
             return new ProductToLocaleBridge($container->getLocator()->locale()->client());
         };
 
-        $container[static::UTIL_ENCODING] = function (Container $container) {
+        $container[static::SERVICE_ENCODING] = function (Container $container) {
             return new ProductToUtilEncodingBridge($container->getLocator()->utilEncoding()->service());
         };
 
diff --git a/Bundles/Product/src/Spryker/Client/Product/ProductFactory.php b/Bundles/Product/src/Spryker/Client/Product/ProductFactory.php
index 1f371bd..00bd7ca 100644
--- a/Bundles/Product/src/Spryker/Client/Product/ProductFactory.php
+++ b/Bundles/Product/src/Spryker/Client/Product/ProductFactory.php
@@ -62,7 +62,7 @@ class ProductFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createAttributeMapKeyBuilder()
     {
@@ -70,7 +70,7 @@ class ProductFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createProductConcreteKeyBuilder()
     {
@@ -90,11 +90,11 @@ class ProductFactory extends AbstractFactory
      */
     protected function getUtilEncodingService()
     {
-        return $this->getProvidedDependency(ProductDependencyProvider::UTIL_ENCODING);
+        return $this->getProvidedDependency(ProductDependencyProvider::SERVICE_ENCODING);
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createKeyBuilder()
     {
diff --git a/Bundles/Product/src/Spryker/Client/Product/Storage/AttributeMapStorage.php b/Bundles/Product/src/Spryker/Client/Product/Storage/AttributeMapStorage.php
index 22a3cf9..4689dd6 100644
--- a/Bundles/Product/src/Spryker/Client/Product/Storage/AttributeMapStorage.php
+++ b/Bundles/Product/src/Spryker/Client/Product/Storage/AttributeMapStorage.php
@@ -7,7 +7,7 @@
 namespace Spryker\Client\Product\Storage;
 
 use Spryker\Client\Product\Dependency\Client\ProductToStorageInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class AttributeMapStorage implements AttributeMapStorageInterface
 {
@@ -18,7 +18,7 @@ class AttributeMapStorage implements AttributeMapStorageInterface
     protected $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
@@ -29,7 +29,7 @@ class AttributeMapStorage implements AttributeMapStorageInterface
 
     /**
      * @param \Spryker\Client\Product\Dependency\Client\ProductToStorageInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param string $localeName
      */
     public function __construct(ProductToStorageInterface $storage, KeyBuilderInterface $keyBuilder, $localeName)
diff --git a/Bundles/Product/src/Spryker/Client/Product/Storage/ProductAbstractStorage.php b/Bundles/Product/src/Spryker/Client/Product/Storage/ProductAbstractStorage.php
index 455396d..dbaecd8 100644
--- a/Bundles/Product/src/Spryker/Client/Product/Storage/ProductAbstractStorage.php
+++ b/Bundles/Product/src/Spryker/Client/Product/Storage/ProductAbstractStorage.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Product\Storage;
 
 use Spryker\Client\Product\Dependency\Client\ProductToStorageInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class ProductAbstractStorage implements ProductAbstractStorageInterface
 {
@@ -19,7 +19,7 @@ class ProductAbstractStorage implements ProductAbstractStorageInterface
     protected $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
@@ -30,7 +30,7 @@ class ProductAbstractStorage implements ProductAbstractStorageInterface
 
     /**
      * @param \Spryker\Client\Product\Dependency\Client\ProductToStorageInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param string $localeName
      */
     public function __construct(ProductToStorageInterface $storage, KeyBuilderInterface $keyBuilder, $localeName)
diff --git a/Bundles/Product/src/Spryker/Client/Product/Storage/ProductConcreteStorage.php b/Bundles/Product/src/Spryker/Client/Product/Storage/ProductConcreteStorage.php
index 173a850..ea8ccbd 100644
--- a/Bundles/Product/src/Spryker/Client/Product/Storage/ProductConcreteStorage.php
+++ b/Bundles/Product/src/Spryker/Client/Product/Storage/ProductConcreteStorage.php
@@ -9,7 +9,7 @@ namespace Spryker\Client\Product\Storage;
 use Generated\Shared\Transfer\StorageProductTransfer;
 use Spryker\Client\Product\Dependency\Client\ProductToStorageInterface;
 use Spryker\Client\Product\Dependency\Service\ProductToUtilEncodingInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class ProductConcreteStorage implements ProductConcreteStorageInterface
 {
@@ -25,7 +25,7 @@ class ProductConcreteStorage implements ProductConcreteStorageInterface
     protected $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
@@ -36,7 +36,7 @@ class ProductConcreteStorage implements ProductConcreteStorageInterface
 
     /**
      * @param \Spryker\Client\Product\Dependency\Client\ProductToStorageInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param \Spryker\Client\Product\Dependency\Service\ProductToUtilEncodingInterface $utilEncodingService
      * @param string $localeName
      */
diff --git a/Bundles/Product/src/Spryker/Zed/Product/Communication/Console/ProductTouchConsole.php b/Bundles/Product/src/Spryker/Zed/Product/Communication/Console/ProductTouchConsole.php
index bc517cc..f5c0725 100644
--- a/Bundles/Product/src/Spryker/Zed/Product/Communication/Console/ProductTouchConsole.php
+++ b/Bundles/Product/src/Spryker/Zed/Product/Communication/Console/ProductTouchConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Product\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Config\Definition\Exception\Exception;
 use Symfony\Component\Console\Input\InputArgument;
 use Symfony\Component\Console\Input\InputInterface;
diff --git a/Bundles/ProductCartConnector/composer.json b/Bundles/ProductCartConnector/composer.json
index c34f2c1..e49f717 100644
--- a/Bundles/ProductCartConnector/composer.json
+++ b/Bundles/ProductCartConnector/composer.json
@@ -12,9 +12,15 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/tax": "^2.0.0 || ^3.0.0",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
+    "spryker/tax": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/cart": "If you want to use Cart plugins you need to install spryker/cart."
+  },
   "description": "ProductCartConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductCartConnector/dependency.json b/Bundles/ProductCartConnector/dependency.json
deleted file mode 100644
index 61df576..0000000
--- a/Bundles/ProductCartConnector/dependency.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "exclude-dev": {
-    "Tax": "Required by tests"
-  }
-}
diff --git a/Bundles/ProductCategory/composer.json b/Bundles/ProductCategory/composer.json
index 3145820..ba2d173 100644
--- a/Bundles/ProductCategory/composer.json
+++ b/Bundles/ProductCategory/composer.json
@@ -6,20 +6,23 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/category": "^2.2.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.1.6",
     "spryker/util-encoding": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "^2.0.0",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/util-encoding": "Optional dependency. Add this bundle if you want to use it's functionality."
+  },
   "description": "ProductCategory bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductCategory/dependency.json b/Bundles/ProductCategory/dependency.json
deleted file mode 100644
index e2df7e8..0000000
--- a/Bundles/ProductCategory/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "UtilEncoding": "Required by bridge"
-  },
-  "exclude": {
-  }
-}
diff --git a/Bundles/ProductCategory/src/Spryker/Zed/ProductCategory/Communication/Controller/AssignController.php b/Bundles/ProductCategory/src/Spryker/Zed/ProductCategory/Communication/Controller/AssignController.php
index 9438f49..709b3f7 100644
--- a/Bundles/ProductCategory/src/Spryker/Zed/ProductCategory/Communication/Controller/AssignController.php
+++ b/Bundles/ProductCategory/src/Spryker/Zed/ProductCategory/Communication/Controller/AssignController.php
@@ -7,7 +7,7 @@
 namespace Spryker\Zed\ProductCategory\Communication\Controller;
 
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\ProductCategory\Communication\Table\ProductCategoryTable;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
diff --git a/Bundles/ProductCategory/tests/Functional.suite.yml b/Bundles/ProductCategory/tests/Functional.suite.yml
deleted file mode 100644
index 873a49a..0000000
--- a/Bundles/ProductCategory/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \ProductCategory\Module\Functional
diff --git a/Bundles/ProductCategory/tests/Functional/_bootstrap.php b/Bundles/ProductCategory/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/ProductCategory/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/ProductCategory/tests/_support/FunctionalTester.php b/Bundles/ProductCategory/tests/_support/FunctionalTester.php
deleted file mode 100644
index a20f27d..0000000
--- a/Bundles/ProductCategory/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace ProductCategory;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/ProductCategory/tests/_support/Module/Functional.php b/Bundles/ProductCategory/tests/_support/Module/Functional.php
deleted file mode 100644
index 1d1d201..0000000
--- a/Bundles/ProductCategory/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace ProductCategory\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/ProductDiscountConnector/composer.json b/Bundles/ProductDiscountConnector/composer.json
index 6810143..d512cdd 100644
--- a/Bundles/ProductDiscountConnector/composer.json
+++ b/Bundles/ProductDiscountConnector/composer.json
@@ -13,7 +13,10 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/tax": "^3.0.0",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
+    "spryker/tax": "*",
     "spryker/testify": "*"
   },
   "description": "ProductDiscountConnector bundle",
diff --git a/Bundles/ProductDiscountConnector/dependency.json b/Bundles/ProductDiscountConnector/dependency.json
deleted file mode 100644
index 61df576..0000000
--- a/Bundles/ProductDiscountConnector/dependency.json
+++ /dev/null
@@ -1,6 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "exclude-dev": {
-    "Tax": "Required by tests"
-  }
-}
diff --git a/Bundles/ProductImage/composer.json b/Bundles/ProductImage/composer.json
index 8caede3..4f33656 100644
--- a/Bundles/ProductImage/composer.json
+++ b/Bundles/ProductImage/composer.json
@@ -9,10 +9,12 @@
     "spryker/kernel": "^2.0.0",
     "spryker/locale": "^2.2.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.0.0"
+    "spryker/propel-orm": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "ProductImage bundle",
diff --git a/Bundles/ProductManagement/composer.json b/Bundles/ProductManagement/composer.json
index 458b67d..e042db4 100644
--- a/Bundles/ProductManagement/composer.json
+++ b/Bundles/ProductManagement/composer.json
@@ -6,25 +6,28 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
+    "everon/collection": "^1.0.0",
     "spryker/category": "^2.2.0",
     "spryker/glossary": "^2.2.0",
     "spryker/gui": "^2.3.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/locale": "^2.2.0",
     "spryker/money": "^1.0.0",
     "spryker/price": "^3.0.0",
     "spryker/product": "^4.0.0",
     "spryker/product-image": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/stock": "^3.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/tax": "^3.0.0",
     "spryker/touch": "^2.2.0",
-    "spryker/url": "^2.1.0",
+    "spryker/util-encoding": "^1.0.0",
     "spryker/util-text": "^1.0.0"
   },
+  "require-dev": {
+    "spryker/propel": "*",
+    "spryker/silex": "*"
+  },
   "description": "ProductManagement bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductManagement/dependency.json b/Bundles/ProductManagement/dependency.json
deleted file mode 100644
index 54b03cb..0000000
--- a/Bundles/ProductManagement/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "UtilText": "Required by bridge"
-  },
-  "exclude": {
-  }
-}
diff --git a/Bundles/ProductManagement/src/Spryker/Shared/ProductManagement/ProductManagementConstants.php b/Bundles/ProductManagement/src/Spryker/Shared/ProductManagement/ProductManagementConstants.php
index 634b2c9..6427e59 100644
--- a/Bundles/ProductManagement/src/Spryker/Shared/ProductManagement/ProductManagementConstants.php
+++ b/Bundles/ProductManagement/src/Spryker/Shared/ProductManagement/ProductManagementConstants.php
@@ -7,8 +7,6 @@
 
 namespace Spryker\Shared\ProductManagement;
 
-use Spryker\Shared\Application\ApplicationConstants;
-
 interface ProductManagementConstants
 {
 
@@ -16,6 +14,6 @@ interface ProductManagementConstants
 
     const PRODUCT_MANAGEMENT_DEFAULT_LOCALE = 'default';
 
-    const PRODUCT_MANAGEMENT_URL_PREFIX = ApplicationConstants::HOST_YVES;
+    const HOST_YVES = 'HOST_YVES';
 
 }
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Business/Attribute/AttributeReader.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Business/Attribute/AttributeReader.php
index 26519ac..fc0a6c2 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Business/Attribute/AttributeReader.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Business/Attribute/AttributeReader.php
@@ -15,7 +15,7 @@ use PDO;
 use Spryker\Zed\ProductManagement\Business\Transfer\ProductAttributeTransferMapperInterface;
 use Spryker\Zed\ProductManagement\Dependency\Facade\ProductManagementToLocaleInterface;
 use Spryker\Zed\ProductManagement\Persistence\ProductManagementQueryContainerInterface;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 
 class AttributeReader implements AttributeReaderInterface
 {
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AddController.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AddController.php
index 7bd2cf6..7c3bda7 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AddController.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AddController.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
 use Spryker\Zed\Category\Business\Exception\CategoryUrlExistsException;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AttributeController.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AttributeController.php
index 3845d62..a870734 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AttributeController.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/AttributeController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\ProductManagement\Communication\Form\Attribute\AttributeTranslationCollectionForm;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/IndexController.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/IndexController.php
index e243a6d..236bd27 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/IndexController.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\ProductManagement\Business\ProductManagementFacade getFacade()
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/VariantController.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/VariantController.php
index d307373..9e9fa38 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/VariantController.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Controller/VariantController.php
@@ -9,9 +9,9 @@ namespace Spryker\Zed\ProductManagement\Communication\Controller;
 
 use ArrayObject;
 use Generated\Shared\Transfer\ProductAbstractTransfer;
-use Spryker\Shared\Library\Json;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilEncoding\Model\Json;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -51,9 +51,10 @@ class VariantController extends AbstractController
         $localizedAttributeValuesJsonArray = $request->get(self::PARAM_LOCALIZED_ATTRIBUTE_VALUES, []);
 
         $localizedAttributes = [];
-        $attributes = Json::decode($attributeValuesJson, true) ?: [];
+        $jsonUtil = new Json();
+        $attributes = $jsonUtil->decode($attributeValuesJson, true) ?: [];
         foreach ($localizedAttributeValuesJsonArray as $locale => $localizedJson) {
-            $localizedAttributes[$locale] = Json::decode($localizedJson, true) ?: [];
+            $localizedAttributes[$locale] = $jsonUtil->decode($localizedJson, true) ?: [];
         }
 
         $productAbstractTransfer = new ProductAbstractTransfer();
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/DataProvider/AbstractProductFormDataProvider.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/DataProvider/AbstractProductFormDataProvider.php
index ae31fd8..236e6289 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/DataProvider/AbstractProductFormDataProvider.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/DataProvider/AbstractProductFormDataProvider.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Form\DataProvider;
 
+use Everon\Component\Collection\Collection;
 use Generated\Shared\Transfer\LocaleTransfer;
 use Generated\Shared\Transfer\ProductAbstractTransfer;
 use Generated\Shared\Transfer\ProductImageSetTransfer;
-use Spryker\Shared\Library\Collection\Collection;
 use Spryker\Shared\ProductManagement\ProductManagementConstants;
 use Spryker\Zed\Category\Persistence\CategoryQueryContainerInterface;
 use Spryker\Zed\ProductManagement\Communication\Form\ProductFormAdd;
@@ -94,7 +94,7 @@ class AbstractProductFormDataProvider
     protected $priceFacade;
 
     /**
-     * @var \Generated\Shared\Transfer\ProductManagementAttributeTransfer[]|\Spryker\Shared\Library\Collection\CollectionInterface
+     * @var \Generated\Shared\Transfer\ProductManagementAttributeTransfer[]|\Everon\Component\Collection\CollectionInterface
      */
     protected $attributeTransferCollection;
 
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeAbstractForm.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeAbstractForm.php
index 0a13b76..668c2f9 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeAbstractForm.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeAbstractForm.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Form\Product;
 
+use Everon\Component\Collection\Collection;
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Shared\Library\Collection\Collection;
 use Spryker\Zed\Gui\Communication\Form\Type\Select2ComboBoxType;
 use Spryker\Zed\ProductManagement\Business\Attribute\AttributeInputManager;
 use Spryker\Zed\ProductManagement\Communication\Form\AbstractSubForm;
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeSuperForm.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeSuperForm.php
index b8f80bb..ebc9ef7 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeSuperForm.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Form/Product/AttributeSuperForm.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\ProductManagement\Communication\Form\Product;
 
+use Everon\Component\Collection\Collection;
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Shared\Library\Collection\Collection;
 use Spryker\Zed\Gui\Communication\Form\Type\Select2ComboBoxType;
 use Spryker\Zed\ProductManagement\Business\Attribute\AttributeInputManager;
 use Spryker\Zed\ProductManagement\Communication\Form\DataProvider\AbstractProductFormDataProvider;
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/AttributeTable.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/AttributeTable.php
index 564adda..b948f39 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/AttributeTable.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/AttributeTable.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\ProductManagement\Communication\Table;
 
 use Orm\Zed\ProductManagement\Persistence\Map\SpyProductManagementAttributeTableMap;
 use Orm\Zed\Product\Persistence\Map\SpyProductAttributeKeyTableMap;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\ProductManagement\Persistence\ProductManagementQueryContainerInterface;
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/ProductTable.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/ProductTable.php
index 92b342d..7a8a4f3 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/ProductTable.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/Communication/Table/ProductTable.php
@@ -12,7 +12,7 @@ use Orm\Zed\Product\Persistence\Map\SpyProductAbstractLocalizedAttributesTableMa
 use Orm\Zed\Product\Persistence\Map\SpyProductAbstractTableMap;
 use Orm\Zed\Product\Persistence\SpyProductAbstract;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxSetTableMap;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\ProductManagement\Communication\Controller\EditController;
 use Spryker\Zed\Product\Persistence\ProductQueryContainerInterface;
diff --git a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/ProductManagementConfig.php b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/ProductManagementConfig.php
index 062e32f..db0f8c4 100644
--- a/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/ProductManagementConfig.php
+++ b/Bundles/ProductManagement/src/Spryker/Zed/ProductManagement/ProductManagementConfig.php
@@ -35,7 +35,7 @@ class ProductManagementConfig extends AbstractBundleConfig
      */
     public function getImageUrlPrefix()
     {
-        return $this->get(ProductManagementConstants::PRODUCT_MANAGEMENT_URL_PREFIX);
+        return $this->get(ProductManagementConstants::HOST_YVES);
     }
 
     /**
@@ -43,7 +43,7 @@ class ProductManagementConfig extends AbstractBundleConfig
      */
     public function getHostYves()
     {
-        return $this->get(ProductManagementConstants::PRODUCT_MANAGEMENT_URL_PREFIX);
+        return $this->get(ProductManagementConstants::HOST_YVES);
     }
 
 }
diff --git a/Bundles/ProductOption/composer.json b/Bundles/ProductOption/composer.json
index 3d378e0..3da97a7 100644
--- a/Bundles/ProductOption/composer.json
+++ b/Bundles/ProductOption/composer.json
@@ -1,27 +1,34 @@
 {
   "name": "spryker/product-option",
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/country": "^2.0.0",
     "spryker/glossary": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/money": "^1.0.0",
     "spryker/product": "^2.0.0 || ^3.0.0 || ^4.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/tax": "^2.0.0 || ^3.0.0",
     "spryker/touch": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-encoding": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation.",
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout.",
+    "spryker/sales-aggregator": "If you want to use SalesAggregator plugins you need to install spryker/sales-aggregator."
+  },
   "description": "ProductOption bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductOption/src/Spryker/Client/ProductOption/KeyBuilder/ProductOptionKeyBuilder.php b/Bundles/ProductOption/src/Spryker/Client/ProductOption/KeyBuilder/ProductOptionKeyBuilder.php
index 682967d..88ac421 100644
--- a/Bundles/ProductOption/src/Spryker/Client/ProductOption/KeyBuilder/ProductOptionKeyBuilder.php
+++ b/Bundles/ProductOption/src/Spryker/Client/ProductOption/KeyBuilder/ProductOptionKeyBuilder.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Client\ProductOption\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 
 class ProductOptionKeyBuilder implements KeyBuilderInterface
 {
diff --git a/Bundles/ProductOption/src/Spryker/Client/ProductOption/ProductOptionFactory.php b/Bundles/ProductOption/src/Spryker/Client/ProductOption/ProductOptionFactory.php
index c25be0b..db1f938 100644
--- a/Bundles/ProductOption/src/Spryker/Client/ProductOption/ProductOptionFactory.php
+++ b/Bundles/ProductOption/src/Spryker/Client/ProductOption/ProductOptionFactory.php
@@ -28,7 +28,7 @@ class ProductOptionFactory extends AbstractFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createKeyBuilder()
     {
diff --git a/Bundles/ProductOption/src/Spryker/Client/ProductOption/Storage/ProductOptionStorage.php b/Bundles/ProductOption/src/Spryker/Client/ProductOption/Storage/ProductOptionStorage.php
index a081e7d..18e5b85 100644
--- a/Bundles/ProductOption/src/Spryker/Client/ProductOption/Storage/ProductOptionStorage.php
+++ b/Bundles/ProductOption/src/Spryker/Client/ProductOption/Storage/ProductOptionStorage.php
@@ -10,7 +10,7 @@ namespace Spryker\Client\ProductOption\Storage;
 use Generated\Shared\Transfer\StorageProductOptionGroupCollectionTransfer;
 use Generated\Shared\Transfer\StorageProductOptionGroupTransfer;
 use Spryker\Client\ProductOption\Dependency\Client\ProductOptionToStorageInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 
 class ProductOptionStorage implements ProductOptionStorageInterface
 {
@@ -21,7 +21,7 @@ class ProductOptionStorage implements ProductOptionStorageInterface
     protected $storage;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
@@ -37,7 +37,7 @@ class ProductOptionStorage implements ProductOptionStorageInterface
 
     /**
      * @param \Spryker\Client\ProductOption\Dependency\Client\ProductOptionToStorageInterface $storage
-     * @param \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
      * @param string $localeName
      */
     public function __construct(ProductOptionToStorageInterface $storage, KeyBuilderInterface $keyBuilder, $localeName)
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Business/ProductOptionFacadeInterface.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Business/ProductOptionFacadeInterface.php
index ddd32b9..36966ab 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Business/ProductOptionFacadeInterface.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Business/ProductOptionFacadeInterface.php
@@ -31,7 +31,7 @@ interface ProductOptionFacadeInterface
      *
      * @param \Generated\Shared\Transfer\ProductOptionGroupTransfer $productOptionGroupTransfer
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return int
      */
@@ -46,7 +46,7 @@ interface ProductOptionFacadeInterface
      *
      * @param \Generated\Shared\Transfer\ProductOptionValueTransfer $productOptionValueTransfer
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return int
      */
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/BaseOptionController.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/BaseOptionController.php
index 534a37a..2f5234f 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/BaseOptionController.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/BaseOptionController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\ProductOption\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/CreateController.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/CreateController.php
index 9f7e31e..f53e8f9 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/CreateController.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/CreateController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\ProductOption\Communication\Controller;
 
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/EditController.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/EditController.php
index 0c21a33..a030bec 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/EditController.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/EditController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\ProductOption\Communication\Controller;
 
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\ProductOption\Communication\Table\ProductOptionTable;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/IndexController.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/IndexController.php
index 1426f24..2dbca55 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/IndexController.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\ProductOption\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionListTable.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionListTable.php
index 771c6b14..5c3b6b7 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionListTable.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionListTable.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\ProductOption\Communication\Table;
 use Orm\Zed\ProductOption\Persistence\Map\SpyProductOptionGroupTableMap;
 use Orm\Zed\ProductOption\Persistence\Map\SpyProductOptionValueTableMap;
 use Orm\Zed\ProductOption\Persistence\SpyProductOptionGroup;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\ProductOption\Dependency\Facade\ProductOptionToMoneyInterface;
@@ -266,7 +266,7 @@ class ProductOptionListTable extends AbstractTable
     }
 
     /**
-     * @param \Spryker\Shared\Url\Url $viewDiscountUrl
+     * @param \Spryker\Service\UtilText\Model\Url\Url $viewDiscountUrl
      * @param string $isActive
      *
      * @return string
diff --git a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionTable.php b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionTable.php
index 437cbf1..2b8ec0d 100644
--- a/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionTable.php
+++ b/Bundles/ProductOption/src/Spryker/Zed/ProductOption/Communication/Table/ProductOptionTable.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\ProductOption\Communication\Table;
 use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Product\Persistence\Map\SpyProductAbstractLocalizedAttributesTableMap;
 use Orm\Zed\Product\Persistence\Map\SpyProductAbstractTableMap;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\ProductOption\Dependency\Service\ProductOptionToUtilEncodingInterface;
diff --git a/Bundles/ProductOptionCartConnector/composer.json b/Bundles/ProductOptionCartConnector/composer.json
index e911854..83a27ae 100644
--- a/Bundles/ProductOptionCartConnector/composer.json
+++ b/Bundles/ProductOptionCartConnector/composer.json
@@ -11,8 +11,14 @@
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/cart": "If you want to use Cart plugins you need to install spryker/cart."
+  },
   "description": "ProductOptionCartConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductOptionDiscountConnector/composer.json b/Bundles/ProductOptionDiscountConnector/composer.json
index be27126..bb15c19 100644
--- a/Bundles/ProductOptionDiscountConnector/composer.json
+++ b/Bundles/ProductOptionDiscountConnector/composer.json
@@ -8,14 +8,20 @@
   "require": {
     "spryker/discount": "^2.0.0 || ^3.2.1",
     "spryker/kernel": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/tax": "^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation.",
+    "spryker/sales-aggregator": "If you want to use SalesAggregator plugins you need to install spryker/sales-aggregator."
+  },
   "description": "ProductOptionDiscountConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/ProductSearch/composer.json b/Bundles/ProductSearch/composer.json
index b74686c..99857a4 100644
--- a/Bundles/ProductSearch/composer.json
+++ b/Bundles/ProductSearch/composer.json
@@ -6,20 +6,24 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/glossary": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
+    "spryker/key-builder": "^1.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/search": "^5.0.0",
+    "spryker/storage": "^3.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/touch": "^2.0.0"
+    "spryker/touch": "^2.0.0",
+    "spryker/util-data-reader": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "ProductSearch bundle",
diff --git a/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchDependencyProvider.php b/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchDependencyProvider.php
index 597e6b4..80c66ae 100644
--- a/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchDependencyProvider.php
+++ b/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchDependencyProvider.php
@@ -15,6 +15,7 @@ class ProductSearchDependencyProvider extends AbstractDependencyProvider
 {
 
     const STORE = 'store';
+    const CLIENT_STORAGE = 'storage client';
 
     /**
      * @param \Spryker\Client\Kernel\Container $container
@@ -25,7 +26,8 @@ class ProductSearchDependencyProvider extends AbstractDependencyProvider
     {
         $container = parent::provideServiceLayerDependencies($container);
 
-        $this->provideStore($container);
+        $container = $this->provideStore($container);
+        $container = $this->addStorageClient($container);
 
         return $container;
     }
@@ -33,13 +35,29 @@ class ProductSearchDependencyProvider extends AbstractDependencyProvider
     /**
      * @param \Spryker\Client\Kernel\Container $container
      *
-     * @return void
+     * @return \Spryker\Client\Kernel\Container
      */
     protected function provideStore(Container $container)
     {
         $container[self::STORE] = function () {
             return Store::getInstance();
         };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addStorageClient(Container $container)
+    {
+        $container[static::CLIENT_STORAGE] = function (Container $container) {
+            return $container->getLocator()->storage()->client();
+        };
+
+        return $container;
     }
 
 }
diff --git a/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchFactory.php b/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchFactory.php
index ac9da1a..a030d4d 100644
--- a/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchFactory.php
+++ b/Bundles/ProductSearch/src/Spryker/Client/ProductSearch/ProductSearchFactory.php
@@ -14,7 +14,7 @@ class ProductSearchFactory extends AbstractFactory
 {
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     public function createProductSearchConfigExtensionKeyBuilder()
     {
@@ -22,6 +22,14 @@ class ProductSearchFactory extends AbstractFactory
     }
 
     /**
+     * @return \Spryker\Client\Storage\StorageClientInterface
+     */
+    public function getStorageClient()
+    {
+        return $this->getProvidedDependency(ProductSearchDependencyProvider::CLIENT_STORAGE);
+    }
+
+    /**
      * @return \Spryker\Shared\Kernel\Store
      */
     public function getStore()
diff --git a/Bundles/ProductSearch/src/Spryker/Shared/ProductSearch/Code/KeyBuilder/ProductSearchConfigExtensionKeyBuilder.php b/Bundles/ProductSearch/src/Spryker/Shared/ProductSearch/Code/KeyBuilder/ProductSearchConfigExtensionKeyBuilder.php
index b3c15f0..d7a461f 100644
--- a/Bundles/ProductSearch/src/Spryker/Shared/ProductSearch/Code/KeyBuilder/ProductSearchConfigExtensionKeyBuilder.php
+++ b/Bundles/ProductSearch/src/Spryker/Shared/ProductSearch/Code/KeyBuilder/ProductSearchConfigExtensionKeyBuilder.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Shared\ProductSearch\Code\KeyBuilder;
 
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderTrait;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderTrait;
 use Spryker\Shared\ProductSearch\ProductSearchConfig;
 
 class ProductSearchConfigExtensionKeyBuilder implements KeyBuilderInterface
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Attribute/AttributeReader.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Attribute/AttributeReader.php
index e0b0191..ce93402 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Attribute/AttributeReader.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Attribute/AttributeReader.php
@@ -12,7 +12,7 @@ use PDO;
 use Spryker\Zed\ProductSearch\Business\Transfer\ProductAttributeTransferMapperInterface;
 use Spryker\Zed\ProductSearch\Dependency\Facade\ProductSearchToLocaleInterface;
 use Spryker\Zed\ProductSearch\Persistence\ProductSearchQueryContainerInterface;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 
 class AttributeReader implements AttributeReaderInterface
 {
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Collector/Storage/ProductSearchConfigExtensionCollector.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Collector/Storage/ProductSearchConfigExtensionCollector.php
index 059d3e5..23550ad 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Collector/Storage/ProductSearchConfigExtensionCollector.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Collector/Storage/ProductSearchConfigExtensionCollector.php
@@ -9,7 +9,8 @@ namespace Spryker\Zed\ProductSearch\Business\Collector\Storage;
 
 use Generated\Shared\Transfer\ProductSearchAttributeTransfer;
 use Generated\Shared\Transfer\SearchConfigExtensionTransfer;
-use Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface;
+use Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface;
+use Spryker\Shared\KeyBuilder\KeyBuilderInterface;
 use Spryker\Shared\ProductSearch\ProductSearchConfig as SharedProductSearchConfig;
 use Spryker\Zed\Collector\Business\Collector\Storage\AbstractStoragePropelCollector;
 use Spryker\Zed\ProductSearch\Business\Attribute\AttributeReaderInterface;
@@ -30,16 +31,24 @@ class ProductSearchConfigExtensionCollector extends AbstractStoragePropelCollect
     protected $productSearchConfig;
 
     /**
-     * @var \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @var \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected $keyBuilder;
 
     /**
      * @param \Spryker\Zed\ProductSearch\Business\Attribute\AttributeReaderInterface $attributeReader
      * @param \Spryker\Zed\ProductSearch\ProductSearchConfig $productSearchConfig
+     * @param \Spryker\Shared\KeyBuilder\KeyBuilderInterface $keyBuilder
+     * @param \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface $utilDataReaderService
      */
-    public function __construct(AttributeReaderInterface $attributeReader, ProductSearchConfig $productSearchConfig, KeyBuilderInterface $keyBuilder)
-    {
+    public function __construct(
+        AttributeReaderInterface $attributeReader,
+        ProductSearchConfig $productSearchConfig,
+        KeyBuilderInterface $keyBuilder,
+        UtilDataReaderServiceInterface $utilDataReaderService
+    ) {
+        parent::__construct($utilDataReaderService);
+
         $this->attributeReader = $attributeReader;
         $this->productSearchConfig = $productSearchConfig;
         $this->keyBuilder = $keyBuilder;
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Marker/AbstractAttributeMarker.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Marker/AbstractAttributeMarker.php
index ac5fee1..a987db8 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Marker/AbstractAttributeMarker.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/Marker/AbstractAttributeMarker.php
@@ -15,7 +15,7 @@ use Propel\Runtime\ActiveQuery\ModelJoin;
 use Spryker\Shared\ProductSearch\ProductSearchConfig;
 use Spryker\Zed\ProductSearch\Dependency\Facade\ProductSearchToTouchInterface;
 use Spryker\Zed\ProductSearch\Persistence\ProductSearchQueryContainerInterface;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 
 abstract class AbstractAttributeMarker implements AttributeMarkerInterface
 {
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/ProductSearchBusinessFactory.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/ProductSearchBusinessFactory.php
index 6e6a43e..807b3f3 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/ProductSearchBusinessFactory.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Business/ProductSearchBusinessFactory.php
@@ -200,7 +200,8 @@ class ProductSearchBusinessFactory extends AbstractBusinessFactory
         $productSearchConfigCollector = new ProductSearchConfigExtensionCollector(
             $this->createAttributeReader(),
             $this->getConfig(),
-            $this->createProductSearchConfigExtensionKeyBuilder()
+            $this->createProductSearchConfigExtensionKeyBuilder(),
+            $this->getUtilDataReaderService()
         );
 
         $productSearchConfigCollector->setTouchQueryContainer(
@@ -214,7 +215,15 @@ class ProductSearchBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Shared\Collector\Code\KeyBuilder\KeyBuilderInterface
+     * @return \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface
+     */
+    protected function getUtilDataReaderService()
+    {
+        return $this->getProvidedDependency(ProductSearchDependencyProvider::SERVICE_DATA);
+    }
+
+    /**
+     * @return \Spryker\Shared\KeyBuilder\KeyBuilderInterface
      */
     protected function createProductSearchConfigExtensionKeyBuilder()
     {
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterPreferencesController.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterPreferencesController.php
index e773b17..8bb63f0 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterPreferencesController.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterPreferencesController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\ProductSearch\Communication\Controller;
 
 use Generated\Shared\Transfer\ProductSearchAttributeTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterReorderController.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterReorderController.php
index 553f05a..d312943 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterReorderController.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/FilterReorderController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\ProductSearch\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/SearchPreferencesController.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/SearchPreferencesController.php
index 67ee68a..6b12e0b 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/SearchPreferencesController.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/Communication/Controller/SearchPreferencesController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\ProductSearch\Communication\Controller;
 
 use Generated\Shared\Transfer\ProductSearchPreferencesTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/ProductSearchDependencyProvider.php b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/ProductSearchDependencyProvider.php
index c510b15..686a4f4 100644
--- a/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/ProductSearchDependencyProvider.php
+++ b/Bundles/ProductSearch/src/Spryker/Zed/ProductSearch/ProductSearchDependencyProvider.php
@@ -24,6 +24,7 @@ class ProductSearchDependencyProvider extends AbstractBundleDependencyProvider
     const FACADE_TOUCH = 'touch facade';
     const FACADE_COLLECTOR = 'collector facade';
     const QUERY_CONTAINER_TOUCH = 'touch query container';
+    const SERVICE_DATA = 'util data service';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -38,6 +39,7 @@ class ProductSearchDependencyProvider extends AbstractBundleDependencyProvider
         $this->provideTouchFacade($container);
         $this->provideCollectorFacade($container);
         $this->provideTouchQueryContainer($container);
+        $this->provideUtilDataReaderService($container);
 
         return $container;
     }
@@ -137,4 +139,16 @@ class ProductSearchDependencyProvider extends AbstractBundleDependencyProvider
         };
     }
 
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return void
+     */
+    protected function provideUtilDataReaderService(Container $container)
+    {
+        $container[static::SERVICE_DATA] = function (Container $container) {
+            return $container->getLocator()->utilDataReader()->service();
+        };
+    }
+
 }
diff --git a/Bundles/ProductSearch/tests/Acceptance.suite.yml b/Bundles/ProductSearch/tests/Acceptance.suite.yml
index 9af59de..7811af5 100644
--- a/Bundles/ProductSearch/tests/Acceptance.suite.yml
+++ b/Bundles/ProductSearch/tests/Acceptance.suite.yml
@@ -4,5 +4,6 @@ modules:
         - WebDriver:
             url: ''
             browser: phantomjs
+            window_size: 1920x1080
 
         - \Application\Module\Zed
diff --git a/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/FilterPreferences/FilterPreferencesCest.php b/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/FilterPreferences/FilterPreferencesCest.php
index 9657f8c..72d50a7 100644
--- a/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/FilterPreferences/FilterPreferencesCest.php
+++ b/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/FilterPreferences/FilterPreferencesCest.php
@@ -89,6 +89,7 @@ class FilterPreferencesCest
 
         $i->click(FilterPreferencesPage::SELECTOR_SYNC_FILTERS);
 
+        $i->wait(1);
         $i->canSeeCurrentUrlEquals(FilterPreferencesPage::URL_LIST);
         $i->canSee('Filter preferences synchronization was successful.');
     }
diff --git a/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/SearchPreferences/SearchPreferencesCest.php b/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/SearchPreferences/SearchPreferencesCest.php
index 4c42335..16222b9 100644
--- a/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/SearchPreferences/SearchPreferencesCest.php
+++ b/Bundles/ProductSearch/tests/Acceptance/ProductSearch/Zed/SearchPreferences/SearchPreferencesCest.php
@@ -59,6 +59,7 @@ class SearchPreferencesCest
         $i->click('#syncSearchPreferences');
 
         $i->canSeeCurrentUrlEquals(SearchPreferencesPage::URL_LIST);
+        $i->wait(1);
         $i->canSee('Search preferences synchronization was successful.');
 
         // TODO: don't need to delete, after we have clean test state after each test case
diff --git a/Bundles/Propel/composer.json b/Bundles/Propel/composer.json
index f496aa5..a02867f 100644
--- a/Bundles/Propel/composer.json
+++ b/Bundles/Propel/composer.json
@@ -1,19 +1,22 @@
 {
   "name": "spryker/propel",
   "require": {
-    "propel/propel": "2.0.0-alpha7",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
+    "spryker/error-handler": "^1.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/monolog": "^2.0.0",
-    "spryker/silex": "^2.0.0",
-    "spryker/symfony": "^2.0.0"
+    "spryker/symfony": "^2.0.0",
+    "spryker/util-encoding": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
   "description": "Propel bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilder.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilder.php
index f99e292..d5cf31f 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilder.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilder.php
@@ -16,8 +16,9 @@ use Propel\Generator\Model\IdMethod;
 use Propel\Generator\Model\Table;
 use Propel\Generator\Platform\PlatformInterface;
 use Propel\Runtime\Exception\PropelException;
+use Spryker\Shared\Config\Application\Environment;
 use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\Application\Environment;
+use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
 use Spryker\Shared\Propel\PropelConstants;
 
 class ObjectBuilder extends PropelObjectBuilder
@@ -31,6 +32,9 @@ class ObjectBuilder extends PropelObjectBuilder
         parent::__construct($table);
 
         Environment::initialize();
+
+        $errorHandlerEnvironment = new ErrorHandlerEnvironment();
+        $errorHandlerEnvironment->initialize();
     }
 
     /**
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilderWithLogger.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilderWithLogger.php
index e5df2b8..8d983da 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilderWithLogger.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/ObjectBuilderWithLogger.php
@@ -17,8 +17,9 @@ use Propel\Generator\Model\Table;
 use Propel\Generator\Platform\MssqlPlatform;
 use Propel\Generator\Platform\PlatformInterface;
 use Propel\Runtime\Exception\PropelException;
+use Spryker\Shared\Config\Application\Environment;
 use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\Application\Environment;
+use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
 use Spryker\Shared\Propel\PropelConstants;
 
 class ObjectBuilderWithLogger extends PropelObjectBuilder
@@ -32,6 +33,9 @@ class ObjectBuilderWithLogger extends PropelObjectBuilder
         parent::__construct($table);
 
         Environment::initialize();
+
+        $errorHandlerEnvironment = new ErrorHandlerEnvironment();
+        $errorHandlerEnvironment->initialize();
     }
 
     /**
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/QueryBuilder.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/QueryBuilder.php
index 55e8ff7..59b4cd2 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/QueryBuilder.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Builder/QueryBuilder.php
@@ -149,7 +149,7 @@ SCRIPT;
         $implodedArrayComparisons = implode(', ', $allowedArrayFilters);
 
         $this->declareClass('Spryker\\Zed\\Propel\\Business\\Exception\\AmbiguousComparisonException');
-        $this->declareClass('Spryker\\Zed\\Propel\\Business\\Runtime\\ActiveQuery\\Criteria', 'Spryker');
+        $this->declareClass('Spryker\\Zed\\PropelOrm\\Business\\Runtime\\ActiveQuery\\Criteria', 'Spryker');
 
         $colPhpName = $col->getPhpName();
         $colName = $col->getName();
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Formatter/PropelArraySetFormatter.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Formatter/PropelArraySetFormatter.php
deleted file mode 100644
index c161ee1..0000000
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Formatter/PropelArraySetFormatter.php
+++ /dev/null
@@ -1,71 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Propel\Business\Formatter;
-
-use Propel\Runtime\ActiveQuery\BaseModelCriteria;
-use Propel\Runtime\DataFetcher\DataFetcherInterface;
-use Propel\Runtime\Exception\PropelException;
-use Propel\Runtime\Formatter\SimpleArrayFormatter;
-
-class PropelArraySetFormatter extends SimpleArrayFormatter
-{
-
-    /**
-     * Define the hydration schema based on a query object.
-     * Fills the Formatter's properties using a Criteria as source
-     *
-     * @param \Propel\Runtime\ActiveQuery\BaseModelCriteria $criteria
-     * @param \Propel\Runtime\DataFetcher\DataFetcherInterface|null $dataFetcher
-     *
-     * @return $this|\Propel\Runtime\Formatter\AbstractFormatter The current formatter object
-     */
-    public function init(BaseModelCriteria $criteria, DataFetcherInterface $dataFetcher = null)
-    {
-        $this->dbName = $criteria->getDbName();
-        $this->setClass($criteria->getModelName());
-        $this->setWith($criteria->getWith());
-        $this->asColumns = array_merge($criteria->getSelectColumns(), $criteria->getAsColumns());
-        $this->hasLimit = $criteria->getLimit() !== -1;
-        if ($dataFetcher) {
-            $this->setDataFetcher($dataFetcher);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @param \Propel\Runtime\DataFetcher\DataFetcherInterface|null $dataFetcher
-     *
-     * @throws \Propel\Runtime\Exception\PropelException
-     *
-     * @return array
-     */
-    public function format(DataFetcherInterface $dataFetcher = null)
-    {
-        $this->checkInit();
-        if ($dataFetcher) {
-            $this->setDataFetcher($dataFetcher);
-        } else {
-            $dataFetcher = $this->getDataFetcher();
-        }
-        $formattedArray = [];
-        if ($this->isWithOneToMany() && $this->hasLimit) {
-            throw new PropelException('Cannot use limit() in conjunction with with() on a one-to-many relationship. Please remove the with() call, or the limit() call.');
-        }
-        foreach ($dataFetcher as $row) {
-            $rowArray = $this->getStructuredArrayFromRow($row);
-            if ($rowArray !== false) {
-                $formattedArray[] = $rowArray;
-            }
-        }
-        $dataFetcher->close();
-
-        return $formattedArray;
-    }
-
-}
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelConfigConverterJson.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelConfigConverterJson.php
index 6f11622..d6447c1 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelConfigConverterJson.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelConfigConverterJson.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Business\Model;
 
-use Spryker\Shared\Library\Json;
+use Spryker\Service\UtilEncoding\Model\Json;
 use Spryker\Zed\Propel\Business\Exception\ConfigFileNotCreatedException;
 use Spryker\Zed\Propel\Business\Exception\ConfigMissingPropertyException;
 
@@ -81,8 +81,9 @@ class PropelConfigConverterJson implements PropelConfigConverterInterface
     protected function convertToJson()
     {
         $config = ['propel' => $this->config];
+        $jsonUtil = new Json();
 
-        return Json::encode($config);
+        return $jsonUtil->encode($config);
     }
 
     /**
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelSchemaMerger.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelSchemaMerger.php
index d856250..9640a7b 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelSchemaMerger.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Model/PropelSchemaMerger.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Propel\Business\Model;
 use ArrayObject;
 use DOMDocument;
 use SimpleXMLElement;
-use Spryker\Zed\Library\Generator\StringGenerator;
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Zed\Propel\Business\Exception\SchemaMergeException;
 use Symfony\Component\Finder\SplFileInfo;
 
@@ -234,8 +234,8 @@ class PropelSchemaMerger implements PropelSchemaMergerInterface
         }
 
         if (empty($elementName) || is_array($elementName)) {
-            $generator = new StringGenerator();
-            $elementName = 'anonymous_' . $generator->generateRandomString();
+            $utilTextService = new UtilTextService();
+            $elementName = 'anonymous_' . $utilTextService->generateRandomString(32);
         }
 
         return $elementName;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Runtime/ActiveQuery/Criteria.php b/Bundles/Propel/src/Spryker/Zed/Propel/Business/Runtime/ActiveQuery/Criteria.php
deleted file mode 100644
index 20d9790..0000000
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Business/Runtime/ActiveQuery/Criteria.php
+++ /dev/null
@@ -1,17 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Propel\Business\Runtime\ActiveQuery;
-
-use Propel\Runtime\ActiveQuery\Criteria as PropelCriteria;
-
-class Criteria extends PropelCriteria
-{
-
-    const BETWEEN = 'BETWEEN';
-
-}
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildModelConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildModelConsole.php
index e1dd259..7533967 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildModelConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildModelConsole.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Propel\Communication\Console;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Process\Process;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildSqlConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildSqlConsole.php
index deb0cfe..ddf2e97 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildSqlConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/BuildSqlConsole.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Propel\Communication\Console;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Process\Process;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/ConvertConfigConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/ConvertConfigConsole.php
index f6b7e77..406460c 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/ConvertConfigConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/ConvertConfigConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/CreateDatabaseConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/CreateDatabaseConsole.php
index 8c4f255..3c1dc8a 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/CreateDatabaseConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/CreateDatabaseConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/DiffConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/DiffConsole.php
index a3f5aa5..d05c52b 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/DiffConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/DiffConsole.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Propel\Communication\Console;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Process\Process;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/InsertSqlConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/InsertSqlConsole.php
index c808fa1..607df42 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/InsertSqlConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/InsertSqlConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Process\Process;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/MigrateConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/MigrateConsole.php
index 95d1924..402e74e 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/MigrateConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/MigrateConsole.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Propel\Communication\Console;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 use Symfony\Component\Process\Process;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PostgresqlCompatibilityConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PostgresqlCompatibilityConsole.php
index e50b469..ce0eadb 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PostgresqlCompatibilityConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PostgresqlCompatibilityConsole.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Propel\Communication\Console;
 
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Propel\PropelConstants;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PropelInstallConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PropelInstallConsole.php
index 96cde37..1935b5a 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PropelInstallConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/PropelInstallConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\ArrayInput;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/SchemaCopyConsole.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/SchemaCopyConsole.php
index 339125d..dd58b09 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/SchemaCopyConsole.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Console/SchemaCopyConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Propel\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Plugin/Connection.php b/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Plugin/Connection.php
deleted file mode 100644
index 6a256d8..0000000
--- a/Bundles/Propel/src/Spryker/Zed/Propel/Communication/Plugin/Connection.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Propel\Communication\Plugin;
-
-use Propel\Runtime\Propel;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @method \Spryker\Zed\Propel\Business\PropelFacade getFacade()
- * @method \Spryker\Zed\Propel\Communication\PropelCommunicationFactory getFactory()
- */
-class Connection extends AbstractPlugin
-{
-
-    /**
-     * @return \Propel\Runtime\Connection\ConnectionInterface
-     */
-    public function get()
-    {
-        $connection = Propel::getConnection();
-
-        return $connection;
-    }
-
-}
diff --git a/Bundles/Propel/src/Spryker/Zed/Propel/PropelConfig.php b/Bundles/Propel/src/Spryker/Zed/Propel/PropelConfig.php
index 63cd3d2..e039383 100644
--- a/Bundles/Propel/src/Spryker/Zed/Propel/PropelConfig.php
+++ b/Bundles/Propel/src/Spryker/Zed/Propel/PropelConfig.php
@@ -62,7 +62,7 @@ class PropelConfig extends AbstractBundleConfig
      */
     private function getSchemaPathPattern()
     {
-        return $this->get('APPLICATION_SPRYKER_ROOT') . '/*/src/*/Zed/*/Persistence/Propel/Schema/';
+        return $this->get('SPRYKER_ROOT') . '/*/src/*/Zed/*/Persistence/Propel/Schema/';
     }
 
     /**
diff --git a/Bundles/PropelOrm/.coveralls.yml b/Bundles/PropelOrm/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/PropelOrm/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/PropelOrm/.gitattributes b/Bundles/PropelOrm/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/PropelOrm/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/PropelOrm/.gitignore b/Bundles/PropelOrm/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/PropelOrm/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/PropelOrm/.scrutinizer.yml b/Bundles/PropelOrm/.scrutinizer.yml
new file mode 100644
index 0000000..fc11bd4
--- /dev/null
+++ b/Bundles/PropelOrm/.scrutinizer.yml
@@ -0,0 +1,7 @@
+tools:
+    external_code_coverage: true
+
+checks:
+    php:
+        code_rating: true
+
diff --git a/Bundles/PropelOrm/.travis.yml b/Bundles/PropelOrm/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/PropelOrm/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/PropelOrm/CHANGELOG.md b/Bundles/PropelOrm/CHANGELOG.md
new file mode 100644
index 0000000..f92f62b
--- /dev/null
+++ b/Bundles/PropelOrm/CHANGELOG.md
@@ -0,0 +1,3 @@
+# PropelOrm Changelog
+
+[Release Changelog](https://github.com/spryker/PropelOrm/releases)
diff --git a/Bundles/PropelOrm/CONTRIBUTING.md b/Bundles/PropelOrm/CONTRIBUTING.md
new file mode 100644
index 0000000..5eff362
--- /dev/null
+++ b/Bundles/PropelOrm/CONTRIBUTING.md
@@ -0,0 +1,46 @@
+CODE CONTRIBUTION LICENSE AGREEMENT
+
+BY DISPLAYING, PUBLISHING, UPLOADING OR PROMOTING (COLLECTIVELY, “POSTING”) SOURCE CODE (“SOURCE CODE”)
+TO SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER
+HRB 134310 (“WE”, “US” OR ”SPRYKER”), YOU AGREE TO THIS CODE CONTRIBUTION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+You grant us and our affiliates an irrevocable, perpetual, worldwide, royalty-free, non-exclusive, unrestricted
+license and right to use, reproduce and store, disseminate and otherwise exploit, modify, delete from, add to,
+create derivative works of, publicly perform, publicly display, reproduce, exchange parts of Source Code or combine them with
+other Source Code, use in data networks and distribute with or without consideration and without limitations as to the
+number of items via all distribution channels (and to sublicense the foregoing rights through multiple tiers of licensees)
+of such Source Code and any other copyright protected material for any reason and in connection with advertising and
+promoting our software and/or our products in any media formats and through any channels now existing or developed in
+the future. The transfer and assignment of rights covers any usage and exploitation rights for any unknown types of use
+as well as with regard to any known types of use the right to unrestrictedly make publicly available and publish,
+irrespective of the medium including any editions and versions and grant simple or exclusive usage, exploitation or
+adaptation rights to third parties.
+
+Spryker may reject, refuse to post or delete any Source Code for any or no reason, including, without limitation.
+
+From time to time, we may remove the Source Code permanently or temporarily, provided that even if we do remove such
+Source Code, we shall have no obligation to cease our other uses of the Source Code as permitted above.
+
+You agree to be fully responsible for and to pay any and all royalties, fees, and any other monies owing any person or
+entity by reason of any Source Code posted by you.
+
+Spryker respects the intellectual property of others, and requires that you do the same. Your postings and the Source Code
+must not infringe any copyright, patent, trademark, trade secret or other proprietary rights or other rights of any person
+or entity and you may not upload, embed, post, email, transmit or otherwise make available Source Code, software or any other
+material that that infringes such rights.
+
+YOU GUARANTEE THAT: (I) YOU OWN THE SOURCE CODE POSTED BY YOU OR OTHERWISE HAVE THE RIGHT TO GRANT THE LICENSES AND RIGHTS
+SET FORTH ABOVE, AND (II) THE POSTING OF YOUR SOURCE CODE DOES NOT VIOLATE THE PRIVACY RIGHTS, PUBLICITY RIGHTS, CONTRACT RIGHTS,
+INTELLECTUAL PROPERTY OR ANY OTHER RIGHTS OF ANY PERSON OR ENTITY OR ANY APPLICABLE LAW.
+
+YOU AGREE TO INDEMNIFY AND HOLD SPRYKER, ITS SUBSIDIARIES, AND AFFILIATES, AND THEIR RESPECTIVE OFFICERS, AGENTS, PARTNERS
+AND EMPLOYEES, HARMLESS FROM ANY LOSS, LIABILITY, COST, EXPENSE, CLAIM OR DEMAND, INCLUDING WITHOUT LIMITATION, REASONABLE
+ATTORNEYS’ FEES, DUE OR RELATING TO OR ARISING OUT OF THE USE OF YOUR SOURCE CODE IN VIOLATION OF THIS AGREEMENT AND/OR
+ARISING FROM A BREACH OF ANY TERMS OF THIS AGREEMENT AND/OR ANY BREACH OF YOUR REPRESENTATIONS AND WARRANTIES SET FORTH IN
+THIS AGREEMENT AND/OR ARISING OUT OF OR RELATING TO ANY SOURCE CODE THAT YOU POST.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement constitutes the entire agreement between you and us concerning Spryker’s use of the Source Code. This Agreement
+supersedes any prior verbal understanding between the parties. This Agreement may be amended only in a writing signed by an authorized officer of Spryker.
diff --git a/Bundles/PropelOrm/LICENSE b/Bundles/PropelOrm/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/PropelOrm/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/PropelOrm/README.md b/Bundles/PropelOrm/README.md
new file mode 100644
index 0000000..795720c
--- /dev/null
+++ b/Bundles/PropelOrm/README.md
@@ -0,0 +1,14 @@
+# PropelOrm Bundle
+[![Build Status](https://travis-ci.org/spryker/PropelOrm.svg)](https://travis-ci.org/spryker/PropelOrm)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/PropelOrm/badge.svg)](https://coveralls.io/github/spryker/PropelOrm)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/PropelOrm/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/PropelOrm/?branch=master)
+
+## Installation
+
+```
+composer require spryker/propel-orm
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/PropelOrm/composer.json b/Bundles/PropelOrm/composer.json
new file mode 100644
index 0000000..56fac8be
--- /dev/null
+++ b/Bundles/PropelOrm/composer.json
@@ -0,0 +1,23 @@
+{
+  "name": "spryker/propel-orm",
+  "require": {
+    "propel/propel": "2.0.0-alpha7"
+  },
+  "description": "PropelOrm bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-4": {
+      "Spryker\\Zed\\PropelOrm\\": "src/Spryker/Zed/PropelOrm"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Model/Formatter/PropelArraySetFormatter.php b/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Model/Formatter/PropelArraySetFormatter.php
new file mode 100644
index 0000000..c93ecc8
--- /dev/null
+++ b/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Model/Formatter/PropelArraySetFormatter.php
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\PropelOrm\Business\Model\Formatter;
+
+use Propel\Runtime\ActiveQuery\BaseModelCriteria;
+use Propel\Runtime\DataFetcher\DataFetcherInterface;
+use Propel\Runtime\Exception\PropelException;
+use Propel\Runtime\Formatter\SimpleArrayFormatter;
+
+class PropelArraySetFormatter extends SimpleArrayFormatter
+{
+
+    /**
+     * Define the hydration schema based on a query object.
+     * Fills the Formatter's properties using a Criteria as source
+     *
+     * @param \Propel\Runtime\ActiveQuery\BaseModelCriteria $criteria
+     * @param \Propel\Runtime\DataFetcher\DataFetcherInterface|null $dataFetcher
+     *
+     * @return $this|\Propel\Runtime\Formatter\AbstractFormatter The current formatter object
+     */
+    public function init(BaseModelCriteria $criteria, DataFetcherInterface $dataFetcher = null)
+    {
+        $this->dbName = $criteria->getDbName();
+        $this->setClass($criteria->getModelName());
+        $this->setWith($criteria->getWith());
+        $this->asColumns = array_merge($criteria->getSelectColumns(), $criteria->getAsColumns());
+        $this->hasLimit = $criteria->getLimit() !== -1;
+        if ($dataFetcher) {
+            $this->setDataFetcher($dataFetcher);
+        }
+
+        return $this;
+    }
+
+    /**
+     * @param \Propel\Runtime\DataFetcher\DataFetcherInterface|null $dataFetcher
+     *
+     * @throws \Propel\Runtime\Exception\PropelException
+     *
+     * @return array
+     */
+    public function format(DataFetcherInterface $dataFetcher = null)
+    {
+        $this->checkInit();
+        if ($dataFetcher) {
+            $this->setDataFetcher($dataFetcher);
+        } else {
+            $dataFetcher = $this->getDataFetcher();
+        }
+        $formattedArray = [];
+        if ($this->isWithOneToMany() && $this->hasLimit) {
+            throw new PropelException('Cannot use limit() in conjunction with with() on a one-to-many relationship. Please remove the with() call, or the limit() call.');
+        }
+        foreach ($dataFetcher as $row) {
+            $rowArray = $this->getStructuredArrayFromRow($row);
+            if ($rowArray !== false) {
+                $formattedArray[] = $rowArray;
+            }
+        }
+        $dataFetcher->close();
+
+        return $formattedArray;
+    }
+
+}
diff --git a/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Runtime/ActiveQuery/Criteria.php b/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Runtime/ActiveQuery/Criteria.php
new file mode 100644
index 0000000..26e9a9f
--- /dev/null
+++ b/Bundles/PropelOrm/src/Spryker/Zed/PropelOrm/Business/Runtime/ActiveQuery/Criteria.php
@@ -0,0 +1,17 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery;
+
+use Propel\Runtime\ActiveQuery\Criteria as PropelCriteria;
+
+class Criteria extends PropelCriteria
+{
+
+    const BETWEEN = 'BETWEEN';
+
+}
diff --git a/Bundles/Quote/.coveralls.yml b/Bundles/Quote/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/Quote/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/Quote/.gitattributes b/Bundles/Quote/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/Quote/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/Quote/.gitignore b/Bundles/Quote/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/Quote/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/Quote/.travis.yml b/Bundles/Quote/.travis.yml
new file mode 100644
index 0000000..87d9cee
--- /dev/null
+++ b/Bundles/Quote/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/Quote/CHANGELOG.md b/Bundles/Quote/CHANGELOG.md
new file mode 100644
index 0000000..422a57a
--- /dev/null
+++ b/Bundles/Quote/CHANGELOG.md
@@ -0,0 +1,3 @@
+# Quote Changelog
+
+[Release Changelog](https://github.com/spryker/Quote/releases)
diff --git a/Bundles/Quote/LICENSE b/Bundles/Quote/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/Quote/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/Quote/README.md b/Bundles/Quote/README.md
new file mode 100644
index 0000000..eb746aa
--- /dev/null
+++ b/Bundles/Quote/README.md
@@ -0,0 +1,14 @@
+# Quote Bundle
+[![Build Status](https://travis-ci.org/spryker/Quote.svg)](https://travis-ci.org/spryker/Quote)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/Quote/badge.svg)](https://coveralls.io/github/spryker/Quote)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/Quote/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/Quote/?branch=master)
+
+## Installation
+
+```
+composer require spryker/quote
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/Quote/codeception.yml b/Bundles/Quote/codeception.yml
new file mode 100644
index 0000000..68c7fc2
--- /dev/null
+++ b/Bundles/Quote/codeception.yml
@@ -0,0 +1,17 @@
+namespace: Quote
+actor: Tester
+paths:
+    tests: tests
+    log: tests/_output
+    data: tests/_data
+    support: tests/_support
+    envs: tests/_envs
+settings:
+    bootstrap: _bootstrap.php
+    suite_class: \PHPUnit_Framework_TestSuite
+    colors: true
+    memory_limit: 1024M
+    log: true
+coverage:
+    enabled: true
+    whitelist: { include: ['src/*.php'] }
diff --git a/Bundles/Quote/composer.json b/Bundles/Quote/composer.json
new file mode 100644
index 0000000..d3bc629
--- /dev/null
+++ b/Bundles/Quote/composer.json
@@ -0,0 +1,40 @@
+{
+  "name": "spryker/quote",
+  "require": {
+    "spryker/kernel": "^2.0.0",
+    "spryker/session": "^2.0.0",
+    "spryker/symfony": "^2.0.0"
+  },
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "description": "Quote bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Functional": "tests/"
+    }
+  },
+  "repositories": [
+    {
+      "type": "composer",
+      "url": "https://code.spryker.com/repo/private"
+    }
+  ],
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/QuoteClient.php b/Bundles/Quote/src/Spryker/Client/Quote/QuoteClient.php
new file mode 100644
index 0000000..6917005
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/QuoteClient.php
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+use Spryker\Client\Kernel\AbstractClient;
+
+/**
+ * @method \Spryker\Client\Quote\QuoteFactory getFactory()
+ */
+class QuoteClient extends AbstractClient implements QuoteClientInterface
+{
+
+    /**
+     * {@inheritdoc}
+     *
+     * @api
+     *
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote()
+    {
+        return $this->getFactory()->createSession()->getQuote();
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @api
+     *
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer)
+    {
+        $this->getFactory()->createSession()->setQuote($quoteTransfer);
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @api
+     *
+     * @return void
+     */
+    public function clearQuote()
+    {
+        $this->getFactory()->createSession()->clearQuote();
+    }
+
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/QuoteClientInterface.php b/Bundles/Quote/src/Spryker/Client/Quote/QuoteClientInterface.php
new file mode 100644
index 0000000..213127c
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/QuoteClientInterface.php
@@ -0,0 +1,47 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+interface QuoteClientInterface
+{
+
+    /**
+     * Specification:
+     * - Returns the stored quote.
+     *
+     * @api
+     *
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote();
+
+    /**
+     * Specification:
+     * - Stores the quote.
+     *
+     * @api
+     *
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer);
+
+    /**
+     * Specification:
+     * - Resets all data which is stored in the quote.
+     *
+     * @api
+     *
+     * @return void
+     */
+    public function clearQuote();
+
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/QuoteDependencyProvider.php b/Bundles/Quote/src/Spryker/Client/Quote/QuoteDependencyProvider.php
new file mode 100644
index 0000000..07be094
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/QuoteDependencyProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote;
+
+use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
+
+class QuoteDependencyProvider extends AbstractDependencyProvider
+{
+
+    const CLIENT_SESSION = 'session client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addSessionClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addSessionClient(Container $container)
+    {
+        $container[static::CLIENT_SESSION] = function (Container $container) {
+            return $container->getLocator()->session()->client();
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/QuoteFactory.php b/Bundles/Quote/src/Spryker/Client/Quote/QuoteFactory.php
new file mode 100644
index 0000000..c26654d
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/QuoteFactory.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote;
+
+use Spryker\Client\Kernel\AbstractFactory;
+use Spryker\Client\Quote\Session\QuoteSession;
+
+class QuoteFactory extends AbstractFactory
+{
+
+    /**
+     * @return \Spryker\Client\Quote\Session\QuoteSession
+     */
+    public function createSession()
+    {
+        return new QuoteSession(
+            $this->getSessionClient()
+        );
+    }
+
+    /**
+     * @return \Spryker\Client\Session\SessionClientInterface
+     */
+    protected function getSessionClient()
+    {
+        return $this->getProvidedDependency(QuoteDependencyProvider::CLIENT_SESSION);
+    }
+
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSession.php b/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSession.php
new file mode 100644
index 0000000..7bd7dfd
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSession.php
@@ -0,0 +1,61 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote\Session;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
+
+class QuoteSession implements QuoteSessionInterface
+{
+
+    const QUOTE_SESSION_IDENTIFIER = 'quote session identifier';
+
+    /**
+     * @var \Symfony\Component\HttpFoundation\Session\SessionInterface
+     */
+    protected $session;
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+     */
+    public function __construct(SessionInterface $session)
+    {
+        $this->session = $session;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote()
+    {
+        $quoteTransfer = new QuoteTransfer();
+
+        return $this->session->get(static::QUOTE_SESSION_IDENTIFIER, $quoteTransfer);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer)
+    {
+        $this->session->set(static::QUOTE_SESSION_IDENTIFIER, $quoteTransfer);
+    }
+
+    /**
+     * @return $this
+     */
+    public function clearQuote()
+    {
+        $this->setQuote(new QuoteTransfer());
+
+        return $this;
+    }
+
+}
diff --git a/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSessionInterface.php b/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSessionInterface.php
new file mode 100644
index 0000000..4a285d3
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Client/Quote/Session/QuoteSessionInterface.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Quote\Session;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+
+interface QuoteSessionInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    public function getQuote();
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return $this
+     */
+    public function setQuote(QuoteTransfer $quoteTransfer);
+
+    /**
+     * @return $this
+     */
+    public function clearQuote();
+
+}
diff --git a/Bundles/Quote/src/Spryker/Shared/Quote/Transfer/quote.transfer.xml b/Bundles/Quote/src/Spryker/Shared/Quote/Transfer/quote.transfer.xml
new file mode 100644
index 0000000..4d8f150
--- /dev/null
+++ b/Bundles/Quote/src/Spryker/Shared/Quote/Transfer/quote.transfer.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0"?>
+<transfers xmlns="spryker:transfer-01"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd">
+
+    <transfer name="Quote">
+        <property name="items" type="Item[]" singular="item"/>
+    </transfer>
+
+</transfers>
+
diff --git a/Bundles/Quote/tests/Functional.suite.yml b/Bundles/Quote/tests/Functional.suite.yml
new file mode 100644
index 0000000..04d4f44
--- /dev/null
+++ b/Bundles/Quote/tests/Functional.suite.yml
@@ -0,0 +1,5 @@
+class_name: FunctionalTester
+modules:
+    enabled:
+        - \Testify\Module\Environment
+        - \Transfer\Module\TransferGenerate
diff --git a/Bundles/Quote/tests/Functional/Spryker/Client/Quote/QuoteClientTest.php b/Bundles/Quote/tests/Functional/Spryker/Client/Quote/QuoteClientTest.php
new file mode 100644
index 0000000..724bb41
--- /dev/null
+++ b/Bundles/Quote/tests/Functional/Spryker/Client/Quote/QuoteClientTest.php
@@ -0,0 +1,71 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Functional\Spryker\Client\Quote;
+
+use Generated\Shared\Transfer\ItemTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
+use PHPUnit_Framework_TestCase;
+use Spryker\Client\Quote\QuoteClient;
+use Spryker\Client\Session\SessionClient;
+use Symfony\Component\HttpFoundation\Session\Session;
+
+/**
+ * @group Functional
+ * @group Spryker
+ * @group Client
+ * @group Quote
+ * @group QuoteClientTest
+ */
+class QuoteClientTest extends PHPUnit_Framework_TestCase
+{
+
+    public function setUp()
+    {
+        $sessionContainer = new Session();
+        $sessionClient = new SessionClient();
+        $sessionClient->setContainer($sessionContainer);
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetQuoteShouldReturnQuoteTransfer()
+    {
+        $quoteClient = new QuoteClient();
+
+        $this->assertInstanceOf(QuoteTransfer::class, $quoteClient->getQuote());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetQuoteShouldStoreQuoteTransfer()
+    {
+        $quoteTransfer = new QuoteTransfer();
+        $quoteClient = new QuoteClient();
+
+        $quoteClient->setQuote($quoteTransfer);
+        $this->assertSame($quoteTransfer, $quoteClient->getQuote());
+    }
+
+    /**
+     * @return void
+     */
+    public function testClearQuoteShouldSetEmptyQuoteTransfer()
+    {
+        $quoteTransfer = new QuoteTransfer();
+        $quoteTransfer->addItem(new ItemTransfer());
+
+        $quoteClient = new QuoteClient();
+        $quoteClient->setQuote($quoteTransfer);
+        $quoteClient->clearQuote();
+
+        $this->assertNotSame($quoteTransfer, $quoteClient->getQuote());
+    }
+
+}
diff --git a/Bundles/Quote/tests/Functional/_bootstrap.php b/Bundles/Quote/tests/Functional/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/Quote/tests/Functional/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/Quote/tests/_bootstrap.php b/Bundles/Quote/tests/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/Quote/tests/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/Quote/tests/_support/FunctionalTester.php b/Bundles/Quote/tests/_support/FunctionalTester.php
new file mode 100644
index 0000000..d35f21d
--- /dev/null
+++ b/Bundles/Quote/tests/_support/FunctionalTester.php
@@ -0,0 +1,30 @@
+<?php
+namespace Quote;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class FunctionalTester extends Actor
+{
+
+    use _generated\FunctionalTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/Ratepay/composer.json b/Bundles/Ratepay/composer.json
index 57aa497..0d66951 100644
--- a/Bundles/Ratepay/composer.json
+++ b/Bundles/Ratepay/composer.json
@@ -6,14 +6,10 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/checkout": "^2.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/country": "^2.0.0",
-    "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/glossary": "^2.0.0",
     "spryker/guzzle": "^2.1.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/log": "^2.0.0",
     "spryker/messenger": "^2.1.0",
@@ -27,13 +23,21 @@
     "spryker/session": "^2.1.0",
     "spryker/step-engine": "^1.2.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/transfer": "^2.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/country": "*",
+    "spryker/customer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugins you need to install spryker/installer.",
+    "spryker/cart": "If you want to use Cart plugins you need to install spryker/cart."
+  },
   "description": "Ratepay bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Ratepay/config/config.dist.php b/Bundles/Ratepay/config/config.dist.php
index 05d5ec0..46db2f0 100644
--- a/Bundles/Ratepay/config/config.dist.php
+++ b/Bundles/Ratepay/config/config.dist.php
@@ -33,7 +33,7 @@ $config[KernelConstants::DEPENDENCY_INJECTOR_ZED] = [
 
 $config[OmsConstants::PROCESS_LOCATION] = [
   OmsConfig::DEFAULT_PROCESS_LOCATION,
-  $config[ApplicationConstants::APPLICATION_SPRYKER_ROOT] . '/Ratepay/config/Zed/Oms',
+  $config[KernelConstants::SPRYKER_ROOT] . '/Ratepay/config/Zed/Oms',
 ];
 
 $config[OmsConstants::ACTIVE_PROCESSES] = [
diff --git a/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayDependencyProvider.php b/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayDependencyProvider.php
index 44434a2..bc1dd2a 100644
--- a/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayDependencyProvider.php
+++ b/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayDependencyProvider.php
@@ -8,7 +8,37 @@
 namespace Spryker\Client\Ratepay;
 
 use Spryker\Client\Kernel\AbstractDependencyProvider;
+use Spryker\Client\Kernel\Container;
 
 class RatepayDependencyProvider extends AbstractDependencyProvider
 {
+
+    const CLIENT_ZED_REQUEST = 'zed request client';
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    public function provideServiceLayerDependencies(Container $container)
+    {
+        $container = $this->addZedRequestClient($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addZedRequestClient(Container $container)
+    {
+        $container[static::CLIENT_ZED_REQUEST] = function (Container $container) {
+            return $container->getLocator()->zedRequest()->client();
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayFactory.php b/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayFactory.php
index bbd1215..9a979c5 100644
--- a/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayFactory.php
+++ b/Bundles/Ratepay/src/Spryker/Client/Ratepay/RatepayFactory.php
@@ -21,4 +21,12 @@ class RatepayFactory extends AbstractFactory
         return new RatepayStub($this->getZedRequestClient());
     }
 
+    /**
+     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    protected function getZedRequestClient()
+    {
+        return $this->getProvidedDependency(RatepayDependencyProvider::CLIENT_ZED_REQUEST);
+    }
+
 }
diff --git a/Bundles/Ratepay/src/Spryker/Client/Ratepay/Zed/RatepayStub.php b/Bundles/Ratepay/src/Spryker/Client/Ratepay/Zed/RatepayStub.php
index 5310086..bb063e7 100644
--- a/Bundles/Ratepay/src/Spryker/Client/Ratepay/Zed/RatepayStub.php
+++ b/Bundles/Ratepay/src/Spryker/Client/Ratepay/Zed/RatepayStub.php
@@ -8,7 +8,7 @@
 namespace Spryker\Client\Ratepay\Zed;
 
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Client\ZedRequest\ZedRequestClient;
+use Spryker\Client\ZedRequest\ZedRequestClientInterface;
 
 class RatepayStub implements RatepayStubInterface
 {
@@ -19,9 +19,9 @@ class RatepayStub implements RatepayStubInterface
     protected $zedRequestClient;
 
     /**
-     * @param \Spryker\Client\ZedRequest\ZedRequestClient $zedRequestClient
+     * @param \Spryker\Client\ZedRequest\ZedRequestClientInterface $zedRequestClient
      */
-    public function __construct(ZedRequestClient $zedRequestClient)
+    public function __construct(ZedRequestClientInterface $zedRequestClient)
     {
         $this->zedRequestClient = $zedRequestClient;
     }
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/DataProviderAbstract.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/DataProviderAbstract.php
index f9d21c2..f3866e8 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/DataProviderAbstract.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/DataProviderAbstract.php
@@ -8,7 +8,7 @@
 namespace Spryker\Yves\Ratepay\Form\DataProvider;
 
 use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 
 abstract class DataProviderAbstract implements StepEngineFormDataProviderInterface
@@ -25,7 +25,7 @@ abstract class DataProviderAbstract implements StepEngineFormDataProviderInterfa
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/ElvDataProvider.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/ElvDataProvider.php
index 05f6d67..79b81f3 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/ElvDataProvider.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/ElvDataProvider.php
@@ -9,15 +9,15 @@ namespace Spryker\Yves\Ratepay\Form\DataProvider;
 
 use Generated\Shared\Transfer\PaymentTransfer;
 use Generated\Shared\Transfer\RatepayPaymentElvTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class ElvDataProvider extends DataProviderAbstract
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InstallmentDataProvider.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InstallmentDataProvider.php
index 8c69b4f..8cb96a9 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InstallmentDataProvider.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InstallmentDataProvider.php
@@ -12,8 +12,8 @@ use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\RatepayPaymentInstallmentTransfer;
 use Spryker\Client\Ratepay\RatepayClientInterface;
 use Spryker\Client\Session\SessionClientInterface;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Shared\Ratepay\RatepayConstants;
-use Spryker\Shared\Transfer\AbstractTransfer;
 use Spryker\Yves\Ratepay\Form\InstallmentSubForm;
 
 class InstallmentDataProvider extends DataProviderAbstract
@@ -42,9 +42,9 @@ class InstallmentDataProvider extends DataProviderAbstract
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
@@ -61,7 +61,7 @@ class InstallmentDataProvider extends DataProviderAbstract
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InvoiceDataProvider.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InvoiceDataProvider.php
index 9768584..f667018 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InvoiceDataProvider.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/InvoiceDataProvider.php
@@ -9,15 +9,15 @@ namespace Spryker\Yves\Ratepay\Form\DataProvider;
 
 use Generated\Shared\Transfer\PaymentTransfer;
 use Generated\Shared\Transfer\RatepayPaymentInvoiceTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class InvoiceDataProvider extends DataProviderAbstract
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/PrepaymentDataProvider.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/PrepaymentDataProvider.php
index 8c24cd7..68b9974 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/PrepaymentDataProvider.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Form/DataProvider/PrepaymentDataProvider.php
@@ -9,15 +9,15 @@ namespace Spryker\Yves\Ratepay\Form\DataProvider;
 
 use Generated\Shared\Transfer\PaymentTransfer;
 use Generated\Shared\Transfer\RatepayPaymentPrepaymentTransfer;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class PrepaymentDataProvider extends DataProviderAbstract
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer
      */
     public function getData(AbstractTransfer $quoteTransfer)
     {
diff --git a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Plugin/RatepayHandlerPlugin.php b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Plugin/RatepayHandlerPlugin.php
index 8775daa..481935b 100644
--- a/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Plugin/RatepayHandlerPlugin.php
+++ b/Bundles/Ratepay/src/Spryker/Yves/Ratepay/Plugin/RatepayHandlerPlugin.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\Ratepay\Plugin;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\Kernel\AbstractPlugin;
 use Spryker\Yves\Messenger\FlashMessenger\FlashMessengerInterface;
 use Spryker\Yves\StepEngine\Dependency\Plugin\Handler\StepHandlerPluginWithMessengerInterface;
@@ -38,7 +38,7 @@ class RatepayHandlerPlugin extends AbstractPlugin implements StepHandlerPluginWi
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|\Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
      * @return \Generated\Shared\Transfer\QuoteTransfer
      */
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/MapperFactory.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/MapperFactory.php
index a5436be..adcba1a 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/MapperFactory.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/MapperFactory.php
@@ -15,7 +15,7 @@ use Generated\Shared\Transfer\RatepayPaymentInitTransfer;
 use Generated\Shared\Transfer\RatepayPaymentRequestTransfer;
 use Generated\Shared\Transfer\RatepayRequestTransfer;
 use Orm\Zed\Ratepay\Persistence\SpyPaymentRatepay;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 use Spryker\Zed\Ratepay\RatepayDependencyProvider;
 
@@ -89,7 +89,7 @@ class MapperFactory extends AbstractBusinessFactory
 
     /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentData
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentData
      *
      * @return \Spryker\Zed\Ratepay\Business\Api\Mapper\QuoteHeadMapper
      */
@@ -187,7 +187,7 @@ class MapperFactory extends AbstractBusinessFactory
     /**
      * @param \Generated\Shared\Transfer\OrderTransfer $orderTransfer
      * @param \Generated\Shared\Transfer\OrderTransfer $partialOrderTransfer
-     * @param \Spryker\Shared\Transfer\TransferInterface $ratepayPaymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $ratepayPaymentTransfer
      * @param bool $needToSendShipping
      * @param float|int $discountTaxRate
      *
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/PartialBasketMapper.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/PartialBasketMapper.php
index 391f2d4..39d6fc8 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/PartialBasketMapper.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/PartialBasketMapper.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Ratepay\Business\Api\Mapper;
 use Generated\Shared\Transfer\OrderTransfer;
 use Generated\Shared\Transfer\RatepayRequestShoppingBasketTransfer;
 use Generated\Shared\Transfer\RatepayRequestTransfer;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Zed\Ratepay\Dependency\Facade\RatepayToMoneyInterface;
 
 class PartialBasketMapper extends BaseMapper
@@ -54,7 +54,7 @@ class PartialBasketMapper extends BaseMapper
     /**
      * @param \Generated\Shared\Transfer\OrderTransfer $orderTransfer
      * @param \Generated\Shared\Transfer\OrderTransfer $partialOrderTransfer
-     * @param \Spryker\Shared\Transfer\TransferInterface $ratepayPaymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $ratepayPaymentTransfer
      * @param bool $needToSendShipping
      * @param float $discountTaxRate
      * @param \Generated\Shared\Transfer\RatepayRequestTransfer $requestTransfer
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/QuoteHeadMapper.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/QuoteHeadMapper.php
index 8156928..7dbdc68 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/QuoteHeadMapper.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Api/Mapper/QuoteHeadMapper.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Ratepay\Business\Api\Mapper;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\RatepayRequestHeadTransfer;
 use Generated\Shared\Transfer\RatepayRequestTransfer;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Zed\Ratepay\RatepayConfig;
 
 class QuoteHeadMapper extends BaseMapper
@@ -21,7 +21,7 @@ class QuoteHeadMapper extends BaseMapper
     protected $quoteTransfer;
 
     /**
-     * @var \Spryker\Shared\Transfer\TransferInterface
+     * @var \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     protected $paymentData;
 
@@ -37,7 +37,7 @@ class QuoteHeadMapper extends BaseMapper
 
     /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentData
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentData
      * @param \Spryker\Zed\Ratepay\RatepayConfig $config
      * @param \Generated\Shared\Transfer\RatepayRequestTransfer $requestTransfer
      */
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/Install.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/Install.php
index b776002..16ac0c8 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/Install.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/Install.php
@@ -8,12 +8,11 @@
 namespace Spryker\Zed\Ratepay\Business\Internal;
 
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
 use Spryker\Zed\Ratepay\Dependency\Facade\RatepayToGlossaryInterface;
 use Spryker\Zed\Ratepay\RatepayConfig;
 use Symfony\Component\Yaml\Yaml;
 
-class Install extends AbstractInstaller
+class Install implements InstallInterface
 {
 
     /**
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/InstallInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/InstallInterface.php
new file mode 100644
index 0000000..006cda5
--- /dev/null
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Internal/InstallInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Ratepay\Business\Internal;
+
+interface InstallInterface
+{
+
+    /**
+     * @return array
+     */
+    public function install();
+
+}
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayBusinessFactory.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayBusinessFactory.php
index 062db16..1e923c5 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayBusinessFactory.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayBusinessFactory.php
@@ -11,7 +11,6 @@ use Generated\Shared\Transfer\CheckoutResponseTransfer;
 use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\RatepayRequestTransfer;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 use Spryker\Zed\Ratepay\Business\Api\Adapter\Http\Guzzle;
 use Spryker\Zed\Ratepay\Business\Api\ApiFactory;
 use Spryker\Zed\Ratepay\Business\Api\Builder\BuilderFactory;
@@ -408,17 +407,14 @@ class RatepayBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
      * @return \Spryker\Zed\Ratepay\Business\Internal\Install
      */
-    public function createInstaller(MessengerInterface $messenger)
+    public function createInstaller()
     {
         $installer = new Install(
             $this->getGlossaryFacade(),
             $this->getConfig()
         );
-        $installer->setMessenger($messenger);
 
         return $installer;
     }
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacade.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacade.php
index ace9f8a..84a1435 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacade.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacade.php
@@ -1,4 +1,5 @@
 <?php
+
 /**
  * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
  * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
@@ -14,7 +15,6 @@ use Generated\Shared\Transfer\RatepayPaymentInitTransfer;
 use Generated\Shared\Transfer\RatepayPaymentRequestTransfer;
 use Generated\Shared\Transfer\RatepayResponseTransfer;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Ratepay\Business\RatepayBusinessFactory getFactory()
@@ -327,13 +327,11 @@ class RatepayFacade extends AbstractFacade implements RatepayFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface|null $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger = null)
+    public function install()
     {
-        $this->getFactory()->createInstaller($messenger)->install();
+        $this->getFactory()->createInstaller()->install();
     }
 
     /**
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacadeInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacadeInterface.php
index 65f04a0..1d0c5b6 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacadeInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/RatepayFacadeInterface.php
@@ -4,6 +4,7 @@
  * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
  * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
  */
+
 namespace Spryker\Zed\Ratepay\Business;
 
 use Generated\Shared\Transfer\CartChangeTransfer;
@@ -13,7 +14,6 @@ use Generated\Shared\Transfer\QuoteTransfer;
 use Generated\Shared\Transfer\RatepayPaymentInitTransfer;
 use Generated\Shared\Transfer\RatepayPaymentRequestTransfer;
 use Generated\Shared\Transfer\RatepayResponseTransfer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 
 /**
  * @method \Spryker\Zed\Ratepay\Business\RatepayBusinessFactory getFactory()
@@ -249,11 +249,9 @@ interface RatepayFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface|null $messenger
-     *
      * @return void
      */
-    public function install(MessengerInterface $messenger = null);
+    public function install();
 
     /**
      * Specification:
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/CancelPaymentTransaction.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/CancelPaymentTransaction.php
index c533def..9d111b0 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/CancelPaymentTransaction.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/CancelPaymentTransaction.php
@@ -20,7 +20,7 @@ class CancelPaymentTransaction extends BaseTransaction implements OrderTransacti
      * @param \Generated\Shared\Transfer\OrderTransfer|null $partialOrderTransfer
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(
         OrderTransfer $orderTransfer,
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmDeliveryTransaction.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmDeliveryTransaction.php
index aec5d1b..f6f7227 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmDeliveryTransaction.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmDeliveryTransaction.php
@@ -20,7 +20,7 @@ class ConfirmDeliveryTransaction extends BaseTransaction implements OrderTransac
      * @param \Generated\Shared\Transfer\OrderTransfer|null $partialOrderTransfer
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(
         OrderTransfer $orderTransfer,
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmPaymentTransaction.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmPaymentTransaction.php
index 642d417..2356046 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmPaymentTransaction.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/ConfirmPaymentTransaction.php
@@ -20,7 +20,7 @@ class ConfirmPaymentTransaction extends BaseTransaction implements OrderTransact
      * @param \Generated\Shared\Transfer\OrderTransfer|null $partialOrderTransfer
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(
         OrderTransfer $orderTransfer,
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/OrderTransactionInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/OrderTransactionInterface.php
index 0461b8d..7600f42 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/OrderTransactionInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/OrderTransactionInterface.php
@@ -18,7 +18,7 @@ interface OrderTransactionInterface
      * @param \Generated\Shared\Transfer\OrderTransfer|null $partialOrderTransfer
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(
         OrderTransfer $orderTransfer,
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/PaymentInitTransactionInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/PaymentInitTransactionInterface.php
index 8fa8029..df8eff2 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/PaymentInitTransactionInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/PaymentInitTransactionInterface.php
@@ -16,7 +16,7 @@ interface PaymentInitTransactionInterface
     /**
      * @param \Generated\Shared\Transfer\RatepayPaymentInitTransfer $ratepayPaymentInitTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(RatepayPaymentInitTransfer $ratepayPaymentInitTransfer);
 
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/QuoteTransactionInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/QuoteTransactionInterface.php
index 335db75..b5f025a 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/QuoteTransactionInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/QuoteTransactionInterface.php
@@ -15,7 +15,7 @@ interface QuoteTransactionInterface
     /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(QuoteTransfer $quoteTransfer);
 
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/RefundPaymentTransaction.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/RefundPaymentTransaction.php
index 52126ef..c3e3da7 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/RefundPaymentTransaction.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Handler/Transaction/RefundPaymentTransaction.php
@@ -20,7 +20,7 @@ class RefundPaymentTransaction extends BaseTransaction implements OrderTransacti
      * @param \Generated\Shared\Transfer\OrderTransfer|null $partialOrderTransfer
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function request(
         OrderTransfer $orderTransfer,
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/AbstractMethod.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/AbstractMethod.php
index 059f517..eaa76e1 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/AbstractMethod.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/AbstractMethod.php
@@ -227,7 +227,7 @@ abstract class AbstractMethod implements MethodInterface, RequestMethodInterface
     /**
      * @param \Orm\Zed\Ratepay\Persistence\SpyPaymentRatepay $payment
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getTransferObjectFromPayment($payment)
     {
@@ -240,7 +240,7 @@ abstract class AbstractMethod implements MethodInterface, RequestMethodInterface
     /**
      * @param \Orm\Zed\Ratepay\Persistence\SpyPaymentRatepay $payment
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     abstract protected function getPaymentTransferObject($payment);
 
@@ -291,7 +291,7 @@ abstract class AbstractMethod implements MethodInterface, RequestMethodInterface
     /**
      * @param \Generated\Shared\Transfer\OrderTransfer $orderTransfer
      * @param \Generated\Shared\Transfer\OrderTransfer $partialOrderTransfer
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentData
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentData
      * @param \Generated\Shared\Transfer\ItemTransfer[] $orderItems
      * @param bool $needToSendShipping
      *
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/MethodInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/MethodInterface.php
index 427abb0..01d1132 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/MethodInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Request/Payment/Method/MethodInterface.php
@@ -23,7 +23,7 @@ interface MethodInterface
     /**
      * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getPaymentData(QuoteTransfer $quoteTransfer);
 
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractor.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractor.php
index 15d9b1f..6d18809 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractor.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractor.php
@@ -31,7 +31,7 @@ class PaymentMethodExtractor implements PaymentMethodExtractorInterface
      *
      * @throws \Spryker\Zed\Ratepay\Business\Exception\NoPaymentMethodException
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|null
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|null
      */
     public function extractPaymentMethod(QuoteTransfer $quoteTransfer)
     {
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractorInterface.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractorInterface.php
index 48b5fcf..33ec8b7 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractorInterface.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Business/Service/PaymentMethodExtractorInterface.php
@@ -17,7 +17,7 @@ interface PaymentMethodExtractorInterface
      *
      * @throws \Spryker\Zed\Ratepay\Business\Exception\NoPaymentMethodException
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer|null
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer|null
      */
     public function extractPaymentMethod(QuoteTransfer $quoteTransfer);
 
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Controller/ProfileController.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Controller/ProfileController.php
index eb52e0f..002bcef 100644
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Controller/ProfileController.php
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Controller/ProfileController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Ratepay\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Ratepay\Business\RatepayFacade getFacade()
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/Installer.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/Installer.php
deleted file mode 100644
index ee785da..0000000
--- a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,27 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Ratepay\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\Ratepay\Communication\RatepayCommunicationFactory getFactory()
- * @method \Spryker\Zed\Ratepay\Business\RatepayFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install($this->messenger);
-    }
-
-}
diff --git a/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/RatepayInstallerPlugin.php b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/RatepayInstallerPlugin.php
new file mode 100644
index 0000000..93a1fd2
--- /dev/null
+++ b/Bundles/Ratepay/src/Spryker/Zed/Ratepay/Communication/Plugin/RatepayInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Ratepay\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\Ratepay\Communication\RatepayCommunicationFactory getFactory()
+ * @method \Spryker\Zed\Ratepay\Business\RatepayFacade getFacade()
+ */
+class RatepayInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/AbstractBusinessTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/AbstractBusinessTest.php
index 888b71d..f056658 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/AbstractBusinessTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/AbstractBusinessTest.php
@@ -293,14 +293,14 @@ abstract class AbstractBusinessTest extends Test
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
     abstract protected function setRatepayPaymentDataToPaymentTransfer($payment, $paymentTransfer);
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     abstract protected function getRatepayPaymentMethodTransfer();
 
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/ElvSaverTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/ElvSaverTest.php
index 860f98c..538de9a 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/ElvSaverTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/ElvSaverTest.php
@@ -48,7 +48,7 @@ class ElvSaverTest extends AbstractSaverTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InstallmentSaverTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InstallmentSaverTest.php
index 9ff36d0..ae1ff20 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InstallmentSaverTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InstallmentSaverTest.php
@@ -35,7 +35,7 @@ class InstallmentSaverTest extends AbstractSaverTest
     }
 
     /**
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getPaymentTransferFromQuote()
     {
@@ -44,7 +44,7 @@ class InstallmentSaverTest extends AbstractSaverTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InvoiceSaverTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InvoiceSaverTest.php
index 9e70dda..375ad67 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InvoiceSaverTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/InvoiceSaverTest.php
@@ -36,7 +36,7 @@ class InvoiceSaverTest extends AbstractSaverTest
     }
 
     /**
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getPaymentTransferFromQuote()
     {
@@ -45,7 +45,7 @@ class InvoiceSaverTest extends AbstractSaverTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/PrepaymentSaverTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/PrepaymentSaverTest.php
index c67d389..2e8cb00 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/PrepaymentSaverTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Order/PrepaymentSaverTest.php
@@ -45,7 +45,7 @@ class PrepaymentSaverTest extends AbstractSaverTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ConfigurationCalculation/InstallmentAbstractTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ConfigurationCalculation/InstallmentAbstractTest.php
index 7f154c2..4afd1a6 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ConfigurationCalculation/InstallmentAbstractTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ConfigurationCalculation/InstallmentAbstractTest.php
@@ -31,7 +31,7 @@ abstract class InstallmentAbstractTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ElvAbstractTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ElvAbstractTest.php
index 5805040..303ff50 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ElvAbstractTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/ElvAbstractTest.php
@@ -49,7 +49,7 @@ abstract class ElvAbstractTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InstallmentAbstractTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InstallmentAbstractTest.php
index f810329..86f606d 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InstallmentAbstractTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InstallmentAbstractTest.php
@@ -49,7 +49,7 @@ abstract class InstallmentAbstractTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InvoiceAbstractTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InvoiceAbstractTest.php
index 1a4e57e..228bf0c 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InvoiceAbstractTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/InvoiceAbstractTest.php
@@ -46,7 +46,7 @@ abstract class InvoiceAbstractTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/PrepaymentAbstractTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/PrepaymentAbstractTest.php
index 194cf4a..424383a 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/PrepaymentAbstractTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Payment/PrepaymentAbstractTest.php
@@ -46,7 +46,7 @@ abstract class PrepaymentAbstractTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
diff --git a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Service/ProfileTest.php b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Service/ProfileTest.php
index 0bf985e..1d5dd68 100644
--- a/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Service/ProfileTest.php
+++ b/Bundles/Ratepay/tests/Functional/Spryker/Zed/Ratepay/Business/Request/Service/ProfileTest.php
@@ -161,7 +161,7 @@ class ProfileTest extends AbstractFacadeTest
 
     /**
      * @param \Generated\Shared\Transfer\PaymentTransfer $payment
-     * @param \Spryker\Shared\Transfer\TransferInterface $paymentTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $paymentTransfer
      *
      * @return void
      */
@@ -170,7 +170,7 @@ class ProfileTest extends AbstractFacadeTest
     }
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     protected function getRatepayPaymentMethodTransfer()
     {
diff --git a/Bundles/Ratepay/tests/Unit/Spryker/Zed/Ratepay/Business/Api/Converter/ConverterTest.php b/Bundles/Ratepay/tests/Unit/Spryker/Zed/Ratepay/Business/Api/Converter/ConverterTest.php
index 4cd0ade..298d957 100644
--- a/Bundles/Ratepay/tests/Unit/Spryker/Zed/Ratepay/Business/Api/Converter/ConverterTest.php
+++ b/Bundles/Ratepay/tests/Unit/Spryker/Zed/Ratepay/Business/Api/Converter/ConverterTest.php
@@ -72,7 +72,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $responseTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $responseTransfer
      * @param string $className
      *
      * @return void
@@ -83,7 +83,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $responseTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $responseTransfer
      *
      * @return void
      */
@@ -108,7 +108,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     /**
      * @param string $responseXml
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getResponseTransferObject($responseXml)
     {
@@ -122,7 +122,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     /**
      * @param string $responseXml
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getResponseInstallmentConfigurationObject($responseXml)
     {
@@ -136,7 +136,7 @@ class ConverterTest extends PHPUnit_Framework_TestCase
     /**
      * @param string $responseXml
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getResponseInstallmentCalculationObject($responseXml)
     {
diff --git a/Bundles/Refund/composer.json b/Bundles/Refund/composer.json
index 2548180..d56a1d3 100644
--- a/Bundles/Refund/composer.json
+++ b/Bundles/Refund/composer.json
@@ -1,18 +1,18 @@
 {
   "name": "spryker/refund",
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/money": "^1.0.0",
-    "spryker/propel": "^2.2.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/sales-aggregator": "^1.0.0 || ^2.0.0 || ^3.0.0",
-    "spryker/symfony": "^2.0.0"
+    "spryker/symfony": "^2.0.0",
+    "spryker/util-date-time": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/testify": "*"
   },
   "description": "Refund bundle",
diff --git a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/SalesController.php b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/SalesController.php
index f839099..c1217ab 100644
--- a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/SalesController.php
+++ b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/SalesController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Refund\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/TableController.php b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/TableController.php
index f0a5bc0..4a027fb 100644
--- a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/TableController.php
+++ b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Controller/TableController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Refund\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Refund\Communication\RefundCommunicationFactory getFactory()
diff --git a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/RefundCommunicationFactory.php b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/RefundCommunicationFactory.php
index af7d35d..fae421b 100644
--- a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/RefundCommunicationFactory.php
+++ b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/RefundCommunicationFactory.php
@@ -33,11 +33,11 @@ class RefundCommunicationFactory extends AbstractCommunicationFactory
     }
 
     /**
-     * @return \Spryker\Shared\Library\DateFormatterInterface
+     * @return \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
     protected function getDateFormatter()
     {
-        return $this->getProvidedDependency(RefundDependencyProvider::DATE_FORMATTER);
+        return $this->getProvidedDependency(RefundDependencyProvider::SERVICE_DATE_TIME);
     }
 
     /**
diff --git a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Table/RefundTable.php b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Table/RefundTable.php
index ec90b53..c28defb 100644
--- a/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Table/RefundTable.php
+++ b/Bundles/Refund/src/Spryker/Zed/Refund/Communication/Table/RefundTable.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Refund\Communication\Table;
 
 use Orm\Zed\Refund\Persistence\Map\SpyRefundTableMap;
-use Spryker\Shared\Library\DateFormatterInterface;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\Refund\Dependency\Facade\RefundToMoneyInterface;
@@ -25,7 +25,7 @@ class RefundTable extends AbstractTable
     protected $refundQueryContainer;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
     protected $dateFormatter;
 
@@ -36,11 +36,14 @@ class RefundTable extends AbstractTable
 
     /**
      * @param \Spryker\Zed\Refund\Persistence\RefundQueryContainerInterface $refundQueryContainer
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $dateFormatter
      * @param \Spryker\Zed\Refund\Dependency\Facade\RefundToMoneyInterface $moneyFacade
      */
-    public function __construct(RefundQueryContainerInterface $refundQueryContainer, DateFormatterInterface $dateFormatter, RefundToMoneyInterface $moneyFacade)
-    {
+    public function __construct(
+        RefundQueryContainerInterface $refundQueryContainer,
+        UtilDateTimeServiceInterface $dateFormatter,
+        RefundToMoneyInterface $moneyFacade
+    ) {
         $this->refundQueryContainer = $refundQueryContainer;
         $this->dateFormatter = $dateFormatter;
         $this->moneyFacade = $moneyFacade;
@@ -130,7 +133,7 @@ class RefundTable extends AbstractTable
      */
     protected function formatDate($date)
     {
-        return $this->dateFormatter->dateTime($date);
+        return $this->dateFormatter->formatDateTime($date);
     }
 
 }
diff --git a/Bundles/Refund/src/Spryker/Zed/Refund/RefundDependencyProvider.php b/Bundles/Refund/src/Spryker/Zed/Refund/RefundDependencyProvider.php
index b335620..b2153fb 100644
--- a/Bundles/Refund/src/Spryker/Zed/Refund/RefundDependencyProvider.php
+++ b/Bundles/Refund/src/Spryker/Zed/Refund/RefundDependencyProvider.php
@@ -7,8 +7,6 @@
 
 namespace Spryker\Zed\Refund;
 
-use Spryker\Shared\Library\Context;
-use Spryker\Shared\Library\DateFormatter;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Refund\Communication\Plugin\RefundableExpenseAmountCalculatorPlugin;
@@ -24,7 +22,7 @@ class RefundDependencyProvider extends AbstractBundleDependencyProvider
     const QUERY_CONTAINER_SALES = 'sales query container';
     const PLUGIN_ITEM_REFUND_CALCULATOR = 'item refund calculator plugin';
     const PLUGIN_EXPENSE_REFUND_CALCULATOR = 'expense refund calculator plugin';
-    const DATE_FORMATTER = 'date formatter';
+    const SERVICE_DATE_TIME = 'date formatter';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -131,8 +129,8 @@ class RefundDependencyProvider extends AbstractBundleDependencyProvider
      */
     protected function addDateFormatter(Container $container)
     {
-        $container[static::DATE_FORMATTER] = function () {
-            return new DateFormatter(Context::getInstance(Context::CONTEXT_ZED));
+        $container[static::SERVICE_DATE_TIME] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
         return $container;
diff --git a/Bundles/Refund/tests/Unit/Spryker/Zed/Refund/RefundDependencyProviderTest.php b/Bundles/Refund/tests/Unit/Spryker/Zed/Refund/RefundDependencyProviderTest.php
index cccfe25..5e5f27c 100644
--- a/Bundles/Refund/tests/Unit/Spryker/Zed/Refund/RefundDependencyProviderTest.php
+++ b/Bundles/Refund/tests/Unit/Spryker/Zed/Refund/RefundDependencyProviderTest.php
@@ -8,7 +8,7 @@
 namespace Unit\Spryker\Zed\Refund;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Library\DateFormatterInterface;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Refund\Dependency\Facade\RefundToMoneyBridge;
 use Spryker\Zed\Refund\Dependency\Facade\RefundToSalesAggregatorBridge;
@@ -81,7 +81,7 @@ class RefundDependencyProviderTest extends PHPUnit_Framework_TestCase
     /**
      * @return void
      */
-    public function testProvideCommunicationLayerDependenciesShouldAddCurrencyManager()
+    public function testProvideCommunicationLayerDependenciesShouldAddRefundToMoneyBridge()
     {
         $refundDependencyProvider = new RefundDependencyProvider();
         $container = new Container();
@@ -100,8 +100,8 @@ class RefundDependencyProviderTest extends PHPUnit_Framework_TestCase
         $container = new Container();
         $container = $refundDependencyProvider->provideCommunicationLayerDependencies($container);
 
-        $this->assertArrayHasKey(RefundDependencyProvider::DATE_FORMATTER, $container);
-        $this->assertInstanceOf(DateFormatterInterface::class, $container[RefundDependencyProvider::DATE_FORMATTER]);
+        $this->assertArrayHasKey(RefundDependencyProvider::SERVICE_DATE_TIME, $container);
+        $this->assertInstanceOf(UtilDateTimeServiceInterface::class, $container[RefundDependencyProvider::SERVICE_DATE_TIME]);
     }
 
 }
diff --git a/Bundles/Refund/tests/_support/FunctionalTester.php b/Bundles/Refund/tests/_support/FunctionalTester.php
deleted file mode 100644
index 485b355..0000000
--- a/Bundles/Refund/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Refund;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Refund/tests/_support/Module/Functional.php b/Bundles/Refund/tests/_support/Module/Functional.php
deleted file mode 100644
index d866652..0000000
--- a/Bundles/Refund/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Refund\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Sales/composer.json b/Bundles/Sales/composer.json
index f9d9bdb..2737a30 100644
--- a/Bundles/Sales/composer.json
+++ b/Bundles/Sales/composer.json
@@ -9,30 +9,35 @@
     }
   },
   "require": {
-    "spryker/application": "^2.4.4",
     "spryker/country": "^2.0.0",
     "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.8.0",
-    "spryker/library": "^2.0.0",
     "spryker/locale": "^2.0.0",
     "spryker/money": "^1.0.0",
     "spryker/oms": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
     "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales-aggregator": "^1.0.0 || ^2.0.0 || ^3.0.0",
     "spryker/sales-split": "^1.0.3 || ^2.0.0",
     "spryker/sequence-number": "^2.0.0",
-    "spryker/shipment": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/url": "^2.0.0",
     "spryker/util-sanitize": "^1.0.0",
     "spryker/user": "^2.0.0",
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-sanitize": "^1.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/shipment": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Sales bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/CommentController.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/CommentController.php
index 517ab12..598628c 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/CommentController.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/CommentController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Sales\Communication\Controller;
 
 use Generated\Shared\Transfer\CommentTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\Sales\SalesConfig;
 use Symfony\Component\Form\FormInterface;
 use Symfony\Component\HttpFoundation\Request;
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/DetailController.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/DetailController.php
index 531542d..a83e4ec 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/DetailController.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/DetailController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Sales\Communication\Controller;
 
 use Generated\Shared\Transfer\OrderTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\Sales\SalesConfig;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -106,4 +106,28 @@ class DetailController extends AbstractController
         return $responseData;
     }
 
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $request
+     * @param string $blockUrl
+     *
+     * @return string|\Symfony\Component\HttpFoundation\RedirectResponse
+     */
+    protected function handleSubRequest(Request $request, $blockUrl)
+    {
+        $blockResponse = $this->getSubRequestHandler()->handleSubRequest($request, $blockUrl);
+        if ($blockResponse instanceof RedirectResponse) {
+            return $blockResponse;
+        }
+
+        return $blockResponse->getContent();
+    }
+
+    /**
+     * @return \Spryker\Zed\Application\Business\Model\Request\SubRequestHandlerInterface
+     */
+    protected function getSubRequestHandler()
+    {
+        return $this->getApplication()['sub_request'];
+    }
+
 }
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/EditController.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/EditController.php
index 781b82d..0884172 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/EditController.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/EditController.php
@@ -9,8 +9,8 @@ namespace Spryker\Zed\Sales\Communication\Controller;
 
 use Generated\Shared\Transfer\AddressTransfer;
 use Generated\Shared\Transfer\OrderTransfer;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\Sales\SalesConfig;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/IndexController.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/IndexController.php
index 7c77213..3e45b55 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/IndexController.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Sales\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Sales\Communication\SalesCommunicationFactory getFactory()
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/MatrixController.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/MatrixController.php
index 57b142b..c86c0df 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/MatrixController.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Controller/MatrixController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Sales\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Sales\Communication\SalesCommunicationFactory getFactory()
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/SalesCommunicationFactory.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/SalesCommunicationFactory.php
index be24798..3176aa0 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/SalesCommunicationFactory.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/SalesCommunicationFactory.php
@@ -100,9 +100,9 @@ class SalesCommunicationFactory extends AbstractCommunicationFactory
         return new OrdersTable(
             $this->createOrdersTableQueryBuilder(),
             $this->getSalesAggregator(),
-            $this->getProvidedDependency(SalesDependencyProvider::SERVICE_DATE_FORMATTER),
             $this->getProvidedDependency(SalesDependencyProvider::FACADE_MONEY),
-            $this->getProvidedDependency(SalesDependencyProvider::SERVICE_UTIL_SANITIZE)
+            $this->getProvidedDependency(SalesDependencyProvider::SERVICE_UTIL_SANITIZE),
+            $this->getProvidedDependency(SalesDependencyProvider::SERVICE_DATE_FORMATTER)
         );
     }
 
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTable.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTable.php
index 65e6cf9..0a827e3 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTable.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTable.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\Sales\Communication\Table;
 
 use Orm\Zed\Sales\Persistence\Map\SpySalesOrderTableMap;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\Sales\Dependency\Facade\SalesToMoneyInterface;
@@ -40,9 +40,9 @@ class OrdersTable extends AbstractTable
     protected $salesAggregatorFacade;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @var \Spryker\Zed\Sales\Dependency\Facade\SalesToMoneyInterface
@@ -57,22 +57,22 @@ class OrdersTable extends AbstractTable
     /**
      * @param \Spryker\Zed\Sales\Communication\Table\OrdersTableQueryBuilderInterface $queryBuilder
      * @param \Spryker\Zed\Sales\Dependency\Facade\SalesToSalesAggregatorInterface $salesAggregatorFacade
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
      * @param \Spryker\Zed\Sales\Dependency\Facade\SalesToMoneyInterface $moneyFacade
      * @param \Spryker\Zed\Sales\Dependency\Service\SalesToUtilSanitizeInterface $sanitizeService
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
     public function __construct(
         OrdersTableQueryBuilderInterface $queryBuilder,
         SalesToSalesAggregatorInterface $salesAggregatorFacade,
-        DateFormatterInterface $dateFormatter,
         SalesToMoneyInterface $moneyFacade,
-        SalesToUtilSanitizeInterface $sanitizeService
+        SalesToUtilSanitizeInterface $sanitizeService,
+        UtilDateTimeServiceInterface $utilDateTimeService
     ) {
         $this->queryBuilder = $queryBuilder;
         $this->salesAggregatorFacade = $salesAggregatorFacade;
-        $this->dateFormatter = $dateFormatter;
         $this->moneyFacade = $moneyFacade;
         $this->sanitizeService = $sanitizeService;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -113,7 +113,7 @@ class OrdersTable extends AbstractTable
             $results[] = [
                 SpySalesOrderTableMap::COL_ID_SALES_ORDER => $item[SpySalesOrderTableMap::COL_ID_SALES_ORDER],
                 SpySalesOrderTableMap::COL_ORDER_REFERENCE => $item[SpySalesOrderTableMap::COL_ORDER_REFERENCE],
-                SpySalesOrderTableMap::COL_CREATED_AT => $this->dateFormatter->dateTime($item[SpySalesOrderTableMap::COL_CREATED_AT]),
+                SpySalesOrderTableMap::COL_CREATED_AT => $this->utilDateTimeService->formatDateTime($item[SpySalesOrderTableMap::COL_CREATED_AT]),
                 SpySalesOrderTableMap::COL_FK_CUSTOMER => $this->formatCustomer($item),
                 SpySalesOrderTableMap::COL_EMAIL => $this->formatEmailAddress($item[SpySalesOrderTableMap::COL_EMAIL]),
                 static::ITEM_STATE_NAMES_CSV => $this->groupItemStateNames($item[OrdersTableQueryBuilder::FIELD_ITEM_STATE_NAMES_CSV]),
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTableQueryBuilder.php b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTableQueryBuilder.php
index 2c35936..8f55f0b 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTableQueryBuilder.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/Communication/Table/OrdersTableQueryBuilder.php
@@ -10,7 +10,7 @@ namespace Spryker\Zed\Sales\Communication\Table;
 use DateTime;
 use Orm\Zed\Sales\Persistence\SpySalesOrderQuery;
 use Propel\Runtime\ActiveQuery\Criteria;
-use Spryker\Zed\Propel\Business\Runtime\ActiveQuery\Criteria as SprykerCriteria;
+use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria as SprykerCriteria;
 
 class OrdersTableQueryBuilder implements OrdersTableQueryBuilderInterface
 {
diff --git a/Bundles/Sales/src/Spryker/Zed/Sales/SalesDependencyProvider.php b/Bundles/Sales/src/Spryker/Zed/Sales/SalesDependencyProvider.php
index 180342c..ecb4e50 100644
--- a/Bundles/Sales/src/Spryker/Zed/Sales/SalesDependencyProvider.php
+++ b/Bundles/Sales/src/Spryker/Zed/Sales/SalesDependencyProvider.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Sales;
 
 use Spryker\Shared\Kernel\Store;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Sales\Dependency\Facade\SalesToCountryBridge;
@@ -164,8 +163,8 @@ class SalesDependencyProvider extends AbstractBundleDependencyProvider
      */
     protected function addDateTimeFormatter(Container $container)
     {
-        $container[static::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        $container[static::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
         return $container;
diff --git a/Bundles/SalesAggregator/composer.json b/Bundles/SalesAggregator/composer.json
index 41a75f6..e578999 100644
--- a/Bundles/SalesAggregator/composer.json
+++ b/Bundles/SalesAggregator/composer.json
@@ -6,18 +6,20 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/product-option": "^3.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/tax": "^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "^2.0.0",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "SalesAggregator bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/SalesAggregator/dependency.json b/Bundles/SalesAggregator/dependency.json
deleted file mode 100644
index 01b89b2..0000000
--- a/Bundles/SalesAggregator/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-    "ProductOption": "Required by templates"
-  },
-  "exclude": {
-  }
-}
diff --git a/Bundles/SalesAggregator/src/Spryker/Zed/SalesAggregator/Communication/Controller/SalesController.php b/Bundles/SalesAggregator/src/Spryker/Zed/SalesAggregator/Communication/Controller/SalesController.php
index 385dd86..8581bff 100644
--- a/Bundles/SalesAggregator/src/Spryker/Zed/SalesAggregator/Communication/Controller/SalesController.php
+++ b/Bundles/SalesAggregator/src/Spryker/Zed/SalesAggregator/Communication/Controller/SalesController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\SalesAggregator\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 class SalesController extends AbstractController
diff --git a/Bundles/SalesAggregator/tests/Functional.suite.yml b/Bundles/SalesAggregator/tests/Functional.suite.yml
deleted file mode 100644
index 0014ed2..0000000
--- a/Bundles/SalesAggregator/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \SalesAggregator\Module\Functional
diff --git a/Bundles/SalesAggregator/tests/Functional/_bootstrap.php b/Bundles/SalesAggregator/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/SalesAggregator/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/SalesAggregator/tests/_support/FunctionalTester.php b/Bundles/SalesAggregator/tests/_support/FunctionalTester.php
deleted file mode 100644
index e8e7b7b..0000000
--- a/Bundles/SalesAggregator/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace SalesAggregator;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/SalesAggregator/tests/_support/Module/Functional.php b/Bundles/SalesAggregator/tests/_support/Module/Functional.php
deleted file mode 100644
index 91cc9f7..0000000
--- a/Bundles/SalesAggregator/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace SalesAggregator\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/SalesSplit/composer.json b/Bundles/SalesSplit/composer.json
index 0c65adc..da63fe0 100644
--- a/Bundles/SalesSplit/composer.json
+++ b/Bundles/SalesSplit/composer.json
@@ -6,14 +6,14 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/symfony": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "^2.0.0",
     "spryker/testify": "*"
   },
   "description": "SalesSplit bundle",
diff --git a/Bundles/SalesSplit/src/Spryker/Zed/SalesSplit/Communication/Controller/OrderItemSplitController.php b/Bundles/SalesSplit/src/Spryker/Zed/SalesSplit/Communication/Controller/OrderItemSplitController.php
index 4484288..be8fc3b 100644
--- a/Bundles/SalesSplit/src/Spryker/Zed/SalesSplit/Communication/Controller/OrderItemSplitController.php
+++ b/Bundles/SalesSplit/src/Spryker/Zed/SalesSplit/Communication/Controller/OrderItemSplitController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\SalesSplit\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\SalesSplit\Communication\Form\OrderItemSplitForm;
 use Symfony\Component\HttpFoundation\Request;
 
diff --git a/Bundles/SalesSplit/tests/Functional.suite.yml b/Bundles/SalesSplit/tests/Functional.suite.yml
deleted file mode 100644
index 2466d81..0000000
--- a/Bundles/SalesSplit/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \SalesSplit\Module\Functional
diff --git a/Bundles/SalesSplit/tests/Functional/_bootstrap.php b/Bundles/SalesSplit/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/SalesSplit/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/SalesSplit/tests/_support/FunctionalTester.php b/Bundles/SalesSplit/tests/_support/FunctionalTester.php
deleted file mode 100644
index 50d98f0..0000000
--- a/Bundles/SalesSplit/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace SalesSplit;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/SalesSplit/tests/_support/Module/Functional.php b/Bundles/SalesSplit/tests/_support/Module/Functional.php
deleted file mode 100644
index 02fc0c1..0000000
--- a/Bundles/SalesSplit/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace SalesSplit\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Search/composer.json b/Bundles/Search/composer.json
index 4655e05..d4b28d4 100644
--- a/Bundles/Search/composer.json
+++ b/Bundles/Search/composer.json
@@ -6,21 +6,22 @@
     }
   },
   "require": {
-    "spryker/application": "^2.3.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/elastica": "^3.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.4.0",
-    "spryker/messenger": "^2.0.0",
+    "spryker/log": "^2.0.0",
     "spryker/money": "^1.0.0",
+    "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/twig": "^2.1.0",
-    "spryker/zend": "^2.0.0"
+    "spryker/zend": "^2.0.0",
+    "spryker/util-encoding": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
     "spryker/testify": "*"
   },
   "description": "Search bundle",
diff --git a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/AggregationExtractorInterface.php b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/AggregationExtractorInterface.php
index 7495089..1bcbbfc 100644
--- a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/AggregationExtractorInterface.php
+++ b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/AggregationExtractorInterface.php
@@ -18,7 +18,7 @@ interface AggregationExtractorInterface
      * @param array $aggregations
      * @param array $requestParameters
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function extractDataFromAggregations(array $aggregations, array $requestParameters);
 
diff --git a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/CategoryExtractor.php b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/CategoryExtractor.php
index d89fc40..2e1b0c3 100644
--- a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/CategoryExtractor.php
+++ b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/CategoryExtractor.php
@@ -32,7 +32,7 @@ class CategoryExtractor implements AggregationExtractorInterface
      * @param array $aggregations
      * @param array $requestParameters
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function extractDataFromAggregations(array $aggregations, array $requestParameters)
     {
diff --git a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/FacetExtractor.php b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/FacetExtractor.php
index e1d93d5..d92cce1 100644
--- a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/FacetExtractor.php
+++ b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/FacetExtractor.php
@@ -33,7 +33,7 @@ class FacetExtractor implements AggregationExtractorInterface
      * @param array $aggregations
      * @param array $requestParameters
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function extractDataFromAggregations(array $aggregations, array $requestParameters)
     {
diff --git a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/PriceRangeExtractor.php b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/PriceRangeExtractor.php
index 7ddf654..37b487e 100644
--- a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/PriceRangeExtractor.php
+++ b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/PriceRangeExtractor.php
@@ -33,7 +33,7 @@ class PriceRangeExtractor extends RangeExtractor
      * @param array $aggregations
      * @param array $requestParameters
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function extractDataFromAggregations(array $aggregations, array $requestParameters)
     {
diff --git a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/RangeExtractor.php b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/RangeExtractor.php
index a5a8c35..b604803 100644
--- a/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/RangeExtractor.php
+++ b/Bundles/Search/src/Spryker/Client/Search/Model/Elasticsearch/AggregationExtractor/RangeExtractor.php
@@ -31,7 +31,7 @@ class RangeExtractor implements AggregationExtractorInterface
      * @param array $aggregations
      * @param array $requestParameters
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function extractDataFromAggregations(array $aggregations, array $requestParameters)
     {
diff --git a/Bundles/Search/src/Spryker/Client/Search/SearchClientFactoryTrait.php b/Bundles/Search/src/Spryker/Client/Search/SearchClientFactoryTrait.php
new file mode 100644
index 0000000..b3efc4e
--- /dev/null
+++ b/Bundles/Search/src/Spryker/Client/Search/SearchClientFactoryTrait.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Search;
+
+use Spryker\Client\Search\ServiceProvider\SearchClientServiceProvider;
+
+trait SearchClientFactoryTrait
+{
+
+    /**
+     * @return \Spryker\Client\Search\SearchClientInterface
+     */
+    public function getSearchClient()
+    {
+        return $this->getProvidedDependency(SearchClientServiceProvider::CLIENT_SEARCH);
+    }
+
+    /**
+     * @param string $key
+     *
+     * @throws \Spryker\Client\Kernel\Exception\Container\ContainerKeyNotFoundException
+     *
+     * @return mixed
+     */
+    abstract public function getProvidedDependency($key);
+
+}
diff --git a/Bundles/Search/src/Spryker/Client/Search/ServiceProvider/SearchClientServiceProvider.php b/Bundles/Search/src/Spryker/Client/Search/ServiceProvider/SearchClientServiceProvider.php
new file mode 100644
index 0000000..0a44290
--- /dev/null
+++ b/Bundles/Search/src/Spryker/Client/Search/ServiceProvider/SearchClientServiceProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Search\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Client\Kernel\Container;
+use Spryker\Shared\Kernel\ContainerGlobals;
+
+class SearchClientServiceProvider implements ServiceProviderInterface
+{
+
+    const CLIENT_SEARCH = 'search client';
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $containerGlobals = new ContainerGlobals();
+        $containerGlobals[static::CLIENT_SEARCH] = function () {
+            $container = new Container();
+
+            return $container->getLocator()->search()->client();
+        };
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstaller.php b/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstaller.php
index 1e394c5..8441dfe 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstaller.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstaller.php
@@ -11,7 +11,7 @@ use Elastica\Client;
 use Elastica\Index;
 use Elastica\Type\Mapping;
 use Generated\Shared\Transfer\ElasticsearchIndexDefinitionTransfer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\IndexDefinitionLoaderInterface;
 use Spryker\Zed\Search\Business\Model\SearchInstallerInterface;
 
@@ -29,16 +29,16 @@ class IndexInstaller implements SearchInstallerInterface
     protected $elasticaClient;
 
     /**
-     * @var \Spryker\Zed\Messenger\Business\Model\MessengerInterface
+     * @var \Psr\Log\LoggerInterface
      */
     protected $messenger;
 
     /**
      * @param \Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\IndexDefinitionLoaderInterface $indexDefinitionLoader
      * @param \Elastica\Client $elasticaClient
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      */
-    public function __construct(IndexDefinitionLoaderInterface $indexDefinitionLoader, Client $elasticaClient, MessengerInterface $messenger)
+    public function __construct(IndexDefinitionLoaderInterface $indexDefinitionLoader, Client $elasticaClient, LoggerInterface $messenger)
     {
         $this->indexDefinitionLoader = $indexDefinitionLoader;
         $this->elasticaClient = $elasticaClient;
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexMapInstaller.php b/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexMapInstaller.php
index f43dd00..43abdad 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexMapInstaller.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexMapInstaller.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Search\Business\Model\Elasticsearch;
 
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\IndexDefinitionLoaderInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Generator\IndexMapCleanerInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Generator\IndexMapGeneratorInterface;
@@ -32,7 +32,7 @@ class IndexMapInstaller implements SearchInstallerInterface
     protected $indexMapGenerator;
 
     /**
-     * @var \Spryker\Zed\Messenger\Business\Model\MessengerInterface
+     * @var \Psr\Log\LoggerInterface
      */
     protected $messenger;
 
@@ -40,13 +40,13 @@ class IndexMapInstaller implements SearchInstallerInterface
      * @param \Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\IndexDefinitionLoaderInterface $indexDefinitionLoader
      * @param \Spryker\Zed\Search\Business\Model\Elasticsearch\Generator\IndexMapCleanerInterface $indexMapCleaner
      * @param \Spryker\Zed\Search\Business\Model\Elasticsearch\Generator\IndexMapGeneratorInterface $indexMapGenerator
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      */
     public function __construct(
         IndexDefinitionLoaderInterface $indexDefinitionLoader,
         IndexMapCleanerInterface $indexMapCleaner,
         IndexMapGeneratorInterface $indexMapGenerator,
-        MessengerInterface $messenger
+        LoggerInterface $messenger
     ) {
         $this->indexDefinitionLoader = $indexDefinitionLoader;
         $this->indexMapCleaner = $indexMapCleaner;
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchBusinessFactory.php b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchBusinessFactory.php
index 80712c9..ff32f4d 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchBusinessFactory.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchBusinessFactory.php
@@ -7,11 +7,11 @@
 
 namespace Spryker\Zed\Search\Business;
 
+use Psr\Log\LoggerInterface;
 use Spryker\Client\Search\Provider\IndexClientProvider;
 use Spryker\Client\Search\Provider\SearchClientProvider;
 use Spryker\Shared\Kernel\Store;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\DataMapper\PageDataMapper;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\DataMapper\PageMapBuilder;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\JsonIndexDefinitionLoader;
@@ -31,11 +31,11 @@ class SearchBusinessFactory extends AbstractBusinessFactory
 {
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return \Spryker\Zed\Search\Business\Model\SearchInstallerInterface
      */
-    public function createSearchInstaller(MessengerInterface $messenger)
+    public function createSearchInstaller(LoggerInterface $messenger)
     {
         return new SearchInstaller($this->getSearchInstallerStack($messenger));
     }
@@ -62,11 +62,11 @@ class SearchBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return \Spryker\Zed\Search\Business\Model\SearchInstallerInterface[]
      */
-    protected function getSearchInstallerStack(MessengerInterface $messenger)
+    protected function getSearchInstallerStack(LoggerInterface $messenger)
     {
         return [
             $this->createElasticsearchIndexInstaller($messenger),
@@ -75,11 +75,11 @@ class SearchBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return \Spryker\Zed\Search\Business\Model\SearchInstallerInterface
      */
-    protected function createElasticsearchIndexInstaller(MessengerInterface $messenger)
+    protected function createElasticsearchIndexInstaller(LoggerInterface $messenger)
     {
         return new IndexInstaller(
             $this->createJsonIndexDefinitionLoader(),
@@ -89,11 +89,11 @@ class SearchBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return \Spryker\Zed\Search\Business\Model\SearchInstallerInterface
      */
-    public function createIndexMapInstaller(MessengerInterface $messenger)
+    public function createIndexMapInstaller(LoggerInterface $messenger)
     {
         return new IndexMapInstaller(
             $this->createJsonIndexDefinitionLoader(),
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacade.php b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacade.php
index 8caa1ed..4db5c01 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacade.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacade.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\Search\Business;
 
 use Generated\Shared\Transfer\LocaleTransfer;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
 use Spryker\Zed\Search\Dependency\Plugin\PageMapInterface;
 
 /**
@@ -23,11 +23,11 @@ class SearchFacade extends AbstractFacade implements SearchFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return void
      */
-    public function install(MessengerInterface $messenger)
+    public function install(LoggerInterface $messenger)
     {
         $this
             ->getFactory()
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacadeInterface.php b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacadeInterface.php
index 2410fd6..917fe45 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacadeInterface.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Business/SearchFacadeInterface.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Search\Business;
 
 use Generated\Shared\Transfer\LocaleTransfer;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Search\Dependency\Plugin\PageMapInterface;
 
 interface SearchFacadeInterface
@@ -26,11 +26,11 @@ interface SearchFacadeInterface
      *
      * @api
      *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
+     * @param \Psr\Log\LoggerInterface $messenger
      *
      * @return void
      */
-    public function install(MessengerInterface $messenger);
+    public function install(LoggerInterface $messenger);
 
     /**
      * Specification:
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/GenerateIndexMapConsole.php b/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/GenerateIndexMapConsole.php
index 2c39b58..ad53d35 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/GenerateIndexMapConsole.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/GenerateIndexMapConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Search\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/SearchConsole.php b/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/SearchConsole.php
index dc187bf..65747d7 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/SearchConsole.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Communication/Console/SearchConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Search\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Communication/Controller/MaintenanceController.php b/Bundles/Search/src/Spryker/Zed/Search/Communication/Controller/MaintenanceController.php
index 73197c3..2e7e420 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Communication/Controller/MaintenanceController.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Communication/Controller/MaintenanceController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Search\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -32,16 +32,6 @@ class MaintenanceController extends AbstractController
     }
 
     /**
-     * @return \Symfony\Component\HttpFoundation\RedirectResponse
-     */
-    public function dropTimestampsAction()
-    {
-        $this->getFactory()->getCollectorFacade()->deleteSearchTimestamps();
-
-        return $this->redirectResponse(self::URL_SEARCH_MAINTENANCE);
-    }
-
-    /**
      * @return array
      */
     public function listAction()
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Communication/SearchCommunicationFactory.php b/Bundles/Search/src/Spryker/Zed/Search/Communication/SearchCommunicationFactory.php
index 78db37a..0ce1053 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Communication/SearchCommunicationFactory.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/Communication/SearchCommunicationFactory.php
@@ -9,7 +9,6 @@ namespace Spryker\Zed\Search\Communication;
 
 use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
 use Spryker\Zed\Search\Communication\Table\SearchTable;
-use Spryker\Zed\Search\SearchDependencyProvider;
 
 /**
  * @method \Spryker\Zed\Search\SearchConfig getConfig()
@@ -27,14 +26,6 @@ class SearchCommunicationFactory extends AbstractCommunicationFactory
     }
 
     /**
-     * @return \Spryker\Zed\Search\Dependency\Facade\SearchToCollectorInterface
-     */
-    public function getCollectorFacade()
-    {
-        return $this->getProvidedDependency(SearchDependencyProvider::FACADE_COLLECTOR);
-    }
-
-    /**
      * @return string
      */
     public function getElasticaDocumentType()
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorBridge.php b/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorBridge.php
deleted file mode 100644
index 349de03..0000000
--- a/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorBridge.php
+++ /dev/null
@@ -1,36 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Search\Dependency\Facade;
-
-class SearchToCollectorBridge implements SearchToCollectorInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Collector\Business\CollectorFacadeInterface
-     */
-    protected $collectorFacade;
-
-    /**
-     * @param \Spryker\Zed\Collector\Business\CollectorFacadeInterface $collectorFacade
-     */
-    public function __construct($collectorFacade)
-    {
-        $this->collectorFacade = $collectorFacade;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return bool
-     */
-    public function deleteSearchTimestamps(array $keys = [])
-    {
-        return $this->collectorFacade->deleteSearchTimestamps($keys);
-    }
-
-}
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorInterface.php b/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorInterface.php
deleted file mode 100644
index 209f6c8..0000000
--- a/Bundles/Search/src/Spryker/Zed/Search/Dependency/Facade/SearchToCollectorInterface.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Search\Dependency\Facade;
-
-interface SearchToCollectorInterface
-{
-
-    /**
-     * @param array $keys
-     *
-     * @return bool
-     */
-    public function deleteSearchTimestamps(array $keys = []);
-
-}
diff --git a/Bundles/Search/src/Spryker/Zed/Search/Presentation/Maintenance/index.twig b/Bundles/Search/src/Spryker/Zed/Search/Presentation/Maintenance/index.twig
index b65cb83..6eaeffc 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/Presentation/Maintenance/index.twig
+++ b/Bundles/Search/src/Spryker/Zed/Search/Presentation/Maintenance/index.twig
@@ -28,7 +28,7 @@
                         {% endfor %}
                         <tr>
                             <th></th>
-                            <td><a href="/search/maintenance/drop-timestamps">{{ "Drop timestamps" | trans }}</a></td>
+                            <td><a href="/collector-search-connector/maintenance/drop-timestamps">{{ "Drop timestamps" | trans }}</a></td>
                         </tr>
                     </table>
                 </div>
diff --git a/Bundles/Search/src/Spryker/Zed/Search/SearchDependencyProvider.php b/Bundles/Search/src/Spryker/Zed/Search/SearchDependencyProvider.php
index d458166..5daccd5 100644
--- a/Bundles/Search/src/Spryker/Zed/Search/SearchDependencyProvider.php
+++ b/Bundles/Search/src/Spryker/Zed/Search/SearchDependencyProvider.php
@@ -9,14 +9,12 @@ namespace Spryker\Zed\Search;
 
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Search\Dependency\Facade\SearchToCollectorBridge;
 use Spryker\Zed\Search\Dependency\Service\SearchToUtilEncodingBridge;
 
 class SearchDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const CLIENT_SEARCH = 'search client';
-    const FACADE_COLLECTOR = 'collector facade';
     const SERVICE_UTIL_ENCODING = 'util encoding service';
 
     /**
@@ -35,18 +33,6 @@ class SearchDependencyProvider extends AbstractBundleDependencyProvider
     /**
      * @param \Spryker\Zed\Kernel\Container $container
      *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    public function provideCommunicationLayerDependencies(Container $container)
-    {
-        $this->addCollectorFacade($container);
-
-        return $container;
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
      * @return void
      */
     protected function addSearchClient(Container $container)
@@ -61,18 +47,6 @@ class SearchDependencyProvider extends AbstractBundleDependencyProvider
      *
      * @return void
      */
-    protected function addCollectorFacade(Container $container)
-    {
-        $container[self::FACADE_COLLECTOR] = function (Container $container) {
-            return new SearchToCollectorBridge($container->getLocator()->collector()->facade());
-        };
-    }
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return void
-     */
     protected function addUtilEncodingFacade(Container $container)
     {
         $container[self::SERVICE_UTIL_ENCODING] = function (Container $container) {
diff --git a/Bundles/Search/tests/Unit/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstallerTest.php b/Bundles/Search/tests/Unit/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstallerTest.php
index 8e3e381..703e917 100644
--- a/Bundles/Search/tests/Unit/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstallerTest.php
+++ b/Bundles/Search/tests/Unit/Spryker/Zed/Search/Business/Model/Elasticsearch/IndexInstallerTest.php
@@ -11,7 +11,7 @@ use Elastica\Client;
 use Elastica\Index;
 use Generated\Shared\Transfer\ElasticsearchIndexDefinitionTransfer;
 use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\Definition\IndexDefinitionLoaderInterface;
 use Spryker\Zed\Search\Business\Model\Elasticsearch\IndexInstaller;
 
@@ -121,11 +121,11 @@ class IndexInstallerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockBuilder|\Spryker\Zed\Messenger\Business\Model\MessengerInterface
+     * @return \PHPUnit_Framework_MockObject_MockBuilder|\Psr\Log\LoggerInterface
      */
     protected function createMessengerMock()
     {
-        $messengerMock = $this->getMockBuilder(MessengerInterface::class)
+        $messengerMock = $this->getMockBuilder(LoggerInterface::class)
             ->disableOriginalConstructor()
             ->getMock();
 
diff --git a/Bundles/SequenceNumber/composer.json b/Bundles/SequenceNumber/composer.json
index 4ea6c9c..2dc3d08 100644
--- a/Bundles/SequenceNumber/composer.json
+++ b/Bundles/SequenceNumber/composer.json
@@ -7,10 +7,12 @@
   },
   "require": {
     "spryker/kernel": "^2.0.0",
-    "spryker/propel": "^2.0.0"
+    "spryker/propel-orm": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "SequenceNumber bundle",
diff --git a/Bundles/Session/composer.json b/Bundles/Session/composer.json
index 053c9ff..e08628f 100644
--- a/Bundles/Session/composer.json
+++ b/Bundles/Session/composer.json
@@ -6,14 +6,11 @@
     }
   },
   "require": {
-    "spryker/application": "^2.3.0",
     "spryker/config": "^2.2.1",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/new-relic": "^2.1.0",
+    "spryker/new-relic-api": "^1.0.0",
     "spryker/redis": "^2.0.0",
     "spryker/silex": "^2.0.0",
-    "spryker/storage": "^2.0.0",
     "spryker/symfony": "^2.0.0"
   },
   "require-dev": {
diff --git a/Bundles/Session/src/Spryker/Client/Session/ServiceProvider/SessionClientServiceProvider.php b/Bundles/Session/src/Spryker/Client/Session/ServiceProvider/SessionClientServiceProvider.php
new file mode 100644
index 0000000..4b6eaeb
--- /dev/null
+++ b/Bundles/Session/src/Spryker/Client/Session/ServiceProvider/SessionClientServiceProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Session\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Client\Kernel\Container;
+use Spryker\Shared\Kernel\ContainerGlobals;
+
+class SessionClientServiceProvider implements ServiceProviderInterface
+{
+
+    const CLIENT_SESSION = 'session client';
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $containerGlobals = new ContainerGlobals();
+        $containerGlobals[static::CLIENT_SESSION] = function () {
+            $container = new Container();
+
+            return $container->getLocator()->session()->client();
+        };
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/Session/src/Spryker/Client/Session/SessionClientFactoryTrait.php b/Bundles/Session/src/Spryker/Client/Session/SessionClientFactoryTrait.php
new file mode 100644
index 0000000..4f179e8
--- /dev/null
+++ b/Bundles/Session/src/Spryker/Client/Session/SessionClientFactoryTrait.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Session;
+
+use Spryker\Client\Session\ServiceProvider\SessionClientServiceProvider;
+
+trait SessionClientFactoryTrait
+{
+
+    /**
+     * @return \Spryker\Client\Session\SessionClientInterface
+     */
+    public function getSessionClient()
+    {
+        return $this->getProvidedDependency(SessionClientServiceProvider::CLIENT_SESSION);
+    }
+
+    /**
+     * @param string $key
+     *
+     * @throws \Spryker\Client\Kernel\Exception\Container\ContainerKeyNotFoundException
+     *
+     * @return mixed
+     */
+    abstract public function getProvidedDependency($key);
+
+}
diff --git a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerCouchbase.php b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerCouchbase.php
index 8c943fe..b8bb282 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerCouchbase.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerCouchbase.php
@@ -9,7 +9,7 @@ namespace Spryker\Shared\Session\Business\Handler;
 
 use Couchbase;
 use SessionHandlerInterface;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 class SessionHandlerCouchbase implements SessionHandlerInterface
 {
@@ -61,12 +61,12 @@ class SessionHandlerCouchbase implements SessionHandlerInterface
     protected $lifetime;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      * @param array $hosts
      * @param string|null $user
      * @param string|null $password
diff --git a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerFile.php b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerFile.php
index 72af29b..f1d8737 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerFile.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerFile.php
@@ -8,7 +8,7 @@
 namespace Spryker\Shared\Session\Business\Handler;
 
 use SessionHandlerInterface;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 class SessionHandlerFile implements SessionHandlerInterface
 {
@@ -33,14 +33,14 @@ class SessionHandlerFile implements SessionHandlerInterface
     protected $savePath;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
      * @param string $savePath
      * @param int $lifetime
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      */
     public function __construct($savePath, $lifetime, NewRelicApiInterface $newRelicApi)
     {
diff --git a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerMysql.php b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerMysql.php
index 1921b03..0615940 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerMysql.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerMysql.php
@@ -9,9 +9,9 @@ namespace Spryker\Shared\Session\Business\Handler;
 
 use PDO;
 use SessionHandlerInterface;
+use Spryker\Shared\Config\Environment;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Environment;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 class SessionHandlerMysql implements SessionHandlerInterface
 {
@@ -56,12 +56,12 @@ class SessionHandlerMysql implements SessionHandlerInterface
     protected $port = 3306;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      * @param array $hosts
      * @param string|null $user
      * @param string|null $password
diff --git a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerRedis.php b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerRedis.php
index 5093172..378c84a 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerRedis.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/Business/Handler/SessionHandlerRedis.php
@@ -9,7 +9,7 @@ namespace Spryker\Shared\Session\Business\Handler;
 
 use Predis\Client;
 use SessionHandlerInterface;
-use Spryker\Shared\NewRelic\NewRelicApiInterface;
+use Spryker\Shared\NewRelicApi\NewRelicApiInterface;
 
 class SessionHandlerRedis implements SessionHandlerInterface
 {
@@ -39,14 +39,14 @@ class SessionHandlerRedis implements SessionHandlerInterface
     protected $savePath;
 
     /**
-     * @var \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @var \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected $newRelicApi;
 
     /**
      * @param string $savePath
      * @param int $lifetime
-     * @param \Spryker\Shared\NewRelic\NewRelicApiInterface $newRelicApi
+     * @param \Spryker\Shared\NewRelicApi\NewRelicApiInterface $newRelicApi
      */
     public function __construct($savePath, $lifetime, NewRelicApiInterface $newRelicApi)
     {
diff --git a/Bundles/Session/src/Spryker/Shared/Session/Business/Model/SessionFactory.php b/Bundles/Session/src/Spryker/Shared/Session/Business/Model/SessionFactory.php
index ceefc3a..33d6569 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/Business/Model/SessionFactory.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/Business/Model/SessionFactory.php
@@ -7,9 +7,9 @@
 
 namespace Spryker\Shared\Session\Business\Model;
 
+use Spryker\Shared\Config\Environment;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Library\Environment;
-use Spryker\Shared\NewRelic\NewRelicApiTrait;
+use Spryker\Shared\NewRelicApi\NewRelicApiTrait;
 use Spryker\Shared\Session\Business\Handler\SessionHandlerCouchbase;
 use Spryker\Shared\Session\Business\Handler\SessionHandlerFile;
 use Spryker\Shared\Session\Business\Handler\SessionHandlerMysql;
@@ -173,7 +173,7 @@ abstract class SessionFactory
     /**
      * @deprecated Please use `createNewRelicApi()` instead
      *
-     * @return \Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function getNewRelicApi()
     {
diff --git a/Bundles/Session/src/Spryker/Shared/Session/SessionConstants.php b/Bundles/Session/src/Spryker/Shared/Session/SessionConstants.php
index 1396696..200eede 100644
--- a/Bundles/Session/src/Spryker/Shared/Session/SessionConstants.php
+++ b/Bundles/Session/src/Spryker/Shared/Session/SessionConstants.php
@@ -35,6 +35,7 @@ interface SessionConstants
     const YVES_SESSION_REDIS_PORT = 'YVES_SESSION_REDIS_PORT';
     const YVES_SESSION_REDIS_DATABASE = 'YVES_SESSION_REDIS_DATABASE';
 
+    const ZED_SSL_ENABLED = 'ZED_SSL_ENABLED';
     const ZED_SESSION_SAVE_HANDLER = 'ZED_SESSION_SAVE_HANDLER';
     const ZED_SESSION_COOKIE_NAME = 'ZED_SESSION_COOKIE_NAME';
     const ZED_SESSION_COOKIE_SECURE = 'ZED_COOKIE_SECURE';
diff --git a/Bundles/Session/src/Spryker/Zed/Session/Business/SessionBusinessFactory.php b/Bundles/Session/src/Spryker/Zed/Session/Business/SessionBusinessFactory.php
index e149ea0..9c8346d 100644
--- a/Bundles/Session/src/Spryker/Zed/Session/Business/SessionBusinessFactory.php
+++ b/Bundles/Session/src/Spryker/Zed/Session/Business/SessionBusinessFactory.php
@@ -9,6 +9,9 @@ namespace Spryker\Zed\Session\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 
+/**
+ * @method \Spryker\Zed\Session\SessionConfig getConfig()
+ */
 class SessionBusinessFactory extends AbstractBusinessFactory
 {
 }
diff --git a/Bundles/Session/src/Spryker/Zed/Session/Communication/Plugin/ServiceProvider/SessionServiceProvider.php b/Bundles/Session/src/Spryker/Zed/Session/Communication/Plugin/ServiceProvider/SessionServiceProvider.php
index 2b2b643..23ace05 100644
--- a/Bundles/Session/src/Spryker/Zed/Session/Communication/Plugin/ServiceProvider/SessionServiceProvider.php
+++ b/Bundles/Session/src/Spryker/Zed/Session/Communication/Plugin/ServiceProvider/SessionServiceProvider.php
@@ -10,12 +10,11 @@ namespace Spryker\Zed\Session\Communication\Plugin\ServiceProvider;
 use Silex\Application;
 use Silex\ServiceProviderInterface;
 use Spryker\Client\Session\SessionClientInterface;
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Session\SessionConstants;
 use Spryker\Zed\Kernel\Communication\AbstractPlugin;
 use Spryker\Zed\Session\Business\Model\SessionFactory;
-use Spryker\Zed\Storage\StorageConfig;
+use Spryker\Zed\Session\SessionConfig;
 
 /**
  * @method \Spryker\Zed\Session\Communication\SessionCommunicationFactory getFactory()
@@ -123,7 +122,7 @@ class SessionServiceProvider extends AbstractPlugin implements ServiceProviderIn
                 Config::get(SessionConstants::ZED_SESSION_REDIS_PROTOCOL),
                 Config::get(SessionConstants::ZED_SESSION_REDIS_HOST),
                 Config::get(SessionConstants::ZED_SESSION_REDIS_PORT),
-                Config::get(SessionConstants::ZED_SESSION_REDIS_DATABASE, StorageConfig::DEFAULT_REDIS_DATABASE)
+                Config::get(SessionConstants::ZED_SESSION_REDIS_DATABASE, SessionConfig::DEFAULT_REDIS_DATABASE)
             );
 
             if (Config::hasKey(SessionConstants::ZED_SESSION_REDIS_PASSWORD)) {
@@ -133,7 +132,7 @@ class SessionServiceProvider extends AbstractPlugin implements ServiceProviderIn
                     Config::get(SessionConstants::ZED_SESSION_REDIS_PASSWORD),
                     Config::get(SessionConstants::ZED_SESSION_REDIS_HOST),
                     Config::get(SessionConstants::ZED_SESSION_REDIS_PORT),
-                    Config::get(SessionConstants::ZED_SESSION_REDIS_DATABASE, StorageConfig::DEFAULT_REDIS_DATABASE)
+                    Config::get(SessionConstants::ZED_SESSION_REDIS_DATABASE, SessionConfig::DEFAULT_REDIS_DATABASE)
                 );
             }
 
@@ -155,7 +154,7 @@ class SessionServiceProvider extends AbstractPlugin implements ServiceProviderIn
      */
     protected function secureCookie()
     {
-        if (Config::get(ApplicationConstants::ZED_SSL_ENABLED, false)
+        if (Config::get(SessionConstants::ZED_SSL_ENABLED, false)
             && Config::get(SessionConstants::ZED_SESSION_COOKIE_SECURE, true)
         ) {
             return true;
diff --git a/Bundles/Session/src/Spryker/Zed/Session/Communication/SessionCommunicationFactory.php b/Bundles/Session/src/Spryker/Zed/Session/Communication/SessionCommunicationFactory.php
index 430954f..1ee906b 100644
--- a/Bundles/Session/src/Spryker/Zed/Session/Communication/SessionCommunicationFactory.php
+++ b/Bundles/Session/src/Spryker/Zed/Session/Communication/SessionCommunicationFactory.php
@@ -9,6 +9,9 @@ namespace Spryker\Zed\Session\Communication;
 
 use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
 
+/**
+ * @method \Spryker\Zed\Session\SessionConfig getConfig()
+ */
 class SessionCommunicationFactory extends AbstractCommunicationFactory
 {
 }
diff --git a/Bundles/Session/src/Spryker/Zed/Session/SessionConfig.php b/Bundles/Session/src/Spryker/Zed/Session/SessionConfig.php
new file mode 100644
index 0000000..1d60aef
--- /dev/null
+++ b/Bundles/Session/src/Spryker/Zed/Session/SessionConfig.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Session;
+
+use Spryker\Zed\Kernel\AbstractBundleConfig;
+
+class SessionConfig extends AbstractBundleConfig
+{
+
+    /**
+     * Default Redis database number
+     */
+    const DEFAULT_REDIS_DATABASE = 0;
+
+}
diff --git a/Bundles/Session/tests/SharedUnit/Spryker/Shared/Session/Business/Handler/SessionHandlerFileTest.php b/Bundles/Session/tests/SharedUnit/Spryker/Shared/Session/Business/Handler/SessionHandlerFileTest.php
index 77fc76e..c0e45cb 100644
--- a/Bundles/Session/tests/SharedUnit/Spryker/Shared/Session/Business/Handler/SessionHandlerFileTest.php
+++ b/Bundles/Session/tests/SharedUnit/Spryker/Shared/Session/Business/Handler/SessionHandlerFileTest.php
@@ -8,7 +8,7 @@
 namespace SharedUnit\Spryker\Shared\Session\Business\Handler;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\NewRelic\NewRelicApi;
+use Spryker\Shared\NewRelicApi\NewRelicApi;
 use Spryker\Shared\Session\Business\Handler\SessionHandlerFile;
 use Symfony\Component\Filesystem\Filesystem;
 use Symfony\Component\Finder\Finder;
@@ -210,7 +210,7 @@ class SessionHandlerFileTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelic\NewRelicApiInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\NewRelicApi\NewRelicApiInterface
      */
     protected function createNewRelicApiMock()
     {
diff --git a/Bundles/Setup/composer.json b/Bundles/Setup/composer.json
index 9caf100..dd33d77 100644
--- a/Bundles/Setup/composer.json
+++ b/Bundles/Setup/composer.json
@@ -6,14 +6,11 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/cache": "^2.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
+    "spryker/zed-navigation": "^1.0.0",
     "spryker/propel": "^2.0.0",
     "spryker/search": "^2.0.0 || ^3.0.0 || ^4.0.0 || ^5.0.0",
     "spryker/symfony": "^2.0.0",
diff --git a/Bundles/Setup/src/Spryker/Shared/Setup/SetupConstants.php b/Bundles/Setup/src/Spryker/Shared/Setup/SetupConstants.php
index fe290ac..0ad48e7 100644
--- a/Bundles/Setup/src/Spryker/Shared/Setup/SetupConstants.php
+++ b/Bundles/Setup/src/Spryker/Shared/Setup/SetupConstants.php
@@ -9,4 +9,8 @@ namespace Spryker\Shared\Setup;
 
 interface SetupConstants
 {
+
+    const JENKINS_BASE_URL = 'JENKINS_BASE_URL';
+    const JENKINS_DIRECTORY = 'JENKINS_DIRECTORY';
+
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Business/Internal/Install.php b/Bundles/Setup/src/Spryker/Zed/Setup/Business/Internal/Install.php
deleted file mode 100644
index fa66e08..0000000
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Business/Internal/Install.php
+++ /dev/null
@@ -1,23 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Setup\Business\Internal;
-
-use Spryker\Zed\Installer\Business\Model\AbstractInstaller;
-
-class Install extends AbstractInstaller
-{
-
-    /**
-     * @return void
-     */
-    public function install()
-    {
-        $this->alert('Installing TEST DATA'); //TODO create test data fixture with this installer
-    }
-
-}
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Business/Model/Cronjobs.php b/Bundles/Setup/src/Spryker/Zed/Setup/Business/Model/Cronjobs.php
index 24e659c..935de82 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Business/Model/Cronjobs.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Business/Model/Cronjobs.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Setup\Business\Model;
 
 use ErrorException;
-use Spryker\Shared\Library\Environment;
+use Spryker\Shared\Config\Environment;
 use Spryker\Zed\Setup\SetupConfig;
 
 class Cronjobs
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupBusinessFactory.php b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupBusinessFactory.php
index bcbe457..ad8a52f 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupBusinessFactory.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupBusinessFactory.php
@@ -8,8 +8,6 @@
 namespace Spryker\Zed\Setup\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-use Spryker\Zed\Setup\Business\Internal\Install;
 use Spryker\Zed\Setup\Business\Model\Cronjobs;
 use Spryker\Zed\Setup\Business\Model\DirectoryRemover;
 use Spryker\Zed\Setup\Communication\Console\DeployPreparePropelConsole;
@@ -62,7 +60,7 @@ class SetupBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater
+     * @return \Spryker\Zed\ZedRequest\Business\Model\Repeater
      */
     public function getTransferObjectRepeater()
     {
@@ -201,17 +199,4 @@ class SetupBusinessFactory extends AbstractBusinessFactory
         return new DeployPreparePropelConsole();
     }
 
-    /**
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
-     * @return \Spryker\Zed\Product\Business\Internal\Install
-     */
-    public function createTestDataInstaller(MessengerInterface $messenger)
-    {
-        $installer = new Install();
-        $installer->setMessenger($messenger);
-
-        return $installer;
-    }
-
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacade.php b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacade.php
index 638d788..90f0a69 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacade.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacade.php
@@ -8,8 +8,6 @@
 namespace Spryker\Zed\Setup\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractFacade;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-use Symfony\Component\HttpFoundation\Request;
 
 /**
  * @method \Spryker\Zed\Setup\Business\SetupBusinessFactory getFactory()
@@ -62,19 +60,6 @@ class SetupFacade extends AbstractFacade implements SetupFacadeInterface
     /**
      * @api
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     *
-     * @return string
-     */
-    public function getRepeatData(Request $request)
-    {
-        return $this->getFactory()->getTransferObjectRepeater()
-            ->getRepeatData($request->query->get('mvc', null));
-    }
-
-    /**
-     * @api
-     *
      * @deprecated Hook in commands manually on project level
      *
      * @return \Symfony\Component\Console\Command\Command[]
@@ -84,16 +69,4 @@ class SetupFacade extends AbstractFacade implements SetupFacadeInterface
         return $this->getFactory()->getConsoleCommands();
     }
 
-    /**
-     * @api
-     *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface|null $messenger
-     *
-     * @return void
-     */
-    public function installTestData(MessengerInterface $messenger)
-    {
-        $this->getFactory()->createTestDataInstaller($messenger)->install();
-    }
-
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacadeInterface.php b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacadeInterface.php
index 7a1942a..d1eec16 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacadeInterface.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Business/SetupFacadeInterface.php
@@ -7,9 +7,6 @@
 
 namespace Spryker\Zed\Setup\Business;
 
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
-use Symfony\Component\HttpFoundation\Request;
-
 interface SetupFacadeInterface
 {
 
@@ -46,28 +43,10 @@ interface SetupFacadeInterface
     /**
      * @api
      *
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     *
-     * @return string
-     */
-    public function getRepeatData(Request $request);
-
-    /**
-     * @api
-     *
      * @deprecated Hook in commands manually on project level
      *
      * @return \Symfony\Component\Console\Command\Command[]
      */
     public function getConsoleCommands();
 
-    /**
-     * @api
-     *
-     * @param \Spryker\Zed\Messenger\Business\Model\MessengerInterface $messenger
-     *
-     * @return void
-     */
-    public function installTestData(MessengerInterface $messenger);
-
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/DeployPreparePropelConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/DeployPreparePropelConsole.php
index 520fb80..015dafa 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/DeployPreparePropelConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/DeployPreparePropelConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Spryker\Zed\Propel\Communication\Console\BuildModelConsole;
 use Spryker\Zed\Propel\Communication\Console\ConvertConfigConsole;
 use Spryker\Zed\Propel\Communication\Console\SchemaCopyConsole;
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateClientIdeAutoCompletionConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
index 9b8b559..66c8f1e 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateClientIdeAutoCompletionConsole.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Kernel\BundleNameFinder;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeBundleAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\ClientMethodTagBuilder;
@@ -108,7 +108,7 @@ class GenerateClientIdeAutoCompletionConsole extends Console
      */
     private function getProjectNamespace()
     {
-        return Config::get(ApplicationConstants::PROJECT_NAMESPACES)[0];
+        return Config::get(KernelConstants::PROJECT_NAMESPACES)[0];
     }
 
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateIdeAutoCompletionConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateIdeAutoCompletionConsole.php
index f4997ee..73e2a15 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateIdeAutoCompletionConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateIdeAutoCompletionConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
index 206b58d..49b1b10 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateServiceIdeAutoCompletionConsole.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Kernel\BundleNameFinder;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeBundleAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\GeneratedInterfaceMethodTagBuilder;
@@ -72,7 +72,7 @@ class GenerateServiceIdeAutoCompletionConsole extends Console
     protected function getServiceDefaultOptions()
     {
         $bundleNameFinder = new BundleNameFinder([
-            BundleNameFinder::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN => Config::get(ApplicationConstants::PROJECT_NAMESPACE) . DIRECTORY_SEPARATOR,
+            BundleNameFinder::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN => Config::get(KernelConstants::PROJECT_NAMESPACE) . DIRECTORY_SEPARATOR,
             BundleNameFinder::OPTION_KEY_APPLICATION => self::APPLICATION_SERVICE,
         ]);
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateZedIdeAutoCompletionConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
index 36cc010..b5fca5a 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/GenerateZedIdeAutoCompletionConsole.php
@@ -7,10 +7,10 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Kernel\BundleNameFinder;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\IdeBundleAutoCompletionGenerator;
 use Spryker\Zed\Kernel\IdeAutoCompletion\MethodTagBuilder\ClientMethodTagBuilder;
@@ -73,7 +73,7 @@ class GenerateZedIdeAutoCompletionConsole extends Console
     protected function getZedDefaultOptions()
     {
         $bundleNameFinder = new BundleNameFinder([
-            BundleNameFinder::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN => Config::get(ApplicationConstants::PROJECT_NAMESPACE) . DIRECTORY_SEPARATOR,
+            BundleNameFinder::OPTION_KEY_BUNDLE_PROJECT_PATH_PATTERN => Config::get(KernelConstants::PROJECT_NAMESPACE) . DIRECTORY_SEPARATOR,
             BundleNameFinder::OPTION_KEY_APPLICATION => '*',
         ]);
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/InstallConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/InstallConsole.php
index a2c7eee..610c0d6 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/InstallConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/InstallConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsDisableConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsDisableConsole.php
index 6faa201..d95332d 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsDisableConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsDisableConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsEnableConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsEnableConsole.php
index 0e0bafe..3c9c625 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsEnableConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsEnableConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsGenerateConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsGenerateConsole.php
index 854310f..99ac160 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsGenerateConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/JenkinsGenerateConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/Npm/RunnerConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/Npm/RunnerConsole.php
index a9236a4..d98ea28 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/Npm/RunnerConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/Npm/RunnerConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console\Npm;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/RemoveGeneratedDirectoryConsole.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/RemoveGeneratedDirectoryConsole.php
index e85a115..bdcc046 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/RemoveGeneratedDirectoryConsole.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Console/RemoveGeneratedDirectoryConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/IndexController.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/IndexController.php
index 942e35f..6c78e43 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/IndexController.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/IndexController.php
@@ -7,168 +7,16 @@
 
 namespace Spryker\Zed\Setup\Communication\Controller;
 
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\Environment;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 class IndexController extends AbstractController
 {
 
-    const COOKIE_HASH_ALGORITHM = 'sha256';
-
     /**
-     * @return array
-     */
-    public function indexAction()
-    {
-        $developmentLinks = [];
-
-        if (APPLICATION_ENV !== 'production') {
-            $developmentLinks[] = [
-                'href' => '/setup/transfer/repeat',
-                'target' => '_blank',
-                'label' => 'Repeat last Yves-request',
-            ];
-            $developmentLinks[] = [
-                'href' => '/glossary/dump',
-                'target' => '_blank',
-                'label' => 'Dump glossary data to file',
-            ];
-        }
-        $developmentLinks[] = [
-            'href' => '/setup/phpinfo',
-            'target' => '_blank',
-            'label' => 'Show PHP-Info',
-        ];
-        if (Environment::isNotDevelopment()) {
-            $developmentLinks[] = [
-                'href' => '#',
-                'label' => 'Show Elasticsearch' . ' <span class="icon-info"></span>',
-                'extras' => [
-                    'data-toggle' => 'modal',
-                    'data-target' => '#elastic',
-                ],
-            ];
-        } else {
-            $developmentLinks[] = [
-                'href' => 'http://' . Config::get(ApplicationConstants::HOST_ZED_GUI) . ':9200',
-                'target' => '_blank',
-                'label' => 'Show Elasticsearch',
-            ];
-        }
-        if (Environment::isNotDevelopment()) {
-            $developmentLinks[] = [
-                'href' => '#',
-                'label' => 'Show Elasticsearch Head (9200/_plugin/head)' . ' <span class="icon-info"></span>',
-                'extras' => [
-                    'data-toggle' => 'modal',
-                    'data-target' => '#elasticHead',
-                ],
-            ];
-        } else {
-            $developmentLinks[] = [
-                'href' => 'http://' . Config::get(ApplicationConstants::HOST_ZED_GUI) . ':9200/_plugin/head',
-                'target' => '_blank',
-                'label' => 'Show Elasticsearch Head',
-            ];
-        }
-
-        if (Environment::isNotDevelopment()) {
-            $developmentLinks[] = [
-                'href' => '#',
-                'label' => 'Show Elasticsearch Bigdesk (9200/_plugin/bigdesk)' . ' <span class="icon-info"></span>',
-                'extras' => [
-                    'data-toggle' => 'modal',
-                    'data-target' => '#elasticBigdeskModal',
-                ],
-            ];
-        } else {
-            $developmentLinks[] = [
-                'href' => 'http://' . Config::get(ApplicationConstants::HOST_ZED_GUI) . ':9200/_plugin/bigdesk',
-                'target' => '_blank',
-                'label' => 'Show Elasticsearch Bigdesk',
-            ];
-        }
-        if (Environment::isNotDevelopment()) {
-            $developmentLinks[] = [
-                'href' => '#',
-                'label' => 'Show Couchbase' . ' <span class="icon-info"></span>',
-                'extras' => [
-                    'data-toggle' => 'modal',
-                    'data-target' => '#couchbaseModal',
-                ],
-            ];
-        } else {
-            $developmentLinks[] = [
-                'href' => 'http://' . Config::get(ApplicationConstants::HOST_ZED_GUI) . ':8091',
-                'target' => '_blank',
-                'label' => 'Show Couchbase',
-            ];
-        }
-
-        if (Environment::isNotDevelopment()) {
-            $developmentLinks[] = [
-                'href' => '#',
-                'label' => 'Show Jenkins' . ' <span class="icon-info"></span>',
-                'extras' => [
-                    'data-toggle' => 'modal',
-                    'data-target' => '#jenkinsModal',
-                ],
-            ];
-        } else {
-            $developmentLinks[] = [
-                'href' => Config::get(ApplicationConstants::JENKINS_BASE_URL),
-                'target' => '_blank',
-                'label' => 'Jenkins',
-            ];
-        }
-
-        $developmentLinks[] = [
-            'href' => 'URL IS MISSING',
-            'target' => '_blank',
-            'label' => 'Install / Update Cronjobs',
-        ];
-
-        return $this->viewResponse([
-            'developmentLinks' => $developmentLinks,
-        ]);
-    }
-
-    /**
-     * @return array
-     */
-    public function showCronjobsAction()
-    {
-        return $this->viewResponse([
-            'jobs' => $this->facadeSetup->getAllCronjobs(),
-        ]);
-    }
-
-    /**
-     * @return mixed
-     */
-    protected function getClient()
-    {
-        $redis = Redis::getInstance();
-
-        return $redis->connect();
-    }
-
-    /**
-     * @deprecated this method will be removed in the nearest major version.
-     *
      * @return void
      */
-    public function redisAddAction()
+    public function indexAction()
     {
-        $redis = $this->getClient();
-
-        for ($i = 0; $i < 100; $i++) {
-            $redis->set(
-                hash(static::COOKIE_HASH_ALGORITHM, microtime(true))
-            );
-        }
     }
 
 }
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/JenkinsController.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/JenkinsController.php
index aaafe3e..cfe2f79 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/JenkinsController.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/JenkinsController.php
@@ -9,11 +9,9 @@ namespace Spryker\Zed\Setup\Communication\Controller;
 
 use ErrorException;
 use Spryker\Shared\Config\Config;
-use Spryker\Shared\Library\DataDirectory;
-use Spryker\Shared\Library\Environment;
-use Spryker\Shared\Library\Log;
+use Spryker\Shared\Config\Environment;
 use Spryker\Shared\Setup\SetupConstants;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @deprecated Will be removed in 1.0.0.
@@ -60,9 +58,9 @@ class JenkinsController extends AbstractController
         curl_setopt($ch, CURLOPT_HEADER, true);
         curl_setopt($ch, CURLOPT_POSTFIELDS, $body);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
-        Log::logRaw('CURL call: ' . $post_url . "body:\n[" . $body . "]\n\n", self::LOGFILE);
+        //Log::logRaw('CURL call: ' . $post_url . "body:\n[" . $body . "]\n\n", self::LOGFILE);
         $head = curl_exec($ch);
-        Log::logRaw("CURL response:\n[" . $head . "]\n\n", self::LOGFILE);
+        //Log::logRaw("CURL response:\n[" . $head . "]\n\n", self::LOGFILE);
         $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
         curl_close($ch);
 
@@ -195,7 +193,7 @@ $command</command>";
             ]
         );
 
-        $jobs_dir = DataDirectory::getLocalCommonPath('/jenkins/jobs/');
+        $jobs_dir = APPLICATION_ROOT_DIR . '/data/common/jenkins/jobs/';
 
         $roles = $this->getRoles();
 
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/ReleaseExpiredLocksController.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/ReleaseExpiredLocksController.php
index 7864b78..6484b54 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/ReleaseExpiredLocksController.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/ReleaseExpiredLocksController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Setup\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 class ReleaseExpiredLocksController extends AbstractController
 {
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/RevController.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/RevController.php
deleted file mode 100644
index 08a89b1..0000000
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/RevController.php
+++ /dev/null
@@ -1,26 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Setup\Communication\Controller;
-
-use Spryker\Shared\Library\Application\Version;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
-
-class RevController extends AbstractController
-{
-
-    /**
-     * @return array
-     */
-    public function indexAction()
-    {
-        $revisionInfo = Version::getRevTxt();
-
-        return $this->viewResponse(['revisionInfo' => $revisionInfo]);
-    }
-
-}
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/TransferController.php b/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/TransferController.php
deleted file mode 100644
index f052e91..0000000
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Communication/Controller/TransferController.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Setup\Communication\Controller;
-
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\TransferServer;
-use Symfony\Component\HttpFoundation\Request;
-use Symfony\Component\HttpFoundation\Response;
-use Symfony\Component\HttpKernel\HttpKernelInterface;
-
-/**
- * @method \Spryker\Zed\Setup\Business\SetupFacade getFacade()
- */
-class TransferController extends AbstractController
-{
-
-    /**
-     * @param \Symfony\Component\HttpFoundation\Request $request
-     *
-     * @return \Symfony\Component\HttpFoundation\Response|array
-     */
-    public function repeatAction(Request $request)
-    {
-        $repeatData = $this->getFacade()->getRepeatData($request);
-
-        if (!is_array($repeatData)) {
-            return new Response('No request to repeat.');
-        }
-
-        TransferServer::getInstance()->activateRepeating();
-        $request = Request::createFromGlobals();
-        $request->attributes->set('module', $repeatData['module']);
-        $request->attributes->set('controller', $repeatData['controller']);
-        $request->attributes->set('action', $repeatData['action']);
-
-        $request->request->replace($repeatData);
-
-        return $this->getApplication()->handle($request, HttpKernelInterface::SUB_REQUEST);
-    }
-
-}
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/Presentation/Index/index.twig b/Bundles/Setup/src/Spryker/Zed/Setup/Presentation/Index/index.twig
index bd03ab4..e7f1b8b 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/Presentation/Index/index.twig
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/Presentation/Index/index.twig
@@ -1,57 +1,3 @@
 {% extends '@Application/Layout/layout.twig' %}
 {% block content %}
-
-<div class="row">
-    <div class="col-md-12">
-        <div class="row">
-            <div class="col-lg-4">
-                {{ panel('Generators'|trans, listGroup(['<h4>' ~ 'Code'|trans ~ '</h4><pre><code> vendor/bin/console setup:generate</code></pre>', '<h4>' ~ 'Propel'|trans ~ '</h4><pre><code> vendor/bin/console propel:install</code></pre>']), {'noWrap': true}) }}
-            </div>
-            <div class="col-lg-4">
-                {% set dumpItem = {'href': '/db-dump/download'), 'target': '_blank', 'label': 'Get dump for  store'|trans} %}
-                {% set expiredLockItem = {'href': '/setup/release-expired-locks'), 'target': '_blank', 'label': 'Release expired Locks'|trans} %}
-                {{ panel('Database'|trans, listGroup([dumpItem, expiredLockItem]), {'noWrap': true}) }}
-            </div>
-
-            <div class="col-lg-4">
-                {{ panel('Development / Debugging'|trans, listGroup(developmentLinks), {'noWrap': true}) }}
-            </div>
-        </div>
-    </div>
-</div>
-
-{{ modal(
-    'Accessing Elasticsearch from non-development environments',
-    '<p><code>ssh -L port:localhost:port firstname.lastname@host</code></p>',
-    '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>',
-    {'class': 'modal fade', 'id': 'elastic'})
-}}
-
-{{ modal(
-    'Accessing Elasticsearch Head from non-development environments',
-    '<p><code>ssh -L port:localhost:port firstname.lastname@host</code></p>',
-    '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>',
-    {'class': 'modal fade', 'id': 'elasticHead'})
-}}
-
-{{ modal(
-    'Accessing Elasticsearch Bigdesk from non-development environments',
-    '<p><code>ssh -L port:localhost:port firstname.lastname@host</code></p>',
-    '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>',
-    {'class': 'modal fade', 'id': 'elasticBigdeskModal'})
-}}
-
-{{ modal(
-    'Accessing Couchbase from non-development environments',
-    '<p><code>ssh -L port:localhost:port firstname.lastname@host</code></p>',
-    '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>',
-    {'class': 'modal fade', 'id': 'couchbaseModal'})
-}}
-
-{{ modal(
-    'Accessing Jenkins from non-development environments',
-    '<p><code>ssh -L port:localhost:port firstname.lastname@host</code></p>',
-    '<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>',
-    {'class': 'modal fade', 'id': 'jenkinsModal'})
-}}
 {% endblock %}
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/SetupConfig.php b/Bundles/Setup/src/Spryker/Zed/Setup/SetupConfig.php
index d3a4738..06f8826 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/SetupConfig.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/SetupConfig.php
@@ -7,8 +7,7 @@
 
 namespace Spryker\Zed\Setup;
 
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Zed\Application\Communication\Console\BuildNavigationConsole;
+use Spryker\Shared\Setup\SetupConstants;
 use Spryker\Zed\Cache\Communication\Console\DeleteAllCachesConsole;
 use Spryker\Zed\Installer\Communication\Console\InitializeDatabaseConsole;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
@@ -16,6 +15,7 @@ use Spryker\Zed\Propel\Communication\Console\PropelInstallConsole;
 use Spryker\Zed\Search\Communication\Console\SearchConsole;
 use Spryker\Zed\Setup\Communication\Console\RemoveGeneratedDirectoryConsole;
 use Spryker\Zed\Transfer\Communication\Console\GeneratorConsole;
+use Spryker\Zed\ZedNavigation\Communication\Console\BuildNavigationConsole;
 
 class SetupConfig extends AbstractBundleConfig
 {
@@ -39,7 +39,7 @@ class SetupConfig extends AbstractBundleConfig
      */
     public function getJenkinsUrl()
     {
-        return $this->get(ApplicationConstants::JENKINS_BASE_URL);
+        return $this->get(SetupConstants::JENKINS_BASE_URL);
     }
 
     /**
@@ -47,7 +47,7 @@ class SetupConfig extends AbstractBundleConfig
      */
     public function getJenkinsDirectory()
     {
-        return $this->get(ApplicationConstants::JENKINS_DIRECTORY);
+        return $this->get(SetupConstants::JENKINS_DIRECTORY);
     }
 
     /**
diff --git a/Bundles/Setup/src/Spryker/Zed/Setup/SetupDependencyProvider.php b/Bundles/Setup/src/Spryker/Zed/Setup/SetupDependencyProvider.php
index 70f76c9..77adb97 100644
--- a/Bundles/Setup/src/Spryker/Zed/Setup/SetupDependencyProvider.php
+++ b/Bundles/Setup/src/Spryker/Zed/Setup/SetupDependencyProvider.php
@@ -7,27 +7,8 @@
 
 namespace Spryker\Zed\Setup;
 
-use Spryker\Zed\Application\Communication\Plugin\TransferObject\Repeater;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
-use Spryker\Zed\Kernel\Container;
 
 class SetupDependencyProvider extends AbstractBundleDependencyProvider
 {
-
-    const PLUGIN_TRANSFER_OBJECT_REPEATER = 'plugin transfer object repeater';
-
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return \Spryker\Zed\Kernel\Container
-     */
-    public function provideBusinessLayerDependencies(Container $container)
-    {
-        $container[self::PLUGIN_TRANSFER_OBJECT_REPEATER] = function () {
-            return new Repeater();
-        };
-
-        return $container;
-    }
-
 }
diff --git a/Bundles/Setup/tests/_support/Module/Functional.php b/Bundles/Setup/tests/_support/Module/Functional.php
index 34a8697..ea05112 100644
--- a/Bundles/Setup/tests/_support/Module/Functional.php
+++ b/Bundles/Setup/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace Setup\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -64,8 +36,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/Shipment/composer.json b/Bundles/Shipment/composer.json
index 589a3ed..550dce0 100644
--- a/Bundles/Shipment/composer.json
+++ b/Bundles/Shipment/composer.json
@@ -1,23 +1,28 @@
 {
   "name": "spryker/shipment",
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/country": "^2.0.0",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/money": "^1.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/sales": "^2.0.0 || ^3.0.0",
     "spryker/session": "^2.0.0",
     "spryker/symfony": "^2.1.6",
     "spryker/tax": "^3.0.0",
-    "spryker/url": "^2.0.0",
+    "spryker/util-text": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/country": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation.",
+    "spryker/checkout": "If you want to use Checkout plugins you need to install spryker/checkout."
+  },
   "description": "Shipment bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/CarrierController.php b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/CarrierController.php
index 7de0ff6..d4236da 100644
--- a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/CarrierController.php
+++ b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/CarrierController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Shipment\Communication\Controller;
 
 use Generated\Shared\Transfer\ShipmentCarrierTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/IndexController.php b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/IndexController.php
index e9c1d5c..eb7775f 100644
--- a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/IndexController.php
+++ b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Shipment\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Shipment\Communication\ShipmentCommunicationFactory getFactory()
diff --git a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/MethodController.php b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/MethodController.php
index c34c2bd..24edb9d 100644
--- a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/MethodController.php
+++ b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/MethodController.php
@@ -8,7 +8,7 @@
 namespace Spryker\Zed\Shipment\Communication\Controller;
 
 use Generated\Shared\Transfer\ShipmentMethodTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/SalesController.php b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/SalesController.php
index 12361c2..ed1520f 100644
--- a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/SalesController.php
+++ b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Controller/SalesController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Shipment\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Table/MethodTable.php b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Table/MethodTable.php
index b82d212..aad3895 100644
--- a/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Table/MethodTable.php
+++ b/Bundles/Shipment/src/Spryker/Zed/Shipment/Communication/Table/MethodTable.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\Shipment\Communication\Table;
 
 use Orm\Zed\Shipment\Persistence\Map\SpyShipmentMethodTableMap;
 use Orm\Zed\Shipment\Persistence\SpyShipmentMethodQuery;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\Shipment\Dependency\Facade\ShipmentToMoneyInterface;
diff --git a/Bundles/StateMachine/composer.json b/Bundles/StateMachine/composer.json
index 16251fe..6d5a7dd 100644
--- a/Bundles/StateMachine/composer.json
+++ b/Bundles/StateMachine/composer.json
@@ -6,17 +6,17 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/graph": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/propel": "^2.2.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-network": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "StateMachine bundle",
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Graph/Drawer.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Graph/Drawer.php
index 5881b9b..1ee3013 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Graph/Drawer.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Graph/Drawer.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\StateMachine\Business\Graph;
 
+use Spryker\Service\UtilText\UtilTextService;
 use Spryker\Shared\Graph\GraphInterface;
-use Spryker\Zed\Library\Generator\StringGenerator;
 use Spryker\Zed\StateMachine\Business\Exception\DrawerException;
 use Spryker\Zed\StateMachine\Business\Process\ProcessInterface;
 use Spryker\Zed\StateMachine\Business\Process\StateInterface;
@@ -172,9 +172,9 @@ class Drawer implements DrawerInterface
      */
     protected function getDiamondId()
     {
-        $generator = new StringGenerator();
+        $utilTextService = new UtilTextService();
 
-        return $generator->generateRandomString();
+        return $utilTextService->generateRandomString(32);
     }
 
     /**
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Logger/TransitionLog.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Logger/TransitionLog.php
index 5b04887..a8580a7 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Logger/TransitionLog.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/Logger/TransitionLog.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\StateMachine\Business\Logger;
 
 use Generated\Shared\Transfer\StateMachineItemTransfer;
 use Orm\Zed\StateMachine\Persistence\SpyStateMachineTransitionLog;
-use Spryker\Shared\Library\System;
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
 use Spryker\Zed\StateMachine\Business\Process\EventInterface;
 use Spryker\Zed\StateMachine\Dependency\Plugin\CommandPluginInterface;
 use Spryker\Zed\StateMachine\Dependency\Plugin\ConditionPluginInterface;
@@ -30,11 +30,17 @@ class TransitionLog implements TransitionLogInterface
     protected $pathFinder;
 
     /**
+     * @var \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
+     */
+    protected $utilNetworkService;
+
+    /**
      * @param \Spryker\Zed\StateMachine\Business\Logger\PathFinderInterface $pathFinder
      */
-    public function __construct(PathFinderInterface $pathFinder)
+    public function __construct(PathFinderInterface $pathFinder, UtilNetworkServiceInterface $utilNetworkService)
     {
         $this->pathFinder = $pathFinder;
+        $this->utilNetworkService = $utilNetworkService;
     }
 
     /**
@@ -145,7 +151,7 @@ class TransitionLog implements TransitionLogInterface
         $stateMachineTransitionLogEntity->setFkStateMachineProcess(
             $stateMachineItemTransfer->getIdStateMachineProcess()
         );
-        $stateMachineTransitionLogEntity->setHostname(System::getHostname());
+        $stateMachineTransitionLogEntity->setHostname($this->utilNetworkService->getHostname());
 
         $path = $this->pathFinder->getCurrentExecutionPath();
         $stateMachineTransitionLogEntity->setPath($path);
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/StateMachineBusinessFactory.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/StateMachineBusinessFactory.php
index 6820493..07a73f0 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/StateMachineBusinessFactory.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Business/StateMachineBusinessFactory.php
@@ -140,7 +140,8 @@ class StateMachineBusinessFactory extends AbstractBusinessFactory
     public function createLoggerTransitionLog()
     {
         return new TransitionLog(
-            $this->createPathFinder()
+            $this->createPathFinder(),
+            $this->getUtilNetworkService()
         );
     }
 
@@ -229,4 +230,12 @@ class StateMachineBusinessFactory extends AbstractBusinessFactory
         return $this->getProvidedDependency(StateMachineDependencyProvider::PLUGINS_STATE_MACHINE_HANDLERS);
     }
 
+    /**
+     * @return \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
+     */
+    protected function getUtilNetworkService()
+    {
+        return $this->getProvidedDependency(StateMachineDependencyProvider::SERVICE_NETWORK);
+    }
+
 }
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckConditionConsole.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckConditionConsole.php
index c233817..471863b 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckConditionConsole.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckConditionConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\StateMachine\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckTimeoutConsole.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckTimeoutConsole.php
index cf1adfe..85a2a8f 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckTimeoutConsole.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/CheckTimeoutConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\StateMachine\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/ClearLocksConsole.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/ClearLocksConsole.php
index 3ec430b..9027849 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/ClearLocksConsole.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Console/ClearLocksConsole.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\StateMachine\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/GraphController.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/GraphController.php
index 531794b..3afc1ea 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/GraphController.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/GraphController.php
@@ -7,8 +7,8 @@
 namespace Spryker\Zed\StateMachine\Communication\Controller;
 
 use Generated\Shared\Transfer\StateMachineProcessTransfer;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
 
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/ListController.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/ListController.php
index 90d64af..bbf41e2 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/ListController.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/ListController.php
@@ -6,7 +6,7 @@
 
 namespace Spryker\Zed\StateMachine\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/TriggerController.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/TriggerController.php
index 2d6461a..6a2bd46 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/TriggerController.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/Communication/Controller/TriggerController.php
@@ -8,7 +8,7 @@ namespace Spryker\Zed\StateMachine\Communication\Controller;
 
 use Generated\Shared\Transfer\StateMachineItemTransfer;
 use Generated\Shared\Transfer\StateMachineProcessTransfer;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/StateMachineDependencyProvider.php b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/StateMachineDependencyProvider.php
index e1164a8..66d032d 100644
--- a/Bundles/StateMachine/src/Spryker/Zed/StateMachine/StateMachineDependencyProvider.php
+++ b/Bundles/StateMachine/src/Spryker/Zed/StateMachine/StateMachineDependencyProvider.php
@@ -16,6 +16,7 @@ class StateMachineDependencyProvider extends AbstractBundleDependencyProvider
 
     const PLUGINS_STATE_MACHINE_HANDLERS = 'PLUGINS_STATE_MACHINE_HANDLERS';
     const PLUGIN_GRAPH = 'PLUGIN_GRAPH';
+    const SERVICE_NETWORK = 'util network service';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -31,6 +32,10 @@ class StateMachineDependencyProvider extends AbstractBundleDependencyProvider
         $container[self::PLUGIN_GRAPH] = function () {
             return $this->getGraphPlugin();
         };
+
+        $container[static::SERVICE_NETWORK] = function (Container $container) {
+            return $container->getLocator()->utilNetwork()->service();
+        };
     }
 
     /**
diff --git a/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeExceptionTest.php b/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeExceptionTest.php
index c9ca2b6..824e018 100644
--- a/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeExceptionTest.php
+++ b/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeExceptionTest.php
@@ -11,6 +11,7 @@ use Codeception\TestCase\Test;
 use Functional\Spryker\Zed\StateMachine\Mocks\StateMachineConfig;
 use Functional\Spryker\Zed\StateMachine\Mocks\TestStateMachineHandlerException;
 use Generated\Shared\Transfer\StateMachineProcessTransfer;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
 use Spryker\Zed\Graph\Communication\Plugin\GraphPlugin;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\StateMachine\Business\StateMachineBusinessFactory;
@@ -98,6 +99,10 @@ class StateMachineFacadeExceptionTest extends Test
              return new GraphPlugin();
         };
 
+        $container[StateMachineDependencyProvider::SERVICE_NETWORK] = function () {
+             return new UtilNetworkService();
+        };
+
         $stateMachineBusinessFactory->setContainer($container);
 
         $stateMachineFacade = new StateMachineFacade();
diff --git a/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeTest.php b/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeTest.php
index 63acf98..8727d89 100644
--- a/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeTest.php
+++ b/Bundles/StateMachine/tests/Functional/Spryker/Zed/StateMachine/Business/StateMachineFacadeTest.php
@@ -18,6 +18,7 @@ use Orm\Zed\StateMachine\Persistence\SpyStateMachineItemStateQuery;
 use Orm\Zed\StateMachine\Persistence\SpyStateMachineLock;
 use Orm\Zed\StateMachine\Persistence\SpyStateMachineLockQuery;
 use Orm\Zed\StateMachine\Persistence\SpyStateMachineProcessQuery;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
 use Spryker\Zed\Graph\Communication\Plugin\GraphPlugin;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\StateMachine\Business\StateMachineBusinessFactory;
@@ -590,6 +591,9 @@ class StateMachineFacadeTest extends Test
         $container[StateMachineDependencyProvider::PLUGIN_GRAPH] = function () {
              return new GraphPlugin();
         };
+        $container[StateMachineDependencyProvider::SERVICE_NETWORK] = function () {
+             return new UtilNetworkService();
+        };
 
         $stateMachineBusinessFactory->setContainer($container);
 
diff --git a/Bundles/StateMachine/tests/Unit/Spryker/Zed/StateMachine/Business/Logger/TransitionLogTest.php b/Bundles/StateMachine/tests/Unit/Spryker/Zed/StateMachine/Business/Logger/TransitionLogTest.php
index 41cf414..d67dfdc 100644
--- a/Bundles/StateMachine/tests/Unit/Spryker/Zed/StateMachine/Business/Logger/TransitionLogTest.php
+++ b/Bundles/StateMachine/tests/Unit/Spryker/Zed/StateMachine/Business/Logger/TransitionLogTest.php
@@ -9,6 +9,7 @@ namespace Unit\Spryker\Zed\StateMachine\Business\Logger;
 
 use Generated\Shared\Transfer\StateMachineItemTransfer;
 use Orm\Zed\StateMachine\Persistence\SpyStateMachineTransitionLog;
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
 use Spryker\Zed\StateMachine\Business\Logger\PathFinderInterface;
 use Spryker\Zed\StateMachine\Business\Logger\TransitionLog;
 use Spryker\Zed\StateMachine\Business\Process\Event;
@@ -91,13 +92,13 @@ class TransitionLogTest extends StateMachineMocks
     /**
      * @param \Orm\Zed\StateMachine\Persistence\SpyStateMachineTransitionLog $stateMachineTransitionLogEntityMock
      *
-     * @return \Spryker\Zed\StateMachine\Business\Logger\TransitionLog
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\StateMachine\Business\Logger\TransitionLog
      */
     protected function createTransitionLog(SpyStateMachineTransitionLog $stateMachineTransitionLogEntityMock)
     {
         $partialTransitionLogMock = $this->getMockBuilder(TransitionLog::class)
             ->setMethods(['createStateMachineTransitionLogEntity'])
-            ->setConstructorArgs([$this->createPathFinderMock()])
+            ->setConstructorArgs([$this->createPathFinderMock(), $this->createUtilNetworkServiceMock()])
             ->getMock();
 
         $partialTransitionLogMock->method('createStateMachineTransitionLogEntity')
@@ -123,6 +124,17 @@ class TransitionLogTest extends StateMachineMocks
     }
 
     /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
+     */
+    protected function createUtilNetworkServiceMock()
+    {
+        $utilNetworkServiceMock = $this->getMockBuilder(UtilNetworkServiceInterface::class)->setMethods(['getHostName', 'getRequestId'])->getMock();
+        $utilNetworkServiceMock->method('getHostName')->willReturn('hostname-mock');
+
+        return $utilNetworkServiceMock;
+    }
+
+    /**
      * @return \Generated\Shared\Transfer\StateMachineItemTransfer
      */
     protected function createItemTransfer()
diff --git a/Bundles/StepEngine/composer.json b/Bundles/StepEngine/composer.json
index 1a4da55..e581b5d 100644
--- a/Bundles/StepEngine/composer.json
+++ b/Bundles/StepEngine/composer.json
@@ -6,8 +6,8 @@
     }
   },
   "require": {
-    "spryker/symfony": "^2.0.0",
-    "spryker/transfer": "^2.0.0"
+    "spryker/kernel": "^3.0.0",
+    "spryker/symfony": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/DataContainer/DataContainerInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/DataContainer/DataContainerInterface.php
index 55ae4ab..a9fd719 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/DataContainer/DataContainerInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/DataContainer/DataContainerInterface.php
@@ -7,18 +7,18 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\DataContainer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 interface DataContainerInterface
 {
 
     /**
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function get();
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return void
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Form/StepEngineFormDataProviderInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Form/StepEngineFormDataProviderInterface.php
index 76c54f4..322a747 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Form/StepEngineFormDataProviderInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Form/StepEngineFormDataProviderInterface.php
@@ -7,20 +7,20 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\Form;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 interface StepEngineFormDataProviderInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function getData(AbstractTransfer $dataTransfer);
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return array
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginInterface.php
index 11b32ea..b7b7ed7 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\Plugin\Handler;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Symfony\Component\HttpFoundation\Request;
 
 interface StepHandlerPluginInterface
@@ -17,9 +17,9 @@ interface StepHandlerPluginInterface
      * @api
      *
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function addToDataClass(Request $request, AbstractTransfer $dataTransfer);
 
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginWithMessengerInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginWithMessengerInterface.php
index c9ada8a..cee5c43 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginWithMessengerInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Plugin/Handler/StepHandlerPluginWithMessengerInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\Plugin\Handler;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\Messenger\FlashMessenger\FlashMessengerInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -18,9 +18,9 @@ interface StepHandlerPluginWithMessengerInterface extends StepHandlerPluginInter
      * @api
      *
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function addToDataClass(Request $request, AbstractTransfer $dataTransfer);
 
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/AbstractBaseStep.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/AbstractBaseStep.php
index d890d1d..a67be90 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/AbstractBaseStep.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/AbstractBaseStep.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\Step;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 abstract class AbstractBaseStep implements StepInterface
 {
@@ -49,7 +49,7 @@ abstract class AbstractBaseStep implements StepInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return array
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/StepInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/StepInterface.php
index 80053c8..efbac61 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/StepInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Dependency/Step/StepInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Dependency\Step;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Symfony\Component\HttpFoundation\Request;
 
 interface StepInterface
@@ -16,7 +16,7 @@ interface StepInterface
     /**
      * Requirements for this step, return true when satisfied.
      *
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -25,7 +25,7 @@ interface StepInterface
     /**
      * Require input, should we render view with form or just skip step after calling execute.
      *
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -35,16 +35,16 @@ interface StepInterface
      * Execute step logic, happens after form submit if provided, gets AbstractTransfer filled by form data.
      *
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function execute(Request $request, AbstractTransfer $dataTransfer);
 
     /**
      * Conditions that should be met for this step to be marked as completed. returns true when satisfied.
      *
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -65,7 +65,7 @@ interface StepInterface
     public function getEscapeRoute();
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return array
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandler.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandler.php
index 010a62d..ba49bba 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandler.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandler.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Form;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 use Spryker\Yves\StepEngine\Exception\InvalidFormHandleRequest;
 use Symfony\Component\Form\FormFactoryInterface;
@@ -53,7 +53,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return array|\Symfony\Component\Form\FormInterface[]
      */
@@ -67,7 +67,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -84,7 +84,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @throws \Spryker\Yves\StepEngine\Exception\InvalidFormHandleRequest
      *
@@ -104,7 +104,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return void
      */
@@ -118,9 +118,9 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getFormData(AbstractTransfer $dataTransfer)
     {
@@ -132,7 +132,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return array
      */
@@ -148,7 +148,7 @@ class FormCollectionHandler implements FormCollectionHandlerInterface
 
     /**
      * @param \Symfony\Component\Form\FormTypeInterface $formType
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Symfony\Component\Form\FormInterface
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandlerInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandlerInterface.php
index d773a06..44d51fa 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandlerInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Form/FormCollectionHandlerInterface.php
@@ -7,14 +7,14 @@
 
 namespace Spryker\Yves\StepEngine\Form;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Symfony\Component\HttpFoundation\Request;
 
 interface FormCollectionHandlerInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Symfony\Component\Form\FormInterface[]
      */
@@ -22,7 +22,7 @@ interface FormCollectionHandlerInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -30,14 +30,14 @@ interface FormCollectionHandlerInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Symfony\Component\Form\FormInterface|null
      */
     public function handleRequest(Request $request, AbstractTransfer $dataTransfer);
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return void
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollection.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollection.php
index d9db6fe..1a5d4b3 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollection.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollection.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Process;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\StepInterface;
 use Spryker\Yves\StepEngine\Dependency\Step\StepWithExternalRedirectInterface;
 use Spryker\Yves\StepEngine\Dependency\Step\StepWithPostConditionErrorRouteInterface;
@@ -62,7 +62,7 @@ class StepCollection implements StepCollectionInterface
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -82,7 +82,7 @@ class StepCollection implements StepCollectionInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Spryker\Yves\StepEngine\Dependency\Step\StepInterface[]
      */
@@ -100,7 +100,7 @@ class StepCollection implements StepCollectionInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Spryker\Yves\StepEngine\Dependency\Step\StepInterface
      */
@@ -168,7 +168,7 @@ class StepCollection implements StepCollectionInterface
 
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return string
      */
@@ -185,7 +185,7 @@ class StepCollection implements StepCollectionInterface
 
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return string
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollectionInterface.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollectionInterface.php
index b4e2933..44fc077 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollectionInterface.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepCollectionInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Process;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\StepInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -24,7 +24,7 @@ interface StepCollectionInterface
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $step
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -32,7 +32,7 @@ interface StepCollectionInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return \Spryker\Yves\StepEngine\Dependency\Step\StepInterface
      */
@@ -61,7 +61,7 @@ interface StepCollectionInterface
 
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return string
      */
diff --git a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepEngine.php b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepEngine.php
index 63d5a26..aeae0d9 100644
--- a/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepEngine.php
+++ b/Bundles/StepEngine/src/Spryker/Yves/StepEngine/Process/StepEngine.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Yves\StepEngine\Process;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\DataContainer\DataContainerInterface;
 use Spryker\Yves\StepEngine\Dependency\Step\StepInterface;
 use Spryker\Yves\StepEngine\Form\FormCollectionHandlerInterface;
@@ -55,7 +55,7 @@ class StepEngine implements StepEngineInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      * @param \Spryker\Yves\StepEngine\Form\FormCollectionHandlerInterface|null $formCollection
      *
      * @return array|\Symfony\Component\HttpFoundation\RedirectResponse
@@ -101,7 +101,7 @@ class StepEngine implements StepEngineInterface
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return void
      */
@@ -115,8 +115,8 @@ class StepEngine implements StepEngineInterface
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $formTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $formTransfer
      *
      * @return void
      */
@@ -144,7 +144,7 @@ class StepEngine implements StepEngineInterface
 
     /**
      * @param \Spryker\Yves\StepEngine\Dependency\Step\StepInterface $currentStep
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      * @param \Spryker\Yves\StepEngine\Form\FormCollectionHandlerInterface|null $formCollection
      *
      * @return array
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/BaseStepTest.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/BaseStepTest.php
index 43f390f..d14cd0a 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/BaseStepTest.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/BaseStepTest.php
@@ -8,7 +8,7 @@
 namespace Unit\Spryker\Yves\StepEngine\Dependency\Step;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\StepInterface;
 use Unit\Spryker\Yves\StepEngine\Dependency\Step\Fixtures\BaseStep;
 
@@ -73,7 +73,7 @@ class BaseStepTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Transfer\AbstractTransfer
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     private function getDataTransferMock()
     {
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/BaseStep.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/BaseStep.php
index fa9af37..f4073c9 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/BaseStep.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/BaseStep.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Yves\StepEngine\Dependency\Step\Fixtures;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Symfony\Component\HttpFoundation\Request;
 use Spryker\Yves\StepEngine\Dependency\Step\AbstractBaseStep as AbstractBaseStep;
 
@@ -15,7 +15,7 @@ class BaseStep extends AbstractBaseStep
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -25,7 +25,7 @@ class BaseStep extends AbstractBaseStep
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -36,7 +36,7 @@ class BaseStep extends AbstractBaseStep
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return void
      */
@@ -45,7 +45,7 @@ class BaseStep extends AbstractBaseStep
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/TestTransfer.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/TestTransfer.php
index cea655a..207a1cb 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/TestTransfer.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Dependency/Step/Fixtures/TestTransfer.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Yves\StepEngine\Dependencx\Step\Fixtures;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class TestTransfer extends AbstractTransfer
 {
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Form/FormCollectionHandlerTest.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Form/FormCollectionHandlerTest.php
index 24c5008..3820d98 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Form/FormCollectionHandlerTest.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Form/FormCollectionHandlerTest.php
@@ -8,7 +8,7 @@
 namespace Unit\Spryker\Yves\StepEngine\Form;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Form\StepEngineFormDataProviderInterface;
 use Spryker\Yves\StepEngine\Exception\InvalidFormHandleRequest;
 use Spryker\Yves\StepEngine\Form\FormCollectionHandler;
@@ -235,7 +235,7 @@ class FormCollectionHandlerTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Transfer\AbstractTransfer
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     private function getDataTransferMock()
     {
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/AbstractStepEngineTest.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/AbstractStepEngineTest.php
index 369f8a9..e42c131 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/AbstractStepEngineTest.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/AbstractStepEngineTest.php
@@ -8,7 +8,7 @@
 namespace Unit\Spryker\Yves\StepEngine\Process;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\StepWithExternalRedirectInterface;
 use Spryker\Yves\StepEngine\Process\StepCollection;
 use Symfony\Component\HttpFoundation\Request;
@@ -108,7 +108,7 @@ abstract class AbstractStepEngineTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Transfer\AbstractTransfer
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     protected function getDataTransferMock()
     {
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/Fixtures/StepMock.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/Fixtures/StepMock.php
index 74b3bd0..e13ca8d 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/Fixtures/StepMock.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/Fixtures/StepMock.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Yves\StepEngine\Process\Fixtures;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\Step\StepInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -62,7 +62,7 @@ class StepMock implements StepInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -72,7 +72,7 @@ class StepMock implements StepInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -83,9 +83,9 @@ class StepMock implements StepInterface
 
     /**
      * @param \Symfony\Component\HttpFoundation\Request $request
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
-     * @return \Spryker\Shared\Transfer\AbstractTransfer
+     * @return \Spryker\Shared\Kernel\Transfer\AbstractTransfer
      */
     public function execute(Request $request, AbstractTransfer $dataTransfer)
     {
@@ -93,7 +93,7 @@ class StepMock implements StepInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $dataTransfer
      *
      * @return bool
      */
@@ -119,7 +119,7 @@ class StepMock implements StepInterface
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer $quoteTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer $quoteTransfer
      *
      * @return array
      */
diff --git a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/StepEngineTest.php b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/StepEngineTest.php
index 3f9c400..384ac0e 100644
--- a/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/StepEngineTest.php
+++ b/Bundles/StepEngine/tests/Unit/Spryker/Yves/StepEngine/Process/StepEngineTest.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Yves\StepEngine\Process;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 use Spryker\Yves\StepEngine\Dependency\DataContainer\DataContainerInterface;
 use Spryker\Yves\StepEngine\Form\FormCollectionHandlerInterface;
 use Spryker\Yves\StepEngine\Process\StepEngine;
@@ -169,7 +169,7 @@ class StepEngineTest extends AbstractStepEngineTest
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\AbstractTransfer|null $dataTransfer
+     * @param \Spryker\Shared\Kernel\Transfer\AbstractTransfer|null $dataTransfer
      *
      * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Yves\StepEngine\Dependency\DataContainer\DataContainerInterface
      */
diff --git a/Bundles/Stock/composer.json b/Bundles/Stock/composer.json
index fcdf4f9..5ae51ba 100644
--- a/Bundles/Stock/composer.json
+++ b/Bundles/Stock/composer.json
@@ -6,14 +6,15 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/touch": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Stock bundle",
diff --git a/Bundles/Stock/src/Spryker/Zed/Stock/Communication/Controller/ProductController.php b/Bundles/Stock/src/Spryker/Zed/Stock/Communication/Controller/ProductController.php
index 91feba1..b43e9b4 100644
--- a/Bundles/Stock/src/Spryker/Zed/Stock/Communication/Controller/ProductController.php
+++ b/Bundles/Stock/src/Spryker/Zed/Stock/Communication/Controller/ProductController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Stock\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\Stock\Business\StockFacadeInterface getFacade()
diff --git a/Bundles/StockSalesConnector/tests/Functional.suite.yml b/Bundles/StockSalesConnector/tests/Functional.suite.yml
deleted file mode 100644
index 553fc73..0000000
--- a/Bundles/StockSalesConnector/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \StockSalesConnector\Module\Functional
diff --git a/Bundles/StockSalesConnector/tests/Functional/_bootstrap.php b/Bundles/StockSalesConnector/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/StockSalesConnector/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/StockSalesConnector/tests/_support/FunctionalTester.php b/Bundles/StockSalesConnector/tests/_support/FunctionalTester.php
deleted file mode 100644
index 8d8f1dd..0000000
--- a/Bundles/StockSalesConnector/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace StockSalesConnector;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/StockSalesConnector/tests/_support/Module/Functional.php b/Bundles/StockSalesConnector/tests/_support/Module/Functional.php
deleted file mode 100644
index fa812a9..0000000
--- a/Bundles/StockSalesConnector/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace StockSalesConnector\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Storage/composer.json b/Bundles/Storage/composer.json
index 5cacac1..bb2e0fa 100644
--- a/Bundles/Storage/composer.json
+++ b/Bundles/Storage/composer.json
@@ -12,22 +12,25 @@
     }
   },
   "require": {
-    "spryker/application": "^2.3.0",
-    "spryker/collector": "^2.0.0 || ^3.0.0 || ^4.0.0",
     "spryker/config": "^2.2.1",
     "spryker/gui": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/redis": "^2.0.0",
-    "spryker/session": "^2.0.0",
     "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.0.0",
-    "spryker/url": "^2.0.0"
+    "spryker/util-sanitize": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/collector-storage-connector": "You need to add this bundle if you want to use dropStorageTimestamps functionality from Collector bundle"
+  },
   "description": "Storage bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Storage/src/Spryker/Client/Storage/ServiceProvider/StorageClientServiceProvider.php b/Bundles/Storage/src/Spryker/Client/Storage/ServiceProvider/StorageClientServiceProvider.php
new file mode 100644
index 0000000..f86f86f
--- /dev/null
+++ b/Bundles/Storage/src/Spryker/Client/Storage/ServiceProvider/StorageClientServiceProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Storage\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Client\Kernel\Container;
+use Spryker\Shared\Kernel\ContainerGlobals;
+
+class StorageClientServiceProvider implements ServiceProviderInterface
+{
+
+    const CLIENT_STORAGE = 'storage client';
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $containerGlobals = new ContainerGlobals();
+        $containerGlobals[static::CLIENT_STORAGE] = function () {
+            $container = new Container();
+
+            return $container->getLocator()->storage()->client();
+        };
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/Storage/src/Spryker/Client/Storage/StorageClientFactoryTrait.php b/Bundles/Storage/src/Spryker/Client/Storage/StorageClientFactoryTrait.php
new file mode 100644
index 0000000..425cfea
--- /dev/null
+++ b/Bundles/Storage/src/Spryker/Client/Storage/StorageClientFactoryTrait.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\Storage;
+
+use Spryker\Client\Storage\ServiceProvider\StorageClientServiceProvider;
+
+trait StorageClientFactoryTrait
+{
+
+    /**
+     * @return \Spryker\Client\Storage\StorageClientInterface
+     */
+    public function getStorageClient()
+    {
+        return $this->getProvidedDependency(StorageClientServiceProvider::CLIENT_STORAGE);
+    }
+
+    /**
+     * @param string $key
+     *
+     * @throws \Spryker\Client\Kernel\Exception\Container\ContainerKeyNotFoundException
+     *
+     * @return mixed
+     */
+    abstract public function getProvidedDependency($key);
+
+}
diff --git a/Bundles/Storage/src/Spryker/Client/Storage/StorageFactory.php b/Bundles/Storage/src/Spryker/Client/Storage/StorageFactory.php
index 1531b42..406cc66 100644
--- a/Bundles/Storage/src/Spryker/Client/Storage/StorageFactory.php
+++ b/Bundles/Storage/src/Spryker/Client/Storage/StorageFactory.php
@@ -11,7 +11,6 @@ use Predis\Client;
 use Spryker\Client\Kernel\AbstractFactory;
 use Spryker\Client\Storage\Redis\Service;
 use Spryker\Shared\Config\Config;
-use Spryker\Shared\Session\SessionConstants;
 use Spryker\Shared\Storage\StorageConstants;
 
 class StorageFactory extends AbstractFactory
@@ -69,27 +68,20 @@ class StorageFactory extends AbstractFactory
      */
     protected function getConnectionParameters()
     {
-        // TODO: Remove defaults. The default Config::get() values are for BC only.
         $config = [
-            'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL, Config::get(SessionConstants::YVES_SESSION_REDIS_PROTOCOL)),
-            'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT, Config::get(SessionConstants::YVES_SESSION_REDIS_PORT)),
-            'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST, Config::get(SessionConstants::YVES_SESSION_REDIS_HOST)),
+            'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL),
+            'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT),
+            'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST),
             'database' => Config::get(StorageConstants::STORAGE_REDIS_DATABASE, static::DEFAULT_REDIS_DATABASE),
         ];
 
-        // TODO: Remove elseif. Only for BC.
         if (Config::hasKey(StorageConstants::STORAGE_REDIS_PASSWORD)) {
             $config['password'] = Config::get(StorageConstants::STORAGE_REDIS_PASSWORD);
-        } elseif (Config::hasKey(SessionConstants::YVES_SESSION_REDIS_PASSWORD)) {
-            $config['password'] = Config::get(SessionConstants::YVES_SESSION_REDIS_PASSWORD);
         }
 
-        // TODO: Remove elseif. Only for BC.
         $config['persistent'] = false;
         if (Config::hasKey(StorageConstants::STORAGE_PERSISTENT_CONNECTION)) {
             $config['persistent'] = (bool)Config::get(StorageConstants::STORAGE_PERSISTENT_CONNECTION);
-        } elseif (Config::hasKey(SessionConstants::YVES_SESSION_PERSISTENT_CONNECTION)) {
-            $config['persistent'] = (bool)Config::get(SessionConstants::YVES_SESSION_PERSISTENT_CONNECTION);
         }
 
         return $config;
diff --git a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractKeyValue.php b/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractKeyValue.php
deleted file mode 100644
index ee1ac86..0000000
--- a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractKeyValue.php
+++ /dev/null
@@ -1,144 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Storage\Client;
-
-use Spryker\Shared\Library\Storage\AdapterInterface;
-use Spryker\Shared\Library\Storage\AdapterTrait;
-
-/**
- * @deprecated Not used anymore.
- */
-abstract class AbstractKeyValue implements AdapterInterface
-{
-
-    use AdapterTrait;
-
-    /**
-     * @var array
-     */
-    protected $accessStats;
-
-    /**
-     * @param array $config
-     * @param bool $debug
-     */
-    public function __construct(array $config, $debug = false)
-    {
-        $this->config = $config;
-        $this->debug = $debug;
-        $this->resetAccessStats();
-    }
-
-    /**
-     * set read write stats array
-     *
-     * @return void
-     */
-    public function resetAccessStats()
-    {
-        $this->accessStats = [
-            'count' => [
-                'read' => 0,
-                'write' => 0,
-                'delete' => 0,
-            ],
-            'keys' => [
-                'read' => [],
-                'write' => [],
-                'delete' => [],
-            ],
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    public function getAccessStats()
-    {
-        return $this->accessStats;
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addReadAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['read']++;
-            $this->accessStats['keys']['read'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    protected function addMultiReadAccessStats(array $keys)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['read'] += count($keys);
-            $this->accessStats['keys']['read'] = $this->accessStats['keys']['read'] + $keys;
-        }
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addWriteAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['write']++;
-            $this->accessStats['keys']['write'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $items
-     *
-     * @return void
-     */
-    protected function addMultiWriteAccessStats(array $items)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['write'] += count($items);
-            $this->accessStats['keys']['write'] = $this->accessStats['keys']['write'] + array_keys($items);
-        }
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return void
-     */
-    protected function addDeleteAccessStats($key)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['delete']++;
-            $this->accessStats['keys']['delete'][] = $key;
-        }
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    protected function addMultiDeleteAccessStats(array $keys)
-    {
-        if ($this->debug) {
-            $this->accessStats['count']['delete'] += count($keys);
-            $this->accessStats['keys']['delete'] = $this->accessStats['keys']['delete'] + $keys;
-        }
-    }
-
-}
diff --git a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedis.php b/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedis.php
deleted file mode 100644
index e5c8681..0000000
--- a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedis.php
+++ /dev/null
@@ -1,57 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Storage\Client;
-
-use Predis\Client;
-use Predis\Connection\ConnectionException;
-
-/**
- * @deprecated Not used anymore.
- *
- * @property \Predis\Client $resource
- *
- * @method \Predis\Client getResource()
- */
-abstract class AbstractRedis extends AbstractKeyValue
-{
-
-    /**
-     * @throws \Predis\Connection\ConnectionException
-     *
-     * @return void
-     */
-    public function connect()
-    {
-        if (!$this->resource) {
-            $resource = new Client(
-                [
-                    'protocol' => $this->config['protocol'],
-                    'host' => $this->config['host'],
-                    'port' => $this->config['port'],
-                ]
-            );
-
-            if (!$resource) {
-                throw new ConnectionException($resource, 'Could not connect to redis server');
-            }
-
-            $this->resource = $resource;
-        }
-    }
-
-    /**
-     * close redis connection
-     */
-    public function __destruct()
-    {
-        if ($this->resource) {
-            $this->resource->disconnect();
-        }
-    }
-
-}
diff --git a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisRead.php b/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisRead.php
deleted file mode 100644
index 0856bf4..0000000
--- a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisRead.php
+++ /dev/null
@@ -1,109 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Storage\Client;
-
-/**
- * @deprecated Not used anymore.
- */
-abstract class AbstractRedisRead extends AbstractRedis implements ReadInterface
-{
-
-    const KV_PREFIX = 'kv:';
-
-    /**
-     * @param string $key
-     * @param string $prefix
-     *
-     * @return mixed|string
-     */
-    public function get($key, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $value = $this->getResource()->get($key);
-        $this->addReadAccessStats($key);
-
-        $result = json_decode($value, true);
-
-        if (json_last_error() === JSON_ERROR_SYNTAX) {
-            return $value;
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     * @param string $prefix
-     *
-     * @return array
-     */
-    public function getMulti(array $keys, $prefix = self::KV_PREFIX)
-    {
-        $transformedKeys = [];
-        foreach ($keys as $key) {
-            $transformedKeys[] = $this->getKeyName($key, $prefix);
-        }
-
-        $values = array_combine($transformedKeys, $this->getResource()->mget($transformedKeys));
-        $this->addMultiReadAccessStats($keys);
-
-        return $values;
-    }
-
-    /**
-     * @param string|null $section
-     *
-     * @return array
-     */
-    public function getStats($section = null)
-    {
-        return $this->getResource()->info($section);
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return array
-     */
-    public function getAllKeys($prefix = self::KV_PREFIX)
-    {
-        return $this->getResource()->keys($this->getSearchPattern($prefix));
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return int
-     */
-    public function getCountItems($prefix = self::KV_PREFIX)
-    {
-        return count($this->getResource()->keys($this->getSearchPattern($prefix)));
-    }
-
-    /**
-     * @param string|null $prefix
-     *
-     * @return string
-     */
-    protected function getSearchPattern($prefix = self::KV_PREFIX)
-    {
-        return $prefix ? $prefix . '*' : '*';
-    }
-
-    /**
-     * @param string $key
-     * @param string $prefix
-     *
-     * @return string
-     */
-    protected function getKeyName($key, $prefix = self::KV_PREFIX)
-    {
-        return $prefix ? $prefix . $key : $key;
-    }
-
-}
diff --git a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisReadWrite.php b/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisReadWrite.php
deleted file mode 100644
index 7e5c20e..0000000
--- a/Bundles/Storage/src/Spryker/Shared/Storage/Client/AbstractRedisReadWrite.php
+++ /dev/null
@@ -1,117 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Storage\Client;
-
-use Exception;
-
-/**
- * @deprecated Not used anymore.
- */
-abstract class AbstractRedisReadWrite extends AbstractRedisRead implements ReadWriteInterface
-{
-
-    /**
-     * @param string $key
-     * @param mixed $value
-     * @param string $prefix
-     *
-     * @throws \Exception
-     *
-     * @return mixed
-     */
-    public function set($key, $value, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $result = $this->getResource()->set($key, $value);
-        $this->addWriteAccessStats($key);
-        if (!$result) {
-            throw new Exception(
-                'could not set redisKey: "' . $key . '" with value: "' . json_encode($value) . '"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param array $items
-     * @param string $prefix
-     *
-     * @throws \Exception
-     *
-     * @return bool|mixed
-     */
-    public function setMulti(array $items, $prefix = self::KV_PREFIX)
-    {
-        $data = [];
-
-        foreach ($items as $key => $value) {
-            $dataKey = $this->getKeyName($key, $prefix);
-
-            if (!is_scalar($value)) {
-                $value = json_encode($value);
-            }
-
-            $data[$dataKey] = $value;
-        }
-
-        if (count($data) === 0) {
-            return false;
-        }
-
-        $result = $this->getResource()->mset($data);
-        $this->addMultiWriteAccessStats($data);
-
-        if (!$result) {
-            throw new Exception(
-                'could not set redisKeys for items: "[' . implode(',', array_keys($items)) . ']" with values: "[' . implode(',', array_values($items)) . ']"'
-            );
-        }
-
-        return $result;
-    }
-
-    /**
-     * @param string $key
-     * @param string|null $prefix
-     *
-     * @return int
-     */
-    public function delete($key, $prefix = self::KV_PREFIX)
-    {
-        $key = $this->getKeyName($key, $prefix);
-        $result = $this->getResource()->del([$key]);
-        $this->addDeleteAccessStats($key);
-
-        return $result;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return void
-     */
-    public function deleteMulti(array $keys)
-    {
-        $this->getResource()->del($keys);
-        $this->addMultiDeleteAccessStats($keys);
-    }
-
-    /**
-     * @return int
-     */
-    public function deleteAll()
-    {
-        $keys = $this->getAllKeys();
-        $deleteCount = count($keys);
-        $this->deleteMulti($keys);
-
-        return $deleteCount;
-    }
-
-}
diff --git a/Bundles/Storage/src/Spryker/Shared/Storage/Provider/AbstractKvProvider.php b/Bundles/Storage/src/Spryker/Shared/Storage/Provider/AbstractKvProvider.php
index 1fa7e75..0771484 100644
--- a/Bundles/Storage/src/Spryker/Shared/Storage/Provider/AbstractKvProvider.php
+++ b/Bundles/Storage/src/Spryker/Shared/Storage/Provider/AbstractKvProvider.php
@@ -8,7 +8,6 @@
 namespace Spryker\Shared\Storage\Provider;
 
 use ErrorException;
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\Kernel\AbstractClientProvider;
 use Spryker\Shared\Storage\StorageConstants;
@@ -43,8 +42,7 @@ abstract class AbstractKvProvider extends AbstractClientProvider
      */
     protected function createZedClient()
     {
-        //TODO: Remove BC default.
-        $kvName = Config::get(StorageConstants::STORAGE_KV_SOURCE, Config::get(ApplicationConstants::STORAGE_KV_SOURCE));
+        $kvName = Config::get(StorageConstants::STORAGE_KV_SOURCE);
         $kvConfig = $this->getConfigByKvName($kvName);
         $methodName = $this->createMethodName($kvName);
 
@@ -83,27 +81,20 @@ abstract class AbstractKvProvider extends AbstractClientProvider
      */
     protected function getConnectionParameters()
     {
-        //TODO: Remove BC defaults
         $config = [
-            'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL, Config::get(ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PROTOCOL)),
-            'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT, Config::get(ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PORT)),
-            'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST, Config::get(ApplicationConstants::YVES_STORAGE_SESSION_REDIS_HOST)),
+            'protocol' => Config::get(StorageConstants::STORAGE_REDIS_PROTOCOL),
+            'port' => Config::get(StorageConstants::STORAGE_REDIS_PORT),
+            'host' => Config::get(StorageConstants::STORAGE_REDIS_HOST),
             'database' => Config::get(StorageConstants::STORAGE_REDIS_DATABASE, static::DEFAULT_REDIS_DATABASE),
         ];
 
-        //TODO: Remove BC elseif
         if (Config::hasKey(StorageConstants::STORAGE_REDIS_PASSWORD)) {
             $config['password'] = Config::get(StorageConstants::STORAGE_REDIS_PASSWORD);
-        } elseif (Config::hasKey(ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PASSWORD)) {
-            $config['password'] = Config::get(ApplicationConstants::YVES_STORAGE_SESSION_REDIS_PASSWORD);
         }
 
-        //TODO: Remove BC elseif
         $config['persistent'] = false;
         if (Config::hasKey(StorageConstants::STORAGE_PERSISTENT_CONNECTION)) {
             $config['persistent'] = (bool)Config::get(StorageConstants::STORAGE_PERSISTENT_CONNECTION);
-        } elseif (Config::hasKey(ApplicationConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION)) {
-            $config['password'] = Config::get(ApplicationConstants::YVES_STORAGE_SESSION_PERSISTENT_CONNECTION);
         }
 
         return $config;
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Controller/MaintenanceController.php b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Controller/MaintenanceController.php
index 2e25472..bac3140 100644
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Controller/MaintenanceController.php
+++ b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Controller/MaintenanceController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Storage\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -61,17 +61,6 @@ class MaintenanceController extends AbstractController
     /**
      * @return \Symfony\Component\HttpFoundation\RedirectResponse
      */
-    public function dropTimestampsAction()
-    {
-        $timestamps = $this->getFacade()->getTimestamps();
-        $this->getFactory()->getCollectorFacade()->deleteStorageTimestamps(array_keys($timestamps));
-
-        return $this->redirectResponse(self::URL_STORAGE_MAINTENANCE);
-    }
-
-    /**
-     * @return \Symfony\Component\HttpFoundation\RedirectResponse
-     */
     public function deleteAllAction()
     {
         $numberOfDeletedEntries = $this->getFacade()->deleteAll();
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/StorageCommunicationFactory.php b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/StorageCommunicationFactory.php
index f29ecf4..c49c7a6 100644
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/StorageCommunicationFactory.php
+++ b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/StorageCommunicationFactory.php
@@ -35,12 +35,4 @@ class StorageCommunicationFactory extends AbstractCommunicationFactory
         return $this->getProvidedDependency(StorageDependencyProvider::CLIENT_STORAGE);
     }
 
-    /**
-     * @return \Spryker\Zed\Storage\Dependency\Facade\StorageToCollectorInterface
-     */
-    public function getCollectorFacade()
-    {
-        return $this->getProvidedDependency(StorageDependencyProvider::FACADE_COLLECTOR);
-    }
-
 }
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Table/StorageTable.php b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Table/StorageTable.php
index 441f1fb..09033a5 100644
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Table/StorageTable.php
+++ b/Bundles/Storage/src/Spryker/Zed/Storage/Communication/Table/StorageTable.php
@@ -8,10 +8,10 @@
 namespace Spryker\Zed\Storage\Communication\Table;
 
 use Spryker\Client\Storage\StorageClientInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilSanitize\UtilSanitizeService;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
-use Spryker\Zed\Library\Sanitize\Html;
 
 class StorageTable extends AbstractTable
 {
@@ -79,8 +79,9 @@ class StorageTable extends AbstractTable
 
         foreach ($values as $key => $value) {
             $url = Url::generate('/storage/maintenance/key', ['key' => $key]);
+            $utilSanitizeService = new UtilSanitizeService();
             $result[] = [
-                'key' => '<a href="' . $url . '">' . Html::escape($key) . '</a>',
+                'key' => '<a href="' . $url . '">' . $utilSanitizeService->escapeHtml($key) . '</a>',
                 'value' => substr($value, 0, 200),
             ];
         }
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorBridge.php b/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorBridge.php
deleted file mode 100644
index 3c5584c..0000000
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorBridge.php
+++ /dev/null
@@ -1,36 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Storage\Dependency\Facade;
-
-class StorageToCollectorBridge implements StorageToCollectorInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Collector\Business\CollectorFacadeInterface
-     */
-    protected $collectorFacade;
-
-    /**
-     * @param \Spryker\Zed\Collector\Business\CollectorFacadeInterface $collectorFacade
-     */
-    public function __construct($collectorFacade)
-    {
-        $this->collectorFacade = $collectorFacade;
-    }
-
-    /**
-     * @param array $keys
-     *
-     * @return bool
-     */
-    public function deleteStorageTimestamps(array $keys = [])
-    {
-        return $this->collectorFacade->deleteStorageTimestamps($keys);
-    }
-
-}
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorInterface.php b/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorInterface.php
deleted file mode 100644
index 23cc908..0000000
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Dependency/Facade/StorageToCollectorInterface.php
+++ /dev/null
@@ -1,20 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Storage\Dependency\Facade;
-
-interface StorageToCollectorInterface
-{
-
-    /**
-     * @param array $keys
-     *
-     * @return bool
-     */
-    public function deleteStorageTimestamps(array $keys = []);
-
-}
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/Presentation/Maintenance/index.twig b/Bundles/Storage/src/Spryker/Zed/Storage/Presentation/Maintenance/index.twig
index 903a67f..02bfca8 100644
--- a/Bundles/Storage/src/Spryker/Zed/Storage/Presentation/Maintenance/index.twig
+++ b/Bundles/Storage/src/Spryker/Zed/Storage/Presentation/Maintenance/index.twig
@@ -28,7 +28,7 @@
                         {% endfor %}
                         <tr>
                             <th></th>
-                            <td><a href="/storage/maintenance/drop-timestamps">{{ "Drop timestamps" | trans }}</a></td>
+                            <td><a href="/collector-storage-connector/maintenance/drop-timestamps">{{ "Drop timestamps" | trans }}</a></td>
                         </tr>
                     </table>
                 </div>
diff --git a/Bundles/Storage/src/Spryker/Zed/Storage/StorageDependencyProvider.php b/Bundles/Storage/src/Spryker/Zed/Storage/StorageDependencyProvider.php
index dfb8f5f..f6058fa 100644
--- a/Bundles/Storage/src/Spryker/Zed/Storage/StorageDependencyProvider.php
+++ b/Bundles/Storage/src/Spryker/Zed/Storage/StorageDependencyProvider.php
@@ -9,13 +9,11 @@ namespace Spryker\Zed\Storage;
 
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Storage\Dependency\Facade\StorageToCollectorBridge;
 
 class StorageDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const CLIENT_STORAGE = 'storage client';
-    const FACADE_COLLECTOR = 'collector facade';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -37,7 +35,6 @@ class StorageDependencyProvider extends AbstractBundleDependencyProvider
     public function provideCommunicationLayerDependencies(Container $container)
     {
         $this->addStorageClient($container);
-        $this->addCollectorFacade($container);
 
         return $container;
     }
@@ -54,16 +51,4 @@ class StorageDependencyProvider extends AbstractBundleDependencyProvider
         };
     }
 
-    /**
-     * @param \Spryker\Zed\Kernel\Container $container
-     *
-     * @return void
-     */
-    protected function addCollectorFacade($container)
-    {
-        $container[self::FACADE_COLLECTOR] = function (Container $container) {
-            return new StorageToCollectorBridge($container->getLocator()->collector()->facade());
-        };
-    }
-
 }
diff --git a/Bundles/Storage/tests/Functional/Spryker/Zed/Storage/Business/StorageFacadeTest.php b/Bundles/Storage/tests/Functional/Spryker/Zed/Storage/Business/StorageFacadeTest.php
index ce19c04..d655843 100644
--- a/Bundles/Storage/tests/Functional/Spryker/Zed/Storage/Business/StorageFacadeTest.php
+++ b/Bundles/Storage/tests/Functional/Spryker/Zed/Storage/Business/StorageFacadeTest.php
@@ -22,6 +22,11 @@ class StorageFacadeTest extends Test
 {
 
     /**
+     * @var \Spryker\Zed\Storage\Business\StorageFacade
+     */
+    protected $storageFacade;
+
+    /**
      * @return void
      */
     public function setUp()
diff --git a/Bundles/Symfony/composer.json b/Bundles/Symfony/composer.json
index 3432a97..063c5c3 100644
--- a/Bundles/Symfony/composer.json
+++ b/Bundles/Symfony/composer.json
@@ -6,7 +6,6 @@
     }
   },
   "require": {
-    "spryker/silex": "^2.0.0",
     "symfony-cmf/routing": "^1.3.0",
     "symfony/debug": "^2.6.13",
     "symfony/filesystem": "^2.6.13",
diff --git a/Bundles/Symfony/dependency.json b/Bundles/Symfony/dependency.json
deleted file mode 100644
index 2ac4439..0000000
--- a/Bundles/Symfony/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-  },
-  "exclude": {
-    "Kernel": "Required by optional DoubleSubmitProtectionServiceProvider plugin"
-  }
-}
diff --git a/Bundles/Symfony/src/Spryker/Shared/Symfony/Plugin/ServiceProvider/DoubleSubmitProtectionServiceProvider.php b/Bundles/Symfony/src/Spryker/Shared/Symfony/Plugin/ServiceProvider/DoubleSubmitProtectionServiceProvider.php
deleted file mode 100644
index cc61df5..0000000
--- a/Bundles/Symfony/src/Spryker/Shared/Symfony/Plugin/ServiceProvider/DoubleSubmitProtectionServiceProvider.php
+++ /dev/null
@@ -1,83 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Symfony\Plugin\ServiceProvider;
-
-use Silex\Application;
-use Silex\ServiceProviderInterface;
-use Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\DoubleSubmitProtectionExtension as DoubleSubmitProtectionExtension;
-use Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\RequestTokenProvider\SessionStorage;
-use Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\RequestTokenProvider\TokenHashGenerator;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @deprecated Use \Spryker\Shared\Application\ServiceProvider\DoubleSubmitProtectionServiceProvider instead.
- */
-class DoubleSubmitProtectionServiceProvider extends AbstractPlugin implements ServiceProviderInterface
-{
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function register(Application $app)
-    {
-        $app['form.extension.double_submit_protection'] = $app->share(function ($app) {
-            $translator = isset($app['translator']) ? $app['translator'] : null;
-            return $this->createDoubleSubmitProtectionExtension($app, $translator);
-        });
-
-        $app->extend('form.extensions', function ($extensions) use ($app) {
-            $extensions[] = $app['form.extension.double_submit_protection'];
-            return $extensions;
-        });
-    }
-
-    /**
-     * @return \Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\RequestTokenProvider\TokenHashGenerator
-     */
-    protected function createTokenGenerator()
-    {
-        return new TokenHashGenerator();
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return \Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\RequestTokenProvider\SessionStorage
-     */
-    protected function createTokenStorage(Application $app)
-    {
-        return new SessionStorage($app['session']);
-    }
-
-    /**
-     * @param \Silex\Application $app
-     * @param \Symfony\Component\Translation\TranslatorInterface|null $translator
-     *
-     * @return \Spryker\Shared\Symfony\Form\Extension\DoubleSubmitProtection\DoubleSubmitProtectionExtension
-     */
-    protected function createDoubleSubmitProtectionExtension(Application $app, $translator = null)
-    {
-        return new DoubleSubmitProtectionExtension(
-            $this->createTokenGenerator(),
-            $this->createTokenStorage($app),
-            $translator
-        );
-    }
-
-    /**
-     * @param \Silex\Application $app
-     *
-     * @return void
-     */
-    public function boot(Application $app)
-    {
-    }
-
-}
diff --git a/Bundles/Symfony/tests/Functional.suite.yml b/Bundles/Symfony/tests/Functional.suite.yml
deleted file mode 100644
index 05c0334..0000000
--- a/Bundles/Symfony/tests/Functional.suite.yml
+++ /dev/null
@@ -1,6 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - \Testify\Module\Environment
-        - \Config\Module\ConfigInit
-        - \Symfony\Module\Functional
diff --git a/Bundles/Symfony/tests/Functional/_bootstrap.php b/Bundles/Symfony/tests/Functional/_bootstrap.php
deleted file mode 100644
index b3d9bbc..0000000
--- a/Bundles/Symfony/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1 +0,0 @@
-<?php
diff --git a/Bundles/Symfony/tests/_support/FunctionalTester.php b/Bundles/Symfony/tests/_support/FunctionalTester.php
deleted file mode 100644
index 4b00c88..0000000
--- a/Bundles/Symfony/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Symfony;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Symfony/tests/_support/Module/Functional.php b/Bundles/Symfony/tests/_support/Module/Functional.php
deleted file mode 100644
index f63cacc..0000000
--- a/Bundles/Symfony/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Symfony\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Tax/composer.json b/Bundles/Tax/composer.json
index 5c67056..108b23a 100644
--- a/Bundles/Tax/composer.json
+++ b/Bundles/Tax/composer.json
@@ -6,20 +6,23 @@
     }
   },
   "require": {
-    "spryker/Application": "^2.0.0",
-    "spryker/Gui": "^2.0.0",
-    "spryker/Url": "^2.0.0",
+    "spryker/gui": "^2.0.0",
     "spryker/country": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
-    "spryker/product": "^2.0.0 || ^3.0.0 || ^4.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/symfony": "^2.0.0"
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/symfony": "^2.0.0",
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation."
+  },
   "description": "Tax bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Business/Model/ProductItemTaxRateCalculator.php b/Bundles/Tax/src/Spryker/Zed/Tax/Business/Model/ProductItemTaxRateCalculator.php
deleted file mode 100644
index cda686a..0000000
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Business/Model/ProductItemTaxRateCalculator.php
+++ /dev/null
@@ -1,123 +0,0 @@
-<?php
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Tax\Business\Model;
-
-use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Zed\Tax\Persistence\TaxQueryContainer;
-use Spryker\Zed\Tax\Persistence\TaxQueryContainerInterface;
-
-class ProductItemTaxRateCalculator implements CalculatorInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Tax\Persistence\TaxQueryContainerInterface
-     */
-    protected $taxQueryContainer;
-
-    /**
-     * @var \Spryker\Zed\Tax\Business\Model\TaxDefaultInterface
-     */
-    protected $taxDefault;
-
-    /**
-     * @param \Spryker\Zed\Tax\Persistence\TaxQueryContainerInterface $taxQueryContainer
-     * @param \Spryker\Zed\Tax\Business\Model\TaxDefaultInterface $taxDefault
-     */
-    public function __construct(TaxQueryContainerInterface $taxQueryContainer, TaxDefaultInterface $taxDefault)
-    {
-        $this->taxQueryContainer = $taxQueryContainer;
-        $this->taxDefault = $taxDefault;
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return void
-     */
-    public function recalculate(QuoteTransfer $quoteTransfer)
-    {
-        $countryIso2Code = $this->getShippingCountryIso2Code($quoteTransfer);
-        $allIdProductAbstracts = $this->getAllIdAbstractProducts($quoteTransfer);
-
-        $taxRates = $this->findTaxRatesByAllIdProductAbstractsAndCountryIso2Code($allIdProductAbstracts, $countryIso2Code);
-
-        $this->setItemsTax($quoteTransfer, $taxRates);
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return string
-     */
-    protected function getShippingCountryIso2Code(QuoteTransfer $quoteTransfer)
-    {
-        if ($quoteTransfer->getShippingAddress() === null) {
-            return $this->taxDefault->getDefaultCountryIso2Code();
-        }
-
-        return $quoteTransfer->getShippingAddress()->getIso2Code();
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return array
-     */
-    protected function getAllIdAbstractProducts(QuoteTransfer $quoteTransfer)
-    {
-        $allIdProductAbstracts = [];
-        foreach ($quoteTransfer->getItems() as $itemTransfer) {
-            $allIdProductAbstracts[] = $itemTransfer->getIdProductAbstract();
-        }
-
-        return $allIdProductAbstracts;
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     * @param array $taxRates
-     *
-     * @return void
-     */
-    protected function setItemsTax(QuoteTransfer $quoteTransfer, array $taxRates)
-    {
-        foreach ($quoteTransfer->getItems() as $itemTransfer) {
-            $itemTransfer->setTaxRate($this->getEffectiveTaxRate($taxRates, $itemTransfer->getIdProductAbstract()));
-        }
-    }
-
-    /**
-     * @param array $taxRates
-     * @param int $idProductAbstract
-     *
-     * @return float
-     */
-    protected function getEffectiveTaxRate(array $taxRates, $idProductAbstract)
-    {
-        foreach ($taxRates as $taxRate) {
-            if ((int)$taxRate[TaxQueryContainer::COL_ID_ABSTRACT_PRODUCT] === (int)$idProductAbstract) {
-                return (float)$taxRate[TaxQueryContainer::COL_MAX_TAX_RATE];
-            }
-        }
-
-        return $this->taxDefault->getDefaultTaxRate();
-    }
-
-    /**
-     * @param array $allIdProductAbstracts
-     * @param string $countryIso2Code
-     *
-     * @return array
-     */
-    protected function findTaxRatesByAllIdProductAbstractsAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code)
-    {
-        return $this->taxQueryContainer->queryTaxSetByIdProductAbstractAndCountryIso2Code($allIdProductAbstracts, $countryIso2Code)
-            ->find()
-            ->toArray();
-    }
-
-}
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxBusinessFactory.php b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxBusinessFactory.php
index 188a455..4665904 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxBusinessFactory.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxBusinessFactory.php
@@ -12,7 +12,6 @@ use Spryker\Zed\Tax\Business\Model\AccruedTaxCalculator;
 use Spryker\Zed\Tax\Business\Model\ExpenseTaxCalculator;
 use Spryker\Zed\Tax\Business\Model\ItemTaxCalculator;
 use Spryker\Zed\Tax\Business\Model\PriceCalculationHelper;
-use Spryker\Zed\Tax\Business\Model\ProductItemTaxRateCalculator;
 use Spryker\Zed\Tax\Business\Model\TaxCalculation;
 use Spryker\Zed\Tax\Business\Model\TaxDefault;
 use Spryker\Zed\Tax\Business\Model\TaxReader;
@@ -80,14 +79,6 @@ class TaxBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Tax\Business\Model\ProductItemTaxRateCalculator
-     */
-    public function createProductItemTaxRateCalculator()
-    {
-        return new ProductItemTaxRateCalculator($this->getQueryContainer(), $this->createTaxDefault());
-    }
-
-    /**
      * @return \Spryker\Zed\Tax\Business\Model\PriceCalculationHelperInterface
      */
     public function createPriceCalculationHelper()
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacade.php b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacade.php
index 327a589..708fc4f 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacade.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacade.php
@@ -273,23 +273,6 @@ class TaxFacade extends AbstractFacade implements TaxFacadeInterface
 
     /**
      * Specification:
-     *  - Set tax rate for each item
-     *
-     * @api
-     *
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return void
-     */
-    public function calculateProductItemTaxRate(QuoteTransfer $quoteTransfer)
-    {
-        $this->getFactory()
-            ->createProductItemTaxRateCalculator()
-            ->recalculate($quoteTransfer);
-    }
-
-    /**
-     * Specification:
      *  - Calculate tax amount for each item
      *
      * @api
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacadeInterface.php b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacadeInterface.php
index 4639fd3..535a413 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacadeInterface.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Business/TaxFacadeInterface.php
@@ -233,18 +233,6 @@ interface TaxFacadeInterface
 
     /**
      * Specification:
-     *  - Set tax rate for each item
-     *
-     * @api
-     *
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return void
-     */
-    public function calculateProductItemTaxRate(QuoteTransfer $quoteTransfer);
-
-    /**
-     * Specification:
      *  - Calculate tax amount for each item
      *
      * @api
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/RateController.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/RateController.php
index faea245..80f6ec8 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/RateController.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/RateController.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\Tax\Communication\Controller;
 
 use Propel\Runtime\ActiveQuery\Criteria;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/SetController.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/SetController.php
index 2b0727c..9c1390a 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/SetController.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Controller/SetController.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\Tax\Communication\Controller;
 
 use Propel\Runtime\Exception\PropelException;
-use Spryker\Shared\Url\Url;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Service\UtilText\Model\Url\Url;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php
deleted file mode 100644
index 44bff85..0000000
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\Tax\Communication\Plugin;
-
-use Generated\Shared\Transfer\QuoteTransfer;
-use Spryker\Zed\Calculation\Dependency\Plugin\CalculatorPluginInterface;
-use Spryker\Zed\Kernel\Communication\AbstractPlugin;
-
-/**
- * @method \Spryker\Zed\Tax\Business\TaxFacade getFacade()
- * @method \Spryker\Zed\Tax\Communication\TaxCommunicationFactory getFactory()
- */
-class ProductItemTaxRateCalculatorPlugin extends AbstractPlugin implements CalculatorPluginInterface
-{
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return void
-     */
-    public function recalculate(QuoteTransfer $quoteTransfer)
-    {
-        $this->getFacade()->calculateProductItemTaxRate($quoteTransfer);
-    }
-
-}
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/RateTable.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/RateTable.php
index e56e793..279b3f2 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/RateTable.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/RateTable.php
@@ -11,8 +11,8 @@ use Orm\Zed\Country\Persistence\Map\SpyCountryTableMap;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxRateTableMap;
 use Orm\Zed\Tax\Persistence\SpyTaxRate;
 use Orm\Zed\Tax\Persistence\SpyTaxRateQuery;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
@@ -29,18 +29,18 @@ class RateTable extends AbstractTable
     protected $taxRateQuery;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Orm\Zed\Tax\Persistence\SpyTaxRateQuery $taxRateQuery
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(SpyTaxRateQuery $taxRateQuery, DateFormatterInterface $dateFormatter)
+    public function __construct(SpyTaxRateQuery $taxRateQuery, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->taxRateQuery = $taxRateQuery;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -99,7 +99,7 @@ class RateTable extends AbstractTable
         foreach ($queryResult as $taxRateEntity) {
             $result[] = [
                 SpyTaxRateTableMap::COL_ID_TAX_RATE => $taxRateEntity->getIdTaxRate(),
-                SpyTaxRateTableMap::COL_CREATED_AT => $this->dateFormatter->dateTime($taxRateEntity->getCreatedAt()),
+                SpyTaxRateTableMap::COL_CREATED_AT => $this->utilDateTimeService->formatDateTime($taxRateEntity->getCreatedAt()),
                 SpyTaxRateTableMap::COL_NAME => $taxRateEntity->getName(),
                 SpyCountryTableMap::COL_NAME => $this->getCountryName($taxRateEntity),
                 SpyTaxRateTableMap::COL_RATE => $taxRateEntity->getRate(),
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/SetTable.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/SetTable.php
index ec4b6cd..71f9217 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/SetTable.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/Table/SetTable.php
@@ -9,8 +9,8 @@ namespace Spryker\Zed\Tax\Communication\Table;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxSetTableMap;
 use Orm\Zed\Tax\Persistence\SpyTaxSet;
 use Orm\Zed\Tax\Persistence\SpyTaxSetQuery;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 
@@ -26,18 +26,18 @@ class SetTable extends AbstractTable
     protected $taxSetQuery;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Orm\Zed\Tax\Persistence\SpyTaxSetQuery $taxSetQuery
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(SpyTaxSetQuery $taxSetQuery, DateFormatterInterface $dateFormatter)
+    public function __construct(SpyTaxSetQuery $taxSetQuery, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->taxSetQuery = $taxSetQuery;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -91,7 +91,7 @@ class SetTable extends AbstractTable
             $result[] = [
                 SpyTaxSetTableMap::COL_ID_TAX_SET => $taxSetEntity->getIdTaxSet(),
                 SpyTaxSetTableMap::COL_NAME => $taxSetEntity->getName(),
-                SpyTaxSetTableMap::COL_CREATED_AT => $this->dateFormatter->dateTime($taxSetEntity->getCreatedAt()),
+                SpyTaxSetTableMap::COL_CREATED_AT => $this->utilDateTimeService->formatDateTime($taxSetEntity->getCreatedAt()),
                 self::TABLE_COL_ACTIONS => $this->getActionButtons($taxSetEntity),
             ];
         }
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/TaxCommunicationFactory.php b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/TaxCommunicationFactory.php
index 33ea731..81a3653 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Communication/TaxCommunicationFactory.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Communication/TaxCommunicationFactory.php
@@ -106,7 +106,7 @@ class TaxCommunicationFactory extends AbstractCommunicationFactory
     {
         $taxRateQuery = $this->getQueryContainer()->queryAllTaxRates();
 
-        return new RateTable($taxRateQuery, $this->getDateFormatter());
+        return new RateTable($taxRateQuery, $this->getDateTimeService());
     }
 
     /**
@@ -116,13 +116,13 @@ class TaxCommunicationFactory extends AbstractCommunicationFactory
     {
         $taxSetQuery = $this->getQueryContainer()->queryAllTaxSets();
 
-        return new SetTable($taxSetQuery, $this->getDateFormatter());
+        return new SetTable($taxSetQuery, $this->getDateTimeService());
     }
 
     /**
-     * @return \Spryker\Shared\Library\DateFormatterInterface
+     * @return \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected function getDateFormatter()
+    protected function getDateTimeService()
     {
         return $this->getProvidedDependency(TaxDependencyProvider::SERVICE_DATE_FORMATTER);
     }
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainer.php b/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainer.php
index 41642c9..d57235b 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainer.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainer.php
@@ -7,13 +7,11 @@
 
 namespace Spryker\Zed\Tax\Persistence;
 
-use Orm\Zed\Product\Persistence\Map\SpyProductAbstractTableMap;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxRateTableMap;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxSetTableMap;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxSetTaxTableMap;
 use Propel\Runtime\ActiveQuery\Criteria;
 use Propel\Runtime\ActiveQuery\ModelCriteria;
-use Spryker\Shared\Tax\TaxConstants;
 use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
 
 /**
@@ -22,9 +20,6 @@ use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
 class TaxQueryContainer extends AbstractQueryContainer implements TaxQueryContainerInterface
 {
 
-    const COL_MAX_TAX_RATE = 'MaxTaxRate';
-    const COL_ID_ABSTRACT_PRODUCT = 'IdProductAbstract';
-
     /**
      * @api
      *
@@ -106,35 +101,6 @@ class TaxQueryContainer extends AbstractQueryContainer implements TaxQueryContai
     /**
      * @api
      *
-     * @param int[] $allIdProductAbstracts
-     * @param string $countryIso2Code
-     *
-     * @return \Orm\Zed\Tax\Persistence\SpyTaxSetQuery
-     */
-    public function queryTaxSetByIdProductAbstractAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code)
-    {
-        return $this->getFactory()->createTaxSetQuery()
-            ->useSpyProductAbstractQuery()
-                ->filterByIdProductAbstract($allIdProductAbstracts, Criteria::IN)
-                ->withColumn(SpyProductAbstractTableMap::COL_ID_PRODUCT_ABSTRACT, self::COL_ID_ABSTRACT_PRODUCT)
-                ->groupBy(SpyProductAbstractTableMap::COL_ID_PRODUCT_ABSTRACT)
-            ->endUse()
-            ->useSpyTaxSetTaxQuery()
-                ->useSpyTaxRateQuery()
-                    ->useCountryQuery()
-                       ->filterByIso2Code($countryIso2Code)
-                    ->endUse()
-                    ->_or()
-                    ->filterByName(TaxConstants::TAX_EXEMPT_PLACEHOLDER)
-                ->endUse()
-                ->withColumn('MAX(' . SpyTaxRateTableMap::COL_RATE . ')', self::COL_MAX_TAX_RATE)
-            ->endUse()
-            ->select([self::COL_MAX_TAX_RATE]);
-    }
-
-    /**
-     * @api
-     *
      * @param string $name
      * @param int $idCountry
      * @param float $rate
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainerInterface.php b/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainerInterface.php
index 5347815..40beb03 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainerInterface.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/Persistence/TaxQueryContainerInterface.php
@@ -57,16 +57,6 @@ interface TaxQueryContainerInterface extends QueryContainerInterface
     /**
      * @api
      *
-     * @param int[] $allIdProductAbstracts
-     * @param string $countryIso2Code
-     *
-     * @return \Orm\Zed\Tax\Persistence\SpyTaxSetQuery
-     */
-    public function queryTaxSetByIdProductAbstractAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code);
-
-    /**
-     * @api
-     *
      * @param string $name
      * @param int $idCountry
      * @param float $rate
diff --git a/Bundles/Tax/src/Spryker/Zed/Tax/TaxDependencyProvider.php b/Bundles/Tax/src/Spryker/Zed/Tax/TaxDependencyProvider.php
index 4a97312..51b30b2 100644
--- a/Bundles/Tax/src/Spryker/Zed/Tax/TaxDependencyProvider.php
+++ b/Bundles/Tax/src/Spryker/Zed/Tax/TaxDependencyProvider.php
@@ -8,7 +8,6 @@
 namespace Spryker\Zed\Tax;
 
 use Spryker\Shared\Kernel\Store;
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\Tax\Dependency\Facade\TaxToCountryBridge;
@@ -45,8 +44,8 @@ class TaxDependencyProvider extends AbstractBundleDependencyProvider
             return new TaxToCountryBridge($container->getLocator()->country()->facade());
         };
 
-        $container[self::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        $container[self::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
     }
 
diff --git a/Bundles/Tax/tests/Functional/Spryker/Zed/Tax/Business/TaxFacadeRateCalculationTest.php b/Bundles/Tax/tests/Functional/Spryker/Zed/Tax/Business/TaxFacadeRateCalculationTest.php
deleted file mode 100644
index 95b6898..0000000
--- a/Bundles/Tax/tests/Functional/Spryker/Zed/Tax/Business/TaxFacadeRateCalculationTest.php
+++ /dev/null
@@ -1,133 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Functional\Spryker\Zed\Tax\Business;
-
-use Codeception\TestCase\Test;
-use Generated\Shared\Transfer\ItemTransfer;
-use Generated\Shared\Transfer\QuoteTransfer;
-use Orm\Zed\Country\Persistence\SpyCountryQuery;
-use Orm\Zed\Product\Persistence\SpyProductAbstract;
-use Orm\Zed\Tax\Persistence\SpyTaxRate;
-use Orm\Zed\Tax\Persistence\SpyTaxSet;
-use Orm\Zed\Tax\Persistence\SpyTaxSetTax;
-use Spryker\Shared\Tax\TaxConstants;
-use Spryker\Zed\Tax\Business\TaxFacade;
-
-/**
- * @group Functional
- * @group Spryker
- * @group Zed
- * @group Tax
- * @group Business
- * @group TaxFacadeRateCalculationTest
- */
-class TaxFacadeRateCalculationTest extends Test
-{
-
-    /**
-     * @return void
-     */
-    public function testSetTaxRateWhenExemptTaxRateUsedShouldSetZeroTaxRate()
-    {
-        $abstractProductEntity = $this->createAbstractProductWithTaxSet(20, 'GB');
-
-        $quoteTransfer = new QuoteTransfer();
-
-        $itemTransfer = new ItemTransfer();
-        $itemTransfer->setIdProductAbstract($abstractProductEntity->getIdProductAbstract());
-        $quoteTransfer->addItem($itemTransfer);
-
-        $taxFacadeTest = $this->createTaxFacade();
-        $taxFacadeTest->calculateProductItemTaxRate($quoteTransfer);
-
-        $this->assertEquals('0.0', $itemTransfer->getTaxRate());
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetTaxRateWhenExemptTaxRateUsedAndCountryMatchingShouldUseCountryRate()
-    {
-        $abstractProcuctEntity = $this->createAbstractProductWithTaxSet(20, 'DE');
-
-        $quoteTransfer = new QuoteTransfer();
-
-        $itemTransfer = new ItemTransfer();
-        $itemTransfer->setIdProductAbstract($abstractProcuctEntity->getIdProductAbstract());
-        $quoteTransfer->addItem($itemTransfer);
-
-        $taxFacadeTest = $this->createTaxFacade();
-        $taxFacadeTest->calculateProductItemTaxRate($quoteTransfer);
-
-        $this->assertEquals('20.00', $itemTransfer->getTaxRate());
-    }
-
-    /**
-     * @param int $taxRate
-     * @param string $iso2Code
-     *
-     * @return \Orm\Zed\Product\Persistence\SpyProductAbstract
-     */
-    protected function createAbstractProductWithTaxSet($taxRate, $iso2Code)
-    {
-        $countryEntity = SpyCountryQuery::create()->findOneByIso2Code($iso2Code);
-
-        $taxRateEntity1 = new SpyTaxRate();
-        $taxRateEntity1->setRate($taxRate);
-        $taxRateEntity1->setName('test rate');
-        $taxRateEntity1->setFkCountry($countryEntity->getIdCountry());
-        $taxRateEntity1->save();
-
-        $taxRateEntity2 = new SpyTaxRate();
-        $taxRateEntity2->setRate(13);
-        $taxRateEntity2->setName('test rate');
-        $taxRateEntity2->setFkCountry($countryEntity->getIdCountry());
-        $taxRateEntity2->save();
-
-        $taxRateExemptEntity = new SpyTaxRate();
-        $taxRateExemptEntity->setRate(0);
-        $taxRateExemptEntity->setName(TaxConstants::TAX_EXEMPT_PLACEHOLDER);
-        $taxRateExemptEntity->save();
-
-        $taxSetEntity = new SpyTaxSet();
-        $taxSetEntity->setName('name of tax set');
-        $taxSetEntity->save();
-
-        $taxSetTaxRateEntity = new SpyTaxSetTax();
-        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
-        $taxSetTaxRateEntity->setFkTaxRate($taxRateEntity1->getIdTaxRate());
-        $taxSetTaxRateEntity->save();
-
-        $taxSetTaxRateEntity = new SpyTaxSetTax();
-        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
-        $taxSetTaxRateEntity->setFkTaxRate($taxRateEntity2->getIdTaxRate());
-        $taxSetTaxRateEntity->save();
-
-        $taxSetTaxRateEntity = new SpyTaxSetTax();
-        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
-        $taxSetTaxRateEntity->setFkTaxRate($taxRateExemptEntity->getIdTaxRate());
-        $taxSetTaxRateEntity->save();
-
-        $abstractProductEntity = new SpyProductAbstract();
-        $abstractProductEntity->setSku('test-abstract-sku');
-        $abstractProductEntity->setAttributes('');
-        $abstractProductEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
-        $abstractProductEntity->save();
-
-        return $abstractProductEntity;
-    }
-
-    /**
-     * @return \Spryker\Zed\Tax\Business\TaxFacade
-     */
-    protected function createTaxFacade()
-    {
-        return new TaxFacade();
-    }
-
-}
diff --git a/Bundles/Tax/tests/Unit/Spryker/Zed/Tax/Business/Model/TaxRateCalculationTest.php b/Bundles/Tax/tests/Unit/Spryker/Zed/Tax/Business/Model/TaxRateCalculationTest.php
deleted file mode 100644
index 50bc1ad..0000000
--- a/Bundles/Tax/tests/Unit/Spryker/Zed/Tax/Business/Model/TaxRateCalculationTest.php
+++ /dev/null
@@ -1,232 +0,0 @@
-<?php
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Zed\Tax\Business\Model;
-
-use Generated\Shared\Transfer\AddressTransfer;
-use Generated\Shared\Transfer\ItemTransfer;
-use Generated\Shared\Transfer\QuoteTransfer;
-use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Tax\Business\Model\ProductItemTaxRateCalculator;
-use Spryker\Zed\Tax\Business\Model\TaxDefault;
-use Spryker\Zed\Tax\Persistence\TaxQueryContainer;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Zed
- * @group Tax
- * @group Business
- * @group Model
- * @group TaxRateCalculationTest
- */
-class TaxRateCalculationTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testCalculateTaxRateForDefaultCountry()
-    {
-        $quoteTransfer = $this->createQuoteTransferWithoutShippingAddress();
-
-        $taxAverage = $this->getEffectiveTaxRateByQuoteTransfer($quoteTransfer, $this->getMockDefaultTaxRates());
-        $this->assertEquals(15, $taxAverage);
-    }
-
-    /**
-     * @return void
-     */
-    public function testCalculateTaxRateForDifferentCountry()
-    {
-        $quoteTransfer = $this->createQuoteTransferWithShippingAddress();
-
-        $taxAverage = $this->getEffectiveTaxRateByQuoteTransfer($quoteTransfer, $this->getMockCountryBasedTaxRates());
-        $this->assertEquals(17, $taxAverage);
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return float
-     */
-    protected function getEffectiveTaxRateByQuoteTransfer(QuoteTransfer $quoteTransfer, $mockData)
-    {
-        $productItemTaxRateCalculatorMock = $this->createProductItemTaxRateCalculator();
-        $productItemTaxRateCalculatorMock->method('findTaxRatesByAllIdProductAbstractsAndCountryIso2Code')->willReturn($mockData);
-
-        $productItemTaxRateCalculatorMock->recalculate($quoteTransfer);
-        $taxAverage = $this->getProductItemsTaxRateAverage($quoteTransfer);
-
-        return $taxAverage;
-    }
-
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Tax\Business\Model\ProductItemTaxRateCalculator
-     */
-    protected function createProductItemTaxRateCalculator()
-    {
-        return $this->getMockBuilder(ProductItemTaxRateCalculator::class)
-            ->setMethods(['findTaxRatesByAllIdProductAbstractsAndCountryIso2Code'])
-            ->setConstructorArgs([
-                $this->createQueryContainerMock(),
-                $this->createTaxDefault(),
-            ])
-            ->getMock();
-    }
-
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Tax\Business\Model\TaxDefault
-     */
-    public function createTaxDefault()
-    {
-        $taxDefaultMock = $this->getMockBuilder(TaxDefault::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-
-        $taxDefaultMock
-            ->expects($this->any())
-            ->method('getDefaultCountryIso2Code')
-            ->willReturn('DE');
-
-        $taxDefaultMock
-            ->expects($this->any())
-            ->method('getDefaultTaxRate')
-            ->willReturn(19);
-
-        return $taxDefaultMock;
-    }
-
-    /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Tax\Persistence\TaxQueryContainerInterface
-     */
-    protected function createQueryContainerMock()
-    {
-        return $this->getMockBuilder(TaxQueryContainer::class)
-            ->disableOriginalConstructor()
-            ->getMock();
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return float
-     */
-    protected function getProductItemsTaxRateAverage(QuoteTransfer $quoteTransfer)
-    {
-        $taxSum = 0;
-        foreach ($quoteTransfer->getItems() as $item) {
-            $taxSum += $item->getTaxRate();
-        }
-
-        $taxAverage = $taxSum / count($quoteTransfer->getItems());
-
-        return $taxAverage;
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\QuoteTransfer
-     */
-    protected function createQuoteTransferWithoutShippingAddress()
-    {
-        $quoteTransfer = $this->createQuoteTransfer();
-
-        $this->createItemTransfers($quoteTransfer);
-
-        return $quoteTransfer;
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\QuoteTransfer
-     */
-    protected function createQuoteTransferWithShippingAddress()
-    {
-        $quoteTransfer = $this->createQuoteTransfer();
-
-        $this->createItemTransfers($quoteTransfer);
-
-        $addressTransfer = new AddressTransfer();
-        $addressTransfer->setIso2Code('AT');
-
-        $quoteTransfer->setShippingAddress($addressTransfer);
-
-        return $quoteTransfer;
-    }
-
-    /**
-     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
-     *
-     * @return void
-     */
-    protected function createItemTransfers(QuoteTransfer $quoteTransfer)
-    {
-        $itemTransfer1 = $this->createProductItemTransfer(1);
-        $quoteTransfer->addItem($itemTransfer1);
-
-        $itemTransfer2 = $this->createProductItemTransfer(2);
-        $quoteTransfer->addItem($itemTransfer2);
-    }
-
-    /**
-     * @param int $id
-     *
-     * @return \Generated\Shared\Transfer\ItemTransfer
-     */
-    protected function createProductItemTransfer($id)
-    {
-        $itemTransfer = $this->createItemTransfer();
-        $itemTransfer->setIdProductAbstract($id);
-
-        return $itemTransfer;
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\QuoteTransfer
-     */
-    protected function createQuoteTransfer()
-    {
-        return new QuoteTransfer();
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\ItemTransfer
-     */
-    protected function createItemTransfer()
-    {
-        return new ItemTransfer();
-    }
-
-    /**
-     * @return array
-     */
-    protected function getMockDefaultTaxRates()
-    {
-        return [
-            [
-                TaxQueryContainer::COL_ID_ABSTRACT_PRODUCT => 1,
-                TaxQueryContainer::COL_MAX_TAX_RATE => 11,
-            ],
-        ];
-    }
-
-    /**
-     * @return array
-     */
-    protected function getMockCountryBasedTaxRates()
-    {
-        return [
-            [
-                TaxQueryContainer::COL_ID_ABSTRACT_PRODUCT => 1,
-                TaxQueryContainer::COL_MAX_TAX_RATE => 20,
-            ],
-            [
-                TaxQueryContainer::COL_ID_ABSTRACT_PRODUCT => 2,
-                TaxQueryContainer::COL_MAX_TAX_RATE => 14,
-            ],
-        ];
-    }
-
-}
diff --git a/Bundles/TaxProductConnector/composer.json b/Bundles/TaxProductConnector/composer.json
index 0b28fb2..e3f72bf 100644
--- a/Bundles/TaxProductConnector/composer.json
+++ b/Bundles/TaxProductConnector/composer.json
@@ -8,14 +8,19 @@
   "require": {
     "spryker/kernel": "^2.0.0",
     "spryker/product": "^4.0.0",
-    "spryker/propel": "^2.0.0",
-    "spryker/tax": "^2.0.0 || ^3.0.0",
-    "spryker/transfer": "^2.0.0"
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/tax": "^2.0.0 || ^3.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/country": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/calculation": "If you want to use Calculation plugins you need to install spryker/calculation."
+  },
   "description": "TaxProductConnector bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/Model/ProductItemTaxRateCalculator.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/Model/ProductItemTaxRateCalculator.php
new file mode 100644
index 0000000..8eec202
--- /dev/null
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/Model/ProductItemTaxRateCalculator.php
@@ -0,0 +1,126 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\TaxProductConnector\Business\Model;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+use Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxInterface;
+use Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainer;
+use Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainerInterface;
+use Spryker\Zed\Tax\Business\Model\CalculatorInterface;
+
+class ProductItemTaxRateCalculator implements CalculatorInterface
+{
+
+    /**
+     * @var \Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainerInterface
+     */
+    protected $taxQueryContainer;
+
+    /**
+     * @var \Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxInterface
+     */
+    protected $taxFacade;
+
+    /**
+     * @param \Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainerInterface $taxQueryContainer
+     * @param \Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxInterface $taxFacade
+     */
+    public function __construct(TaxProductConnectorQueryContainerInterface $taxQueryContainer, TaxProductConnectorToTaxInterface $taxFacade)
+    {
+        $this->taxQueryContainer = $taxQueryContainer;
+        $this->taxFacade = $taxFacade;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function recalculate(QuoteTransfer $quoteTransfer)
+    {
+        $countryIso2Code = $this->getShippingCountryIso2Code($quoteTransfer);
+        $allIdProductAbstracts = $this->getAllIdAbstractProducts($quoteTransfer);
+
+        $taxRates = $this->findTaxRatesByAllIdProductAbstractsAndCountryIso2Code($allIdProductAbstracts, $countryIso2Code);
+
+        $this->setItemsTax($quoteTransfer, $taxRates);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return string
+     */
+    protected function getShippingCountryIso2Code(QuoteTransfer $quoteTransfer)
+    {
+        if ($quoteTransfer->getShippingAddress() === null) {
+            return $this->taxFacade->getDefaultTaxCountryIso2Code();
+        }
+
+        return $quoteTransfer->getShippingAddress()->getIso2Code();
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return array
+     */
+    protected function getAllIdAbstractProducts(QuoteTransfer $quoteTransfer)
+    {
+        $allIdProductAbstracts = [];
+        foreach ($quoteTransfer->getItems() as $itemTransfer) {
+            $allIdProductAbstracts[] = $itemTransfer->getIdProductAbstract();
+        }
+
+        return $allIdProductAbstracts;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     * @param array $taxRates
+     *
+     * @return void
+     */
+    protected function setItemsTax(QuoteTransfer $quoteTransfer, array $taxRates)
+    {
+        foreach ($quoteTransfer->getItems() as $itemTransfer) {
+            $itemTransfer->setTaxRate($this->getEffectiveTaxRate($taxRates, $itemTransfer->getIdProductAbstract()));
+        }
+    }
+
+    /**
+     * @param array $taxRates
+     * @param int $idProductAbstract
+     *
+     * @return float
+     */
+    protected function getEffectiveTaxRate(array $taxRates, $idProductAbstract)
+    {
+        foreach ($taxRates as $taxRate) {
+            if ((int)$taxRate[TaxProductConnectorQueryContainer::COL_ID_ABSTRACT_PRODUCT] === (int)$idProductAbstract) {
+                return (float)$taxRate[TaxProductConnectorQueryContainer::COL_MAX_TAX_RATE];
+            }
+        }
+
+        return $this->taxFacade->getDefaultTaxRate();
+    }
+
+    /**
+     * @param array $allIdProductAbstracts
+     * @param string $countryIso2Code
+     *
+     * @return array
+     */
+    protected function findTaxRatesByAllIdProductAbstractsAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code)
+    {
+        return $this->taxQueryContainer->queryTaxSetByIdProductAbstractAndCountryIso2Code($allIdProductAbstracts, $countryIso2Code)
+            ->find()
+            ->toArray();
+    }
+
+}
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorBusinessFactory.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorBusinessFactory.php
index b43d662..cfd53df 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorBusinessFactory.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorBusinessFactory.php
@@ -8,8 +8,10 @@
 namespace Spryker\Zed\TaxProductConnector\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
+use Spryker\Zed\TaxProductConnector\Business\Model\ProductItemTaxRateCalculator;
 use Spryker\Zed\TaxProductConnector\Business\Product\ProductAbstractTaxSetMapper;
 use Spryker\Zed\TaxProductConnector\Business\Product\ProductAbstractTaxWriter;
+use Spryker\Zed\TaxProductConnector\TaxProductConnectorDependencyProvider;
 
 /**
  * @method \Spryker\Zed\TaxProductConnector\TaxProductConnectorConfig getConfig()
@@ -34,4 +36,20 @@ class TaxProductConnectorBusinessFactory extends AbstractBusinessFactory
         return new ProductAbstractTaxSetMapper($this->getQueryContainer());
     }
 
+    /**
+     * @return \Spryker\Zed\TaxProductConnector\Business\Model\ProductItemTaxRateCalculator
+     */
+    public function createProductItemTaxRateCalculator()
+    {
+        return new ProductItemTaxRateCalculator($this->getQueryContainer(), $this->getTaxFacade());
+    }
+
+    /**
+     * @return \Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxInterface
+     */
+    protected function getTaxFacade()
+    {
+        return $this->getProvidedDependency(TaxProductConnectorDependencyProvider::FACADE_TAX);
+    }
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacade.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacade.php
index b83cf6f..2bd496d 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacade.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacade.php
@@ -8,6 +8,7 @@
 namespace Spryker\Zed\TaxProductConnector\Business;
 
 use Generated\Shared\Transfer\ProductAbstractTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
 use Spryker\Zed\Kernel\Business\AbstractFacade;
 
 /**
@@ -50,4 +51,21 @@ class TaxProductConnectorFacade extends AbstractFacade implements TaxProductConn
             ->mapTaxSet($productAbstractTransfer);
     }
 
+    /**
+     * Specification:
+     *  - Set tax rate for each item
+     *
+     * @api
+     *
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function calculateProductItemTaxRate(QuoteTransfer $quoteTransfer)
+    {
+        $this->getFactory()
+            ->createProductItemTaxRateCalculator()
+            ->recalculate($quoteTransfer);
+    }
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeInterface.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeInterface.php
index d2cbf8b..b888dce 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeInterface.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeInterface.php
@@ -8,6 +8,7 @@
 namespace Spryker\Zed\TaxProductConnector\Business;
 
 use Generated\Shared\Transfer\ProductAbstractTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
 
 interface TaxProductConnectorFacadeInterface
 {
@@ -36,4 +37,16 @@ interface TaxProductConnectorFacadeInterface
      */
     public function mapTaxSet(ProductAbstractTransfer $productAbstractTransfer);
 
+    /**
+     * Specification:
+     *  - Set tax rate for each item
+     *
+     * @api
+     *
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function calculateProductItemTaxRate(QuoteTransfer $quoteTransfer);
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php
new file mode 100644
index 0000000..74e3223
--- /dev/null
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Communication/Plugin/ProductItemTaxRateCalculatorPlugin.php
@@ -0,0 +1,29 @@
+<?php
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\TaxProductConnector\Communication\Plugin;
+
+use Generated\Shared\Transfer\QuoteTransfer;
+use Spryker\Zed\Calculation\Dependency\Plugin\CalculatorPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\TaxProductConnector\Business\TaxProductConnectorFacade getFacade()
+ */
+class ProductItemTaxRateCalculatorPlugin extends AbstractPlugin implements CalculatorPluginInterface
+{
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    public function recalculate(QuoteTransfer $quoteTransfer)
+    {
+        $this->getFacade()->calculateProductItemTaxRate($quoteTransfer);
+    }
+
+}
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToProductInterface.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToProductInterface.php
index de47227..ed373b1 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToProductInterface.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToProductInterface.php
@@ -17,4 +17,14 @@ interface TaxProductConnectorToProductInterface
      */
     public function touchProductActive($idProductAbstract);
 
+    /**
+     * @return string
+     */
+    public function getDefaultTaxCountryIso2Code();
+
+    /**
+     * @return float
+     */
+    public function getDefaultTaxRate();
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxBridge.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxBridge.php
new file mode 100644
index 0000000..6a15996
--- /dev/null
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxBridge.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\TaxProductConnector\Dependency\Facade;
+
+class TaxProductConnectorToTaxBridge implements TaxProductConnectorToTaxInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Tax\Business\TaxFacadeInterface
+     */
+    protected $taxFacade;
+
+    /**
+     * @param \Spryker\Zed\Tax\Business\TaxFacadeInterface $taxFacade
+     */
+    public function __construct($taxFacade)
+    {
+        $this->taxFacade = $taxFacade;
+    }
+
+    /**
+     * @return string
+     */
+    public function getDefaultTaxCountryIso2Code()
+    {
+        return $this->taxFacade->getDefaultTaxCountryIso2Code();
+    }
+
+    /**
+     * @return float
+     */
+    public function getDefaultTaxRate()
+    {
+        return $this->taxFacade->getDefaultTaxRate();
+    }
+
+}
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxInterface.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxInterface.php
new file mode 100644
index 0000000..fcf847f
--- /dev/null
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Dependency/Facade/TaxProductConnectorToTaxInterface.php
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\TaxProductConnector\Dependency\Facade;
+
+interface TaxProductConnectorToTaxInterface
+{
+
+    /**
+     * @return string
+     */
+    public function getDefaultTaxCountryIso2Code();
+
+    /**
+     * @return float
+     */
+    public function getDefaultTaxRate();
+
+}
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainer.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainer.php
index 8c677b5..0af542c 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainer.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainer.php
@@ -8,8 +8,10 @@
 namespace Spryker\Zed\TaxProductConnector\Persistence;
 
 use Orm\Zed\Product\Persistence\Map\SpyProductAbstractTableMap;
+use Orm\Zed\Tax\Persistence\Map\SpyTaxRateTableMap;
 use Orm\Zed\Tax\Persistence\Map\SpyTaxSetTableMap;
 use Propel\Runtime\ActiveQuery\Criteria;
+use Spryker\Shared\Tax\TaxConstants;
 use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
 
 /**
@@ -18,6 +20,9 @@ use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
 class TaxProductConnectorQueryContainer extends AbstractQueryContainer implements TaxProductConnectorQueryContainerInterface
 {
 
+    const COL_MAX_TAX_RATE = 'MaxTaxRate';
+    const COL_ID_ABSTRACT_PRODUCT = 'IdProductAbstract';
+
     /**
      * @api
      *
@@ -95,4 +100,33 @@ class TaxProductConnectorQueryContainer extends AbstractQueryContainer implement
             ->endUse();
     }
 
+    /**
+     * @api
+     *
+     * @param int[] $allIdProductAbstracts
+     * @param string $countryIso2Code
+     *
+     * @return \Orm\Zed\Tax\Persistence\SpyTaxSetQuery
+     */
+    public function queryTaxSetByIdProductAbstractAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code)
+    {
+        return $this->getFactory()->createTaxSetQuery()
+            ->useSpyProductAbstractQuery()
+                ->filterByIdProductAbstract($allIdProductAbstracts, Criteria::IN)
+                ->withColumn(SpyProductAbstractTableMap::COL_ID_PRODUCT_ABSTRACT, self::COL_ID_ABSTRACT_PRODUCT)
+                ->groupBy(SpyProductAbstractTableMap::COL_ID_PRODUCT_ABSTRACT)
+            ->endUse()
+            ->useSpyTaxSetTaxQuery()
+                ->useSpyTaxRateQuery()
+                    ->useCountryQuery()
+                        ->filterByIso2Code($countryIso2Code)
+                    ->endUse()
+                    ->_or()
+                    ->filterByName(TaxConstants::TAX_EXEMPT_PLACEHOLDER)
+                ->endUse()
+                ->withColumn('MAX(' . SpyTaxRateTableMap::COL_RATE . ')', self::COL_MAX_TAX_RATE)
+            ->endUse()
+            ->select([self::COL_MAX_TAX_RATE]);
+    }
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainerInterface.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainerInterface.php
index 9abdbc1..708231e 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainerInterface.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/Persistence/TaxProductConnectorQueryContainerInterface.php
@@ -48,4 +48,14 @@ interface TaxProductConnectorQueryContainerInterface extends QueryContainerInter
      */
     public function queryTaxSetForProductAbstract($idProductAbstract);
 
+    /**
+     * @api
+     *
+     * @param int[] $allIdProductAbstracts
+     * @param string $countryIso2Code
+     *
+     * @return \Orm\Zed\Tax\Persistence\SpyTaxSetQuery
+     */
+    public function queryTaxSetByIdProductAbstractAndCountryIso2Code(array $allIdProductAbstracts, $countryIso2Code);
+
 }
diff --git a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/TaxProductConnectorDependencyProvider.php b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/TaxProductConnectorDependencyProvider.php
index 121dfcd..d9eb8a0 100644
--- a/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/TaxProductConnectorDependencyProvider.php
+++ b/Bundles/TaxProductConnector/src/Spryker/Zed/TaxProductConnector/TaxProductConnectorDependencyProvider.php
@@ -10,11 +10,13 @@ namespace Spryker\Zed\TaxProductConnector;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
 use Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToProductBridge;
+use Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxBridge;
 
 class TaxProductConnectorDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const FACADE_PRODUCT = 'facade product';
+    const FACADE_TAX = 'facade tax';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -23,11 +25,38 @@ class TaxProductConnectorDependencyProvider extends AbstractBundleDependencyProv
      */
     public function provideBusinessLayerDependencies(Container $container)
     {
-        $container[self::FACADE_PRODUCT] = function (Container $container) {
+        $container = $this->addProductFacade($container);
+        $container = $this->addTaxFacade($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addProductFacade(Container $container)
+    {
+        $container[static::FACADE_PRODUCT] = function (Container $container) {
             return new TaxProductConnectorToProductBridge($container->getLocator()->product()->facade());
         };
 
         return $container;
     }
 
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addTaxFacade(Container $container)
+    {
+        $container[static::FACADE_TAX] = function (Container $container) {
+            return new TaxProductConnectorToTaxBridge($container->getLocator()->tax()->facade());
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxFacadeRateCalculationTest.php b/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxFacadeRateCalculationTest.php
new file mode 100644
index 0000000..07d117d
--- /dev/null
+++ b/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxFacadeRateCalculationTest.php
@@ -0,0 +1,133 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Functional\Spryker\Zed\TaxProductConnector\Business;
+
+use Codeception\TestCase\Test;
+use Generated\Shared\Transfer\ItemTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
+use Orm\Zed\Country\Persistence\SpyCountryQuery;
+use Orm\Zed\Product\Persistence\SpyProductAbstract;
+use Orm\Zed\Tax\Persistence\SpyTaxRate;
+use Orm\Zed\Tax\Persistence\SpyTaxSet;
+use Orm\Zed\Tax\Persistence\SpyTaxSetTax;
+use Spryker\Shared\Tax\TaxConstants;
+use Spryker\Zed\TaxProductConnector\Business\TaxProductConnectorFacade;
+
+/**
+ * @group Functional
+ * @group Spryker
+ * @group Zed
+ * @group TaxProductConnector
+ * @group Business
+ * @group TaxFacadeRateCalculationTest
+ */
+class TaxFacadeRateCalculationTest extends Test
+{
+
+    /**
+     * @return void
+     */
+    public function testSetTaxRateWhenExemptTaxRateUsedShouldSetZeroTaxRate()
+    {
+        $abstractProductEntity = $this->createAbstractProductWithTaxSet(20, 'GB');
+
+        $quoteTransfer = new QuoteTransfer();
+
+        $itemTransfer = new ItemTransfer();
+        $itemTransfer->setIdProductAbstract($abstractProductEntity->getIdProductAbstract());
+        $quoteTransfer->addItem($itemTransfer);
+
+        $taxFacadeTest = $this->createTaxProductConnectorFacade();
+        $taxFacadeTest->calculateProductItemTaxRate($quoteTransfer);
+
+        $this->assertEquals('0.0', $itemTransfer->getTaxRate());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetTaxRateWhenExemptTaxRateUsedAndCountryMatchingShouldUseCountryRate()
+    {
+        $abstractProductEntity = $this->createAbstractProductWithTaxSet(20, 'DE');
+
+        $quoteTransfer = new QuoteTransfer();
+
+        $itemTransfer = new ItemTransfer();
+        $itemTransfer->setIdProductAbstract($abstractProductEntity->getIdProductAbstract());
+        $quoteTransfer->addItem($itemTransfer);
+
+        $taxFacadeTest = $this->createTaxProductConnectorFacade();
+        $taxFacadeTest->calculateProductItemTaxRate($quoteTransfer);
+
+        $this->assertEquals('20.00', $itemTransfer->getTaxRate());
+    }
+
+    /**
+     * @param int $taxRate
+     * @param string $iso2Code
+     *
+     * @return \Orm\Zed\Product\Persistence\SpyProductAbstract
+     */
+    protected function createAbstractProductWithTaxSet($taxRate, $iso2Code)
+    {
+        $countryEntity = SpyCountryQuery::create()->findOneByIso2Code($iso2Code);
+
+        $taxRateEntity1 = new SpyTaxRate();
+        $taxRateEntity1->setRate($taxRate);
+        $taxRateEntity1->setName('test rate');
+        $taxRateEntity1->setFkCountry($countryEntity->getIdCountry());
+        $taxRateEntity1->save();
+
+        $taxRateEntity2 = new SpyTaxRate();
+        $taxRateEntity2->setRate(13);
+        $taxRateEntity2->setName('test rate');
+        $taxRateEntity2->setFkCountry($countryEntity->getIdCountry());
+        $taxRateEntity2->save();
+
+        $taxRateExemptEntity = new SpyTaxRate();
+        $taxRateExemptEntity->setRate(0);
+        $taxRateExemptEntity->setName(TaxConstants::TAX_EXEMPT_PLACEHOLDER);
+        $taxRateExemptEntity->save();
+
+        $taxSetEntity = new SpyTaxSet();
+        $taxSetEntity->setName('name of tax set');
+        $taxSetEntity->save();
+
+        $taxSetTaxRateEntity = new SpyTaxSetTax();
+        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
+        $taxSetTaxRateEntity->setFkTaxRate($taxRateEntity1->getIdTaxRate());
+        $taxSetTaxRateEntity->save();
+
+        $taxSetTaxRateEntity = new SpyTaxSetTax();
+        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
+        $taxSetTaxRateEntity->setFkTaxRate($taxRateEntity2->getIdTaxRate());
+        $taxSetTaxRateEntity->save();
+
+        $taxSetTaxRateEntity = new SpyTaxSetTax();
+        $taxSetTaxRateEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
+        $taxSetTaxRateEntity->setFkTaxRate($taxRateExemptEntity->getIdTaxRate());
+        $taxSetTaxRateEntity->save();
+
+        $abstractProductEntity = new SpyProductAbstract();
+        $abstractProductEntity->setSku('test-abstract-sku');
+        $abstractProductEntity->setAttributes('');
+        $abstractProductEntity->setFkTaxSet($taxSetEntity->getIdTaxSet());
+        $abstractProductEntity->save();
+
+        return $abstractProductEntity;
+    }
+
+    /**
+     * @return \Spryker\Zed\TaxProductConnector\Business\TaxProductConnectorFacade
+     */
+    protected function createTaxProductConnectorFacade()
+    {
+        return new TaxProductConnectorFacade();
+    }
+
+}
diff --git a/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeTest.php b/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeTest.php
index d4195e8..39a0e3c 100644
--- a/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeTest.php
+++ b/Bundles/TaxProductConnector/tests/Functional/Spryker/Zed/TaxProductConnector/Business/TaxProductConnectorFacadeTest.php
@@ -10,7 +10,7 @@ namespace Functional\Spryker\Zed\TaxProductConnector\Business;
 use Codeception\TestCase\Test;
 use Generated\Shared\Transfer\ProductAbstractTransfer;
 use Generated\Shared\Transfer\TaxSetTransfer;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
+use Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException;
 use Spryker\Zed\Product\Business\ProductFacade;
 use Spryker\Zed\TaxProductConnector\Business\Exception\ProductAbstractNotFoundException;
 use Spryker\Zed\TaxProductConnector\Business\Exception\TaxSetNotFoundException;
diff --git a/Bundles/TaxProductConnector/tests/Unit/Spryker/Zed/TaxProductConnector/Business/Model/TaxRateCalculationTest.php b/Bundles/TaxProductConnector/tests/Unit/Spryker/Zed/TaxProductConnector/Business/Model/TaxRateCalculationTest.php
new file mode 100644
index 0000000..61b9e6b
--- /dev/null
+++ b/Bundles/TaxProductConnector/tests/Unit/Spryker/Zed/TaxProductConnector/Business/Model/TaxRateCalculationTest.php
@@ -0,0 +1,232 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\TaxProductConnector\Business\Model;
+
+use Generated\Shared\Transfer\AddressTransfer;
+use Generated\Shared\Transfer\ItemTransfer;
+use Generated\Shared\Transfer\QuoteTransfer;
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\TaxProductConnector\Business\Model\ProductItemTaxRateCalculator;
+use Spryker\Zed\TaxProductConnector\Dependency\Facade\TaxProductConnectorToTaxInterface;
+use Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainer;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group TaxProductConnector
+ * @group Business
+ * @group Model
+ * @group TaxRateCalculationTest
+ */
+class TaxRateCalculationTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testCalculateTaxRateForDefaultCountry()
+    {
+        $quoteTransfer = $this->createQuoteTransferWithoutShippingAddress();
+
+        $taxAverage = $this->getEffectiveTaxRateByQuoteTransfer($quoteTransfer, $this->getMockDefaultTaxRates());
+        $this->assertEquals(15, $taxAverage);
+    }
+
+    /**
+     * @return void
+     */
+    public function testCalculateTaxRateForDifferentCountry()
+    {
+        $quoteTransfer = $this->createQuoteTransferWithShippingAddress();
+
+        $taxAverage = $this->getEffectiveTaxRateByQuoteTransfer($quoteTransfer, $this->getMockCountryBasedTaxRates());
+        $this->assertEquals(17, $taxAverage);
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return float
+     */
+    protected function getEffectiveTaxRateByQuoteTransfer(QuoteTransfer $quoteTransfer, $mockData)
+    {
+        $productItemTaxRateCalculatorMock = $this->createProductItemTaxRateCalculator();
+        $productItemTaxRateCalculatorMock->method('findTaxRatesByAllIdProductAbstractsAndCountryIso2Code')->willReturn($mockData);
+
+        $productItemTaxRateCalculatorMock->recalculate($quoteTransfer);
+        $taxAverage = $this->getProductItemsTaxRateAverage($quoteTransfer);
+
+        return $taxAverage;
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\TaxProductConnector\Business\Model\ProductItemTaxRateCalculator
+     */
+    protected function createProductItemTaxRateCalculator()
+    {
+        return $this->getMockBuilder(ProductItemTaxRateCalculator::class)
+            ->setMethods(['findTaxRatesByAllIdProductAbstractsAndCountryIso2Code'])
+            ->setConstructorArgs([
+                $this->createQueryContainerMock(),
+                $this->createTaxFacadeMock(),
+            ])
+            ->getMock();
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Tax\Business\Model\TaxDefault
+     */
+    protected function createTaxFacadeMock()
+    {
+        $taxDefaultMock = $this->getMockBuilder(TaxProductConnectorToTaxInterface::class)
+            ->getMock();
+
+        $taxDefaultMock
+            ->expects($this->any())
+            ->method('getDefaultTaxCountryIso2Code')
+            ->willReturn('DE');
+
+        $taxDefaultMock
+            ->expects($this->any())
+            ->method('getDefaultTaxRate')
+            ->willReturn(19);
+
+        return $taxDefaultMock;
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\TaxProductConnector\Persistence\TaxProductConnectorQueryContainerInterface
+     */
+    protected function createQueryContainerMock()
+    {
+        return $this->getMockBuilder(TaxProductConnectorQueryContainer::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return float
+     */
+    protected function getProductItemsTaxRateAverage(QuoteTransfer $quoteTransfer)
+    {
+        $taxSum = 0;
+        foreach ($quoteTransfer->getItems() as $item) {
+            $taxSum += $item->getTaxRate();
+        }
+
+        $taxAverage = $taxSum / count($quoteTransfer->getItems());
+
+        return $taxAverage;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    protected function createQuoteTransferWithoutShippingAddress()
+    {
+        $quoteTransfer = $this->createQuoteTransfer();
+
+        $this->createItemTransfers($quoteTransfer);
+
+        return $quoteTransfer;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    protected function createQuoteTransferWithShippingAddress()
+    {
+        $quoteTransfer = $this->createQuoteTransfer();
+
+        $this->createItemTransfers($quoteTransfer);
+
+        $addressTransfer = new AddressTransfer();
+        $addressTransfer->setIso2Code('AT');
+
+        $quoteTransfer->setShippingAddress($addressTransfer);
+
+        return $quoteTransfer;
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\QuoteTransfer $quoteTransfer
+     *
+     * @return void
+     */
+    protected function createItemTransfers(QuoteTransfer $quoteTransfer)
+    {
+        $itemTransfer1 = $this->createProductItemTransfer(1);
+        $quoteTransfer->addItem($itemTransfer1);
+
+        $itemTransfer2 = $this->createProductItemTransfer(2);
+        $quoteTransfer->addItem($itemTransfer2);
+    }
+
+    /**
+     * @param int $id
+     *
+     * @return \Generated\Shared\Transfer\ItemTransfer
+     */
+    protected function createProductItemTransfer($id)
+    {
+        $itemTransfer = $this->createItemTransfer();
+        $itemTransfer->setIdProductAbstract($id);
+
+        return $itemTransfer;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\QuoteTransfer
+     */
+    protected function createQuoteTransfer()
+    {
+        return new QuoteTransfer();
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\ItemTransfer
+     */
+    protected function createItemTransfer()
+    {
+        return new ItemTransfer();
+    }
+
+    /**
+     * @return array
+     */
+    protected function getMockDefaultTaxRates()
+    {
+        return [
+            [
+                TaxProductConnectorQueryContainer::COL_ID_ABSTRACT_PRODUCT => 1,
+                TaxProductConnectorQueryContainer::COL_MAX_TAX_RATE => 11,
+            ],
+        ];
+    }
+
+    /**
+     * @return array
+     */
+    protected function getMockCountryBasedTaxRates()
+    {
+        return [
+            [
+                TaxProductConnectorQueryContainer::COL_ID_ABSTRACT_PRODUCT => 1,
+                TaxProductConnectorQueryContainer::COL_MAX_TAX_RATE => 20,
+            ],
+            [
+                TaxProductConnectorQueryContainer::COL_ID_ABSTRACT_PRODUCT => 2,
+                TaxProductConnectorQueryContainer::COL_MAX_TAX_RATE => 14,
+            ],
+        ];
+    }
+
+}
diff --git a/Bundles/Testify/composer.json b/Bundles/Testify/composer.json
index 2566d7f..ec0bdc5 100755
--- a/Bundles/Testify/composer.json
+++ b/Bundles/Testify/composer.json
@@ -14,14 +14,15 @@
     "codeception/codeception": "~2.1.5",
     "php-mock/php-mock": "~1.0.1",
     "satooshi/php-coveralls": "^1.0.0",
+    "spryker/config": "^2.0.0",
+    "spryker/error-handler": "^1.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/silex": "^2.0.0"
   },
   "require-dev": {
-    "spryker/code-sniffer": "*",
-    "spryker/config": "^2.0.0"
+    "spryker/code-sniffer": "*"
   },
   "description": "Testify bundle",
   "license": "proprietary",
diff --git a/Bundles/Testify/dependency.json b/Bundles/Testify/dependency.json
deleted file mode 100644
index fcf2d9f..0000000
--- a/Bundles/Testify/dependency.json
+++ /dev/null
@@ -1,8 +0,0 @@
-{
-  "description": "Needed for core dependency management - overwrites dependencies between bundles",
-  "include": {
-  },
-  "exclude": {
-    "Config": "Required by tests"
-  }
-}
diff --git a/Bundles/Testify/src/Spryker/Shared/Testify/SystemUnderTestBootstrap.php b/Bundles/Testify/src/Spryker/Shared/Testify/SystemUnderTestBootstrap.php
index 72f92c0..ade0a00 100644
--- a/Bundles/Testify/src/Spryker/Shared/Testify/SystemUnderTestBootstrap.php
+++ b/Bundles/Testify/src/Spryker/Shared/Testify/SystemUnderTestBootstrap.php
@@ -12,9 +12,10 @@ use InvalidArgumentException;
 use Propel\Runtime\Propel;
 use ReflectionObject;
 use Silex\Application;
+use Spryker\Shared\Config\Application\Environment;
 use Spryker\Shared\Config\Config;
+use Spryker\Shared\ErrorHandler\ErrorHandlerEnvironment;
 use Spryker\Shared\Kernel\LocatorLocatorInterface;
-use Spryker\Shared\Library\Application\Environment;
 use Spryker\Yves\Kernel\Locator;
 use Spryker\Zed\Kernel\Locator as KernelLocator;
 use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
@@ -79,6 +80,9 @@ class SystemUnderTestBootstrap
 
         Environment::initialize();
 
+        $errorHandlerEnvironment = new ErrorHandlerEnvironment();
+        $errorHandlerEnvironment->initialize();
+
         if (self::APPLICATION_ZED === $application) {
             $this->bootstrapZed();
         }
diff --git a/Bundles/Touch/composer.json b/Bundles/Touch/composer.json
index ed066ce..940e856 100644
--- a/Bundles/Touch/composer.json
+++ b/Bundles/Touch/composer.json
@@ -6,15 +6,16 @@
     }
   },
   "require": {
-    "spryker/console": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/locale": "^2.0.0",
-    "spryker/propel": "^2.2.0",
-    "spryker/symfony": "^2.0.0"
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/symfony": "^2.0.0",
+    "spryker/util-data-reader": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Touch bundle",
diff --git a/Bundles/Touch/src/Spryker/Zed/Touch/Business/Model/TouchRecord.php b/Bundles/Touch/src/Spryker/Zed/Touch/Business/Model/TouchRecord.php
index 752579e..99f8111 100644
--- a/Bundles/Touch/src/Spryker/Zed/Touch/Business/Model/TouchRecord.php
+++ b/Bundles/Touch/src/Spryker/Zed/Touch/Business/Model/TouchRecord.php
@@ -13,13 +13,18 @@ use Orm\Zed\Touch\Persistence\SpyTouch;
 use Orm\Zed\Touch\Persistence\SpyTouchQuery;
 use Propel\Runtime\ActiveQuery\Criteria;
 use Propel\Runtime\Connection\ConnectionInterface;
-use Spryker\Shared\Library\BatchIterator\Builder\BatchIteratorBuilderInterface;
+use Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface;
 use Spryker\Zed\Touch\Persistence\TouchQueryContainerInterface;
 
 class TouchRecord implements TouchRecordInterface
 {
 
     /**
+     * @var \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface
+     */
+    protected $utilDataReaderService;
+
+    /**
      * @var \Spryker\Zed\Touch\Persistence\TouchQueryContainerInterface
      */
     protected $touchQueryContainer;
@@ -30,24 +35,18 @@ class TouchRecord implements TouchRecordInterface
     protected $connection;
 
     /**
-     * @var \Spryker\Shared\Library\BatchIterator\Builder\BatchIteratorBuilderInterface
-     */
-    protected $batchIteratorBuilder;
-
-    /**
+     * @param \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface $utilDataReaderService
      * @param \Spryker\Zed\Touch\Persistence\TouchQueryContainerInterface $queryContainer
      * @param \Propel\Runtime\Connection\ConnectionInterface $connection
-     * @param \Spryker\Shared\Library\BatchIterator\Builder\BatchIteratorBuilderInterface $batchIteratorBuilder
      */
     public function __construct(
+        UtilDataReaderServiceInterface $utilDataReaderService,
         TouchQueryContainerInterface $queryContainer,
-        ConnectionInterface $connection,
-        BatchIteratorBuilderInterface $batchIteratorBuilder
+        ConnectionInterface $connection
     ) {
-
+        $this->utilDataReaderService = $utilDataReaderService;
         $this->touchQueryContainer = $queryContainer;
         $this->connection = $connection;
-        $this->batchIteratorBuilder = $batchIteratorBuilder;
     }
 
     /**
@@ -272,13 +271,13 @@ class TouchRecord implements TouchRecordInterface
     /**
      * @param \Orm\Zed\Touch\Persistence\SpyTouchQuery $query
      *
-     * @return \Spryker\Shared\Library\BatchIterator\PropelBatchIterator
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
      */
     protected function getTouchIdsToRemoveBatchCollection(SpyTouchQuery $query)
     {
         $touchIdsToRemoveQuery = $query->select(SpyTouchTableMap::COL_ID_TOUCH);
 
-        return $this->batchIteratorBuilder->buildPropelBatchIterator($touchIdsToRemoveQuery);
+        return $this->utilDataReaderService->getPropelBatchIterator($touchIdsToRemoveQuery);
     }
 
     /**
diff --git a/Bundles/Touch/src/Spryker/Zed/Touch/Business/TouchBusinessFactory.php b/Bundles/Touch/src/Spryker/Zed/Touch/Business/TouchBusinessFactory.php
index 3115958..efaa562 100644
--- a/Bundles/Touch/src/Spryker/Zed/Touch/Business/TouchBusinessFactory.php
+++ b/Bundles/Touch/src/Spryker/Zed/Touch/Business/TouchBusinessFactory.php
@@ -7,7 +7,6 @@
 
 namespace Spryker\Zed\Touch\Business;
 
-use Spryker\Shared\Library\BatchIterator\Builder\BatchIteratorBuilder;
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
 use Spryker\Zed\Touch\Business\Model\BulkTouch\BulkTouch;
 use Spryker\Zed\Touch\Business\Model\BulkTouch\Filter\IdFilterInsert;
@@ -31,13 +30,21 @@ class TouchBusinessFactory extends AbstractBusinessFactory
     public function createTouchRecordModel()
     {
         return new TouchRecord(
+            $this->getUtilDataReaderService(),
             $this->getQueryContainer(),
-            $this->getProvidedDependency(TouchDependencyProvider::PLUGIN_PROPEL_CONNECTION),
-            $this->getBatchIteratorBuilder()
+            $this->getProvidedDependency(TouchDependencyProvider::PLUGIN_PROPEL_CONNECTION)
         );
     }
 
     /**
+     * @return \Spryker\Service\UtilDataReader\UtilDataReaderServiceInterface
+     */
+    protected function getUtilDataReaderService()
+    {
+        return $this->getProvidedDependency(TouchDependencyProvider::SERVICE_DATA);
+    }
+
+    /**
      * @return \Spryker\Zed\Touch\Business\Model\TouchInterface
      */
     public function createTouchModel()
@@ -85,7 +92,7 @@ class TouchBusinessFactory extends AbstractBusinessFactory
     }
 
     /**
-     * @return \Spryker\Zed\Touch\Business\Model\BulkTouch\Handler\BulkTouchHandlerInsert
+     * @return \Spryker\Zed\Touch\Business\Model\BulkTouch\Handler\BulkTouchHandlerUpdate
      */
     protected function createBulkTouchHandlerUpdate()
     {
@@ -100,12 +107,4 @@ class TouchBusinessFactory extends AbstractBusinessFactory
         return new IdFilterUpdate($this->getQueryContainer());
     }
 
-    /**
-     * @return \Spryker\Shared\Library\BatchIterator\Builder\BatchIteratorBuilder
-     */
-    protected function getBatchIteratorBuilder()
-    {
-        return new BatchIteratorBuilder();
-    }
-
 }
diff --git a/Bundles/Touch/src/Spryker/Zed/Touch/Communication/Console/TouchCleanUpConsole.php b/Bundles/Touch/src/Spryker/Zed/Touch/Communication/Console/TouchCleanUpConsole.php
index 7be871a..c013e26 100644
--- a/Bundles/Touch/src/Spryker/Zed/Touch/Communication/Console/TouchCleanUpConsole.php
+++ b/Bundles/Touch/src/Spryker/Zed/Touch/Communication/Console/TouchCleanUpConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Touch\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Touch/src/Spryker/Zed/Touch/Persistence/TouchQueryContainer.php b/Bundles/Touch/src/Spryker/Zed/Touch/Persistence/TouchQueryContainer.php
index 9814c65..6d653da 100644
--- a/Bundles/Touch/src/Spryker/Zed/Touch/Persistence/TouchQueryContainer.php
+++ b/Bundles/Touch/src/Spryker/Zed/Touch/Persistence/TouchQueryContainer.php
@@ -12,7 +12,7 @@ use Generated\Shared\Transfer\LocaleTransfer;
 use Orm\Zed\Touch\Persistence\Map\SpyTouchTableMap;
 use Propel\Runtime\ActiveQuery\Criteria;
 use Spryker\Zed\Kernel\Persistence\AbstractQueryContainer;
-use Spryker\Zed\Propel\Business\Formatter\PropelArraySetFormatter;
+use Spryker\Zed\PropelOrm\Business\Model\Formatter\PropelArraySetFormatter;
 
 /**
  * @method \Spryker\Zed\Touch\Persistence\TouchPersistenceFactory getFactory()
diff --git a/Bundles/Touch/src/Spryker/Zed/Touch/TouchDependencyProvider.php b/Bundles/Touch/src/Spryker/Zed/Touch/TouchDependencyProvider.php
index 2ea9a3d..960e7ca 100644
--- a/Bundles/Touch/src/Spryker/Zed/Touch/TouchDependencyProvider.php
+++ b/Bundles/Touch/src/Spryker/Zed/Touch/TouchDependencyProvider.php
@@ -7,14 +7,15 @@
 
 namespace Spryker\Zed\Touch;
 
+use Propel\Runtime\Propel;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Propel\Communication\Plugin\Connection;
 
 class TouchDependencyProvider extends AbstractBundleDependencyProvider
 {
 
     const PLUGIN_PROPEL_CONNECTION = 'propel connection plugin';
+    const SERVICE_DATA = 'util data service';
 
     /**
      * @param \Spryker\Zed\Kernel\Container $container
@@ -23,8 +24,12 @@ class TouchDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideBusinessLayerDependencies(Container $container)
     {
-        $container[self::PLUGIN_PROPEL_CONNECTION] = function () {
-            return (new Connection())->get();
+        $container[static::PLUGIN_PROPEL_CONNECTION] = function () {
+            return Propel::getConnection();
+        };
+
+        $container[static::SERVICE_DATA] = function (Container $container) {
+            return $container->getLocator()->utilDataReader()->service();
         };
 
         return $container;
diff --git a/Bundles/Transfer/composer.json b/Bundles/Transfer/composer.json
index ab81c89..bb3dbcb 100644
--- a/Bundles/Transfer/composer.json
+++ b/Bundles/Transfer/composer.json
@@ -17,13 +17,9 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/config": "^2.0.0",
-    "spryker/console": "^2.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/log": "^2.0.0",
-    "spryker/messenger": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/twig": "^2.0.0",
     "spryker/zend": "^2.0.0"
diff --git a/Bundles/Transfer/src/Spryker/Shared/Transfer/AbstractTransfer.php b/Bundles/Transfer/src/Spryker/Shared/Transfer/AbstractTransfer.php
deleted file mode 100644
index 027b805..0000000
--- a/Bundles/Transfer/src/Spryker/Shared/Transfer/AbstractTransfer.php
+++ /dev/null
@@ -1,472 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Transfer;
-
-use ArrayObject;
-use Exception;
-use InvalidArgumentException;
-use Serializable;
-use Spryker\Shared\Library\Json;
-use Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException;
-use Spryker\Shared\Transfer\Exception\TransferUnserializationException;
-use Zend\Filter\Word\UnderscoreToCamelCase;
-
-abstract class AbstractTransfer implements TransferInterface, Serializable
-{
-
-    /**
-     * @var array
-     */
-    private $modifiedProperties = [];
-
-    /**
-     * @var array
-     */
-    protected $transferMetadata = [];
-
-    /**
-     * @var \Zend\Filter\Word\UnderscoreToCamelCase
-     */
-    private static $filterUnderscoreToCamelCase;
-
-    public function __construct()
-    {
-        $this->initCollectionProperties();
-    }
-
-    /**
-     * @param bool $isRecursive
-     *
-     * @return array
-     */
-    public function toArray($isRecursive = true)
-    {
-        return $this->propertiesToArray($this->getPropertyNames(), $isRecursive, 'toArray');
-    }
-
-    /**
-     * @param bool $isRecursive
-     *
-     * @return array
-     */
-    public function modifiedToArray($isRecursive = true)
-    {
-        return $this->propertiesToArray($this->modifiedProperties, $isRecursive, 'modifiedToArray');
-    }
-
-    /**
-     * @return void
-     */
-    protected function initCollectionProperties()
-    {
-        foreach ($this->transferMetadata as $property => $metaData) {
-            if ($metaData['is_collection'] && $this->$property === null) {
-                $this->$property = new ArrayObject();
-            }
-        }
-    }
-
-    /**
-     * @param array $properties
-     * @param bool $isRecursive
-     * @param string $childConvertMethodName
-     *
-     * @return array
-     */
-    private function propertiesToArray(array $properties, $isRecursive, $childConvertMethodName)
-    {
-        $values = [];
-
-        foreach ($properties as $property) {
-            $value = $this->callGetMethod($property);
-
-            $arrayKey = $this->transformUnderscoreArrayKey($property);
-
-            if (is_object($value)) {
-                if ($isRecursive && $value instanceof TransferInterface) {
-                    $values[$arrayKey] = $value->$childConvertMethodName($isRecursive);
-                } elseif ($isRecursive && $this->isCollection($property) && count($value) >= 1) {
-                    $values = $this->addValuesToCollection($value, $values, $arrayKey, $isRecursive, $childConvertMethodName);
-                } else {
-                    $values[$arrayKey] = $value;
-                }
-                continue;
-            }
-
-            $values[$arrayKey] = $value;
-        }
-
-        return $values;
-    }
-
-    /**
-     * @return array
-     */
-    private function getPropertyNames()
-    {
-        return array_keys($this->transferMetadata);
-    }
-
-    /**
-     * @param array $data
-     * @param bool $ignoreMissingProperty
-     *
-     * @return $this
-     */
-    public function fromArray(array $data, $ignoreMissingProperty = false)
-    {
-        $allProperties = $this->getPropertyNames();
-        foreach ($data as $property => $value) {
-            $property = $this->filterPropertyUnderscoreToCamelCase($property);
-
-            if ($this->hasProperty($property, $allProperties, $ignoreMissingProperty) === false) {
-                continue;
-            }
-
-            if ($this->isCollection($property)) {
-                $value = $this->processCollection($value, $property, $ignoreMissingProperty);
-            } elseif ($this->isTransferClass($property)) {
-                $value = $this->initializeNestedTransferObject($property, $value, $ignoreMissingProperty);
-            }
-
-            $this->callSetMethod($property, $value);
-        }
-
-        return $this;
-    }
-
-    /**
-     * @param string $elementType
-     * @param array|\ArrayObject $arrayObject
-     * @param bool $ignoreMissingProperty
-     *
-     * @return \ArrayObject
-     */
-    protected function processArrayObject($elementType, $arrayObject, $ignoreMissingProperty = false)
-    {
-        $transferObjectsArray = new ArrayObject();
-        foreach ($arrayObject as $arrayElement) {
-            if (!is_array($arrayElement)) {
-                $transferObjectsArray->append(new $elementType());
-                continue;
-            }
-
-            if ($this->isAssociativeArray($arrayElement)) {
-                $transferObject = $this->createInstance($elementType);
-                $transferObject->fromArray($arrayElement, $ignoreMissingProperty);
-                $transferObjectsArray->append($transferObject);
-            } else {
-                foreach ($arrayElement as $arrayElementItem) {
-                    $transferObject = $this->createInstance($elementType);
-                    $transferObject->fromArray($arrayElementItem, $ignoreMissingProperty);
-                    $transferObjectsArray->append($transferObject);
-                }
-            }
-        }
-
-        return $transferObjectsArray;
-    }
-
-    /**
-     * @param array $array
-     *
-     * @return bool
-     */
-    private function isAssociativeArray(array $array)
-    {
-        return array_values($array) !== $array;
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return bool
-     */
-    private function isCollection($property)
-    {
-        return $this->transferMetadata[$property]['is_collection'];
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return bool
-     */
-    private function isTransferClass($property)
-    {
-        return $this->transferMetadata[$property]['is_transfer'];
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return void
-     */
-    protected function addModifiedProperty($property)
-    {
-        if (!in_array($property, $this->modifiedProperties)) {
-            $this->modifiedProperties[] = $property;
-        }
-    }
-
-    /**
-     * @param string $property
-     *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return void
-     */
-    protected function assertPropertyIsSet($property)
-    {
-        if ($this->$property === null) {
-            throw new RequiredTransferPropertyException(sprintf(
-                'Missing required property "%s" for transfer %s.',
-                $property,
-                get_class($this)
-            ));
-        }
-    }
-
-    /**
-     * @param string $property
-     *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return void
-     */
-    protected function assertCollectionPropertyIsSet($property)
-    {
-        /** @var \ArrayObject $collection */
-        $collection = $this->$property;
-        if ($collection->count() === 0) {
-            throw new RequiredTransferPropertyException(sprintf(
-                'Empty required collection property "%s" for transfer %s.',
-                $property,
-                get_class($this)
-            ));
-        }
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return string
-     */
-    protected function getTypeForProperty($property)
-    {
-        return $this->transferMetadata[$property]['type'];
-    }
-
-    /**
-     * Performance-Speedup. We do not want another instance of the filter for each property.
-     *
-     * @return \Zend\Filter\Word\UnderscoreToCamelCase
-     */
-    private function getFilterUnderscoreToCamelCase()
-    {
-        if (self::$filterUnderscoreToCamelCase === null) {
-            self::$filterUnderscoreToCamelCase = new UnderscoreToCamelCase();
-        }
-
-        return self::$filterUnderscoreToCamelCase;
-    }
-
-    /**
-     * @param string $property
-     * @param mixed $value
-     *
-     * @throws \InvalidArgumentException
-     *
-     * @return void
-     */
-    private function callSetMethod($property, $value)
-    {
-        $setter = 'set' . ucfirst($property);
-
-        try {
-            $this->$setter($value);
-        } catch (Exception $exception) {
-            throw new InvalidArgumentException(
-                sprintf('Could not call "%s(%s)" (type %s) in "%s". Maybe there is a type miss match.', $setter, $value, gettype($value), get_class($this)),
-                $exception->getCode(),
-                $exception
-            );
-        }
-    }
-
-    /**
-     * @param string $property
-     * @param mixed $value
-     * @param bool $ignoreMissingProperty
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    private function initializeNestedTransferObject($property, $value, $ignoreMissingProperty = false)
-    {
-        $type = $this->getTypeForProperty($property);
-        $transferObject = $this->createInstance($type);
-
-        if (is_array($value)) {
-            $transferObject->fromArray($value, $ignoreMissingProperty);
-            $value = $transferObject;
-        }
-
-        return $value;
-    }
-
-    /**
-     * @param mixed $value
-     * @param string $property
-     * @param bool $ignoreMissingProperty
-     *
-     * @return \ArrayObject
-     */
-    private function processCollection($value, $property, $ignoreMissingProperty = false)
-    {
-        $elementType = $this->transferMetadata[$property]['type'];
-        $value = $this->processArrayObject($elementType, $value, $ignoreMissingProperty);
-
-        return $value;
-    }
-
-    /**
-     * @param string $type
-     *
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    private function createInstance($type)
-    {
-        return new $type();
-    }
-
-    /**
-     * @param string $property
-     * @param array $properties
-     * @param bool $ignoreMissingProperty
-     *
-     * @throws \InvalidArgumentException
-     *
-     * @return bool
-     */
-    private function hasProperty($property, array $properties, $ignoreMissingProperty)
-    {
-        if (in_array($property, $properties)) {
-            return true;
-        }
-
-        if ($ignoreMissingProperty) {
-            return false;
-        }
-
-        throw new InvalidArgumentException(
-            sprintf('Missing property "%s" in "%s"', $property, get_class($this))
-        );
-    }
-
-    /**
-     * @param string $key
-     *
-     * @return string
-     */
-    private function filterPropertyUnderscoreToCamelCase($key)
-    {
-        $filter = $this->getFilterUnderscoreToCamelCase();
-        $property = lcfirst($filter->filter($key));
-
-        return $property;
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return mixed
-     */
-    private function callGetMethod($property)
-    {
-        $getter = 'get' . ucfirst($property);
-        $value = $this->$getter();
-
-        return $value;
-    }
-
-    /**
-     * @param string $property
-     *
-     * @return mixed
-     */
-    private function transformUnderscoreArrayKey($property)
-    {
-        $property = $this->transferMetadata[$property]['name_underscore'];
-
-        return $property;
-    }
-
-    /**
-     * @param mixed $value
-     * @param array $values
-     * @param string $arrayKey
-     * @param bool $isRecursive
-     * @param string $childConvertMethodName
-     *
-     * @return array
-     */
-    private function addValuesToCollection($value, $values, $arrayKey, $isRecursive, $childConvertMethodName)
-    {
-        foreach ($value as $elementKey => $arrayElement) {
-            if (is_array($arrayElement) || is_scalar($arrayElement)) {
-                $values[$arrayKey][$elementKey] = $arrayElement;
-            } else {
-                $values[$arrayKey][$elementKey] = $arrayElement->$childConvertMethodName($isRecursive);
-            }
-        }
-
-        return $values;
-    }
-
-    /**
-     * @return string
-     */
-    public function serialize()
-    {
-        return Json::encode($this->modifiedToArray());
-    }
-
-    /**
-     * @param string $serialized
-     *
-     * @throws \Spryker\Shared\Transfer\Exception\TransferUnserializationException
-     *
-     * @return void
-     */
-    public function unserialize($serialized)
-    {
-        try {
-            $this->fromArray(Json::decode($serialized, true), true);
-            $this->initCollectionProperties();
-        } catch (Exception $exception) {
-            throw new TransferUnserializationException(
-                sprintf(
-                    'Failed to unserialize %s. Updating or clearing your data source may solve this problem: %s',
-                    get_class($this),
-                    $exception->getMessage()
-                ),
-                $exception->getCode(),
-                $exception
-            );
-        }
-    }
-
-    /**
-     * @return void
-     */
-    public function __wakeup()
-    {
-        $this->initCollectionProperties();
-    }
-
-}
diff --git a/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/RequiredTransferPropertyException.php b/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/RequiredTransferPropertyException.php
deleted file mode 100644
index 13a03e5..0000000
--- a/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/RequiredTransferPropertyException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Transfer\Exception;
-
-use Exception;
-
-class RequiredTransferPropertyException extends Exception
-{
-}
diff --git a/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/TransferUnserializationException.php b/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/TransferUnserializationException.php
deleted file mode 100644
index 914bc3e..0000000
--- a/Bundles/Transfer/src/Spryker/Shared/Transfer/Exception/TransferUnserializationException.php
+++ /dev/null
@@ -1,14 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Transfer\Exception;
-
-use Exception;
-
-class TransferUnserializationException extends Exception
-{
-}
diff --git a/Bundles/Transfer/src/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessor.php b/Bundles/Transfer/src/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessor.php
new file mode 100644
index 0000000..a6b1d03
--- /dev/null
+++ b/Bundles/Transfer/src/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessor.php
@@ -0,0 +1,97 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Transfer\Log\Processor;
+
+use ArrayObject;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Shared\Log\Sanitizer\SanitizerInterface;
+
+class TransferSanitizerProcessor
+{
+
+    const EXTRA = 'transfer';
+    const CONTEXT_KEY = 'transfer';
+    const RECORD_EXTRA = 'extra';
+    const RECORD_CONTEXT = 'context';
+
+    /**
+     * @var \Spryker\Shared\Log\Sanitizer\SanitizerInterface
+     */
+    protected $sanitizer;
+
+    /**
+     * @param \Spryker\Shared\Log\Sanitizer\SanitizerInterface $sanitizer
+     */
+    public function __construct(SanitizerInterface $sanitizer)
+    {
+        $this->sanitizer = $sanitizer;
+    }
+
+    /**
+     * @param array $record
+     *
+     * @return array
+     */
+    public function __invoke(array $record)
+    {
+        $transfer = $this->findTransfer((array)$record[static::RECORD_CONTEXT]);
+        if (!($transfer instanceof TransferInterface)) {
+            return $record;
+        }
+        unset($record[static::RECORD_CONTEXT][static::CONTEXT_KEY]);
+
+        $contextData = $this->transferToArray($transfer);
+        $contextData['class'] = get_class($transfer);
+        $sanitizedData = $this->sanitizer->sanitize($contextData);
+        $record[static::RECORD_EXTRA][static::EXTRA] = $sanitizedData;
+
+        return $record;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transfer
+     *
+     * @return array
+     */
+    protected function transferToArray(TransferInterface $transfer)
+    {
+        $transferArray = $transfer->toArray();
+
+        foreach ($transferArray as $key => $value) {
+            if ($value instanceof ArrayObject) {
+                $data[$key] = [];
+            }
+
+            if (is_array($value) && (current($value) instanceof TransferInterface)) {
+                foreach ($value as $position => $transfer) {
+                    $value[$position] = $this->transferToArray($transfer);
+                }
+            }
+        }
+
+        return $transferArray;
+    }
+
+    /**
+     * @param array $context
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface|null
+     */
+    protected function findTransfer(array $context)
+    {
+        if (!empty($context[static::CONTEXT_KEY])) {
+            return $context[static::CONTEXT_KEY];
+        }
+        if (current($context) instanceof TransferInterface) {
+            return current($context);
+        }
+
+        return null;
+    }
+
+}
diff --git a/Bundles/Transfer/src/Spryker/Shared/Transfer/TransferInterface.php b/Bundles/Transfer/src/Spryker/Shared/Transfer/TransferInterface.php
deleted file mode 100644
index 790a3ad..0000000
--- a/Bundles/Transfer/src/Spryker/Shared/Transfer/TransferInterface.php
+++ /dev/null
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Transfer;
-
-interface TransferInterface
-{
-
-    /**
-     * @param bool $isRecursive
-     *
-     * @return array
-     */
-    public function toArray($isRecursive = true);
-
-    /**
-     * @param bool $isRecursive
-     *
-     * @return array
-     */
-    public function modifiedToArray($isRecursive = true);
-
-    /**
-     * @param array $values
-     * @param bool $fuzzyMatch
-     *
-     * @return $this
-     */
-    public function fromArray(array $values, $fuzzyMatch = false);
-
-}
diff --git a/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/class.php.twig b/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/class.php.twig
index 98d1bda..9d06415 100644
--- a/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/class.php.twig
+++ b/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/class.php.twig
@@ -7,7 +7,7 @@
 
 namespace Generated\Shared\Transfer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 /**
  * !!! THIS FILE IS AUTO-GENERATED, EVERY CHANGE WILL BE LOST WITH THE NEXT RUN OF TRANSFER GENERATOR
diff --git a/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/macros.php.twig b/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/macros.php.twig
index 55fc79c..b064ced 100644
--- a/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/macros.php.twig
+++ b/Bundles/Transfer/src/Spryker/Zed/Transfer/Business/Model/Generator/Templates/macros.php.twig
@@ -127,7 +127,7 @@
      * @bundle {{ method.bundles|join('|') }}
      *
      {% endif -%}
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
diff --git a/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/GeneratorConsole.php b/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/GeneratorConsole.php
index f2a8518..6d64b5b 100644
--- a/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/GeneratorConsole.php
+++ b/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/GeneratorConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Transfer\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Output\OutputInterface;
 
diff --git a/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/ValidatorConsole.php b/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/ValidatorConsole.php
index 724b578..280b025 100644
--- a/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/ValidatorConsole.php
+++ b/Bundles/Transfer/src/Spryker/Zed/Transfer/Communication/Console/ValidatorConsole.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\Transfer\Communication\Console;
 
-use Spryker\Zed\Console\Business\Model\Console;
+use Spryker\Zed\Kernel\Communication\Console\Console;
 use Symfony\Component\Console\Input\InputInterface;
 use Symfony\Component\Console\Input\InputOption;
 use Symfony\Component\Console\Output\OutputInterface;
diff --git a/Bundles/Transfer/src/Spryker/Zed/Transfer/TransferConfig.php b/Bundles/Transfer/src/Spryker/Zed/Transfer/TransferConfig.php
index dbcafd3..07ab60d 100644
--- a/Bundles/Transfer/src/Spryker/Zed/Transfer/TransferConfig.php
+++ b/Bundles/Transfer/src/Spryker/Zed/Transfer/TransferConfig.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Zed\Transfer;
 
-use Spryker\Shared\Application\ApplicationConstants;
 use Spryker\Shared\Config\Config;
+use Spryker\Shared\Kernel\KernelConstants;
 use Spryker\Zed\Kernel\AbstractBundleConfig;
 
 class TransferConfig extends AbstractBundleConfig
@@ -42,7 +42,7 @@ class TransferConfig extends AbstractBundleConfig
      */
     protected function getSprykerCoreSourceDirectoryGlobPattern()
     {
-        return Config::get(ApplicationConstants::APPLICATION_SPRYKER_ROOT) . '/*/src/*/Shared/*/Transfer/';
+        return Config::get(KernelConstants::SPRYKER_ROOT) . '/*/src/*/Shared/*/Transfer/';
     }
 
     /**
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.deprecated.transfer.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.deprecated.transfer.php
index 1ed1b21..be6415e 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.deprecated.transfer.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.deprecated.transfer.php
@@ -6,7 +6,7 @@
 
 namespace Generated\Shared\Transfer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 /**
  * !!! THIS FILE IS AUTO-GENERATED, EVERY CHANGE WILL BE LOST WITH THE NEXT RUN OF TRANSFER GENERATOR
@@ -121,7 +121,7 @@ class DeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -183,7 +183,7 @@ class DeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -228,7 +228,7 @@ class DeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -290,7 +290,7 @@ class DeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.deprecated.transfer.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.deprecated.transfer.php
index 35db7b4..0b800cc 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.deprecated.transfer.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.deprecated.transfer.php
@@ -6,7 +6,7 @@
 
 namespace Generated\Shared\Transfer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 /**
  * !!! THIS FILE IS AUTO-GENERATED, EVERY CHANGE WILL BE LOST WITH THE NEXT RUN OF TRANSFER GENERATOR
@@ -137,7 +137,7 @@ class MergedDeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Deprecated
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -199,7 +199,7 @@ class MergedDeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Deprecated
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -244,7 +244,7 @@ class MergedDeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Deprecated
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -306,7 +306,7 @@ class MergedDeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Deprecated
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -351,7 +351,7 @@ class MergedDeprecatedFooBarTransfer extends AbstractTransfer
      *
      * @bundle Deprecated
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.transfer.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.transfer.php
index e353ff7..a3e9ceb 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.transfer.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.merged.transfer.php
@@ -6,7 +6,7 @@
 
 namespace Generated\Shared\Transfer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 /**
  * !!! THIS FILE IS AUTO-GENERATED, EVERY CHANGE WILL BE LOST WITH THE NEXT RUN OF TRANSFER GENERATOR
@@ -88,7 +88,7 @@ class FooBarTransfer extends AbstractTransfer
     /**
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -127,7 +127,7 @@ class FooBarTransfer extends AbstractTransfer
     /**
      * @bundle Test|Test2
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -181,7 +181,7 @@ class FooBarTransfer extends AbstractTransfer
     /**
      * @bundle Test2
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.transfer.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.transfer.php
index 21add2a..563e127 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.transfer.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/Fixtures/expected.transfer.php
@@ -6,7 +6,7 @@
 
 namespace Generated\Shared\Transfer;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 /**
  * !!! THIS FILE IS AUTO-GENERATED, EVERY CHANGE WILL BE LOST WITH THE NEXT RUN OF TRANSFER GENERATOR
@@ -88,7 +88,7 @@ class CatFaceTransfer extends AbstractTransfer
     /**
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -127,7 +127,7 @@ class CatFaceTransfer extends AbstractTransfer
     /**
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
@@ -181,7 +181,7 @@ class CatFaceTransfer extends AbstractTransfer
     /**
      * @bundle Test
      *
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
+     * @throws \Spryker\Shared\Kernel\Transfer\Exception\RequiredTransferPropertyException
      *
      * @return $this
      */
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferBusinessFactoryTest.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferBusinessFactoryTest.php
index 0d5d3d3..b5f619a 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferBusinessFactoryTest.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferBusinessFactoryTest.php
@@ -8,7 +8,7 @@
 namespace Functional\Spryker\Zed\Transfer\Business\Model;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Transfer\Business\Model\TransferCleaner;
 use Spryker\Zed\Transfer\Business\Model\TransferGenerator;
 use Spryker\Zed\Transfer\Business\Model\TransferValidatorInterface;
@@ -35,11 +35,11 @@ class TransferBusinessFactoryTest extends PHPUnit_Framework_TestCase
     }
 
     /**
-     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\Messenger\Business\Model\MessengerInterface
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Psr\Log\LoggerInterface
      */
     private function getMessenger()
     {
-        return $this->getMockBuilder(MessengerInterface::class)->getMock();
+        return $this->getMockBuilder(LoggerInterface::class)->getMock();
     }
 
     /**
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferFacadeTest.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferFacadeTest.php
index 1eacb13..f4bd476 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferFacadeTest.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferFacadeTest.php
@@ -8,7 +8,7 @@
 namespace Functional\Spryker\Zed\Transfer\Business\Model;
 
 use PHPUnit_Framework_TestCase;
-use Spryker\Zed\Messenger\Business\Model\MessengerInterface;
+use Psr\Log\LoggerInterface;
 use Spryker\Zed\Transfer\Business\TransferFacade;
 use Spryker\Zed\Transfer\TransferConfig;
 use Symfony\Component\Finder\Finder;
@@ -38,7 +38,7 @@ class TransferFacadeTest extends PHPUnit_Framework_TestCase
      */
     private function getMessenger()
     {
-        return $this->getMockBuilder(MessengerInterface::class)->getMock();
+        return $this->getMockBuilder(LoggerInterface::class)->getMock();
     }
 
     /**
diff --git a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferGeneratorTest.php b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferGeneratorTest.php
index 5e2793a..545b5a4 100644
--- a/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferGeneratorTest.php
+++ b/Bundles/Transfer/tests/Functional/Spryker/Zed/Transfer/Business/Model/TransferGeneratorTest.php
@@ -8,7 +8,6 @@
 namespace Functional\Spryker\Zed\Transfer\Business\Model;
 
 use Codeception\TestCase\Test;
-use Spryker\Zed\Console\Business\Model\ConsoleMessenger;
 use Spryker\Zed\Transfer\Business\Model\Generator\ClassDefinition;
 use Spryker\Zed\Transfer\Business\Model\Generator\ClassGenerator;
 use Spryker\Zed\Transfer\Business\Model\Generator\DefinitionNormalizer;
@@ -17,6 +16,7 @@ use Spryker\Zed\Transfer\Business\Model\Generator\TransferDefinitionFinder;
 use Spryker\Zed\Transfer\Business\Model\Generator\TransferDefinitionLoader;
 use Spryker\Zed\Transfer\Business\Model\Generator\TransferDefinitionMerger;
 use Spryker\Zed\Transfer\Business\Model\TransferGenerator;
+use Symfony\Component\Console\Logger\ConsoleLogger;
 use Symfony\Component\Console\Output\ConsoleOutput;
 use Symfony\Component\Console\Output\OutputInterface;
 
@@ -139,11 +139,11 @@ class TransferGeneratorTest extends Test
     }
 
     /**
-     * @return \Spryker\Zed\Console\Business\Model\ConsoleMessenger
+     * @return \Symfony\Component\Console\Logger\ConsoleLogger
      */
     protected function getMessenger()
     {
-        $messenger = new ConsoleMessenger(new ConsoleOutput(OutputInterface::VERBOSITY_QUIET));
+        $messenger = new ConsoleLogger(new ConsoleOutput(OutputInterface::VERBOSITY_QUIET));
 
         return $messenger;
     }
diff --git a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/AbstractTransferTest.php b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/AbstractTransferTest.php
deleted file mode 100644
index 25de346..0000000
--- a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/AbstractTransferTest.php
+++ /dev/null
@@ -1,472 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Shared\Transfer;
-
-use ArrayObject;
-use InvalidArgumentException;
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\Transfer\TransferInterface;
-use Unit\Spryker\Shared\Transfer\Fixtures\AbstractTransfer;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Shared
- * @group Transfer
- * @group AbstractTransferTest
- */
-class AbstractTransferTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testFromArrayShouldReturnInstanceWithSetDefaultTypes()
-    {
-        $data = [
-            'string' => 'string',
-            'int' => 1,
-            'bool' => true,
-            'array' => [],
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data);
-
-        $this->assertSame('string', $transfer->getString());
-        $this->assertSame(1, $transfer->getInt());
-        $this->assertTrue($transfer->getBool());
-        $this->assertInternalType('array', $transfer->getArray());
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayShouldReturnInstanceWithSetTransferObject()
-    {
-        $data = [
-            'transfer' => new AbstractTransfer(),
-            'transferCollection' => [
-                new AbstractTransfer(),
-            ],
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data);
-
-        $this->assertInstanceOf(TransferInterface::class, $transfer->getTransfer());
-        $this->assertInstanceOf('\ArrayObject', $transfer->getTransferCollection());
-        $this->assertCount(1, $transfer->getTransferCollection());
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayShouldWorkForGivenTransferAndInnerTransfers()
-    {
-        $data = [
-            'string' => 'foo',
-            'int' => 1,
-            'transfer' => [
-                'string' => 'foo',
-                'int' => 1,
-            ],
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data);
-
-        $this->assertInstanceOf(TransferInterface::class, $transfer->getTransfer());
-    }
-
-    /**
-     * @expectedException \InvalidArgumentException
-     *
-     * @return void
-     */
-    public function testFromArrayWithIgnoreMissingPropertyFalseShouldThrowExceptionIfPropertyIsInArrayButNotInObject()
-    {
-        $data = [
-            'not existing property key' => '',
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data);
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayWithIgnoreMissingPropertyTrueShouldNotThrowExceptionIfPropertyIsInArrayButNotInObject()
-    {
-        $data = [
-            'not existing property key' => '',
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data, true);
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayWithNestedTransferCollectionShouldReturnValidDataFromEmbeddedTransferObjects()
-    {
-        $data = [
-            'string' => 'level1',
-            'int' => 1,
-            'transfer_collection' => [
-                [
-                    'string' => 'level2',
-                    'int' => 1,
-                ], [
-                    'string' => 'level2',
-                    'int' => 2,
-                    'transfer_collection' => [
-                        [
-                            'string' => 'level3',
-                            'int' => 1,
-                        ], [
-                            'string' => 'level3',
-                            'int' => 2,
-                        ],
-                    ],
-                ],
-            ],
-        ];
-
-        $transfer = new AbstractTransfer();
-        $transfer->fromArray($data);
-
-        $this->assertEquals('level1', $transfer->getString());
-        $this->assertEquals('level2', $transfer->getTransferCollection()[0]->getString());
-        $this->assertEquals('level3', $transfer->getTransferCollection()[1]->getTransferCollection()[0]->getString());
-    }
-
-    /**
-     * @return void
-     */
-    public function testToArrayShouldReturnArrayWithAllPropertyNamesAsKeysAndNullValuesWhenNoPropertyWasSet()
-    {
-        $transfer = new AbstractTransfer();
-        $given = $transfer->toArray();
-        $expected = [
-            'string' => null,
-            'int' => null,
-            'bool' => null,
-            'array' => [],
-            'transfer' => null,
-            'transfer_collection' => new ArrayObject(),
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testToArrayShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValues()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-
-        $given = $transfer->toArray();
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-            'bool' => null,
-            'array' => [],
-            'transfer' => null,
-            'transfer_collection' => new ArrayObject(),
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testToArrayWithRecursiveTrueShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValuesAndRecursiveFilledInnerObjects()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-
-        $innerTransfer = new AbstractTransfer();
-        $innerTransfer->setString('bar');
-        $innerTransfer->setInt(3);
-
-        $transfer->setTransfer($innerTransfer);
-
-        $given = $transfer->toArray();
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-            'bool' => null,
-            'array' => [],
-            'transfer' => [
-                'string' => 'bar',
-                'int' => 3,
-                'bool' => null,
-                'array' => [],
-                'transfer' => null,
-                'transfer_collection' => new ArrayObject(),
-            ],
-            'transfer_collection' => new ArrayObject(),
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testToArrayWithRecursiveFalseShouldReturnArrayWithAllPropertyNamesAsKeysAndWithoutRecursiveFilledInnerObjects()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-
-        $innerTransfer = new AbstractTransfer();
-        $innerTransfer->setString('bar');
-        $innerTransfer->setInt(3);
-
-        $transfer->setTransfer($innerTransfer);
-
-        $given = $transfer->toArray(false);
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-            'bool' => null,
-            'array' => [],
-            'transfer' => $innerTransfer,
-            'transfer_collection' => new ArrayObject(),
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testModifiedToArrayShouldReturnArrayOnlyWithModifiedProperty()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-
-        $given = $transfer->modifiedToArray();
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testModifiedToArrayWithRecursiveTrueShouldReturnArrayWithAllPropertyNamesAsKeysAndFilledValuesAndRecursiveFilledInnerObjectsWhichWhereModified()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-        $transfer->setArray([]);
-
-        $innerTransfer = new AbstractTransfer();
-        $innerTransfer->setString('bar');
-        $innerTransfer->setInt(3);
-
-        $transfer->setTransfer($innerTransfer);
-
-        $given = $transfer->modifiedToArray(true);
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-            'array' => [],
-            'transfer' => [
-                'string' => 'bar',
-                'int' => 3,
-            ],
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testSerializeAndUnSerializeShouldReturnUnSerializedInstance()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-
-        $serialized = serialize($transfer);
-        $unSerialized = unserialize($serialized);
-
-        $given = $unSerialized->toArray();
-        $expected = [
-            'string' => 'foo',
-            'int' => 2,
-            'bool' => null,
-            'array' => [],
-            'transfer' => null,
-            'transfer_collection' => new ArrayObject(),
-        ];
-
-        $this->assertEquals($expected, $given);
-    }
-
-    /**
-     * @return void
-     */
-    public function testSerializeTransferAffectsModifiedDataOnly()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-
-        $serialized = serialize($transfer);
-        $unserialized = unserialize($serialized);
-
-        $expected = [
-            'string' => 'foo',
-        ];
-
-        $this->assertEquals($expected, $unserialized->modifiedToArray());
-    }
-
-    /**
-     * @return void
-     */
-    public function testTransferUnserializationIsIdempotent()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer
-            ->setString('foo')
-            ->setTransfer((new AbstractTransfer())->setInt(123))
-            ->setTransferCollection(new ArrayObject([
-                (new AbstractTransfer())->setBool(false),
-                (new AbstractTransfer())->setBool(true),
-            ]));
-
-        $serialized = $transfer->serialize();
-        $unserializedTransfer = new AbstractTransfer();
-        $unserializedTransfer->unserialize($serialized);
-
-        $this->assertEquals($transfer, $unserializedTransfer);
-    }
-
-    /**
-     * @return void
-     */
-    public function testCloneShouldReturnFullClonedObject()
-    {
-        $transfer = new AbstractTransfer();
-        $transfer->setString('foo');
-        $transfer->setInt(2);
-        $transfer->setTransfer(new AbstractTransfer());
-
-        $clonedTransfer = clone $transfer;
-
-        $this->assertEquals($transfer, $clonedTransfer);
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayShouldWorkWithCyclicReferences()
-    {
-        $transfer = new AbstractTransfer();
-
-        $data = [
-            'string' => 'foo',
-            'transfer' => [
-                'string' => 'bar',
-                'transfer' => $transfer,
-            ],
-        ];
-
-        $transfer->fromArray($data);
-
-        $this->assertEquals('foo', $transfer->getString());
-        $this->assertEquals('bar', $transfer->getTransfer()->getString());
-        $this->assertEquals('foo', $transfer->getTransfer()->getTransfer()->getString());
-        $this->assertEquals('bar', $transfer->getTransfer()->getTransfer()->getTransfer()->getString());
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayToArrayConversionShouldWorkWithEmptyDataForTheSameTransferType()
-    {
-        $transfer1 = new AbstractTransfer();
-        $transfer2 = new AbstractTransfer();
-
-        $transfer1->fromArray($transfer2->toArray());
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayToArrayConversionShouldWorkForTheSameTransferType()
-    {
-        $transfer1 = new AbstractTransfer();
-        $data = [
-            'string' => 'foo',
-            'transfer' => [
-                'string' => 'bar',
-            ],
-        ];
-        $transfer1->fromArray($data);
-
-        $transfer2 = new AbstractTransfer();
-        $transfer2->fromArray($transfer1->toArray());
-
-        $this->assertEquals('foo', $transfer2->getString());
-        $this->assertEquals('bar', $transfer2->getTransfer()->getString());
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetTransferCollectionWithArrayObject()
-    {
-        $transfer = new AbstractTransfer();
-        $collection = new ArrayObject([
-            new AbstractTransfer(),
-            new AbstractTransfer(),
-        ]);
-        $transfer->setTransferCollection($collection);
-
-        $this->assertCount(2, $transfer->getTransferCollection());
-    }
-
-    /**
-     * @return void
-     */
-    public function testFromArrayShouldThrowInvalidArgumentExceptionWhenMissingPropertyCanBeIgnoredAndPropertyExistsButExpectedTypeDoesNotMatch()
-    {
-        if (version_compare(PHP_VERSION, '7.0') >= 0) {
-            $this->markTestSkipped('We must first upgrade PHPUnit to 5.6+');
-            return;
-        }
-
-        $this->expectException(InvalidArgumentException::class);
-        $this->expectExceptionMessage(sprintf(
-            'Could not call "setArray(string)" (type string) in "%s". Maybe there is a type miss match.',
-            AbstractTransfer::class
-        ));
-
-        $abstractTransfer = new AbstractTransfer();
-        $abstractTransfer->fromArray(['array' => 'string']);
-    }
-
-}
diff --git a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Fixtures/AbstractTransfer.php b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Fixtures/AbstractTransfer.php
deleted file mode 100644
index 6c0ffe3..0000000
--- a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Fixtures/AbstractTransfer.php
+++ /dev/null
@@ -1,323 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Unit\Spryker\Shared\Transfer\Fixtures;
-
-use Spryker\Shared\Transfer\TransferInterface;
-use Spryker\Shared\Transfer\AbstractTransfer as ParentAbstractTransfer;
-
-class AbstractTransfer extends ParentAbstractTransfer
-{
-
-    const STRING = 'string';
-
-    const INT = 'int';
-
-    const BOOL = 'bool';
-
-    const ARRAY_PROPERTY = 'array';
-
-    const TRANSFER = 'transfer';
-
-    const TRANSFER_COLLECTION = 'transferCollection';
-
-    /**
-     * @var string
-     */
-    protected $string;
-
-    /**
-     * @var int
-     */
-    protected $int;
-
-    /**
-     * @var bool
-     */
-    protected $bool;
-
-    /**
-     * @var array
-     */
-    protected $array = [];
-
-    /**
-     * @var \Spryker\Shared\Transfer\TransferInterface
-     */
-    protected $transfer;
-
-    /**
-     * @var \ArrayObject|\Spryker\Shared\Transfer\TransferInterface[]
-     */
-    protected $transferCollection;
-
-    /**
-     * @var array
-     */
-    protected $transferMetadata = [
-        self::STRING => [
-            'type' => 'string',
-            'name_underscore' => 'string',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-        self::INT => [
-            'type' => 'int',
-            'name_underscore' => 'int',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-        self::BOOL => [
-            'type' => 'bool',
-            'name_underscore' => 'bool',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-        self::ARRAY_PROPERTY => [
-            'type' => 'array',
-            'name_underscore' => 'array',
-            'is_collection' => false,
-            'is_transfer' => false,
-        ],
-        self::TRANSFER => [
-            'type' => 'Unit\Spryker\Shared\Transfer\Fixtures\AbstractTransfer',
-            'name_underscore' => 'transfer',
-            'is_collection' => false,
-            'is_transfer' => true,
-        ],
-        self::TRANSFER_COLLECTION => [
-            'type' => 'Unit\Spryker\Shared\Transfer\Fixtures\AbstractTransfer',
-            'name_underscore' => 'transfer_collection',
-            'is_collection' => true,
-            'is_transfer' => true,
-        ],
-    ];
-
-    /**
-     * @param string $string
-     *
-     * @return $this
-     */
-    public function setString($string)
-    {
-        $this->string = $string;
-        $this->addModifiedProperty(self::STRING);
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getString()
-    {
-        return $this->string;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireString()
-    {
-        $this->assertPropertyIsSet(self::STRING);
-
-        return $this;
-    }
-
-    /**
-     * @param int $int
-     *
-     * @return $this
-     */
-    public function setInt($int)
-    {
-        $this->int = $int;
-        $this->addModifiedProperty(self::INT);
-
-        return $this;
-    }
-
-    /**
-     * @return int
-     */
-    public function getInt()
-    {
-        return $this->int;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireInt()
-    {
-        $this->assertPropertyIsSet(self::INT);
-
-        return $this;
-    }
-
-    /**
-     * @param bool $bool
-     *
-     * @return $this
-     */
-    public function setBool($bool)
-    {
-        $this->bool = $bool;
-        $this->addModifiedProperty(self::BOOL);
-
-        return $this;
-    }
-
-    /**
-     * @return bool
-     */
-    public function getBool()
-    {
-        return $this->bool;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireBool()
-    {
-        $this->assertPropertyIsSet(self::BOOL);
-
-        return $this;
-    }
-
-    /**
-     * @param array $array
-     *
-     * @return $this
-     */
-    public function setArray(array $array = [])
-    {
-        $this->array = $array;
-        $this->addModifiedProperty(self::ARRAY_PROPERTY);
-
-        return $this;
-    }
-
-    /**
-     * @return array
-     */
-    public function getArray()
-    {
-        return $this->array;
-    }
-
-    /**
-     * @param array $arr
-     *
-     * @return $this
-     */
-    public function addArr($arr)
-    {
-        $this->array[] = $arr;
-        $this->addModifiedProperty(self::ARRAY_PROPERTY);
-
-        return $this;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireArr()
-    {
-        $this->assertCollectionPropertyIsSet(self::ARRAY_PROPERTY);
-
-        return $this;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transfer
-     *
-     * @return $this
-     */
-    public function setTransfer(TransferInterface $transfer = null)
-    {
-        $this->transfer = $transfer;
-        $this->addModifiedProperty(self::TRANSFER);
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
-     */
-    public function getTransfer()
-    {
-        return $this->transfer;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireTransfer()
-    {
-        $this->assertPropertyIsSet(self::TRANSFER);
-
-        return $this;
-    }
-
-    /**
-     * @param \ArrayObject|\Spryker\Shared\Transfer\TransferInterface[] $transferCollection
-     *
-     * @return $this
-     */
-    public function setTransferCollection(\ArrayObject $transferCollection)
-    {
-        $this->transferCollection = $transferCollection;
-        $this->addModifiedProperty(self::TRANSFER_COLLECTION);
-
-        return $this;
-    }
-
-    /**
-     * @return \Spryker\Shared\Transfer\TransferInterface[]
-     */
-    public function getTransferCollection()
-    {
-        return $this->transferCollection;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferCollection
-     *
-     * @return $this
-     */
-    public function addTransferCollection(TransferInterface $transferCollection)
-    {
-        $this->transferCollection[] = $transferCollection;
-        $this->addModifiedProperty(self::TRANSFER_COLLECTION);
-
-        return $this;
-    }
-
-    /**
-     * @throws \Spryker\Shared\Transfer\Exception\RequiredTransferPropertyException
-     *
-     * @return $this
-     */
-    public function requireTransferCollection()
-    {
-        $this->assertCollectionPropertyIsSet(self::TRANSFER_COLLECTION);
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/ComplexTransfer.php b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/ComplexTransfer.php
new file mode 100644
index 0000000..38ee4fc
--- /dev/null
+++ b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/ComplexTransfer.php
@@ -0,0 +1,157 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures;
+
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+
+class ComplexTransfer extends AbstractTransfer implements TransferInterface
+{
+
+    /**
+     * @var array
+     */
+    protected $array = ['foo', 'bar'];
+
+    /**
+     * @var \ArrayObject
+     */
+    protected $emptyTransfer;
+
+    /**
+     * @var \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer
+     */
+    protected $innerTransfer;
+
+    /**
+     * @var \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer[]
+     */
+    protected $transferCollection;
+
+    /**
+     * @var array
+     */
+    protected $transferMetadata = [
+        'array' => [
+            'type' => 'array',
+            'name_underscore' => 'array',
+            'is_collection' => true,
+            'is_transfer' => false,
+        ],
+        'emptyTransfer' => [
+            'type' => '\Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer',
+            'name_underscore' => 'empty_transfer',
+            'is_collection' => false,
+            'is_transfer' => true,
+        ],
+        'innerTransfer' => [
+            'type' => '\Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer',
+            'name_underscore' => 'inner_transfer',
+            'is_collection' => false,
+            'is_transfer' => true,
+        ],
+        'transferCollection' => [
+            'type' => '\Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer',
+            'name_underscore' => 'transfer_collection',
+            'is_collection' => true,
+            'is_transfer' => true,
+        ],
+    ];
+
+    public function __construct()
+    {
+        parent::__construct();
+        $this->emptyTransfer = new \ArrayObject();
+        $this->innerTransfer = new SimpleTransfer();
+        $this->transferCollection = [
+            new SimpleTransfer(),
+        ];
+    }
+
+    /**
+     * @return array
+     */
+    public function getArray()
+    {
+        return $this->array;
+    }
+
+    /**
+     * @param array $array
+     *
+     * @return $this
+     */
+    public function setArray($array)
+    {
+        $this->array = $array;
+
+        return $this;
+    }
+
+    /**
+     * @return \ArrayObject
+     */
+    public function getEmptyTransfer()
+    {
+        return $this->emptyTransfer;
+    }
+
+    /**
+     * @param \ArrayObject $emptyTransfer
+     *
+     * @return $this
+     */
+    public function setEmptyTransfer($emptyTransfer)
+    {
+        $this->emptyTransfer = $emptyTransfer;
+
+        return $this;
+    }
+
+    /**
+     * @return \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer
+     */
+    public function getInnerTransfer()
+    {
+        return $this->innerTransfer;
+    }
+
+    /**
+     * @param \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer $innerTransfer
+     *
+     * @return $this
+     */
+    public function setInnerTransfer($innerTransfer)
+    {
+        $this->innerTransfer = $innerTransfer;
+
+        return $this;
+    }
+
+    /**
+     * @return \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer[]
+     */
+    public function getTransferCollection()
+    {
+        return $this->transferCollection;
+    }
+
+    /**
+     * @param \Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\SimpleTransfer[] $transferCollection
+     *
+     * @return $this
+     */
+    public function setTransferCollection($transferCollection)
+    {
+        $this->transferCollection = $transferCollection;
+
+        return $this;
+    }
+
+
+}
diff --git a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/SimpleTransfer.php b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/SimpleTransfer.php
new file mode 100644
index 0000000..8c174ab
--- /dev/null
+++ b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/Fixtures/SimpleTransfer.php
@@ -0,0 +1,113 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures;
+
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+
+class SimpleTransfer extends AbstractTransfer implements TransferInterface
+{
+
+    /**
+     * @var array
+     */
+    protected $array = ['foo' => 'bar'];
+
+    /**
+     * @var string
+     */
+    protected $string = 'baz';
+
+    /**
+     * @var string
+     */
+    protected $notSanitized = 'baz';
+
+    /**
+     * @var array
+     */
+    protected $transferMetadata = [
+        'array' => [
+            'type' => 'array',
+            'name_underscore' => 'array',
+            'is_collection' => true,
+            'is_transfer' => false,
+        ],
+        'string' => [
+            'type' => 'string',
+            'name_underscore' => 'string',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+        'notSanitized' => [
+            'type' => 'string',
+            'name_underscore' => 'not_sanitized',
+            'is_collection' => false,
+            'is_transfer' => false,
+        ],
+    ];
+
+    /**
+     * @return array
+     */
+    public function getArray()
+    {
+        return $this->array;
+    }
+
+    /**
+     * @param array $array
+     * @return self
+     */
+    public function setArray($array)
+    {
+        $this->array = $array;
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getString()
+    {
+        return $this->string;
+    }
+
+    /**
+     * @param string $string
+     * @return self
+     */
+    public function setString($string)
+    {
+        $this->string = $string;
+
+        return $this;
+    }
+
+    /**
+     * @return string
+     */
+    public function getNotSanitized()
+    {
+        return $this->notSanitized;
+    }
+
+    /**
+     * @param string $notSanitized
+     *
+     * @return $this
+     */
+    public function setNotSanitized($notSanitized)
+    {
+        $this->notSanitized = $notSanitized;
+
+        return $this;
+    }
+
+}
diff --git a/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessorTest.php b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessorTest.php
new file mode 100644
index 0000000..9cf02af
--- /dev/null
+++ b/Bundles/Transfer/tests/Unit/Spryker/Shared/Transfer/Log/Processor/TransferSanitizerProcessorTest.php
@@ -0,0 +1,74 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Shared\Transfer\Log\Processor;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Shared\Log\Sanitizer\Sanitizer;
+use Spryker\Shared\Transfer\Log\Processor\TransferSanitizerProcessor;
+use Unit\Spryker\Shared\Transfer\Log\Processor\Fixtures\ComplexTransfer;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Shared
+ * @group Transfer
+ * @group Log
+ * @group Processor
+ * @group TransferSanitizerProcessorTest
+ */
+class TransferSanitizerProcessorTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @dataProvider getContext
+     *
+     * @param array $context
+     *
+     * @return void
+     */
+    public function testInvokeShouldAddSanitizedTransferToRecordsExtra(array $context)
+    {
+        $record = ['message' => 'message', 'context' => $context];
+        $filterFields = [
+            'foo',
+            'string',
+        ];
+        $sanitizer = new Sanitizer($filterFields, '***');
+        $processor = new TransferSanitizerProcessor($sanitizer);
+        $result = $processor($record);
+
+        $this->assertArrayHasKey('transfer', $result['extra']);
+    }
+
+    /**
+     * @return array
+     */
+    public function getContext()
+    {
+        $transfer = new ComplexTransfer();
+
+        return [
+            [[$transfer]],
+            [['transfer' => $transfer]],
+        ];
+    }
+
+    /**
+     * @return void
+     */
+    public function testIfContextDoesNotContainTransferDoNothing()
+    {
+        $record = ['message' => 'message', 'context' => ''];
+        $sanitizer = new Sanitizer([], '***');
+        $processor = new TransferSanitizerProcessor($sanitizer);
+        $result = $processor($record);
+
+        $this->assertSame($record, $result);
+    }
+
+}
diff --git a/Bundles/Twig/composer.json b/Bundles/Twig/composer.json
index cd812f9..f97db0f 100644
--- a/Bundles/Twig/composer.json
+++ b/Bundles/Twig/composer.json
@@ -7,12 +7,18 @@
   },
   "require": {
     "spryker/kernel": "^2.0.0",
+    "spryker/zend": "^2.0.0",
     "twig/twig": "^1.20.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/config": "If you want to use the TwigServiceProvider you need to install spryker/config.",
+    "spryker/silex": "If you want to use the TwigServiceProvider you need to install spryker/silex.",
+    "spryker/symfony": "If you want to use the TwigServiceProvider you need to install spryker/symfony."
+  },
   "description": "Twig bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/Twig/config/config_default-test.php b/Bundles/Twig/config/config_default-test.php
new file mode 100755
index 0000000..c983ae8
--- /dev/null
+++ b/Bundles/Twig/config/config_default-test.php
@@ -0,0 +1,7 @@
+<?php
+
+use Spryker\Shared\Twig\TwigConstants;
+
+$config[TwigConstants::ZED_TWIG_OPTIONS] = [
+    'cache' => APPLICATION_ROOT_DIR . '/data/DE/cache/Zed/twig',
+];
diff --git a/Bundles/Twig/src/Spryker/Shared/Twig/TwigConstants.php b/Bundles/Twig/src/Spryker/Shared/Twig/TwigConstants.php
new file mode 100644
index 0000000..9c2a38f
--- /dev/null
+++ b/Bundles/Twig/src/Spryker/Shared/Twig/TwigConstants.php
@@ -0,0 +1,17 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Twig;
+
+interface TwigConstants
+{
+
+    // see http://twig.sensiolabs.org/doc/api.html#environment-options
+    const YVES_TWIG_OPTIONS = 'YVES_TWIG_OPTIONS';
+    const ZED_TWIG_OPTIONS = 'ZED_TWIG_OPTIONS';
+
+}
diff --git a/Bundles/Twig/src/Spryker/Shared/Twig/TwigFileSystem.php b/Bundles/Twig/src/Spryker/Shared/Twig/TwigFileSystem.php
new file mode 100644
index 0000000..9024af3
--- /dev/null
+++ b/Bundles/Twig/src/Spryker/Shared/Twig/TwigFileSystem.php
@@ -0,0 +1,166 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\Twig;
+
+use Twig_Error_Loader;
+use Twig_Loader_Filesystem;
+use Zend\Filter\Word\CamelCaseToDash;
+
+class TwigFileSystem extends Twig_Loader_Filesystem
+{
+
+    /**
+     * @param array $paths
+     * @param string $namespace
+     *
+     * @return void
+     */
+    public function setPaths($paths, $namespace = self::MAIN_NAMESPACE)
+    {
+        $this->paths = [];
+        foreach ($paths as $path) {
+            $this->addPath($path);
+        }
+    }
+
+    /**
+     * @param string $path
+     * @param string $namespace
+     *
+     * @return void
+     */
+    public function addPath($path, $namespace = self::MAIN_NAMESPACE)
+    {
+        // invalidate the cache
+        $this->cache = [];
+        $this->paths[] = rtrim($path, '/\\');
+    }
+
+    /**
+     * @param string $path
+     * @param string $namespace
+     *
+     * @return void
+     */
+    public function prependPath($path, $namespace = self::MAIN_NAMESPACE)
+    {
+        // invalidate the cache
+        $this->cache = [];
+
+        $path = rtrim($path, '/\\');
+
+        if (empty($this->paths)) {
+            $this->paths[] = $path;
+        } else {
+            array_unshift($this->paths, $path);
+        }
+    }
+
+    /**
+     * @param string $bundle
+     *
+     * @return array
+     */
+    protected function getPathsForBundle($bundle)
+    {
+        $paths = [];
+        $filter = new CamelCaseToDash();
+        foreach ($this->paths as $path) {
+            $formattedBundleName = $bundle;
+            if (strpos($path, 'vendor/spryker/spryker/Bundles') === false && strpos($path, 'vendor/spryker/') > 0) {
+                $formattedBundleName = strtolower($filter->filter($bundle));
+            }
+            $path = sprintf($path, $bundle, $formattedBundleName);
+            if (strpos($path, '*') !== false) {
+                $path = glob($path);
+                if (count($path) > 0) {
+                    $paths[] = $path[0];
+                }
+            } else {
+                $paths[] = $path;
+            }
+        }
+
+        return $paths;
+    }
+
+    /**
+     * {@inheritdoc}
+     * @throws \Twig_Error_Loader
+     */
+    protected function findTemplate($name)
+    {
+        $name = (string)$name;
+
+        // normalize name
+        $name = str_replace(['///', '//', '\\'], '/', $name);
+
+        $nameParts = explode('/', $name);
+        $templateName = array_pop($nameParts);
+        $filter = new CamelCaseToDash();
+        $templateName = strtolower($filter->filter($templateName));
+        array_push($nameParts, $templateName);
+        $name = implode('/', $nameParts);
+
+        if (isset($this->cache[$name])) {
+            if ($this->cache[$name] !== false) {
+                return $this->cache[$name];
+            } else {
+                throw new Twig_Error_Loader(sprintf('Unable to find template "%s" (cached).', $name));
+            }
+        }
+
+        $this->validateName($name);
+
+        if (isset($name[0]) && $name[0] === '@') {
+            $pos = strpos($name, '/');
+            if ($pos === false) {
+                $this->cache[$name] = false;
+                throw new Twig_Error_Loader(sprintf('Malformed bundle template name "%s" (expecting "@bundle/template_name").', $name));
+            }
+            $bundle = ucfirst(substr($name, 1, $pos - 1));
+            $templateName = ucfirst(substr($name, $pos + 1));
+
+            return $this->load($name, $bundle, $templateName);
+        }
+
+        $name = '/' . ltrim($name, '/');
+        $pos = strpos(ltrim($name, '/'), '/');
+        if ($pos === false) {
+            $this->cache[$name] = false;
+            throw new Twig_Error_Loader(sprintf('Malformed bundle template name "%s" (expecting "@bundle/template_name").', $name));
+        }
+        $bundle = ucfirst(substr($name, 1, $pos));
+        $templateName = ucfirst(substr($name, $pos + 2));
+
+        return $this->load($name, $bundle, $templateName);
+    }
+
+    /**
+     * @param string $name
+     * @param string $bundle
+     * @param string $templateName
+     *
+     * @throws \Twig_Error_Loader
+     *
+     * @return string
+     */
+    protected function load($name, $bundle, $templateName)
+    {
+        $paths = $this->getPathsForBundle($bundle);
+        foreach ($paths as $path) {
+            if (is_file($path . '/' . $templateName)) {
+                return $this->cache[$name] = $path . '/' . $templateName;
+            }
+        }
+
+        $this->cache[$name] = false;
+        throw new Twig_Error_Loader(sprintf('Unable to find template "%s" (looked into: %s).', $templateName, implode(', ', $paths)));
+    }
+
+}
diff --git a/Bundles/Twig/src/Spryker/Zed/Twig/Business/Model/RouteResolver.php b/Bundles/Twig/src/Spryker/Zed/Twig/Business/Model/RouteResolver.php
new file mode 100644
index 0000000..864e22f
--- /dev/null
+++ b/Bundles/Twig/src/Spryker/Zed/Twig/Business/Model/RouteResolver.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Twig\Business\Model;
+
+use Zend\Filter\Word\CamelCaseToDash;
+
+class RouteResolver
+{
+
+    /**
+     * @param string $controllerServiceName
+     *
+     * @return string
+     */
+    public function buildRouteFromControllerServiceName($controllerServiceName)
+    {
+        list($serviceName, $actionName) = explode(':', $controllerServiceName);
+        $serviceNameParts = explode('.', $serviceName);
+
+        $serviceNameParts[4] = $this->getCamelCaseToDash($serviceNameParts[4]);
+
+        return $serviceNameParts[2] . '/' . $serviceNameParts[3] . '/' . $serviceNameParts[4];
+    }
+
+    /**
+     * @param string $incomingString
+     *
+     * @return string
+     */
+    protected function getCamelCaseToDash($incomingString)
+    {
+        $filter = new CamelCaseToDash();
+
+        return strtolower($filter->filter($incomingString));
+    }
+
+}
diff --git a/Bundles/Twig/src/Spryker/Zed/Twig/Communication/Plugin/ServiceProvider/TwigServiceProvider.php b/Bundles/Twig/src/Spryker/Zed/Twig/Communication/Plugin/ServiceProvider/TwigServiceProvider.php
new file mode 100644
index 0000000..26a0a7c
--- /dev/null
+++ b/Bundles/Twig/src/Spryker/Zed/Twig/Communication/Plugin/ServiceProvider/TwigServiceProvider.php
@@ -0,0 +1,173 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Twig\Communication\Plugin\ServiceProvider;
+
+use FilesystemIterator;
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\Kernel\KernelConstants;
+use Spryker\Shared\Kernel\Store;
+use Spryker\Shared\Twig\TwigConstants;
+use Spryker\Shared\Twig\TwigFileSystem;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\Twig\Business\Model\RouteResolver;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent;
+use Symfony\Component\HttpKernel\KernelEvents;
+use Twig_Loader_Chain;
+
+/**
+ * @method \Spryker\Zed\Twig\TwigConfig getConfig()
+ */
+class TwigServiceProvider extends AbstractPlugin implements ServiceProviderInterface
+{
+
+    /**
+     * @var \Silex\Application
+     */
+    private $app;
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $this->app = $app;
+
+        $this->provideFormTypeTemplates();
+
+        $app['twig.loader.zed'] = $app->share(function () {
+            $namespaces = Config::get(KernelConstants::PROJECT_NAMESPACES);
+
+            $storeName = Store::getInstance()->getStoreName();
+
+            $paths = [];
+            foreach ($namespaces as $namespace) {
+                $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Zed/%s' . $storeName . '/Presentation/';
+                $paths[] = APPLICATION_SOURCE_DIR . '/' . $namespace . '/Zed/%s/Presentation/';
+            }
+            $paths[] = $this->getConfig()->getBundlesDirectory() . '/%2$s/src/Spryker/Zed/%1$s/Presentation/';
+
+            return new TwigFileSystem($paths);
+        });
+
+        $app['twig.loader'] = $app->share(function ($app) {
+            return new Twig_Loader_Chain(
+                [
+                    $app['twig.loader.zed'],
+                    $app['twig.loader.filesystem'],
+                ]
+            );
+        });
+
+        $app['twig.options'] = Config::get(TwigConstants::ZED_TWIG_OPTIONS);
+
+        $app['twig.global.variables'] = $app->share(function () {
+            return [];
+        });
+
+        $app['twig'] = $app->share(
+            $app->extend(
+                'twig',
+                function (\Twig_Environment $twig) use ($app) {
+                    foreach ($app['twig.global.variables'] as $name => $value) {
+                        $twig->addGlobal($name, $value);
+                    }
+
+                    return $twig;
+                }
+            )
+        );
+    }
+
+    /**
+     * Handles string responses.
+     *
+     * @param \Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent $event The event to handle
+     *
+     * @return void
+     */
+    public function onKernelView(GetResponseForControllerResultEvent $event)
+    {
+        $response = $event->getControllerResult();
+
+        if (empty($response) || is_array($response)) {
+            $response = $this->render((array)$response);
+            if ($response instanceof Response) {
+                $event->setResponse($response);
+            }
+        }
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+        $app['dispatcher']->addListener(KernelEvents::VIEW, [$this, 'onKernelView']);
+    }
+
+    /**
+     * Renders the template for the current controller/action
+     *
+     * @param array $parameters
+     *
+     * @return \Symfony\Component\HttpFoundation\Response
+     */
+    protected function render(array $parameters = [])
+    {
+        $request = $this->app['request_stack']->getCurrentRequest();
+        $controller = $request->attributes->get('_controller');
+
+        if (!is_string($controller) || empty($controller)) {
+            return;
+        }
+
+        if (isset($parameters['alternativeRoute'])) {
+            $route = (string)$parameters['alternativeRoute'];
+        } else {
+            $route = (new RouteResolver())
+                ->buildRouteFromControllerServiceName($controller);
+        }
+
+        return $this->app->render('@' . $route . '.twig', $parameters);
+    }
+
+    /**
+     * @return void
+     */
+    protected function provideFormTypeTemplates()
+    {
+        $guiDirectory = $path = $this->getConfig()->getBundlesDirectory() . '/Gui';
+        if (!is_dir($guiDirectory)) {
+            $guiDirectory = $path = $this->getConfig()->getBundlesDirectory() . '/gui';
+        }
+        $path = $guiDirectory . '/src/Spryker/Zed/Gui/Presentation/Form/Type';
+
+        $this->app['twig.loader.filesystem']->addPath(
+            $path
+        );
+
+        $files = new FilesystemIterator($path, FilesystemIterator::SKIP_DOTS | FilesystemIterator::KEY_AS_PATHNAME);
+
+        $typeTemplates = [];
+        foreach ($files as $file) {
+            $typeTemplates[] = $file->getFilename();
+        }
+
+        $this->app['twig.form.templates'] = array_merge([
+            'bootstrap_3_layout.html.twig',
+        ], $typeTemplates);
+    }
+
+}
diff --git a/Bundles/Twig/src/Spryker/Zed/Twig/TwigConfig.php b/Bundles/Twig/src/Spryker/Zed/Twig/TwigConfig.php
new file mode 100644
index 0000000..55981cc
--- /dev/null
+++ b/Bundles/Twig/src/Spryker/Zed/Twig/TwigConfig.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\Twig;
+
+use Spryker\Shared\Kernel\KernelConstants;
+use Spryker\Zed\Kernel\AbstractBundleConfig;
+
+class TwigConfig extends AbstractBundleConfig
+{
+
+    /**
+     * @return string
+     */
+    public function getBundlesDirectory()
+    {
+        return $this->get(KernelConstants::SPRYKER_ROOT);
+    }
+
+}
diff --git a/Bundles/Twig/tests/Functional.suite.yml b/Bundles/Twig/tests/Functional.suite.yml
deleted file mode 100644
index 86429b1..0000000
--- a/Bundles/Twig/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \Twig\Module\Functional
diff --git a/Bundles/Twig/tests/Functional/_bootstrap.php b/Bundles/Twig/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/Twig/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/Twig/tests/Unit/Spryker/Zed/Twig/Business/Model/RouteResolverTest.php b/Bundles/Twig/tests/Unit/Spryker/Zed/Twig/Business/Model/RouteResolverTest.php
new file mode 100644
index 0000000..41d40c6
--- /dev/null
+++ b/Bundles/Twig/tests/Unit/Spryker/Zed/Twig/Business/Model/RouteResolverTest.php
@@ -0,0 +1,53 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\Twig\Business\Model;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\Twig\Business\Model\RouteResolver;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group Twig
+ * @group Business
+ * @group Model
+ * @group RouteResolverTest
+ */
+class RouteResolverTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testBuildRouteFromControllerServiceNameShouldReturnUri()
+    {
+        $routeResolver = new RouteResolver();
+        $incomingString = 'controller.service.DummyBundle.Index.camelCase:camelCaseAction';
+
+        $this->assertEquals(
+            'DummyBundle/Index/camel-case',
+            $routeResolver->buildRouteFromControllerServiceName($incomingString)
+        );
+    }
+
+    /**
+     * @return void
+     */
+    public function testBuildRouteFromControllerServiceNameReturnUriFail()
+    {
+        $routeResolver = new RouteResolver();
+        $incomingString = 'controller.service.DummyBundle.Index.camelCase:camelCaseAction';
+
+        $this->assertNotEquals(
+            'DummyBundle/Index/camelCase',
+            $routeResolver->buildRouteFromControllerServiceName($incomingString)
+        );
+    }
+
+}
diff --git a/Bundles/Twig/tests/_support/FunctionalTester.php b/Bundles/Twig/tests/_support/FunctionalTester.php
deleted file mode 100644
index 0b117aa..0000000
--- a/Bundles/Twig/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace Twig;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/Twig/tests/_support/Module/Functional.php b/Bundles/Twig/tests/_support/Module/Functional.php
deleted file mode 100644
index a896c8b..0000000
--- a/Bundles/Twig/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace Twig\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/Bundles/Url/composer.json b/Bundles/Url/composer.json
index a30a5f0..91baa27 100644
--- a/Bundles/Url/composer.json
+++ b/Bundles/Url/composer.json
@@ -6,16 +6,17 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/locale": "^2.0.0",
-    "spryker/propel": "^2.0.0",
     "spryker/symfony": "^2.0.0",
     "spryker/touch": "^2.0.0",
-    "spryker/util-sanitize": "^1.0.0"
+    "spryker/propel-orm": "^1.0.0",
+    "spryker/touch": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Url bundle",
diff --git a/Bundles/Url/src/Spryker/Shared/Url/Url.php b/Bundles/Url/src/Spryker/Shared/Url/Url.php
deleted file mode 100644
index 7a7a0ce..0000000
--- a/Bundles/Url/src/Spryker/Shared/Url/Url.php
+++ /dev/null
@@ -1,470 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\Url;
-
-use Spryker\Service\UtilSanitize\UtilSanitizeService;
-use Spryker\Zed\Application\Business\Exception\UrlInvalidException;
-
-/**
- * Parses and generates URLs based on URL parts. In favor of performance, URL parts are not validated.
- */
-class Url
-{
-
-    const SCHEME = 'scheme';
-    const HOST = 'host';
-    const PORT = 'port';
-    const USER = 'user';
-    const PASS = 'pass';
-    const PATH = 'path';
-    const QUERY = 'query';
-    const FRAGMENT = 'fragment';
-
-    /**
-     * @var string
-     */
-    protected $scheme;
-
-    /**
-     * @var string
-     */
-    protected $host;
-
-    /**
-     * @var int
-     */
-    protected $port;
-
-    /**
-     * @var string
-     */
-    protected $username;
-
-    /**
-     * @var string
-     */
-    protected $password;
-
-    /**
-     * @var string
-     */
-    protected $path = '';
-
-    /**
-     * @var array
-     */
-    protected $query = [];
-
-    /**
-     * @var string
-     */
-    protected $fragment;
-
-    /**
-     * Factory method to create a new URL from a complete URL string
-     *
-     * @param string $url Full URL used to create a Url object
-     *
-     * @throws \Spryker\Zed\Application\Business\Exception\UrlInvalidException
-     *
-     * @return $this
-     */
-    public static function parse($url)
-    {
-        static $defaults = [
-            self::SCHEME => null,
-            self::HOST => null,
-            self::PORT => null,
-            self::USER => null,
-            self::PASS => null,
-            self::PATH => null,
-            self::QUERY => null,
-            self::FRAGMENT => null,
-        ];
-
-        $parts = parse_url($url);
-        if ($parts === false) {
-            throw new UrlInvalidException('Was unable to parse malformed URL: ' . $url);
-        }
-
-        $parts += $defaults;
-
-        return new static($parts);
-    }
-
-    /**
-     * Factory method to create an internal URL from a path string
-     *
-     * @param string $url
-     * @param array $query
-     * @param array $options
-     *
-     * @return $this
-     */
-    public static function generate($url, array $query = [], array $options = [])
-    {
-        $parts = [
-            self::PATH => $url,
-            self::QUERY => $query,
-        ] + $options;
-
-        return new static($parts);
-    }
-
-    /**
-     * @param array $url
-     */
-    public function __construct(array $url = [])
-    {
-        $this->fromArray($url);
-    }
-
-    /**
-     * @return string
-     */
-    public function __toString()
-    {
-        return $this->build();
-    }
-
-    /**
-     * @param array $url
-     *
-     * @return void
-     */
-    public function fromArray(array $url = [])
-    {
-        if (isset($url[self::QUERY]) && !is_array($url[self::QUERY])) {
-            $url[self::QUERY] = self::parseQuery($url[self::QUERY]);
-        }
-
-        foreach ($url as $k => $v) {
-            $this->{$k} = $v;
-        }
-    }
-
-    /**
-     * Build a URL. The generated URL will be a relative URL if a scheme or host are not provided.
-     *
-     * @return string
-     */
-    public function build()
-    {
-        $parts = $this->toArray();
-        $url = $this->buildBaseUrl($parts);
-
-        $url = $this->addPathComponent($url, $parts);
-        $url = $this->addQueryComponent($url, $parts);
-        $url = $this->addFragmentComponent($url, $parts);
-
-        return $url;
-    }
-
-    /**
-     * @return string
-     */
-    public function buildEscaped()
-    {
-        $utilSanitizeService = new UtilSanitizeService();
-
-        return $utilSanitizeService->escapeHtml($this->build());
-    }
-
-    /**
-     * @return array
-     */
-    public function toArray()
-    {
-        return [
-            self::SCHEME => $this->scheme,
-            self::USER => $this->username,
-            self::PASS => $this->password,
-            self::HOST => $this->host,
-            self::PORT => $this->port,
-            self::PATH => $this->path,
-            self::QUERY => $this->query ?: [],
-            self::FRAGMENT => $this->fragment,
-        ];
-    }
-
-    /**
-     * @param array|string $path
-     *
-     * @return $this
-     */
-    public function setPath($path)
-    {
-        static $pathReplace = [' ' => '%20', '?' => '%3F'];
-        if (is_array($path)) {
-            $path = '/' . implode('/', $path);
-        }
-
-        $this->path = strtr($path, $pathReplace);
-
-        return $this;
-    }
-
-    /**
-     * Normalize the URL so that double slashes and relative paths are removed
-     *
-     * @return $this
-     */
-    public function normalizePath()
-    {
-        if (!$this->path || $this->path === '/' || $this->path === '*') {
-            return $this;
-        }
-
-        $results = [];
-        $segments = $this->getPathSegments();
-        foreach ($segments as $segment) {
-            if ($segment === '..') {
-                array_pop($results);
-            } elseif ($segment !== '.' && $segment !== '') {
-                $results[] = $segment;
-            }
-        }
-
-        // Combine the normalized parts and add the leading slash if needed
-        $this->path = ($this->path[0] === '/' ? '/' : '') . implode('/', $results);
-
-        return $this;
-    }
-
-    /**
-     * Add a relative path to the currently set path
-     *
-     * @param array|string $relativePath
-     *
-     * @return $this
-     */
-    public function addPath($relativePath)
-    {
-        if (is_string($relativePath)) {
-            $relativePath = explode('/', $relativePath);
-        }
-
-        // Add a leading slash if needed
-        $path = $this->getPath();
-        foreach ($relativePath as $element) {
-            if ($element !== '') {
-                $path .= '/' . $element;
-            }
-        }
-
-        return $this->setPath($path);
-    }
-
-    /**
-     * Get the path part of the URL
-     *
-     * @return string
-     */
-    public function getPath()
-    {
-        return $this->path;
-    }
-
-    /**
-     * @param string $scheme
-     *
-     * @return $this
-     */
-    public function setScheme($scheme)
-    {
-        $this->scheme = $scheme;
-
-        return $this;
-    }
-
-    /**
-     * @param int $port
-     *
-     * @return $this
-     */
-    public function setPort($port)
-    {
-        $this->port = $port;
-
-        return $this;
-    }
-
-    /**
-     * @param string $host
-     *
-     * @return $this
-     */
-    public function setHost($host)
-    {
-        $this->host = $host;
-
-        return $this;
-    }
-
-    /**
-     * Get the path segments of the URL as an array
-     *
-     * @return array
-     */
-    public function getPathSegments()
-    {
-        return array_slice(explode('/', $this->getPath()), 1);
-    }
-
-    /**
-     * Get the query part of the URL as a QueryString object
-     *
-     * @return array
-     */
-    public function getQuery()
-    {
-        return $this->query;
-    }
-
-    /**
-     * @param string $key
-     * @param string $value
-     *
-     * @return $this
-     */
-    public function addQuery($key, $value)
-    {
-        $this->query[$key] = $value;
-
-        return $this;
-    }
-
-    /**
-     * Set the query part of the URL
-     *
-     * @param array $query Query to set
-     *
-     * @return $this
-     */
-    public function setQuery(array $query)
-    {
-        $this->query = $query;
-
-        return $this;
-    }
-
-    /**
-     * @param string $query
-     *
-     * @return array
-     */
-    public static function parseQuery($query)
-    {
-        parse_str($query, $array);
-
-        return $array;
-    }
-
-    /**
-     * @param string $value
-     *
-     * @return string
-     */
-    protected function encodeQuery($value)
-    {
-        return urlencode($value);
-    }
-
-    /**
-     * @param array $parts
-     *
-     * @return string
-     */
-    protected function buildBaseUrl(array $parts)
-    {
-        $url = $scheme = '';
-
-        if (isset($parts[self::SCHEME])) {
-            $scheme = $parts[self::SCHEME];
-            $url .= $scheme . ':';
-        }
-
-        if (isset($parts[self::HOST])) {
-            $url .= '//';
-            if (isset($parts[self::USER])) {
-                $url .= $parts[self::USER];
-                if (isset($parts[self::PASS])) {
-                    $url .= ':' . $parts[self::PASS];
-                }
-                $url .= '@';
-            }
-
-            $url .= $parts[self::HOST];
-
-            // Only include the port if it is not the default port of the scheme
-            if (isset($parts[self::PORT])
-                && !(($scheme === 'http' && $parts[self::PORT] === 80) || ($scheme === 'https' && $parts[self::PORT] === 443))
-            ) {
-                $url .= ':' . $parts[self::PORT];
-            }
-        }
-
-        return $url;
-    }
-
-    /**
-     * @param string $url
-     * @param array $parts
-     *
-     * @return string
-     */
-    protected function addPathComponent($url, array $parts)
-    {
-        if (isset($parts[self::PATH]) && strlen($parts[self::PATH]) !== 0) {
-            // Always ensure that the path begins with '/' if set and something is before the path
-            if ($url && $parts[self::PATH][0] !== '/' && mb_substr($url, -1) !== '/') {
-                $url .= '/';
-            }
-            $url .= $parts[self::PATH];
-        } else {
-            $url .= '/';
-        }
-
-        return $url;
-    }
-
-    /**
-     * @param string $url
-     * @param array $parts
-     *
-     * @return string
-     */
-    protected function addQueryComponent($url, array $parts)
-    {
-        if (!empty($parts[self::QUERY])) {
-            $q = [];
-            foreach ($parts[self::QUERY] as $k => $v) {
-                $q[] = $this->encodeQuery($k) . '=' . $this->encodeQuery($v);
-            }
-            $url .= '?' . implode('&', $q);
-        }
-
-        return $url;
-    }
-
-    /**
-     * @param string $url
-     * @param array $parts
-     *
-     * @return string
-     */
-    protected function addFragmentComponent($url, array $parts)
-    {
-        if (isset($parts[self::FRAGMENT])) {
-            $url .= '#' . $parts[self::FRAGMENT];
-        }
-
-        return $url;
-    }
-
-}
diff --git a/Bundles/Url/src/Spryker/Zed/Url/Business/Exception/UrlInvalidException.php b/Bundles/Url/src/Spryker/Zed/Url/Business/Exception/UrlInvalidException.php
index 3e804f3..84773fe 100644
--- a/Bundles/Url/src/Spryker/Zed/Url/Business/Exception/UrlInvalidException.php
+++ b/Bundles/Url/src/Spryker/Zed/Url/Business/Exception/UrlInvalidException.php
@@ -9,9 +9,6 @@ namespace Spryker\Zed\Url\Business\Exception;
 
 use Exception;
 
-/**
- * @deprecated class moved to Application Bundle
- */
 class UrlInvalidException extends Exception
 {
 }
diff --git a/Bundles/Url/src/Spryker/Zed/Url/UrlDependencyProvider.php b/Bundles/Url/src/Spryker/Zed/Url/UrlDependencyProvider.php
index f34efe3..0bde73c 100644
--- a/Bundles/Url/src/Spryker/Zed/Url/UrlDependencyProvider.php
+++ b/Bundles/Url/src/Spryker/Zed/Url/UrlDependencyProvider.php
@@ -7,9 +7,9 @@
 
 namespace Spryker\Zed\Url;
 
+use Propel\Runtime\Propel;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\Propel\Communication\Plugin\Connection;
 use Spryker\Zed\Url\Dependency\UrlToLocaleBridge;
 use Spryker\Zed\Url\Dependency\UrlToTouchBridge;
 
@@ -40,7 +40,7 @@ class UrlDependencyProvider extends AbstractBundleDependencyProvider
         };
 
         $container[self::PLUGIN_PROPEL_CONNECTION] = function () {
-            return (new Connection())->get();
+            return Propel::getConnection();
         };
 
         return $container;
diff --git a/Bundles/Url/tests/Functional/Spryker/Shared/Url/UrlTest.php b/Bundles/Url/tests/Functional/Spryker/Shared/Url/UrlTest.php
deleted file mode 100644
index 230ed9f..0000000
--- a/Bundles/Url/tests/Functional/Spryker/Shared/Url/UrlTest.php
+++ /dev/null
@@ -1,201 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Functional\Spryker\Shared\Url;
-
-use Codeception\TestCase\Test;
-use Spryker\Shared\Url\Url;
-
-/**
- * @group Functional
- * @group Spryker
- * @group Shared
- * @group Url
- * @group UrlTest
- */
-class UrlTest extends Test
-{
-
-    /**
-     * @return void
-     */
-    public function testUrlConstruct()
-    {
-        $url = new Url(['path' => '/foo/bar']);
-
-        $this->assertSame('/foo/bar', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testToString()
-    {
-        $url = new Url(['path' => '/foo/bar']);
-
-        $this->assertSame('/foo/bar', (string)$url);
-    }
-
-    /**
-     * @return void
-     */
-    public function testToArray()
-    {
-        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y'], 'fragment' => 'z']);
-
-        $expected = [
-            'scheme' => null,
-            'user' => null,
-            'pass' => null,
-            'host' => null,
-            'port' => null,
-            'path' => '/foo/bar',
-            'query' => ['x' => 'y'],
-            'fragment' => 'z',
-        ];
-        $result = $url->toArray();
-        $this->assertSame($expected, $result);
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuild()
-    {
-        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y'], 'fragment' => 'z']);
-
-        $this->assertSame('/foo/bar?x=y#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildWithQueryAsString()
-    {
-        $url = new Url(['path' => '/foo/bar', 'query' => 'ö=ä', 'fragment' => 'z']);
-
-        $this->assertSame('/foo/bar?%C3%B6=%C3%A4#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testBuildEscaped()
-    {
-        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y', 'ö' => 'ä'], 'fragment' => 'z']);
-
-        $this->assertSame('/foo/bar?x=y&amp;%C3%B6=%C3%A4#z', $url->buildEscaped());
-    }
-
-    /**
-     * @return void
-     */
-    public function testParse()
-    {
-        $url = Url::parse('/foo/bar?q=a#z');
-
-        $this->assertSame('/foo/bar?q=a#z', (string)$url);
-    }
-
-    /**
-     * @return void
-     */
-    public function testGetPathSegments()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'q=a', 'fragment' => 'x']);
-        $segments = $url->getPathSegments();
-        $this->assertSame(['foo', 'bar', 'baz'], $segments);
-    }
-
-    /**
-     * @return void
-     */
-    public function testNormalizePath()
-    {
-        $url = new Url(['path' => '/foo/bar/baz//abc/', 'query' => ['x' => 'y'], 'fragment' => 'z']);
-        $path = $url->normalizePath()->build();
-        $this->assertSame('/foo/bar/baz/abc?x=y#z', $path);
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetPathAsString()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
-        $url->setPath('/e/f');
-        $this->assertSame('/e/f?x=y#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetPathAsArray()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
-        $url->setPath(['e', 'f']);
-        $this->assertSame('/e/f?x=y#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testAddPathAsString()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
-        $url->addPath('/e/f/');
-
-        $this->assertSame('/foo/bar/baz/e/f?x=y#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testAddPathAsArray()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
-        $url->addPath(['e', 'f']);
-
-        $this->assertSame('/foo/bar/baz/e/f?x=y#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testSetQuery()
-    {
-        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
-        $url->addQuery('c', 'd');
-        $url->addQuery('e', 'f');
-        $this->assertSame('/foo/bar/baz?x=y&c=d&e=f#z', $url->build());
-    }
-
-    /**
-     * @return void
-     */
-    public function testEmpty()
-    {
-        $url = new Url();
-        $this->assertSame('/', $url->build(), 'Empty URL object must return homepage');
-    }
-
-    /**
-     * @return void
-     */
-    public function testFull()
-    {
-        $url = new Url();
-        $url->addQuery('x', 'y');
-
-        $url->setScheme('https');
-        $url->setHost('www.foobar.dev');
-        $url->setPort(81);
-
-        $this->assertSame('https://www.foobar.dev:81/?x=y', $url->build());
-    }
-
-}
diff --git a/Bundles/Url/tests/Unit/Spyrker/Shared/Url/UrlTest.php b/Bundles/Url/tests/Unit/Spyrker/Shared/Url/UrlTest.php
index 473d467..94bfc1d 100644
--- a/Bundles/Url/tests/Unit/Spyrker/Shared/Url/UrlTest.php
+++ b/Bundles/Url/tests/Unit/Spyrker/Shared/Url/UrlTest.php
@@ -8,7 +8,7 @@
 namespace Functional\Spryker\Shared\Url\Url;
 
 use Codeception\TestCase\Test;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilText\Model\Url\Url;
 
 /**
  * @group Spryker
diff --git a/Bundles/User/composer.json b/Bundles/User/composer.json
index 9468419..dab64c2 100644
--- a/Bundles/User/composer.json
+++ b/Bundles/User/composer.json
@@ -6,22 +6,24 @@
     }
   },
   "require": {
-    "spryker/acl": "^2.0.0",
-    "spryker/application": "^2.0.0",
     "spryker/gui": "^2.0.0",
-    "spryker/installer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/session": "^2.0.0",
-    "spryker/silex": "^2.0.0",
     "spryker/symfony": "^2.1.6",
-    "spryker/url": "^2.0.0"
+    "spryker/util-date-time": "^1.0.0",
+    "spryker/util-text": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel": "*",
+    "spryker/propel-orm": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
+  "suggest": {
+    "spryker/installer": "If you want to use Installer plugin you need to install spryker/installer.",
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex"
+  },
   "description": "User bundle",
   "license": "proprietary",
   "minimum-stability": "dev",
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Controller/EditController.php b/Bundles/User/src/Spryker/Zed/User/Communication/Controller/EditController.php
index 006183d..20d6df9 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Controller/EditController.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Controller/EditController.php
@@ -9,7 +9,7 @@ namespace Spryker\Zed\User\Communication\Controller;
 
 use Generated\Shared\Transfer\UserTransfer;
 use Orm\Zed\User\Persistence\Map\SpyUserTableMap;
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 use Spryker\Zed\User\Business\Exception\UserNotFoundException;
 use Spryker\Zed\User\Communication\Form\ResetPasswordForm;
 use Spryker\Zed\User\Communication\Form\UserForm;
@@ -247,9 +247,9 @@ class EditController extends AbstractController
             return false;
         }
 
-        $aclFacade = $this->getFactory()->getAclFacade();
+        $groupPlugin = $this->getFactory()->getGroupPlugin();
         foreach ($formData[UserForm::FIELD_GROUP] as $idGroup) {
-            $aclFacade->addUserToGroup($userTransfer->getIdUser(), $idGroup);
+            $groupPlugin->addUserToGroup($userTransfer->getIdUser(), $idGroup);
         }
 
         return true;
@@ -262,11 +262,11 @@ class EditController extends AbstractController
      */
     protected function deleteAclGroups($idUser)
     {
-        $aclFacade = $this->getFactory()->getAclFacade();
-        $userAclGroups = $aclFacade->getUserGroups($idUser);
+        $groupPlugin = $this->getFactory()->getGroupPlugin();
+        $userGroups = $groupPlugin->getUserGroups($idUser);
 
-        foreach ($userAclGroups->getGroups() as $aclGroupTransfer) {
-            $aclFacade->removeUserFromGroup($idUser, $aclGroupTransfer->getIdAclGroup());
+        foreach ($userGroups->getGroups() as $groupTransfer) {
+            $groupPlugin->removeUserFromGroup($idUser, $groupTransfer->getIdAclGroup());
         }
     }
 
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Controller/IndexController.php b/Bundles/User/src/Spryker/Zed/User/Communication/Controller/IndexController.php
index f119c27..660e56b 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Controller/IndexController.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Controller/IndexController.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Zed\User\Communication\Controller;
 
-use Spryker\Zed\Application\Communication\Controller\AbstractController;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
 
 /**
  * @method \Spryker\Zed\User\Communication\UserCommunicationFactory getFactory()
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Form/DataProvider/UserFormDataProvider.php b/Bundles/User/src/Spryker/Zed/User/Communication/Form/DataProvider/UserFormDataProvider.php
index 2c727a5..4fbba68 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Form/DataProvider/UserFormDataProvider.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Form/DataProvider/UserFormDataProvider.php
@@ -9,20 +9,15 @@ namespace Spryker\Zed\User\Communication\Form\DataProvider;
 
 use Spryker\Zed\User\Business\UserFacade;
 use Spryker\Zed\User\Communication\Form\UserForm;
-use Spryker\Zed\User\Dependency\Facade\UserToAclInterface;
+use Spryker\Zed\User\Dependency\Plugin\GroupPluginInterface;
 
 class UserFormDataProvider
 {
 
     /**
-     * @var array
+     * @var \Spryker\Zed\User\Dependency\Plugin\GroupPluginInterface
      */
-    protected $groupCollectionCache;
-
-    /**
-     * @var \Spryker\Zed\User\Dependency\Facade\UserToAclInterface
-     */
-    protected $aclFacade;
+    protected $groupPlugin;
 
     /**
      * @var \Spryker\Zed\User\Business\UserFacade
@@ -30,12 +25,12 @@ class UserFormDataProvider
     protected $userFacade;
 
     /**
-     * @param \Spryker\Zed\User\Dependency\Facade\UserToAclInterface $aclFacade
+     * @param \Spryker\Zed\User\Dependency\Plugin\GroupPluginInterface $groupPlugin
      * @param \Spryker\Zed\User\Business\UserFacade $userFacade
      */
-    public function __construct(UserToAclInterface $aclFacade, UserFacade $userFacade)
+    public function __construct(GroupPluginInterface $groupPlugin, UserFacade $userFacade)
     {
-        $this->aclFacade = $aclFacade;
+        $this->groupPlugin = $groupPlugin;
         $this->userFacade = $userFacade;
     }
 
@@ -72,15 +67,14 @@ class UserFormDataProvider
      */
     protected function getGroupChoices()
     {
-        if ($this->groupCollectionCache === null) {
-            $groupsTransfer = $this->aclFacade->getAllGroups();
+        $groupCollection = [];
+        $groupsTransfer = $this->groupPlugin->getAllGroups();
 
-            foreach ($groupsTransfer->getGroups() as $groupTransfer) {
-                $this->groupCollectionCache[$groupTransfer->getIdAclGroup()] = $this->formatGroupName($groupTransfer->getName());
-            }
+        foreach ($groupsTransfer->getGroups() as $groupTransfer) {
+            $groupCollection[$groupTransfer->getIdAclGroup()] = $this->formatGroupName($groupTransfer->getName());
         }
 
-        return $this->groupCollectionCache;
+        return $groupCollection;
     }
 
     /**
@@ -101,7 +95,7 @@ class UserFormDataProvider
      */
     protected function populateSelectedAclGroups($idUser, array $formData)
     {
-        $userAclGroupsTransfer = $this->aclFacade->getUserGroups($idUser);
+        $userAclGroupsTransfer = $this->groupPlugin->getUserGroups($idUser);
         $groupChoices = $this->getGroupChoices();
 
         foreach ($userAclGroupsTransfer->getGroups() as $aclGroupTransfer) {
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Form/UserForm.php b/Bundles/User/src/Spryker/Zed/User/Communication/Form/UserForm.php
index ae92f55..3457805 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Form/UserForm.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Form/UserForm.php
@@ -103,8 +103,12 @@ class UserForm extends AbstractType
             ->addEmailField($builder)
             ->addPasswordField($builder)
             ->addFirstNameField($builder)
-            ->addLastNameField($builder)
-            ->addGroupField($builder, $options[self::OPTION_GROUP_CHOICES]);
+            ->addLastNameField($builder);
+
+        $groupChoices = $options[self::OPTION_GROUP_CHOICES];
+        if ($groupChoices) {
+            $this->addGroupField($builder, $options[self::OPTION_GROUP_CHOICES]);
+        }
     }
 
     /**
@@ -197,7 +201,6 @@ class UserForm extends AbstractType
                     new Choice([
                         'choices' => array_keys($choices),
                         'multiple' => true,
-                        'min' => 1,
                     ]),
                 ],
                 'label' => 'Assigned groups',
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/Installer.php b/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/Installer.php
deleted file mode 100644
index e6e49b7..0000000
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/Installer.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\User\Communication\Plugin;
-
-use Spryker\Zed\Installer\Communication\Plugin\AbstractInstallerPlugin;
-
-/**
- * @method \Spryker\Zed\User\Business\UserFacade getFacade()
- */
-class Installer extends AbstractInstallerPlugin
-{
-
-    /**
-     * Main Installer Method
-     *
-     * @return void
-     */
-    protected function install()
-    {
-        $this->getFacade()->install();
-    }
-
-}
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/UserInstallerPlugin.php b/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/UserInstallerPlugin.php
new file mode 100644
index 0000000..19d59bf
--- /dev/null
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Plugin/UserInstallerPlugin.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\User\Communication\Plugin;
+
+use Spryker\Zed\Installer\Dependency\Plugin\InstallerPluginInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\User\Business\UserFacade getFacade()
+ * @method \Spryker\Zed\User\Communication\UserCommunicationFactory getFactory()
+ */
+class UserInstallerPlugin extends AbstractPlugin implements InstallerPluginInterface
+{
+
+    /**
+     * @return void
+     */
+    public function install()
+    {
+        $this->getFacade()->install();
+    }
+
+}
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/Table/UsersTable.php b/Bundles/User/src/Spryker/Zed/User/Communication/Table/UsersTable.php
index da82cd6..ebe7714 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/Table/UsersTable.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/Table/UsersTable.php
@@ -8,8 +8,8 @@
 namespace Spryker\Zed\User\Communication\Table;
 
 use Orm\Zed\User\Persistence\Map\SpyUserTableMap;
-use Spryker\Shared\Library\DateFormatterInterface;
-use Spryker\Shared\Url\Url;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Service\UtilText\Model\Url\Url;
 use Spryker\Zed\Gui\Communication\Table\AbstractTable;
 use Spryker\Zed\Gui\Communication\Table\TableConfiguration;
 use Spryker\Zed\User\Persistence\UserQueryContainerInterface;
@@ -30,18 +30,18 @@ class UsersTable extends AbstractTable
     protected $userQueryContainer;
 
     /**
-     * @var \Spryker\Shared\Library\DateFormatterInterface
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
      */
-    protected $dateFormatter;
+    protected $utilDateTimeService;
 
     /**
      * @param \Spryker\Zed\User\Persistence\UserQueryContainerInterface $userQueryContainer
-     * @param \Spryker\Shared\Library\DateFormatterInterface $dateFormatter
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
      */
-    public function __construct(UserQueryContainerInterface $userQueryContainer, DateFormatterInterface $dateFormatter)
+    public function __construct(UserQueryContainerInterface $userQueryContainer, UtilDateTimeServiceInterface $utilDateTimeService)
     {
         $this->userQueryContainer = $userQueryContainer;
-        $this->dateFormatter = $dateFormatter;
+        $this->utilDateTimeService = $utilDateTimeService;
     }
 
     /**
@@ -95,7 +95,7 @@ class UsersTable extends AbstractTable
                 SpyUserTableMap::COL_USERNAME => $item[SpyUserTableMap::COL_USERNAME],
                 SpyUserTableMap::COL_FIRST_NAME => $item[SpyUserTableMap::COL_FIRST_NAME],
                 SpyUserTableMap::COL_LAST_NAME => $item[SpyUserTableMap::COL_LAST_NAME],
-                SpyUserTableMap::COL_LAST_LOGIN => $this->dateFormatter->dateTime($item[SpyUserTableMap::COL_LAST_LOGIN]),
+                SpyUserTableMap::COL_LAST_LOGIN => $this->utilDateTimeService->formatDateTime($item[SpyUserTableMap::COL_LAST_LOGIN]),
                 SpyUserTableMap::COL_STATUS => $this->createStatusLabel($item),
                 self::ACTION => implode(' ', $this->createActionButtons($item)),
             ];
diff --git a/Bundles/User/src/Spryker/Zed/User/Communication/UserCommunicationFactory.php b/Bundles/User/src/Spryker/Zed/User/Communication/UserCommunicationFactory.php
index ae83ca6..ca22477 100644
--- a/Bundles/User/src/Spryker/Zed/User/Communication/UserCommunicationFactory.php
+++ b/Bundles/User/src/Spryker/Zed/User/Communication/UserCommunicationFactory.php
@@ -79,7 +79,7 @@ class UserCommunicationFactory extends AbstractCommunicationFactory
      */
     public function createUserFormDataProvider()
     {
-        return new UserFormDataProvider($this->getAclFacade(), $this->getFacade());
+        return new UserFormDataProvider($this->getGroupPlugin(), $this->getFacade());
     }
 
     /**
@@ -87,15 +87,15 @@ class UserCommunicationFactory extends AbstractCommunicationFactory
      */
     public function createUserUpdateFormDataProvider()
     {
-        return new UserUpdateFormDataProvider($this->getAclFacade(), $this->getFacade());
+        return new UserUpdateFormDataProvider($this->getGroupPlugin(), $this->getFacade());
     }
 
     /**
-     * @return \Spryker\Zed\User\Dependency\Facade\UserToAclInterface
+     * @return \Spryker\Zed\User\Dependency\Plugin\GroupPluginInterface
      */
-    public function getAclFacade()
+    public function getGroupPlugin()
     {
-        return $this->getProvidedDependency(UserDependencyProvider::FACADE_ACL);
+        return $this->getProvidedDependency(UserDependencyProvider::PLUGIN_GROUP);
     }
 
 }
diff --git a/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclBridge.php b/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclBridge.php
deleted file mode 100644
index 8e9e1ac..0000000
--- a/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclBridge.php
+++ /dev/null
@@ -1,66 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\User\Dependency\Facade;
-
-class UserToAclBridge implements UserToAclInterface
-{
-
-    /**
-     * @var \Spryker\Zed\Acl\Business\AclFacade
-     */
-    protected $aclFacade;
-
-    /**
-     * @param \Spryker\Zed\Acl\Business\AclFacadeInterface $aclFacade
-     */
-    public function __construct($aclFacade)
-    {
-        $this->aclFacade = $aclFacade;
-    }
-
-    /**
-     * @return \Generated\Shared\Transfer\GroupsTransfer
-     */
-    public function getAllGroups()
-    {
-        return $this->aclFacade->getAllGroups();
-    }
-
-    /**
-     * @param int $idUser
-     *
-     * @return \Generated\Shared\Transfer\GroupsTransfer
-     */
-    public function getUserGroups($idUser)
-    {
-        return $this->aclFacade->getUserGroups($idUser);
-    }
-
-    /**
-     * @param int $idUser
-     * @param int $idGroup
-     *
-     * @return int
-     */
-    public function addUserToGroup($idUser, $idGroup)
-    {
-        return $this->aclFacade->addUserToGroup($idUser, $idGroup);
-    }
-
-    /**
-     * @param int $idUser
-     * @param int $idGroup
-     *
-     * @return void
-     */
-    public function removeUserFromGroup($idUser, $idGroup)
-    {
-        $this->aclFacade->removeUserFromGroup($idUser, $idGroup);
-    }
-
-}
diff --git a/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclInterface.php b/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclInterface.php
deleted file mode 100644
index 3763502..0000000
--- a/Bundles/User/src/Spryker/Zed/User/Dependency/Facade/UserToAclInterface.php
+++ /dev/null
@@ -1,41 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Zed\User\Dependency\Facade;
-
-interface UserToAclInterface
-{
-
-    /**
-     * @param int $idUser
-     *
-     * @return \Generated\Shared\Transfer\GroupsTransfer
-     */
-    public function getUserGroups($idUser);
-
-    /**
-     * @return \Generated\Shared\Transfer\GroupsTransfer
-     */
-    public function getAllGroups();
-
-    /**
-     * @param int $idUser
-     * @param int $idGroup
-     *
-     * @return int
-     */
-    public function addUserToGroup($idUser, $idGroup);
-
-    /**
-     * @param int $idUser
-     * @param int $idGroup
-     *
-     * @return void
-     */
-    public function removeUserFromGroup($idUser, $idGroup);
-
-}
diff --git a/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPlugin.php b/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPlugin.php
new file mode 100644
index 0000000..82fc550
--- /dev/null
+++ b/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPlugin.php
@@ -0,0 +1,53 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\User\Dependency\Plugin;
+
+use Generated\Shared\Transfer\GroupsTransfer;
+
+class GroupPlugin implements GroupPluginInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getAllGroups()
+    {
+        return new GroupsTransfer();
+    }
+
+    /**
+     * @param int $idUser
+     *
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getUserGroups($idUser)
+    {
+        return new GroupsTransfer();
+    }
+
+    /**
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return void
+     */
+    public function addUserToGroup($idUser, $idGroup)
+    {
+    }
+
+    /**
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return void
+     */
+    public function removeUserFromGroup($idUser, $idGroup)
+    {
+    }
+
+}
diff --git a/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPluginInterface.php b/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPluginInterface.php
new file mode 100644
index 0000000..3d654af
--- /dev/null
+++ b/Bundles/User/src/Spryker/Zed/User/Dependency/Plugin/GroupPluginInterface.php
@@ -0,0 +1,49 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\User\Dependency\Plugin;
+
+interface GroupPluginInterface
+{
+
+    /**
+     * @api
+     *
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getAllGroups();
+
+    /**
+     * @api
+     *
+     * @param int $idUser
+     *
+     * @return \Generated\Shared\Transfer\GroupsTransfer
+     */
+    public function getUserGroups($idUser);
+
+    /**
+     * @api
+     *
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return int
+     */
+    public function addUserToGroup($idUser, $idGroup);
+
+    /**
+     * @api
+     *
+     * @param int $idUser
+     * @param int $idGroup
+     *
+     * @return void
+     */
+    public function removeUserFromGroup($idUser, $idGroup);
+
+}
diff --git a/Bundles/User/src/Spryker/Zed/User/UserDependencyProvider.php b/Bundles/User/src/Spryker/Zed/User/UserDependencyProvider.php
index 598dacf..830751d 100644
--- a/Bundles/User/src/Spryker/Zed/User/UserDependencyProvider.php
+++ b/Bundles/User/src/Spryker/Zed/User/UserDependencyProvider.php
@@ -7,15 +7,14 @@
 
 namespace Spryker\Zed\User;
 
-use Spryker\Zed\Application\Communication\Plugin\Pimple;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
 use Spryker\Zed\Kernel\Container;
-use Spryker\Zed\User\Dependency\Facade\UserToAclBridge;
+use Spryker\Zed\User\Dependency\Plugin\GroupPlugin;
 
 class UserDependencyProvider extends AbstractBundleDependencyProvider
 {
 
-    const FACADE_ACL = 'facade acl';
+    const PLUGIN_GROUP = 'group plugin';
     const CLIENT_SESSION = 'client session';
     const SERVICE_DATE_FORMATTER = 'date formatter service';
 
@@ -26,7 +25,32 @@ class UserDependencyProvider extends AbstractBundleDependencyProvider
      */
     public function provideBusinessLayerDependencies(Container $container)
     {
-        $container[self::CLIENT_SESSION] = function (Container $container) {
+        $container = $this->addSession($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    public function provideCommunicationLayerDependencies(Container $container)
+    {
+        $container = $this->addDateFormatter($container);
+        $container = $this->addGroupPlugin($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addSession(Container $container)
+    {
+        $container[static::CLIENT_SESSION] = function (Container $container) {
             return $container->getLocator()->session()->client();
         };
 
@@ -38,14 +62,24 @@ class UserDependencyProvider extends AbstractBundleDependencyProvider
      *
      * @return \Spryker\Zed\Kernel\Container
      */
-    public function provideCommunicationLayerDependencies(Container $container)
+    protected function addDateFormatter(Container $container)
     {
-        $container[self::FACADE_ACL] = function (Container $container) {
-            return new UserToAclBridge($container->getLocator()->acl()->facade());
+        $container[static::SERVICE_DATE_FORMATTER] = function (Container $container) {
+            return $container->getLocator()->utilDateTime()->service();
         };
 
-        $container[self::SERVICE_DATE_FORMATTER] = function () {
-            return (new Pimple())->getApplication()['dateFormatter'];
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addGroupPlugin(Container $container)
+    {
+        $container[static::PLUGIN_GROUP] = function (Container $container) {
+            return new GroupPlugin();
         };
 
         return $container;
diff --git a/Bundles/UtilDataReader/.coveralls.yml b/Bundles/UtilDataReader/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/UtilDataReader/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/UtilDataReader/.gitattributes b/Bundles/UtilDataReader/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/UtilDataReader/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/UtilDataReader/.gitignore b/Bundles/UtilDataReader/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/UtilDataReader/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/UtilDataReader/.travis.yml b/Bundles/UtilDataReader/.travis.yml
new file mode 100644
index 0000000..e2bfa9e
--- /dev/null
+++ b/Bundles/UtilDataReader/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml -v
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/UtilDataReader/CHANGELOG.md b/Bundles/UtilDataReader/CHANGELOG.md
new file mode 100644
index 0000000..64e7c40
--- /dev/null
+++ b/Bundles/UtilDataReader/CHANGELOG.md
@@ -0,0 +1,3 @@
+# UtilDataReader Changelog
+
+[Release Changelog](https://github.com/spryker/UtilDataReader/releases)
diff --git a/Bundles/UtilDataReader/CONTRIBUTING.md b/Bundles/UtilDataReader/CONTRIBUTING.md
new file mode 100644
index 0000000..5eff362
--- /dev/null
+++ b/Bundles/UtilDataReader/CONTRIBUTING.md
@@ -0,0 +1,46 @@
+CODE CONTRIBUTION LICENSE AGREEMENT
+
+BY DISPLAYING, PUBLISHING, UPLOADING OR PROMOTING (COLLECTIVELY, “POSTING”) SOURCE CODE (“SOURCE CODE”)
+TO SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER
+HRB 134310 (“WE”, “US” OR ”SPRYKER”), YOU AGREE TO THIS CODE CONTRIBUTION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+You grant us and our affiliates an irrevocable, perpetual, worldwide, royalty-free, non-exclusive, unrestricted
+license and right to use, reproduce and store, disseminate and otherwise exploit, modify, delete from, add to,
+create derivative works of, publicly perform, publicly display, reproduce, exchange parts of Source Code or combine them with
+other Source Code, use in data networks and distribute with or without consideration and without limitations as to the
+number of items via all distribution channels (and to sublicense the foregoing rights through multiple tiers of licensees)
+of such Source Code and any other copyright protected material for any reason and in connection with advertising and
+promoting our software and/or our products in any media formats and through any channels now existing or developed in
+the future. The transfer and assignment of rights covers any usage and exploitation rights for any unknown types of use
+as well as with regard to any known types of use the right to unrestrictedly make publicly available and publish,
+irrespective of the medium including any editions and versions and grant simple or exclusive usage, exploitation or
+adaptation rights to third parties.
+
+Spryker may reject, refuse to post or delete any Source Code for any or no reason, including, without limitation.
+
+From time to time, we may remove the Source Code permanently or temporarily, provided that even if we do remove such
+Source Code, we shall have no obligation to cease our other uses of the Source Code as permitted above.
+
+You agree to be fully responsible for and to pay any and all royalties, fees, and any other monies owing any person or
+entity by reason of any Source Code posted by you.
+
+Spryker respects the intellectual property of others, and requires that you do the same. Your postings and the Source Code
+must not infringe any copyright, patent, trademark, trade secret or other proprietary rights or other rights of any person
+or entity and you may not upload, embed, post, email, transmit or otherwise make available Source Code, software or any other
+material that that infringes such rights.
+
+YOU GUARANTEE THAT: (I) YOU OWN THE SOURCE CODE POSTED BY YOU OR OTHERWISE HAVE THE RIGHT TO GRANT THE LICENSES AND RIGHTS
+SET FORTH ABOVE, AND (II) THE POSTING OF YOUR SOURCE CODE DOES NOT VIOLATE THE PRIVACY RIGHTS, PUBLICITY RIGHTS, CONTRACT RIGHTS,
+INTELLECTUAL PROPERTY OR ANY OTHER RIGHTS OF ANY PERSON OR ENTITY OR ANY APPLICABLE LAW.
+
+YOU AGREE TO INDEMNIFY AND HOLD SPRYKER, ITS SUBSIDIARIES, AND AFFILIATES, AND THEIR RESPECTIVE OFFICERS, AGENTS, PARTNERS
+AND EMPLOYEES, HARMLESS FROM ANY LOSS, LIABILITY, COST, EXPENSE, CLAIM OR DEMAND, INCLUDING WITHOUT LIMITATION, REASONABLE
+ATTORNEYS’ FEES, DUE OR RELATING TO OR ARISING OUT OF THE USE OF YOUR SOURCE CODE IN VIOLATION OF THIS AGREEMENT AND/OR
+ARISING FROM A BREACH OF ANY TERMS OF THIS AGREEMENT AND/OR ANY BREACH OF YOUR REPRESENTATIONS AND WARRANTIES SET FORTH IN
+THIS AGREEMENT AND/OR ARISING OUT OF OR RELATING TO ANY SOURCE CODE THAT YOU POST.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement constitutes the entire agreement between you and us concerning Spryker’s use of the Source Code. This Agreement
+supersedes any prior verbal understanding between the parties. This Agreement may be amended only in a writing signed by an authorized officer of Spryker.
diff --git a/Bundles/UtilDataReader/LICENSE b/Bundles/UtilDataReader/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/UtilDataReader/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/UtilDataReader/README.md b/Bundles/UtilDataReader/README.md
new file mode 100644
index 0000000..8e485ac
--- /dev/null
+++ b/Bundles/UtilDataReader/README.md
@@ -0,0 +1,14 @@
+# UtilDataReader Bundle
+[![Build Status](https://travis-ci.org/spryker/UtilDataReader.svg)](https://travis-ci.org/spryker/UtilDataReader)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/UtilDataReader/badge.svg)](https://coveralls.io/github/spryker/UtilDataReader)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/UtilDataReader/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/UtilDataReader/?branch=master)
+
+## Installation
+
+```
+composer require spryker/util-data-reader
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/UtilDataReader/codeception.yml b/Bundles/UtilDataReader/codeception.yml
new file mode 100644
index 0000000..a754790
--- /dev/null
+++ b/Bundles/UtilDataReader/codeception.yml
@@ -0,0 +1,17 @@
+namespace: UtilDataReader
+actor: Tester
+paths:
+    tests: tests
+    log: tests/_output
+    data: tests/_data
+    support: tests/_support
+    envs: tests/_envs
+settings:
+    bootstrap: _bootstrap.php
+    suite_class: \PHPUnit_Framework_TestSuite
+    colors: true
+    memory_limit: 1024M
+    log: true
+coverage:
+    enabled: true
+    whitelist: { include: ['src/*.php'] }
diff --git a/Bundles/UtilDataReader/composer.json b/Bundles/UtilDataReader/composer.json
new file mode 100644
index 0000000..a78841b
--- /dev/null
+++ b/Bundles/UtilDataReader/composer.json
@@ -0,0 +1,26 @@
+{
+  "name": "spryker/util-data-reader",
+  "description": "UtilDataReader bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Functional": "tests/",
+      "Unit": "tests/"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilder.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilder.php
new file mode 100644
index 0000000..eb9895d
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilder.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator\Builder;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\PropelBatchIterator;
+
+class BatchIteratorBuilder implements BatchIteratorBuilderInterface
+{
+
+    /**
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\PropelBatchIterator
+     */
+    public function buildPropelBatchIterator(ModelCriteria $query, $chunkSize = 100)
+    {
+        return new PropelBatchIterator($query, $chunkSize);
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilderInterface.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilderInterface.php
new file mode 100644
index 0000000..95f4fbb
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/Builder/BatchIteratorBuilderInterface.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator\Builder;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+
+interface BatchIteratorBuilderInterface
+{
+
+    /**
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\PropelBatchIterator
+     */
+    public function buildPropelBatchIterator(ModelCriteria $query);
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CountableIteratorInterface.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CountableIteratorInterface.php
new file mode 100644
index 0000000..06c810a
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CountableIteratorInterface.php
@@ -0,0 +1,15 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator;
+
+use Countable;
+use Iterator;
+
+interface CountableIteratorInterface extends Iterator, Countable
+{
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CsvBatchIterator.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CsvBatchIterator.php
new file mode 100644
index 0000000..234f12f
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/CsvBatchIterator.php
@@ -0,0 +1,130 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator;
+
+use Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface;
+
+class CsvBatchIterator implements CountableIteratorInterface
+{
+
+    /**
+     * @var \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface
+     */
+    protected $csvReader;
+
+    /**
+     * @var int
+     */
+    protected $offset = 0;
+
+    /**
+     * @var int
+     */
+    protected $chunkSize = 100;
+
+    /**
+     * @var array
+     */
+    protected $batchData = [];
+
+    /**
+     * @param \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface $csvReader
+     * @param string $fileName
+     * @param int $chunkSize
+     */
+    public function __construct(CsvReaderInterface $csvReader, $fileName, $chunkSize)
+    {
+        $this->csvReader = $csvReader->load($fileName);
+        $this->chunkSize = $chunkSize;
+    }
+
+    /**
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface
+     */
+    protected function getCsvReader()
+    {
+        return $this->csvReader;
+    }
+
+    /**
+     * @return void
+     */
+    protected function loadChunk()
+    {
+        $this->batchData = [];
+
+        $batchSize = $this->offset + $this->chunkSize;
+        if ($batchSize > $this->getCsvReader()->getTotal()) {
+            $batchSize = $this->getCsvReader()->getTotal();
+        }
+
+        while ($this->getCsvReader()->valid()) {
+            $this->batchData[] = $this->getCsvReader()->read();
+            $this->offset++;
+
+            if ($this->offset >= $batchSize) {
+                break;
+            }
+        }
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function current()
+    {
+        return $this->batchData;
+    }
+
+    /**
+     * {@inheritdoc}
+     * x
+     * @return void
+     */
+    public function next()
+    {
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function key()
+    {
+        return $this->offset;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function valid()
+    {
+        return !empty($this->batchData);
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function rewind()
+    {
+        $this->offset = 0;
+        $this->getCsvReader()->rewind();
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function count()
+    {
+        return $this->getCsvReader()->getTotal();
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PdoBatchIterator.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PdoBatchIterator.php
new file mode 100644
index 0000000..47108c4
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PdoBatchIterator.php
@@ -0,0 +1,134 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator;
+
+use PDO;
+use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
+use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
+
+class PdoBatchIterator implements CountableIteratorInterface
+{
+
+    /**
+     * @var \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface
+     */
+    protected $criteriaBuilder;
+
+    /**
+     * @var \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface
+     */
+    protected $queryContainer;
+
+    /**
+     * @var int
+     */
+    protected $offset = 0;
+
+    /**
+     * @var int
+     */
+    protected $chunkSize = 100;
+
+    /**
+     * @var array
+     */
+    protected $batchData = [];
+
+    /**
+     * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
+     * @param \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface $connection
+     * @param int $chunkSize
+     */
+    public function __construct(CriteriaBuilderInterface $criteriaBuilder, QueryContainerInterface $connection, $chunkSize = 100)
+    {
+        $this->criteriaBuilder = $criteriaBuilder;
+        $this->queryContainer = $connection;
+        $this->chunkSize = $chunkSize;
+    }
+
+    /**
+     * @return void
+     */
+    protected function loadChunk()
+    {
+        $this->criteriaBuilder->setOffset($this->offset);
+        $this->criteriaBuilder->setLimit($this->chunkSize);
+
+        $sqlPart = $this->criteriaBuilder->toSqlPart();
+
+        $st = $this->queryContainer
+            ->getConnection()
+            ->prepare($sqlPart->getSql());
+        $st->execute($sqlPart->getParameters());
+
+        $this->batchData = $st->fetchAll(PDO::FETCH_ASSOC);
+        $this->offset += $this->chunkSize;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function current()
+    {
+        return $this->batchData;
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function next()
+    {
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function key()
+    {
+        return $this->offset;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function valid()
+    {
+        return count($this->batchData);
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function rewind()
+    {
+        $this->offset = 0;
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function count()
+    {
+        $this->criteriaBuilder->setLimit(null);
+        $this->criteriaBuilder->setOffset(null);
+        $sqlPart = $this->criteriaBuilder->toSqlPart();
+
+        $countSql = 'SELECT COUNT(*) cnt FROM (' . $sqlPart->getSql() . ') AS v';
+        $st = $this->queryContainer->getConnection()->prepare($countSql);
+        $st->execute($sqlPart->getParameters());
+
+        return $st->fetchColumn();
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PropelBatchIterator.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PropelBatchIterator.php
new file mode 100644
index 0000000..a674842
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/PropelBatchIterator.php
@@ -0,0 +1,114 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+
+class PropelBatchIterator implements CountableIteratorInterface
+{
+
+    /**
+     * @var int
+     */
+    protected $offset = 0;
+
+    /**
+     * @var int
+     */
+    protected $chunkSize = 100;
+
+    /**
+     * @var \Propel\Runtime\ActiveQuery\ModelCriteria
+     */
+    protected $query;
+
+    /**
+     * @var array
+     */
+    protected $currentDataSet = [];
+
+    /**
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     * @param int $chunkSize
+     */
+    public function __construct(ModelCriteria $query, $chunkSize = 100)
+    {
+        $this->query = $query;
+        $this->chunkSize = $chunkSize;
+    }
+
+    /**
+     * @return void
+     */
+    protected function loadChunk()
+    {
+        $this->query->setOffset($this->offset);
+        $this->query->setLimit($this->chunkSize);
+        $this->currentDataSet = $this->query->find();
+
+        $this->offset += $this->chunkSize;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function current()
+    {
+        return $this->currentDataSet;
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function next()
+    {
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function key()
+    {
+        return $this->offset;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function valid()
+    {
+        return count($this->currentDataSet);
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function rewind()
+    {
+        $this->offset = 0;
+        $this->loadChunk();
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function count()
+    {
+        $query = clone $this->query;
+        $query->setLimit(-1);
+        $query->setOffset(-1);
+
+        return $query->count();
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/XmlBatchIterator.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/XmlBatchIterator.php
new file mode 100644
index 0000000..67c455f
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/BatchIterator/XmlBatchIterator.php
@@ -0,0 +1,121 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\BatchIterator;
+
+class XmlBatchIterator implements CountableIteratorInterface
+{
+
+    /**
+     * @var string
+     */
+    protected $xmlFilename;
+
+    /**
+     * @var string
+     */
+    protected $rootNodeName;
+
+    /**
+     * @var int
+     */
+    protected $offset = 0;
+
+    /**
+     * @var int
+     */
+    protected $chunkSize = -1;
+
+    /**
+     * @var array
+     */
+    protected $batchData;
+
+    /**
+     * @param string $filename
+     * @param string $rootNodeName
+     * @param int $chunkSize
+     */
+    public function __construct($filename, $rootNodeName, $chunkSize = -1)
+    {
+        $this->xmlFilename = $filename;
+        $this->rootNodeName = $rootNodeName;
+        $this->chunkSize = $chunkSize;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function current()
+    {
+        return $this->batchData;
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function next()
+    {
+        if ($this->batchData === null) {
+            try {
+                $xml = simplexml_load_string(
+                    file_get_contents($this->xmlFilename),
+                    'SimpleXMLElement',
+                    LIBXML_NOCDATA
+                );
+
+                $this->batchData = json_decode(
+                    json_encode($xml), true
+                );
+
+                $this->batchData = $this->batchData[$this->rootNodeName];
+            } catch (\Exception $exception) {
+                $this->batchData = [];
+            }
+        }
+
+        $this->offset++;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function key()
+    {
+        return $this->offset;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function valid()
+    {
+        return $this->batchData !== null && $this->offset === 0;
+    }
+
+    /**
+     * {@inheritdoc}
+     *
+     * @return void
+     */
+    public function rewind()
+    {
+        $this->offset = 0;
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function count()
+    {
+        $this->next();
+        return count($this->batchData);
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMeta.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMeta.php
new file mode 100644
index 0000000..97ca1da
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMeta.php
@@ -0,0 +1,151 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\Reader\Csv;
+
+use SplFileObject;
+
+class CsvMeta implements CsvMetaInterface
+{
+
+    /**
+     * @var \SplFileObject
+     */
+    protected $csvFile;
+
+    /**
+     * @var array
+     */
+    protected $columns;
+
+    /**
+     * @var string
+     */
+    protected $columnsAsString;
+
+    /**
+     * @var int
+     */
+    protected $columnsOffset;
+
+    /**
+     * @var string
+     */
+    protected $delimiter;
+
+    /**
+     * @var string
+     */
+    protected $enclosure;
+
+    /**
+     * @var string
+     */
+    protected $lineSeparator;
+
+    /**
+     * @var int
+     */
+    protected $total;
+
+    /**
+     * @param \SplFileObject $csvFile
+     */
+    public function __construct(SplFileObject $csvFile, $lineSeparator = "\n")
+    {
+        $this->csvFile = $csvFile;
+        $this->lineSeparator = $lineSeparator;
+    }
+
+    /**
+     * @return \SplFileObject
+     */
+    public function getCsvFile()
+    {
+        return $this->csvFile;
+    }
+
+    /**
+     * @return array
+     */
+    public function getColumns()
+    {
+        if ($this->columns === null) {
+            $this->csvFile->fseek(0);
+            $this->columns = $this->csvFile->fgetcsv();
+        }
+
+        return $this->columns;
+    }
+
+    /**
+     * @return string
+     */
+    public function getColumnsAsString()
+    {
+        if ($this->columnsAsString === null) {
+            $this->columnsAsString = implode($this->getDelimiter(), $this->getColumns());
+        }
+
+        return $this->columnsAsString;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTotal()
+    {
+        if ($this->total === null) {
+            $this->csvFile->fseek(0);
+
+            $lines = 0;
+            while (!$this->csvFile->eof()) {
+                $lines += substr_count($this->csvFile->fread(8192), $this->lineSeparator);
+            }
+
+            $this->total = (int)$lines;
+        }
+
+        return $this->total;
+    }
+
+    /**
+     * @return string
+     */
+    public function getDelimiter()
+    {
+        if ($this->delimiter === null) {
+            list($this->delimiter, $enclosure) = $this->csvFile->getCsvControl();
+        }
+
+        return $this->delimiter;
+    }
+
+    /**
+     * @return string
+     */
+    public function getEnclosure()
+    {
+        if ($this->enclosure === null) {
+            list($delimiter, $this->enclosure) = $this->csvFile->getCsvControl();
+        }
+
+        return $this->enclosure;
+    }
+
+    /**
+     * @return int
+     */
+    public function getColumnsOffset()
+    {
+        if ($this->columnsOffset === null) {
+            $this->columnsOffset = strlen($this->getColumnsAsString() . $this->lineSeparator);
+        }
+        return $this->columnsOffset;
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMetaInterface.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMetaInterface.php
new file mode 100644
index 0000000..1f8e169
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvMetaInterface.php
@@ -0,0 +1,46 @@
+<?php
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+namespace Spryker\Service\UtilDataReader\Model\Reader\Csv;
+
+interface CsvMetaInterface
+{
+
+    /**
+     * @return \SplFileObject
+     */
+    public function getCsvFile();
+
+    /**
+     * @return array
+     */
+    public function getColumns();
+
+    /**
+     * @return string
+     */
+    public function getColumnsAsString();
+
+    /**
+     * @return int
+     */
+    public function getTotal();
+
+    /**
+     * @return string
+     */
+    public function getDelimiter();
+
+    /**
+     * @return string
+     */
+    public function getEnclosure();
+
+    /**
+     * @return int
+     */
+    public function getColumnsOffset();
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReader.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReader.php
new file mode 100644
index 0000000..9473538
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReader.php
@@ -0,0 +1,253 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\Reader\Csv;
+
+use Exception;
+use SplFileObject;
+use UnexpectedValueException;
+
+class CsvReader implements CsvReaderInterface
+{
+
+    /**
+     * @var \SplFileObject
+     */
+    protected $csvFile;
+
+    /**
+     * @var \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvMetaInterface
+     */
+    protected $csvMeta;
+
+    /**
+     * @var string
+     */
+    protected $csvFilename;
+
+    /**
+     * @var int
+     */
+    protected $readIndex = 1;
+
+    /**
+     * @param string $filename
+     *
+     * @throws \Exception
+     *
+     * @return \SplFileObject
+     */
+    protected function createCsvFile($filename)
+    {
+        if (!is_file($filename) || !is_readable($filename)) {
+            throw new Exception(sprintf(
+                'Could not open CSV file "%s"',
+                $filename
+            ));
+        }
+
+        $csvFile = new SplFileObject($filename);
+        $csvFile->setCsvControl(',', '"');
+        $csvFile->setFlags(SplFileObject::READ_CSV | SplFileObject::SKIP_EMPTY | SplFileObject::READ_AHEAD);
+
+        return $csvFile;
+    }
+
+    /**
+     * @param string $filename
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvMetaInterface
+     */
+    protected function createCsvMeta($filename)
+    {
+        $csvFile = $this->createCsvFile($filename);
+        return new CsvMeta($csvFile);
+    }
+
+    /**
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvMetaInterface
+     */
+    public function getCsvMeta()
+    {
+        if ($this->csvMeta === null) {
+            $this->csvMeta = $this->createCsvMeta($this->getFile()->getPathname());
+        }
+
+        return $this->csvMeta;
+    }
+
+    /**
+     * @param array $columns
+     * @param array $data
+     *
+     * @return array
+     */
+    public function composeItem(array $columns, array $data)
+    {
+        if (count($columns) !== count($data)) {
+            return [];
+        }
+
+        return array_combine(
+            array_values($columns),
+            array_values($data)
+        );
+    }
+
+    /**
+     * @param array $columns
+     * @param array $data
+     * @param string $filename
+     * @param int $lineNumber
+     *
+     * @throws \UnexpectedValueException
+     *
+     * @return array
+     */
+    protected function composeAndValidateLine(array $columns, array $data, $filename, $lineNumber)
+    {
+        $data = array_values($data);
+        $columns = array_values($columns);
+
+        if (empty($data)) {
+            throw new UnexpectedValueException(sprintf(
+                'Expected %d column(s) but received data with %d column(s) in %s on line %d',
+                count($columns),
+                count($data),
+                $filename,
+                $lineNumber
+            ));
+        }
+
+        return $this->composeItem($columns, $data);
+    }
+
+    /**
+     * @return array
+     */
+    public function getColumns()
+    {
+        return $this->getCsvMeta()->getColumns();
+    }
+
+    /**
+     * @return \SplFileObject
+     */
+    public function getFile()
+    {
+        if ($this->csvFile === null) {
+            $this->csvFile = $this->createCsvFile($this->csvFilename);
+        }
+
+        return $this->csvFile;
+    }
+
+    /**
+     * @return int
+     */
+    public function getTotal()
+    {
+        return $this->getCsvMeta()->getTotal();
+    }
+
+    /**
+     * @param string $filename
+     *
+     * @return $this
+     */
+    public function load($filename)
+    {
+        $this->csvFilename = $filename;
+        $this->csvFile = null;
+        $this->csvMeta = null;
+        $this->readIndex = 1;
+
+        $this->getFile()->rewind();
+
+        return $this;
+    }
+
+    /**
+     * @throws \UnexpectedValueException
+     *
+     * @return array
+     */
+    public function read()
+    {
+        $data = $this->getFile()->fgetcsv();
+        if (empty($data)) {
+            throw new UnexpectedValueException(sprintf(
+                'Malformed data at line %d in %s',
+                $this->readIndex,
+                $this->csvFilename
+            ));
+        }
+
+        $data = $this->composeAndValidateLine(
+            $this->getCsvMeta()->getColumns(),
+            $data,
+            $this->getFile()->getRealPath(),
+            $this->readIndex + 1
+        );
+
+        $this->readIndex++;
+
+        return $data;
+    }
+
+    /**
+     * @return bool
+     */
+    public function valid()
+    {
+        return !$this->getFile()->eof();
+    }
+
+    /**
+     * @param bool $skipColumns
+     *
+     * @return void
+     */
+    public function rewind($skipColumns = true)
+    {
+        $this->csvFile->fseek(0);
+
+        if ($skipColumns) {
+            $this->getFile()->fseek($this->getCsvMeta()->getColumnsOffset());
+            return;
+        }
+    }
+
+    /**
+     * @return array
+     */
+    public function toArray()
+    {
+        $data = [];
+        $csvFile = $this->createCsvFile($this->getFile()->getPathname());
+        $csvMeta = $this->createCsvMeta($this->getFile()->getPathname());
+        $currentLine = 1;
+
+        $csvFile->rewind();
+        while (!$csvFile->eof()) {
+            $line = $csvFile->fgetcsv();
+            if (!$line) {
+                break;
+            }
+
+            $data[] = $this->composeAndValidateLine(
+                $csvMeta->getColumns(),
+                $line,
+                $csvFile->getRealPath(),
+                $currentLine++
+            );
+        }
+
+        return $data;
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReaderInterface.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReaderInterface.php
new file mode 100644
index 0000000..a3f1e89
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/Model/Reader/Csv/CsvReaderInterface.php
@@ -0,0 +1,65 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader\Model\Reader\Csv;
+
+interface CsvReaderInterface
+{
+
+    /**
+     * @param array $columns
+     * @param array $data
+     *
+     * @return array
+     */
+    public function composeItem(array $columns, array $data);
+
+    /**
+     * @return array
+     */
+    public function getColumns();
+
+    /**
+     * @return \SplFileObject
+     */
+    public function getFile();
+
+    /**
+     * @return int
+     */
+    public function getTotal();
+
+    /**
+     * @param string $filename
+     *
+     * @return $this
+     */
+    public function load($filename);
+
+    /**
+     * @throws \UnexpectedValueException
+     *
+     * @return array
+     */
+    public function read();
+
+    /**
+     * @return bool
+     */
+    public function valid();
+
+    /**
+     * @return void
+     */
+    public function rewind($skipColumns = true);
+
+    /**
+     * @return array
+     */
+    public function toArray();
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderDependencyProvider.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderDependencyProvider.php
new file mode 100644
index 0000000..3221a98
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderDependencyProvider.php
@@ -0,0 +1,13 @@
+<?php
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader;
+
+use Spryker\Service\Kernel\AbstractBundleDependencyProvider;
+
+class UtilDataReaderDependencyProvider extends AbstractBundleDependencyProvider
+{
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderService.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderService.php
new file mode 100644
index 0000000..9426589
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderService.php
@@ -0,0 +1,104 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+use Spryker\Service\Kernel\AbstractService;
+use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
+use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
+
+/**
+ * @method \Spryker\Service\UtilDataReader\UtilDataReaderServiceFactory getFactory()
+ */
+class UtilDataReaderService extends AbstractService implements UtilDataReaderServiceInterface
+{
+
+    /**
+     * Specification:
+     * - Returns a CSV Reader
+     *
+     * @api
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface
+     */
+    public function getCsvReader()
+    {
+        return $this->getFactory()->createCsvReader();
+    }
+
+    /**
+     * Specification:
+     * - Returns a CsvBatchIterator
+     * - Uses CSV Reader to read csv files
+     *
+     * @api
+     *
+     * @param string $fileName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getCsvBatchIterator($fileName, $chunkSize = 10)
+    {
+        return $this->getFactory()->createCsvBatchIterator($fileName, $chunkSize);
+    }
+
+    /**
+     * Specification:
+     * - Returns a XmlBatchIterator
+     * - Loads entries from given xml file
+     *
+     * @api
+     *
+     * @param string $fileName
+     * @param string $rootNodeName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getXmlBatchIterator($fileName, $rootNodeName, $chunkSize = -1)
+    {
+        return $this->getFactory()->createXmlBatchIterator($fileName, $rootNodeName, $chunkSize);
+    }
+
+    /**
+     * Specification:
+     * - Returns a PdoBatchIterator
+     * - Loads a chunk of entities with given CriteriaBuilderInterface
+     *
+     * @api
+     *
+     * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
+     * @param \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface $connection
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getPdoBatchIterator(CriteriaBuilderInterface $criteriaBuilder, QueryContainerInterface $connection, $chunkSize = 100)
+    {
+        return $this->getFactory()->createPdoBatchIterator($criteriaBuilder, $connection, $chunkSize);
+    }
+
+    /**
+     * Specification:
+     * - Returns a PropelBatchIterator
+     * - Loads a chunk of PropelEntities with given ModelCriteria
+     *
+     * @api
+     *
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getPropelBatchIterator(ModelCriteria $query, $chunkSize = 100)
+    {
+        return $this->getFactory()->createPropelBatchIterator($query, $chunkSize);
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceFactory.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceFactory.php
new file mode 100644
index 0000000..262235c
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceFactory.php
@@ -0,0 +1,77 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+use Spryker\Service\Kernel\AbstractServiceFactory;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\CsvBatchIterator;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\PdoBatchIterator;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\PropelBatchIterator;
+use Spryker\Service\UtilDataReader\Model\BatchIterator\XmlBatchIterator;
+use Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReader;
+use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
+use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
+
+class UtilDataReaderServiceFactory extends AbstractServiceFactory
+{
+
+    /**
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface
+     */
+    public function createCsvReader()
+    {
+        return new CsvReader();
+    }
+
+    /**
+     * @param string $fileName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function createCsvBatchIterator($fileName, $chunkSize)
+    {
+        return new CsvBatchIterator($this->createCsvReader(), $fileName, $chunkSize);
+    }
+
+    /**
+     * @param string $fileName
+     * @param string $rootNodeName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function createXmlBatchIterator($fileName, $rootNodeName, $chunkSize)
+    {
+        return new XmlBatchIterator($fileName, $rootNodeName, $chunkSize);
+    }
+
+    /**
+     * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
+     * @param \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface $connection
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\PdoBatchIterator
+     */
+    public function createPdoBatchIterator(CriteriaBuilderInterface $criteriaBuilder, QueryContainerInterface $connection, $chunkSize)
+    {
+        return new PdoBatchIterator($criteriaBuilder, $connection, $chunkSize);
+    }
+
+    /**
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\PropelBatchIterator
+     */
+    public function createPropelBatchIterator(ModelCriteria $query, $chunkSize)
+    {
+        return new PropelBatchIterator($query, $chunkSize);
+    }
+
+}
diff --git a/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceInterface.php b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceInterface.php
new file mode 100644
index 0000000..c9ca4c1
--- /dev/null
+++ b/Bundles/UtilDataReader/src/Spryker/Service/UtilDataReader/UtilDataReaderServiceInterface.php
@@ -0,0 +1,88 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDataReader;
+
+use Propel\Runtime\ActiveQuery\ModelCriteria;
+use Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface;
+use Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface;
+
+/**
+ * @method \Spryker\Service\UtilDataReader\UtilDataReaderServiceFactory getFactory()
+ */
+interface UtilDataReaderServiceInterface
+{
+
+    /**
+     * Specification:
+     * - Returns a CSV Reader
+     *
+     * @api
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\Reader\Csv\CsvReaderInterface
+     */
+    public function getCsvReader();
+
+    /**
+     * Specification:
+     * - Returns a CsvBatchIterator
+     * - Uses CSV Reader to read csv files
+     *
+     * @api
+     *
+     * @param string $fileName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getCsvBatchIterator($fileName, $chunkSize = 10);
+
+    /**
+     * Specification:
+     * - Returns a XmlBatchIterator
+     * - Loads entries from given xml file
+     *
+     * @api
+     *
+     * @param string $fileName
+     * @param string $rootNodeName
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getXmlBatchIterator($fileName, $rootNodeName, $chunkSize = -1);
+
+    /**
+     * Specification:
+     * - Returns a PdoBatchIterator
+     * - Loads a chunk of entities with given CriteriaBuilderInterface
+     *
+     * @api
+     *
+     * @param \Spryker\Shared\SqlCriteriaBuilder\CriteriaBuilder\CriteriaBuilderInterface $criteriaBuilder
+     * @param \Spryker\Zed\Kernel\Persistence\QueryContainer\QueryContainerInterface $connection
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getPdoBatchIterator(CriteriaBuilderInterface $criteriaBuilder, QueryContainerInterface $connection, $chunkSize = 100);
+
+    /**
+     * Specification:
+     * - Returns a PropelBatchIterator
+     * - Loads a chunk of PropelEntities with given ModelCriteria
+     *
+     * @api
+     *
+     * @param \Propel\Runtime\ActiveQuery\ModelCriteria $query
+     * @param int $chunkSize
+     *
+     * @return \Spryker\Service\UtilDataReader\Model\BatchIterator\CountableIteratorInterface
+     */
+    public function getPropelBatchIterator(ModelCriteria $query, $chunkSize = 100);
+
+}
diff --git a/Bundles/UtilDataReader/tests/Unit.suite.yml b/Bundles/UtilDataReader/tests/Unit.suite.yml
new file mode 100644
index 0000000..8b0c622
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/Unit.suite.yml
@@ -0,0 +1,5 @@
+class_name: UnitTester
+modules:
+    enabled:
+        - Asserts
+        - \UtilDataReader\Module\Unit
diff --git a/Bundles/UtilDataReader/tests/Unit/_bootstrap.php b/Bundles/UtilDataReader/tests/Unit/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/Unit/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/UtilDataReader/tests/_bootstrap.php b/Bundles/UtilDataReader/tests/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/UtilDataReader/tests/_data/dump.sql b/Bundles/UtilDataReader/tests/_data/dump.sql
new file mode 100644
index 0000000..0fe12ac
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/_data/dump.sql
@@ -0,0 +1 @@
+/* Replace this file with actual dump of your database */
diff --git a/Bundles/UtilDataReader/tests/_envs/isolated.yml b/Bundles/UtilDataReader/tests/_envs/isolated.yml
new file mode 100644
index 0000000..929efd9
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/_envs/isolated.yml
@@ -0,0 +1,4 @@
+modules:
+  config:
+    \Testify\Module\Environment:
+      mode: 'isolated'
diff --git a/Bundles/UtilDataReader/tests/_support/Module/Unit.php b/Bundles/UtilDataReader/tests/_support/Module/Unit.php
new file mode 100644
index 0000000..1ac051c
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/_support/Module/Unit.php
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * (c) Spryker Systems GmbH copyright protected
+ */
+
+namespace UtilDataReader\Module;
+
+use Codeception\Module;
+
+class Unit extends Module
+{
+}
diff --git a/Bundles/UtilDataReader/tests/_support/UnitTester.php b/Bundles/UtilDataReader/tests/_support/UnitTester.php
new file mode 100644
index 0000000..df854ca
--- /dev/null
+++ b/Bundles/UtilDataReader/tests/_support/UnitTester.php
@@ -0,0 +1,30 @@
+<?php
+namespace UtilDataReader;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class UnitTester extends Actor
+{
+
+    use _generated\UnitTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/UtilDateTime/.coveralls.yml b/Bundles/UtilDateTime/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/UtilDateTime/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/UtilDateTime/.gitattributes b/Bundles/UtilDateTime/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/UtilDateTime/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/UtilDateTime/.gitignore b/Bundles/UtilDateTime/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/UtilDateTime/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/UtilDateTime/.travis.yml b/Bundles/UtilDateTime/.travis.yml
new file mode 100644
index 0000000..e2bfa9e
--- /dev/null
+++ b/Bundles/UtilDateTime/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml -v
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/UtilDateTime/CHANGELOG.md b/Bundles/UtilDateTime/CHANGELOG.md
new file mode 100644
index 0000000..74a3d40
--- /dev/null
+++ b/Bundles/UtilDateTime/CHANGELOG.md
@@ -0,0 +1,3 @@
+# UtilDateTime Changelog
+
+[Release Changelog](https://github.com/spryker/UtilDateTime/releases)
diff --git a/Bundles/UtilDateTime/CONTRIBUTING.md b/Bundles/UtilDateTime/CONTRIBUTING.md
new file mode 100644
index 0000000..5eff362
--- /dev/null
+++ b/Bundles/UtilDateTime/CONTRIBUTING.md
@@ -0,0 +1,46 @@
+CODE CONTRIBUTION LICENSE AGREEMENT
+
+BY DISPLAYING, PUBLISHING, UPLOADING OR PROMOTING (COLLECTIVELY, “POSTING”) SOURCE CODE (“SOURCE CODE”)
+TO SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER
+HRB 134310 (“WE”, “US” OR ”SPRYKER”), YOU AGREE TO THIS CODE CONTRIBUTION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+You grant us and our affiliates an irrevocable, perpetual, worldwide, royalty-free, non-exclusive, unrestricted
+license and right to use, reproduce and store, disseminate and otherwise exploit, modify, delete from, add to,
+create derivative works of, publicly perform, publicly display, reproduce, exchange parts of Source Code or combine them with
+other Source Code, use in data networks and distribute with or without consideration and without limitations as to the
+number of items via all distribution channels (and to sublicense the foregoing rights through multiple tiers of licensees)
+of such Source Code and any other copyright protected material for any reason and in connection with advertising and
+promoting our software and/or our products in any media formats and through any channels now existing or developed in
+the future. The transfer and assignment of rights covers any usage and exploitation rights for any unknown types of use
+as well as with regard to any known types of use the right to unrestrictedly make publicly available and publish,
+irrespective of the medium including any editions and versions and grant simple or exclusive usage, exploitation or
+adaptation rights to third parties.
+
+Spryker may reject, refuse to post or delete any Source Code for any or no reason, including, without limitation.
+
+From time to time, we may remove the Source Code permanently or temporarily, provided that even if we do remove such
+Source Code, we shall have no obligation to cease our other uses of the Source Code as permitted above.
+
+You agree to be fully responsible for and to pay any and all royalties, fees, and any other monies owing any person or
+entity by reason of any Source Code posted by you.
+
+Spryker respects the intellectual property of others, and requires that you do the same. Your postings and the Source Code
+must not infringe any copyright, patent, trademark, trade secret or other proprietary rights or other rights of any person
+or entity and you may not upload, embed, post, email, transmit or otherwise make available Source Code, software or any other
+material that that infringes such rights.
+
+YOU GUARANTEE THAT: (I) YOU OWN THE SOURCE CODE POSTED BY YOU OR OTHERWISE HAVE THE RIGHT TO GRANT THE LICENSES AND RIGHTS
+SET FORTH ABOVE, AND (II) THE POSTING OF YOUR SOURCE CODE DOES NOT VIOLATE THE PRIVACY RIGHTS, PUBLICITY RIGHTS, CONTRACT RIGHTS,
+INTELLECTUAL PROPERTY OR ANY OTHER RIGHTS OF ANY PERSON OR ENTITY OR ANY APPLICABLE LAW.
+
+YOU AGREE TO INDEMNIFY AND HOLD SPRYKER, ITS SUBSIDIARIES, AND AFFILIATES, AND THEIR RESPECTIVE OFFICERS, AGENTS, PARTNERS
+AND EMPLOYEES, HARMLESS FROM ANY LOSS, LIABILITY, COST, EXPENSE, CLAIM OR DEMAND, INCLUDING WITHOUT LIMITATION, REASONABLE
+ATTORNEYS’ FEES, DUE OR RELATING TO OR ARISING OUT OF THE USE OF YOUR SOURCE CODE IN VIOLATION OF THIS AGREEMENT AND/OR
+ARISING FROM A BREACH OF ANY TERMS OF THIS AGREEMENT AND/OR ANY BREACH OF YOUR REPRESENTATIONS AND WARRANTIES SET FORTH IN
+THIS AGREEMENT AND/OR ARISING OUT OF OR RELATING TO ANY SOURCE CODE THAT YOU POST.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement constitutes the entire agreement between you and us concerning Spryker’s use of the Source Code. This Agreement
+supersedes any prior verbal understanding between the parties. This Agreement may be amended only in a writing signed by an authorized officer of Spryker.
diff --git a/Bundles/UtilDateTime/LICENSE b/Bundles/UtilDateTime/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/UtilDateTime/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/UtilDateTime/README.md b/Bundles/UtilDateTime/README.md
new file mode 100644
index 0000000..045a614
--- /dev/null
+++ b/Bundles/UtilDateTime/README.md
@@ -0,0 +1,14 @@
+# UtilDateTime Bundle
+[![Build Status](https://travis-ci.org/spryker/UtilDateTime.svg)](https://travis-ci.org/spryker/UtilDateTime)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/UtilDateTime/badge.svg)](https://coveralls.io/github/spryker/UtilDateTime)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/UtilDateTime/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/UtilDateTime/?branch=master)
+
+## Installation
+
+```
+composer require spryker/util-date-time
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/UtilDateTime/codeception.yml b/Bundles/UtilDateTime/codeception.yml
new file mode 100644
index 0000000..c30e97f
--- /dev/null
+++ b/Bundles/UtilDateTime/codeception.yml
@@ -0,0 +1,17 @@
+namespace: UtilDateTime
+actor: Tester
+paths:
+    tests: tests
+    log: tests/_output
+    data: tests/_data
+    support: tests/_support
+    envs: tests/_envs
+settings:
+    bootstrap: _bootstrap.php
+    suite_class: \PHPUnit_Framework_TestSuite
+    colors: true
+    memory_limit: 1024M
+    log: true
+coverage:
+    enabled: true
+    whitelist: { include: ['src/*.php'] }
diff --git a/Bundles/UtilDateTime/composer.json b/Bundles/UtilDateTime/composer.json
new file mode 100644
index 0000000..535c6a5
--- /dev/null
+++ b/Bundles/UtilDateTime/composer.json
@@ -0,0 +1,26 @@
+{
+  "name": "spryker/util-date-time",
+  "description": "UtilDateTime bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "1.0.x-dev"
+    }
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Unit": "tests/",
+      "Functional": "tests/"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  }
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatter.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatter.php
new file mode 100644
index 0000000..1a45b01
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatter.php
@@ -0,0 +1,87 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime\Model;
+
+use DateTime;
+use DateTimeZone;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\UtilDateTime\UtilDateTimeConstants;
+
+class DateTimeFormatter implements DateTimeFormatterInterface
+{
+
+    const DEFAULT_TIME_ZONE = 'Europe/Berlin';
+    const DEFAULT_FORMAT_TIME = 'H:i';
+    const DEFAULT_FORMAT_DATE_TIME = 'M. d, Y H:i';
+    const DEFAULT_FORMAT_DATE = 'M. d, Y';
+
+    /**
+     * @var \Spryker\Shared\Config\Config
+     */
+    protected $config;
+
+    /**
+     * @param \Spryker\Shared\Config\Config $config
+     */
+    public function __construct(Config $config)
+    {
+        $this->config = $config;
+    }
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatDate($dateTime)
+    {
+        return $this->format($dateTime, UtilDateTimeConstants::DATE_TIME_FORMAT_DATE, static::DEFAULT_FORMAT_DATE);
+    }
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatDateTime($dateTime)
+    {
+        return $this->format($dateTime, UtilDateTimeConstants::DATE_TIME_FORMAT_DATE_TIME, static::DEFAULT_FORMAT_DATE_TIME);
+    }
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatTime($dateTime)
+    {
+        return $this->format($dateTime, UtilDateTimeConstants::DATE_TIME_FORMAT_TIME, static::DEFAULT_FORMAT_TIME);
+    }
+
+    /**
+     * @param \DateTime|string $dateTime
+     * @param string $formatConfigConstant
+     * @param string $defaultFormat
+     *
+     * @return string|null
+     */
+    protected function format($dateTime, $formatConfigConstant, $defaultFormat)
+    {
+        $dateTimeZone = new DateTimeZone($this->config->get(UtilDateTimeConstants::DATE_TIME_ZONE, static::DEFAULT_TIME_ZONE));
+        $configuredFormat = $this->config->get($formatConfigConstant, $defaultFormat);
+
+        if (!($dateTime instanceof DateTime)) {
+            $dateTime = new DateTime($dateTime, $dateTimeZone);
+        } else {
+            $dateTime->setTimezone($dateTimeZone);
+        }
+
+        return $dateTime->format($configuredFormat);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterInterface.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterInterface.php
new file mode 100644
index 0000000..0fab492
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterInterface.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime\Model;
+
+interface DateTimeFormatterInterface
+{
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatDate($dateTime);
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatTime($dateTime);
+
+    /**
+     * @param string $dateTime
+     *
+     * @return string
+     */
+    public function formatDateTime($dateTime);
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtension.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtension.php
new file mode 100644
index 0000000..54092d4
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtension.php
@@ -0,0 +1,105 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime\Model;
+
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Shared\Twig\TwigExtension;
+use Spryker\Shared\Twig\TwigFilter;
+
+class DateTimeFormatterTwigExtension extends TwigExtension
+{
+
+    const EXTENSION_NAME = 'DateTimeFormatterTwigExtension';
+
+    /**
+     * @var array
+     */
+    protected $filterFunctions = [
+        'formatDate',
+        'formatDateTime',
+        'formatTime',
+    ];
+
+    /**
+     * @var \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
+     */
+    protected $utilDateTimeService;
+
+    /**
+     * @param \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface $utilDateTimeService
+     */
+    public function __construct(UtilDateTimeServiceInterface $utilDateTimeService)
+    {
+        $this->utilDateTimeService = $utilDateTimeService;
+    }
+
+    /**
+     * @return array
+     */
+    public function getFilters()
+    {
+        $filters = [];
+
+        foreach ($this->filterFunctions as $dateFormatterFunction) {
+            $filters[] = new TwigFilter(
+                $dateFormatterFunction,
+                [$this, $dateFormatterFunction],
+                ['is_safe' => ['html']]
+            );
+        }
+
+        return $filters;
+    }
+
+    /**
+     * @return array
+     */
+    public function getFunctions()
+    {
+        return [];
+    }
+
+    /**
+     * @return string
+     */
+    public function getName()
+    {
+        return static::EXTENSION_NAME;
+    }
+
+    /**
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDate($date)
+    {
+        return $this->utilDateTimeService->formatDate($date);
+    }
+
+    /**
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDateTime($date)
+    {
+        return $this->utilDateTimeService->formatDateTime($date);
+    }
+
+    /**
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatTime($date)
+    {
+        return $this->utilDateTimeService->formatTime($date);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProvider.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProvider.php
new file mode 100644
index 0000000..8559081
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProvider.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Service\UtilDateTime\Model\DateTimeFormatterTwigExtension;
+use Spryker\Service\UtilDateTime\UtilDateTimeService;
+
+class DateTimeFormatterServiceProvider implements ServiceProviderInterface
+{
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $utilDateTimeService = new UtilDateTimeService();
+
+        $app['twig'] = $app->share(
+            $app->extend('twig', function (\Twig_Environment $twig) use ($utilDateTimeService) {
+                $twig->addExtension(new DateTimeFormatterTwigExtension($utilDateTimeService));
+
+                return $twig;
+            })
+        );
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProvider.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProvider.php
new file mode 100644
index 0000000..664a562
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProvider.php
@@ -0,0 +1,44 @@
+<?php
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime;
+
+use Spryker\Service\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Service\Kernel\Container;
+use Spryker\Shared\Config\Config;
+
+class UtilDateTimeDependencyProvider extends AbstractBundleDependencyProvider
+{
+
+    const CONFIG = 'config';
+
+    /**
+     * @param \Spryker\Service\Kernel\Container $container
+     *
+     * @return \Spryker\Service\Kernel\Container
+     */
+    public function provideServiceDependencies(Container $container)
+    {
+        $container = $this->addConfig($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Service\Kernel\Container $container
+     *
+     * @return \Spryker\Service\Kernel\Container
+     */
+    protected function addConfig(Container $container)
+    {
+        $container[self::CONFIG] = function () {
+            return Config::getInstance();
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeService.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeService.php
new file mode 100644
index 0000000..4b0e5f5
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeService.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime;
+
+use Spryker\Service\Kernel\AbstractService;
+
+/**
+ * @method \Spryker\Service\UtilDateTime\UtilDateTimeServiceFactory getFactory()
+ */
+class UtilDateTimeService extends AbstractService implements UtilDateTimeServiceInterface
+{
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured date
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDate($date)
+    {
+        return $this->getFactory()->createDateFormatter()->formatDate($date);
+    }
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured datetime
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDateTime($date)
+    {
+        return $this->getFactory()->createDateFormatter()->formatDateTime($date);
+    }
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured time
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatTime($date)
+    {
+        return $this->getFactory()->createDateFormatter()->formatTime($date);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactory.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactory.php
new file mode 100644
index 0000000..902e871
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactory.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilDateTime;
+
+use Spryker\Service\Kernel\AbstractServiceFactory;
+use Spryker\Service\UtilDateTime\Model\DateTimeFormatter;
+
+class UtilDateTimeServiceFactory extends AbstractServiceFactory
+{
+
+    /**
+     * @return \Spryker\Service\UtilDateTime\Model\DateTimeFormatterInterface
+     */
+    public function createDateFormatter()
+    {
+        return new DateTimeFormatter(
+            $this->getConfig()
+        );
+    }
+
+    /**
+     * @return \Spryker\Shared\Config\Config
+     */
+    protected function getConfig()
+    {
+        return $this->getProvidedDependency(UtilDateTimeDependencyProvider::CONFIG);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceInterface.php b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceInterface.php
new file mode 100644
index 0000000..e5b56ad
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Service/UtilDateTime/UtilDateTimeServiceInterface.php
@@ -0,0 +1,51 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+namespace Spryker\Service\UtilDateTime;
+
+/**
+ * @method \Spryker\Service\UtilDateTime\UtilDateTimeServiceFactory getFactory()
+ */
+interface UtilDateTimeServiceInterface
+{
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured date
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDate($date);
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured datetime
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatDateTime($date);
+
+    /**
+     * Specification:
+     * - Formats a given datetime string into a configured time
+     *
+     * @api
+     *
+     * @param string $date
+     *
+     * @return string
+     */
+    public function formatTime($date);
+
+}
diff --git a/Bundles/UtilDateTime/src/Spryker/Shared/UtilDateTime/UtilDateTimeConstants.php b/Bundles/UtilDateTime/src/Spryker/Shared/UtilDateTime/UtilDateTimeConstants.php
new file mode 100644
index 0000000..de49521
--- /dev/null
+++ b/Bundles/UtilDateTime/src/Spryker/Shared/UtilDateTime/UtilDateTimeConstants.php
@@ -0,0 +1,49 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\UtilDateTime;
+
+interface UtilDateTimeConstants
+{
+
+    /**
+     * Specification:
+     * - Configures the used DateTimeZone for formatting
+     * - @see http://php.net/manual/en/class.datetimezone.php
+     *
+     * @api
+     */
+    const DATE_TIME_ZONE = 'DATE_TIME_ZONE';
+
+    /**
+     * Specification:
+     * - Configures the used format for a date
+     * - @see http://php.net/manual/en/datetime.formats.php
+     *
+     * @api
+     */
+    const DATE_TIME_FORMAT_DATE = 'DATE_TIME_FORMAT_DATE';
+
+    /**
+     * Specification:
+     * - Configures the used format for date and time
+     * - @see http://php.net/manual/en/datetime.formats.php
+     *
+     * @api
+     */
+    const DATE_TIME_FORMAT_DATE_TIME = 'DATE_TIME_FORMAT_DATE_TIME';
+
+    /**
+     * Specification:
+     * - Configures the used format for time
+     * - @see http://php.net/manual/en/datetime.formats.php
+     *
+     * @api
+     */
+    const DATE_TIME_FORMAT_TIME = 'DATE_TIME_FORMAT_TIME';
+
+}
diff --git a/Bundles/UtilDateTime/tests/Functional.suite.yml b/Bundles/UtilDateTime/tests/Functional.suite.yml
new file mode 100644
index 0000000..deb2ff7
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Functional.suite.yml
@@ -0,0 +1,5 @@
+class_name: FunctionalTester
+modules:
+    enabled:
+      - \Testify\Module\Environment
+      - \UtilDateTime\Module\Functional
diff --git a/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtensionTest.php b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtensionTest.php
new file mode 100644
index 0000000..850db8d
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/Model/DateTimeFormatterTwigExtensionTest.php
@@ -0,0 +1,118 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Functional\Spryker\Service\UtilDateTime\Model;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilDateTime\Model\DateTimeFormatterTwigExtension;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface;
+use Spryker\Shared\Twig\TwigFilter;
+
+/**
+ * @group Functional
+ * @group Spryker
+ * @group Service
+ * @group UtilDateTime
+ * @group Model
+ * @group DateTimeFormatterTwigExtensionTest
+ */
+class DateTimeFormatterTwigExtensionTest extends PHPUnit_Framework_TestCase
+{
+
+    const DATE_TO_FORMAT = '1980-12-06 08:00:00';
+
+    /**
+     * @return void
+     */
+    public function testInstantiationShouldReturnExtension()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+
+        $this->assertInstanceOf(DateTimeFormatterTwigExtension::class, $dateTimeFormatterTwigExtension);
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetNameReturnsNameOfExtension()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+
+        $this->assertSame(DateTimeFormatterTwigExtension::EXTENSION_NAME, $dateTimeFormatterTwigExtension->getName());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetFiltersShouldReturnArray()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+
+        $this->assertContainsOnly(TwigFilter::class, $dateTimeFormatterTwigExtension->getFilters());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetFunctionsShouldReturnArray()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+
+        $this->assertInternalType('array', $dateTimeFormatterTwigExtension->getFunctions());
+    }
+
+    /**
+     * @return void
+     */
+    public function testFormatDateDelegatesToDateTimeFormatter()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $utilDateTimeServiceMock->expects(self::once())->method('formatDate');
+
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+        $dateTimeFormatterTwigExtension->formatDate(self::DATE_TO_FORMAT);
+    }
+
+    /**
+     * @return void
+     */
+    public function testFormatDateTimeDelegatesToDateTimeFormatter()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $utilDateTimeServiceMock->expects(self::once())->method('formatDateTime');
+
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+        $dateTimeFormatterTwigExtension->formatDateTime(self::DATE_TO_FORMAT);
+    }
+
+    /**
+     * @return void
+     */
+    public function testFormatTimeDelegatesToDateTimeFormatter()
+    {
+        $utilDateTimeServiceMock = $this->getUtilDateTimeServiceMock();
+        $utilDateTimeServiceMock->expects(self::once())->method('formatTime');
+
+        $dateTimeFormatterTwigExtension = new DateTimeFormatterTwigExtension($utilDateTimeServiceMock);
+        $dateTimeFormatterTwigExtension->formatTime(self::DATE_TO_FORMAT);
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
+     */
+    protected function getUtilDateTimeServiceMock()
+    {
+        $utilDateTimeServiceMock = $this->getMockBuilder(UtilDateTimeServiceInterface::class)->getMock();
+
+        return $utilDateTimeServiceMock;
+    }
+
+}
diff --git a/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProviderTest.php b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProviderTest.php
new file mode 100644
index 0000000..ce8ea0e
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/ServiceProvider/DateTimeFormatterServiceProviderTest.php
@@ -0,0 +1,55 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Functional\Spryker\Service\UtilDateTime\ServiceProvider;
+
+use PHPUnit_Framework_TestCase;
+use Silex\Application;
+use Spryker\Service\UtilDateTime\Model\DateTimeFormatterTwigExtension;
+use Spryker\Service\UtilDateTime\ServiceProvider\DateTimeFormatterServiceProvider;
+use Twig_Environment;
+use Twig_Loader_Filesystem;
+
+/**
+ * @group Functional
+ * @group Spryker
+ * @group Service
+ * @group UtilDateTime
+ * @group ServiceProvider
+ * @group DateTimeFormatterServiceProviderTest
+ */
+class DateTimeFormatterServiceProviderTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testRegisterAddsExtensionToTwig()
+    {
+        $applicationMock = $this->getApplicationMock();
+        $dateTimeFormatterServiceProvider = new DateTimeFormatterServiceProvider();
+        $dateTimeFormatterServiceProvider->register($applicationMock);
+
+        $twig = $applicationMock['twig'];
+
+        $this->assertTrue($twig->hasExtension(DateTimeFormatterTwigExtension::EXTENSION_NAME));
+    }
+
+    /**
+     * @return \Silex\Application
+     */
+    protected function getApplicationMock()
+    {
+        $application = new Application();
+        $application['twig'] = function () {
+            return new Twig_Environment(new Twig_Loader_Filesystem());
+        };
+
+        return $application;
+    }
+
+}
diff --git a/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/UtilDateTimeServiceTest.php b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/UtilDateTimeServiceTest.php
new file mode 100644
index 0000000..e73d8d5
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Functional/Spryker/Service/UtilDateTime/UtilDateTimeServiceTest.php
@@ -0,0 +1,147 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Functional\Spryker\Service\UtilDateTime;
+
+use DateTime;
+use DateTimeZone;
+use PHPUnit_Framework_TestCase;
+use ReflectionClass;
+use Spryker\Service\UtilDateTime\UtilDateTimeService;
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\UtilDateTime\UtilDateTimeConstants;
+
+/**
+ * @group Functional
+ * @group Spryker
+ * @group Service
+ * @group UtilDateTime
+ * @group UtilDateTimeServiceTest
+ */
+class UtilDateTimeServiceTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @dataProvider dateFormatDataProvider
+     *
+     * @param string $date
+     * @param string $format
+     * @param string $expectedFormattedDate
+     *
+     * @return void
+     */
+    public function testFormatDateReturnsFormattedDate($date, $format, $expectedFormattedDate)
+    {
+        $utilDateTimeService = $this->getService([UtilDateTimeConstants::DATE_TIME_FORMAT_DATE => $format]);
+
+        $this->assertSame($expectedFormattedDate, $utilDateTimeService->formatDate($date));
+    }
+
+    /**
+     * @return array
+     */
+    public function dateFormatDataProvider()
+    {
+        return [
+            ['1980-12-06 08:00:00', 'M. d, Y', 'Dec. 06, 1980'],
+            ['1980-12-06 08:00:00', 'Y/m/d', '1980/12/06'],
+            ['1980-12-06 08:00:00', 'd.m.Y', '06.12.1980'],
+            [new DateTime('1980-12-06 08:00:00', new DateTimeZone('Europe/Berlin')), 'd.m.Y', '06.12.1980'],
+        ];
+    }
+
+    /**
+     * @dataProvider dateTimeFormatDataProvider
+     *
+     * @param string $date
+     * @param string $format
+     * @param string $expectedFormattedDateTime
+     *
+     * @return void
+     */
+    public function testFormatDateTimeReturnsFormattedDateTime($date, $format, $expectedFormattedDateTime)
+    {
+        $utilDateTimeService = $this->getService([UtilDateTimeConstants::DATE_TIME_FORMAT_DATE_TIME => $format]);
+
+        $this->assertSame($expectedFormattedDateTime, $utilDateTimeService->formatDateTime($date));
+    }
+
+    /**
+     * @return array
+     */
+    public function dateTimeFormatDataProvider()
+    {
+        return [
+            ['1980-12-06 08:00:00', 'M. d, Y H:i', 'Dec. 06, 1980 08:00'],
+            ['1980-12-06 08:00:00', 'Y/m/d H:i', '1980/12/06 08:00'],
+            ['1980-12-06 08:00:00', 'd.m.Y H:i', '06.12.1980 08:00'],
+            [new DateTime('1980-12-06 08:00:00', new DateTimeZone('Europe/Berlin')), 'd.m.Y H:i', '06.12.1980 08:00'],
+        ];
+    }
+
+    /**
+     * @dataProvider timeFormatDataProvider
+     *
+     * @param string $date
+     * @param string $format
+     * @param string $expectedFormattedTime
+     *
+     * @return void
+     */
+    public function testFormatTimeReturnsFormattedTime($date, $format, $expectedFormattedTime)
+    {
+        $utilDateTimeService = $this->getService([UtilDateTimeConstants::DATE_TIME_FORMAT_TIME => $format]);
+
+        $this->assertSame($expectedFormattedTime, $utilDateTimeService->formatTime($date));
+    }
+
+    /**
+     * @return array
+     */
+    public function timeFormatDataProvider()
+    {
+        return [
+            ['1980-12-06 23:00:00', 'H:i', '23:00'],
+            ['1980-12-06 23:00:00', 'h:i', '11:00'],
+            [new DateTime('1980-12-06 23:00:00', new DateTimeZone('Europe/Berlin')), 'h:i', '11:00'],
+        ];
+    }
+
+    /**
+     * @param array $config
+     *
+     * @return \Spryker\Service\UtilDateTime\UtilDateTimeServiceInterface
+     */
+    protected function getService(array $config)
+    {
+        $this->prepareConfig($config);
+        $utilDateTimeService = new UtilDateTimeService();
+
+        return $utilDateTimeService;
+    }
+
+    /**
+     * @param array $config
+     *
+     * @return void
+     */
+    protected function prepareConfig(array $config)
+    {
+        Config::init();
+        $reflectionClass = new ReflectionClass(Config::class);
+        $reflectionProperty = $reflectionClass->getProperty('config');
+        $reflectionProperty->setAccessible(true);
+        $configuration = $reflectionProperty->getValue();
+
+        foreach ($config as $key => $value) {
+            $configuration[$key] = $value;
+        }
+
+        $reflectionProperty->setValue($configuration);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/tests/Functional/_bootstrap.php b/Bundles/UtilDateTime/tests/Functional/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Functional/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/UtilDateTime/tests/Unit.suite.yml b/Bundles/UtilDateTime/tests/Unit.suite.yml
new file mode 100644
index 0000000..cf3dd75
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Unit.suite.yml
@@ -0,0 +1,5 @@
+class_name: UnitTester
+modules:
+    enabled:
+        - Asserts
+        - \UtilDateTime\Module\Unit
diff --git a/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProviderTest.php b/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProviderTest.php
new file mode 100644
index 0000000..6099dda
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeDependencyProviderTest.php
@@ -0,0 +1,36 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilDateTime;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\Kernel\Container;
+use Spryker\Service\UtilDateTime\UtilDateTimeDependencyProvider;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilDateTime
+ * @group UtilDateTimeDependencyProviderTest
+ */
+class UtilDateTimeDependencyProviderTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testProvideServiceDependenciesShouldAddConfigToContainer()
+    {
+        $container = new Container();
+        $utilDateTimeDependencyProvider = new UtilDateTimeDependencyProvider();
+        $utilDateTimeDependencyProvider->provideServiceDependencies($container);
+
+        $this->assertArrayHasKey(UtilDateTimeDependencyProvider::CONFIG, $container);
+    }
+
+}
diff --git a/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactoryTest.php b/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactoryTest.php
new file mode 100644
index 0000000..7f0218a
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Unit/Spryker/Service/UtilDateTime/UtilDateTimeServiceFactoryTest.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilDateTime;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilDateTime\Model\DateTimeFormatterInterface;
+use Spryker\Service\UtilDateTime\UtilDateTimeServiceFactory;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilDateTime
+ * @group UtilDateTimeServiceFactoryTest
+ */
+class UtilDateTimeServiceFactoryTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testCreateDateFormatterShouldReturnDateFormatter()
+    {
+        $utilDateTimeServiceFactory = new UtilDateTimeServiceFactory();
+
+        $this->assertInstanceOf(DateTimeFormatterInterface::class, $utilDateTimeServiceFactory->createDateFormatter());
+    }
+
+}
diff --git a/Bundles/UtilDateTime/tests/Unit/_bootstrap.php b/Bundles/UtilDateTime/tests/Unit/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/Unit/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/UtilDateTime/tests/_bootstrap.php b/Bundles/UtilDateTime/tests/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/UtilDateTime/tests/_data/dump.sql b/Bundles/UtilDateTime/tests/_data/dump.sql
new file mode 100644
index 0000000..0fe12ac
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_data/dump.sql
@@ -0,0 +1 @@
+/* Replace this file with actual dump of your database */
diff --git a/Bundles/UtilDateTime/tests/_envs/isolated.yml b/Bundles/UtilDateTime/tests/_envs/isolated.yml
new file mode 100644
index 0000000..3602d55
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_envs/isolated.yml
@@ -0,0 +1,7 @@
+modules:
+  config:
+    \Testify\Module\Environment:
+      mode: 'isolated'
+
+    \Config\Module\ConfigInit:
+      enabled: true
diff --git a/Bundles/UtilDateTime/tests/_support/FunctionalTester.php b/Bundles/UtilDateTime/tests/_support/FunctionalTester.php
new file mode 100644
index 0000000..878cf37
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_support/FunctionalTester.php
@@ -0,0 +1,30 @@
+<?php
+namespace UtilDateTime;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = NULL)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class FunctionalTester extends Actor
+{
+
+    use _generated\FunctionalTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/UtilDateTime/tests/_support/Module/Functional.php b/Bundles/UtilDateTime/tests/_support/Module/Functional.php
new file mode 100644
index 0000000..f408b53
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_support/Module/Functional.php
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * (c) Spryker Systems GmbH copyright protected
+ */
+
+namespace UtilDateTime\Module;
+
+use Codeception\Module;
+
+class Functional extends Module
+{
+}
diff --git a/Bundles/UtilDateTime/tests/_support/Module/Unit.php b/Bundles/UtilDateTime/tests/_support/Module/Unit.php
new file mode 100644
index 0000000..7d4aa8a
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_support/Module/Unit.php
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * (c) Spryker Systems GmbH copyright protected
+ */
+
+namespace UtilDateTime\Module;
+
+use Codeception\Module;
+
+class Unit extends Module
+{
+}
diff --git a/Bundles/UtilDateTime/tests/_support/UnitTester.php b/Bundles/UtilDateTime/tests/_support/UnitTester.php
new file mode 100644
index 0000000..dd8de7e
--- /dev/null
+++ b/Bundles/UtilDateTime/tests/_support/UnitTester.php
@@ -0,0 +1,30 @@
+<?php
+namespace UtilDateTime;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class UnitTester extends Actor
+{
+
+    use _generated\UnitTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/UtilEncoding/tests/_support/Module/Functional.php b/Bundles/UtilEncoding/tests/_support/Module/Functional.php
index cb7ca61..cb46d2a 100644
--- a/Bundles/UtilEncoding/tests/_support/Module/Functional.php
+++ b/Bundles/UtilEncoding/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace UtilEncoding\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -65,8 +37,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestId.php b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestId.php
new file mode 100644
index 0000000..4124da2
--- /dev/null
+++ b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestId.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * Copyright © 2017-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilNetwork\Model\Request;
+
+class RequestId implements RequestIdInterface
+{
+
+    const REQUEST_ID_HEADER_KEY = 'HTTP_X_REQUEST_ID';
+
+    /**
+     * @var string
+     */
+    protected static $requestId;
+
+    /**
+     * @return string
+     */
+    public function getRequestId()
+    {
+        if (!static::$requestId) {
+            static::$requestId = $this->createRequestId();
+        }
+
+        return static::$requestId;
+    }
+
+    /**
+     * @return string
+     */
+    protected function createRequestId()
+    {
+        if (isset($_SERVER[static::REQUEST_ID_HEADER_KEY])) {
+            return $_SERVER[static::REQUEST_ID_HEADER_KEY];
+        }
+
+        $requestId = $this->generateRandomString(8);
+
+        return $requestId;
+    }
+
+    /**
+     * @param int $length
+     *
+     * @return string
+     */
+    protected function generateRandomString($length = 32)
+    {
+        $tokenLength = $length / 2;
+        $token = bin2hex(random_bytes($tokenLength));
+
+        if (strlen($token) !== $length) {
+            $token = str_pad($token, $length, '0');
+        }
+
+        return $token;
+    }
+
+}
diff --git a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestIdInterface.php b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestIdInterface.php
new file mode 100644
index 0000000..cc8e4d9
--- /dev/null
+++ b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/Model/Request/RequestIdInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2017-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilNetwork\Model\Request;
+
+interface RequestIdInterface
+{
+
+    /**
+     * @return string
+     */
+    public function getRequestId();
+
+}
diff --git a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkService.php b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkService.php
index 5e9167b..4887468 100644
--- a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkService.php
+++ b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkService.php
@@ -16,7 +16,6 @@ class UtilNetworkService extends AbstractService implements UtilNetworkServiceIn
 {
 
     /**
-     *
      * Specification:
      *  - Get current running script hostname
      *
@@ -31,4 +30,15 @@ class UtilNetworkService extends AbstractService implements UtilNetworkServiceIn
             ->getHostname();
     }
 
+    /**
+     * Specification:
+     *  - Get string to follow requests between applications
+     *
+     * @return string
+     */
+    public function getRequestId()
+    {
+        return $this->getFactory()->createRequestId()->getRequestId();
+    }
+
 }
diff --git a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceFactory.php b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceFactory.php
index 30a2729..c77dc14 100644
--- a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceFactory.php
+++ b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceFactory.php
@@ -8,6 +8,7 @@ namespace Spryker\Service\UtilNetwork;
 
 use Spryker\Service\Kernel\AbstractServiceFactory;
 use Spryker\Service\UtilNetwork\Model\Host;
+use Spryker\Service\UtilNetwork\Model\Request\RequestId;
 
 class UtilNetworkServiceFactory extends AbstractServiceFactory
 {
@@ -20,4 +21,12 @@ class UtilNetworkServiceFactory extends AbstractServiceFactory
         return new Host();
     }
 
+    /**
+     * @return \Spryker\Service\UtilNetwork\Model\Request\RequestIdInterface
+     */
+    public function createRequestId()
+    {
+        return new RequestId();
+    }
+
 }
diff --git a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceInterface.php b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceInterface.php
index fec1629..7b468f9 100644
--- a/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceInterface.php
+++ b/Bundles/UtilNetwork/src/Spryker/Service/UtilNetwork/UtilNetworkServiceInterface.php
@@ -9,7 +9,6 @@ interface UtilNetworkServiceInterface
 {
 
     /**
-     *
      * Specification:
      *  - Get current running script hostname
      *
@@ -19,4 +18,12 @@ interface UtilNetworkServiceInterface
      */
     public function getHostName();
 
+    /**
+     * Specification:
+     *  - Get string to follow requests between applications
+     *
+     * @return string
+     */
+    public function getRequestId();
+
 }
diff --git a/Bundles/UtilNetwork/tests/Unit/Spryker/Service/UtilNetwork/Model/Request/RequestIdTest.php b/Bundles/UtilNetwork/tests/Unit/Spryker/Service/UtilNetwork/Model/Request/RequestIdTest.php
new file mode 100644
index 0000000..ffffc20
--- /dev/null
+++ b/Bundles/UtilNetwork/tests/Unit/Spryker/Service/UtilNetwork/Model/Request/RequestIdTest.php
@@ -0,0 +1,69 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilNetwork\Model\Request;
+
+use PHPUnit_Framework_TestCase;
+use ReflectionClass;
+use Spryker\Service\UtilNetwork\Model\Request\RequestId;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilNetwork
+ * @group Model
+ * @group Request
+ * @group RequestIdTest
+ */
+class RequestIdTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function setUp()
+    {
+        $this->resetRequestIdHandler();
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetRequestIdShouldReturnSameRequestId()
+    {
+        $this->assertSame(
+            (new RequestId())->getRequestId(),
+            (new RequestId())->getRequestId()
+        );
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetRequestIdShouldReturnGivenRequestId()
+    {
+        $_SERVER[RequestId::REQUEST_ID_HEADER_KEY] = 'requestId';
+
+        $this->assertSame(
+            'requestId',
+            (new RequestId())->getRequestId()
+        );
+    }
+
+    /**
+     * @return void
+     */
+    protected function resetRequestIdHandler()
+    {
+        $reflectionClass = new ReflectionClass(RequestId::class);
+        $reflectionProperty = $reflectionClass->getProperty('requestId');
+        $reflectionProperty->setAccessible(true);
+        $reflectionProperty->setValue(null);
+    }
+
+}
diff --git a/Bundles/UtilNetwork/tests/_support/Module/Functional.php b/Bundles/UtilNetwork/tests/_support/Module/Functional.php
index 1cd7a30..f2d920c 100644
--- a/Bundles/UtilNetwork/tests/_support/Module/Functional.php
+++ b/Bundles/UtilNetwork/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace UtilNetwork\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -65,8 +37,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/UtilSanitize/tests/_support/Module/Functional.php b/Bundles/UtilSanitize/tests/_support/Module/Functional.php
index dbddfa6..b19c611 100644
--- a/Bundles/UtilSanitize/tests/_support/Module/Functional.php
+++ b/Bundles/UtilSanitize/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace UtilSanitize\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -65,8 +37,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparator.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparator.php
new file mode 100644
index 0000000..c114eb9
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparator.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Filter;
+
+class CamelCaseToSeparator implements CamelCaseToSeparatorInterface
+{
+
+    /**
+     * @param string $string
+     * @param string $separator
+     *
+     * @return string
+     */
+    public function filter($string, $separator = '-')
+    {
+        return strtolower(preg_replace('/([a-z])([A-Z])/', '$1' . addcslashes($separator, '$') . '$2', $string));
+    }
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorInterface.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorInterface.php
new file mode 100644
index 0000000..f5a9789
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorInterface.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Filter;
+
+interface CamelCaseToSeparatorInterface
+{
+
+    /**
+     * @param string $string
+     * @param string $separator
+     *
+     * @return string
+     */
+    public function filter($string, $separator = '-');
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCase.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCase.php
new file mode 100644
index 0000000..d782bc2
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCase.php
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Filter;
+
+class SeparatorToCamelCase implements SeparatorToCamelCaseInterface
+{
+
+    /**
+     * @param string $string
+     * @param string $separator
+     * @param bool $upperCaseFirst
+     *
+     * @return string
+     */
+    public function filter($string, $separator = '-', $upperCaseFirst = false)
+    {
+        // This should be the fastest solution compared to
+        // any preg_*() or array_map() solution
+        $explodedString = explode($separator, $string);
+
+        $result = ($upperCaseFirst) ? '' : array_shift($explodedString);
+
+        foreach ($explodedString as $part) {
+            $result .= ucfirst($part);
+        }
+
+        return $result;
+    }
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseInterface.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseInterface.php
new file mode 100644
index 0000000..e353712
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseInterface.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Filter;
+
+interface SeparatorToCamelCaseInterface
+{
+
+    /**
+     * @param string $string
+     * @param string $separator
+     * @param bool $upperCaseFirst
+     *
+     * @return string
+     */
+    public function filter($string, $separator = '-', $upperCaseFirst = false);
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Hash.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Hash.php
new file mode 100644
index 0000000..037d4ad
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Hash.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model;
+
+class Hash implements HashInterface
+{
+
+    const SHA256 = 'sha256';
+    const SHA512 = 'sha512';
+    const MD5 = 'md5';
+
+    /**
+     * @param mixed $value
+     * @param string $algorithm
+     *
+     * @return string
+     */
+    public function hashValue($value, $algorithm)
+    {
+        return hash($algorithm, $value);
+    }
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/HashInterface.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/HashInterface.php
new file mode 100644
index 0000000..8ab18f2
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/HashInterface.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model;
+
+interface HashInterface
+{
+
+    /**
+     * @param mixed $value
+     * @param string $algorithm
+     *
+     * @return string
+     */
+    public function hashValue($value, $algorithm);
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/Token.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/Token.php
new file mode 100644
index 0000000..1f06c9a
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/Token.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Token;
+
+class Token implements TokenInterface
+{
+
+    /**
+     * @param string $rawToken
+     *
+     * @return string
+     */
+    public function generate($rawToken)
+    {
+        return base64_encode(password_hash($rawToken, PASSWORD_DEFAULT));
+    }
+
+    /**
+     * @param string $rawToken
+     * @param string $hash
+     *
+     * @return bool
+     */
+    public function check($rawToken, $hash)
+    {
+        return password_verify($rawToken, base64_decode($hash));
+    }
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/TokenInterface.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/TokenInterface.php
new file mode 100644
index 0000000..262fcf2
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Token/TokenInterface.php
@@ -0,0 +1,28 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Token;
+
+interface TokenInterface
+{
+
+    /**
+     * @param string $rawToken
+     *
+     * @return string
+     */
+    public function generate($rawToken);
+
+    /**
+     * @param string $rawToken
+     * @param string $token
+     *
+     * @return bool
+     */
+    public function check($rawToken, $token);
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/Url.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/Url.php
new file mode 100644
index 0000000..ef30c33
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/Url.php
@@ -0,0 +1,480 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Url;
+
+/**
+ * Parses and generates URLs based on URL parts. In favor of performance, URL parts are not validated.
+ */
+class Url
+{
+
+    const SCHEME = 'scheme';
+    const HOST = 'host';
+    const PORT = 'port';
+    const USER = 'user';
+    const PASS = 'pass';
+    const PATH = 'path';
+    const QUERY = 'query';
+    const FRAGMENT = 'fragment';
+
+    /**
+     * @var string
+     */
+    protected $scheme;
+
+    /**
+     * @var string
+     */
+    protected $host;
+
+    /**
+     * @var int
+     */
+    protected $port;
+
+    /**
+     * @var string
+     */
+    protected $username;
+
+    /**
+     * @var string
+     */
+    protected $password;
+
+    /**
+     * @var string
+     */
+    protected $path = '';
+
+    /**
+     * @var array
+     */
+    protected $query = [];
+
+    /**
+     * @var string
+     */
+    protected $fragment;
+
+    /**
+     * Factory method to create a new URL from a complete URL string
+     *
+     * @param string $url Full URL used to create a Url object
+     *
+     * @throws \Spryker\Service\UtilText\Model\Url\UrlInvalidException
+     *
+     * @return $this
+     */
+    public static function parse($url)
+    {
+        static $defaults = [
+            self::SCHEME => null,
+            self::HOST => null,
+            self::PORT => null,
+            self::USER => null,
+            self::PASS => null,
+            self::PATH => null,
+            self::QUERY => null,
+            self::FRAGMENT => null,
+        ];
+
+        $parts = parse_url($url);
+        if ($parts === false) {
+            throw new UrlInvalidException('Was unable to parse malformed URL: ' . $url);
+        }
+
+        $parts += $defaults;
+
+        return new static($parts);
+    }
+
+    /**
+     * Factory method to create an internal URL from a path string
+     *
+     * @param string $url
+     * @param array $query
+     * @param array $options
+     *
+     * @return $this
+     */
+    public static function generate($url, array $query = [], array $options = [])
+    {
+        $parts = [
+            self::PATH => $url,
+            self::QUERY => $query,
+        ] + $options;
+
+        return new static($parts);
+    }
+
+    /**
+     * @param array $url
+     */
+    public function __construct(array $url = [])
+    {
+        $this->fromArray($url);
+    }
+
+    /**
+     * @return string
+     */
+    public function __toString()
+    {
+        return $this->build();
+    }
+
+    /**
+     * @param array $url
+     *
+     * @return void
+     */
+    public function fromArray(array $url = [])
+    {
+        if (isset($url[self::QUERY]) && !is_array($url[self::QUERY])) {
+            $url[self::QUERY] = self::parseQuery($url[self::QUERY]);
+        }
+
+        foreach ($url as $k => $v) {
+            $this->{$k} = $v;
+        }
+    }
+
+    /**
+     * Build a URL. The generated URL will be a relative URL if a scheme or host are not provided.
+     *
+     * @return string
+     */
+    public function build()
+    {
+        $parts = $this->toArray();
+        $url = $this->buildBaseUrl($parts);
+
+        $url = $this->addPathComponent($url, $parts);
+        $url = $this->addQueryComponent($url, $parts);
+        $url = $this->addFragmentComponent($url, $parts);
+
+        return $url;
+    }
+
+    /**
+     * @return string
+     */
+    public function buildEscaped()
+    {
+        return $this->escape($this->build());
+    }
+
+    /**
+     * @param string $url
+     *
+     * @return string
+     */
+    protected function escape($url)
+    {
+        $charset = mb_internal_encoding();
+        if ($charset === null) {
+            $charset = 'UTF-8';
+        }
+
+        return htmlspecialchars($url, ENT_QUOTES | ENT_SUBSTITUTE, $charset);
+    }
+
+    /**
+     * @return array
+     */
+    public function toArray()
+    {
+        return [
+            self::SCHEME => $this->scheme,
+            self::USER => $this->username,
+            self::PASS => $this->password,
+            self::HOST => $this->host,
+            self::PORT => $this->port,
+            self::PATH => $this->path,
+            self::QUERY => $this->query ?: [],
+            self::FRAGMENT => $this->fragment,
+        ];
+    }
+
+    /**
+     * @param array|string $path
+     *
+     * @return $this
+     */
+    public function setPath($path)
+    {
+        static $pathReplace = [' ' => '%20', '?' => '%3F'];
+        if (is_array($path)) {
+            $path = '/' . implode('/', $path);
+        }
+
+        $this->path = strtr($path, $pathReplace);
+
+        return $this;
+    }
+
+    /**
+     * Normalize the URL so that double slashes and relative paths are removed
+     *
+     * @return $this
+     */
+    public function normalizePath()
+    {
+        if (!$this->path || $this->path === '/' || $this->path === '*') {
+            return $this;
+        }
+
+        $results = [];
+        $segments = $this->getPathSegments();
+        foreach ($segments as $segment) {
+            if ($segment === '..') {
+                array_pop($results);
+            } elseif ($segment !== '.' && $segment !== '') {
+                $results[] = $segment;
+            }
+        }
+
+        // Combine the normalized parts and add the leading slash if needed
+        $this->path = ($this->path[0] === '/' ? '/' : '') . implode('/', $results);
+
+        return $this;
+    }
+
+    /**
+     * Add a relative path to the currently set path
+     *
+     * @param array|string $relativePath
+     *
+     * @return $this
+     */
+    public function addPath($relativePath)
+    {
+        if (is_string($relativePath)) {
+            $relativePath = explode('/', $relativePath);
+        }
+
+        // Add a leading slash if needed
+        $path = $this->getPath();
+        foreach ($relativePath as $element) {
+            if ($element !== '') {
+                $path .= '/' . $element;
+            }
+        }
+
+        return $this->setPath($path);
+    }
+
+    /**
+     * Get the path part of the URL
+     *
+     * @return string
+     */
+    public function getPath()
+    {
+        return $this->path;
+    }
+
+    /**
+     * @param string $scheme
+     *
+     * @return $this
+     */
+    public function setScheme($scheme)
+    {
+        $this->scheme = $scheme;
+
+        return $this;
+    }
+
+    /**
+     * @param int $port
+     *
+     * @return $this
+     */
+    public function setPort($port)
+    {
+        $this->port = $port;
+
+        return $this;
+    }
+
+    /**
+     * @param string $host
+     *
+     * @return $this
+     */
+    public function setHost($host)
+    {
+        $this->host = $host;
+
+        return $this;
+    }
+
+    /**
+     * Get the path segments of the URL as an array
+     *
+     * @return array
+     */
+    public function getPathSegments()
+    {
+        return array_slice(explode('/', $this->getPath()), 1);
+    }
+
+    /**
+     * Get the query part of the URL as a QueryString object
+     *
+     * @return array
+     */
+    public function getQuery()
+    {
+        return $this->query;
+    }
+
+    /**
+     * @param string $key
+     * @param string $value
+     *
+     * @return $this
+     */
+    public function addQuery($key, $value)
+    {
+        $this->query[$key] = $value;
+
+        return $this;
+    }
+
+    /**
+     * Set the query part of the URL
+     *
+     * @param array $query Query to set
+     *
+     * @return $this
+     */
+    public function setQuery(array $query)
+    {
+        $this->query = $query;
+
+        return $this;
+    }
+
+    /**
+     * @param string $query
+     *
+     * @return array
+     */
+    public static function parseQuery($query)
+    {
+        parse_str($query, $array);
+
+        return $array;
+    }
+
+    /**
+     * @param string $value
+     *
+     * @return string
+     */
+    protected function encodeQuery($value)
+    {
+        return urlencode($value);
+    }
+
+    /**
+     * @param array $parts
+     *
+     * @return string
+     */
+    protected function buildBaseUrl(array $parts)
+    {
+        $url = $scheme = '';
+
+        if (isset($parts[self::SCHEME])) {
+            $scheme = $parts[self::SCHEME];
+            $url .= $scheme . ':';
+        }
+
+        if (isset($parts[self::HOST])) {
+            $url .= '//';
+            if (isset($parts[self::USER])) {
+                $url .= $parts[self::USER];
+                if (isset($parts[self::PASS])) {
+                    $url .= ':' . $parts[self::PASS];
+                }
+                $url .= '@';
+            }
+
+            $url .= $parts[self::HOST];
+
+            // Only include the port if it is not the default port of the scheme
+            if (isset($parts[self::PORT])
+                && !(($scheme === 'http' && $parts[self::PORT] === 80) || ($scheme === 'https' && $parts[self::PORT] === 443))
+            ) {
+                $url .= ':' . $parts[self::PORT];
+            }
+        }
+
+        return $url;
+    }
+
+    /**
+     * @param string $url
+     * @param array $parts
+     *
+     * @return string
+     */
+    protected function addPathComponent($url, array $parts)
+    {
+        if (isset($parts[self::PATH]) && strlen($parts[self::PATH]) !== 0) {
+            // Always ensure that the path begins with '/' if set and something is before the path
+            if ($url && $parts[self::PATH][0] !== '/' && mb_substr($url, -1) !== '/') {
+                $url .= '/';
+            }
+            $url .= $parts[self::PATH];
+        } else {
+            $url .= '/';
+        }
+
+        return $url;
+    }
+
+    /**
+     * @param string $url
+     * @param array $parts
+     *
+     * @return string
+     */
+    protected function addQueryComponent($url, array $parts)
+    {
+        if (!empty($parts[self::QUERY])) {
+            $q = [];
+            foreach ($parts[self::QUERY] as $k => $v) {
+                $q[] = $this->encodeQuery($k) . '=' . $this->encodeQuery($v);
+            }
+            $url .= '?' . implode('&', $q);
+        }
+
+        return $url;
+    }
+
+    /**
+     * @param string $url
+     * @param array $parts
+     *
+     * @return string
+     */
+    protected function addFragmentComponent($url, array $parts)
+    {
+        if (isset($parts[self::FRAGMENT])) {
+            $url .= '#' . $parts[self::FRAGMENT];
+        }
+
+        return $url;
+    }
+
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/UrlInvalidException.php b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/UrlInvalidException.php
new file mode 100644
index 0000000..3035a5c
--- /dev/null
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/Model/Url/UrlInvalidException.php
@@ -0,0 +1,14 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Service\UtilText\Model\Url;
+
+use Exception;
+
+class UrlInvalidException extends Exception
+{
+}
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextService.php b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextService.php
index f60900a..fdbb2c8 100644
--- a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextService.php
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextService.php
@@ -33,7 +33,6 @@ class UtilTextService extends AbstractService implements UtilTextServiceInterfac
     }
 
     /**
-     *
      * Specification:
      * - Generates random string for given length value
      *
@@ -50,4 +49,69 @@ class UtilTextService extends AbstractService implements UtilTextServiceInterfac
             ->generateRandomString($length);
     }
 
+    /**
+     * Specification:
+     * - Generates hash from value by specified algorithm
+     *
+     * @api
+     *
+     * @param mixed $value
+     * @param string $algorithm
+     *
+     * @return string
+     */
+    public function hashValue($value, $algorithm)
+    {
+        return $this->getFactory()->createHash()->hashValue($value, $algorithm);
+    }
+
+    /**
+     * Specification:
+     * - Converts a camel cased string into a string where every word is linked with the other by specified separator.
+     *
+     * @api
+     *
+     * @param string $string
+     * @param string $separator
+     *
+     * @return string
+     */
+    public function camelCaseToSeparator($string, $separator = '-')
+    {
+        return $this->getFactory()->createCamelCaseToSeparator()->filter($string, $separator);
+    }
+
+    /**
+     * Specification:
+     * - Converts a string with a given separator into a camel cased string.
+     *
+     * @api
+     *
+     * @param string $string
+     * @param string $separator
+     * @param bool $upperCaseFirst
+     *
+     * @return string
+     */
+    public function separatorToCamelCase($string, $separator = '-', $upperCaseFirst = false)
+    {
+        return $this->getFactory()->createSeparatorToCamelCase()->filter($string, $separator, $upperCaseFirst);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function generateToken($rawToken)
+    {
+        return $this->getFactory()->createToken()->generate($rawToken);
+    }
+
+    /**
+     * {@inheritdoc}
+     */
+    public function checkToken($rawToken, $hash)
+    {
+        return $this->getFactory()->createToken()->check($rawToken, $hash);
+    }
+
 }
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceFactory.php b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceFactory.php
index 9ac659f..2f9c001 100644
--- a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceFactory.php
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceFactory.php
@@ -8,8 +8,12 @@
 namespace Spryker\Service\UtilText;
 
 use Spryker\Service\Kernel\AbstractServiceFactory;
+use Spryker\Service\UtilText\Model\Filter\CamelCaseToSeparator;
+use Spryker\Service\UtilText\Model\Filter\SeparatorToCamelCase;
+use Spryker\Service\UtilText\Model\Hash;
 use Spryker\Service\UtilText\Model\Slug;
 use Spryker\Service\UtilText\Model\StringGenerator;
+use Spryker\Service\UtilText\Model\Token\Token;
 
 class UtilTextServiceFactory extends AbstractServiceFactory
 {
@@ -30,4 +34,44 @@ class UtilTextServiceFactory extends AbstractServiceFactory
         return new StringGenerator();
     }
 
+    /**
+     * @return \Spryker\Service\UtilText\Model\HashInterface
+     */
+    public function createHash()
+    {
+        return new Hash();
+    }
+
+    /**
+     * @return \Spryker\Service\UtilText\Model\Filter\CamelCaseToSeparatorInterface
+     */
+    public function createCamelCaseToSeparator()
+    {
+        return new CamelCaseToSeparator();
+    }
+
+    /**
+     * @return \Spryker\Service\UtilText\Model\Filter\SeparatorToCamelCaseInterface
+     */
+    public function createSeparatorToCamelCase()
+    {
+        return new SeparatorToCamelCase();
+    }
+
+    /**
+     * @return \Spryker\Service\UtilText\Model\Token\TokenInterface
+     */
+    public function createToken()
+    {
+        return new Token();
+    }
+
+    /**
+     * @return \Spryker\Service\UtilText\Model\Token\TokenInterface
+     */
+    public function createUrl()
+    {
+        return new Token();
+    }
+
 }
diff --git a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceInterface.php b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceInterface.php
index 3ec9b12..85352ca 100644
--- a/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceInterface.php
+++ b/Bundles/UtilText/src/Spryker/Service/UtilText/UtilTextServiceInterface.php
@@ -33,4 +33,62 @@ interface UtilTextServiceInterface
      */
     public function generateRandomString($length);
 
+    /**
+     * @param string $algorithm
+     * @param mixed $value
+     *
+     * @return string
+     */
+    public function hashValue($algorithm, $value);
+
+    /**
+     * Specification:
+     * - Converts a camel cased string into a string where every word is linked with the other by specified separator.
+     *
+     * @api
+     *
+     * @param string $string
+     * @param string $separator
+     *
+     * @return string
+     */
+    public function camelCaseToSeparator($string, $separator = '-');
+
+    /**
+     * Specification:
+     * - Converts a string with a given separator into a camel cased string.
+     *
+     * @api
+     *
+     * @param string $string
+     * @param string $separator
+     * @param bool $upperCaseFirst
+     *
+     * @return string
+     */
+    public function separatorToCamelCase($string, $separator = '-', $upperCaseFirst = false);
+
+    /**
+     * Specification:
+     * - Generates a token from given string.
+     *
+     * @api
+     *
+     * @param string $rawToken
+     *
+     * @return string
+     */
+    public function generateToken($rawToken);
+
+    /**
+     * Specification:
+     * - Checks if a given token is valid.
+     *
+     * @param string $rawToken
+     * @param string $hash
+     *
+     * @return bool
+     */
+    public function checkToken($rawToken, $hash);
+
 }
diff --git a/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorTest.php b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorTest.php
new file mode 100644
index 0000000..d055a76
--- /dev/null
+++ b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/CamelCaseToSeparatorTest.php
@@ -0,0 +1,55 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilText\Model\Filter;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilText\Model\Filter\CamelCaseToSeparator;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilText
+ * @group Model
+ * @group Filter
+ * @group CamelCaseToSeparatorTest
+ */
+class CamelCaseToSeparatorTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return array
+     */
+    public function dataProvider()
+    {
+        return [
+            ['camelCase', '-', 'camel-case'],
+            ['camelCase', '_', 'camel_case'],
+            ['camelCase', '\'', 'camel\'case'],
+            ['camelCase', '@', 'camel@case'],
+            ['camelCase', '$1', 'camel$1case'],
+            ['camelCase', 'asd', 'camelasdcase'],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProvider
+     *
+     * @param string $camelCase
+     * @param string $separator
+     * @param string $expected
+     *
+     * @return void
+     */
+    public function testWithDifferentSeparator($camelCase, $separator, $expected)
+    {
+        $filter = new CamelCaseToSeparator();
+        $this->assertEquals($expected, $filter->filter($camelCase, $separator));
+    }
+
+}
diff --git a/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseTest.php b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseTest.php
new file mode 100644
index 0000000..c64e5b7
--- /dev/null
+++ b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Filter/SeparatorToCamelCaseTest.php
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilText\Model\Filter;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilText\Model\Filter\SeparatorToCamelCase;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilText
+ * @group Model
+ * @group Filter
+ * @group SeparatorToCamelCaseTest
+ */
+class SeparatorToCamelCaseTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return array
+     */
+    public function dataProvider()
+    {
+        return [
+            ['camelCase', '-', 'camel-case', false],
+            ['camelCase', '_', 'camel_case', false],
+            ['camelCase', '\'', 'camel\'case', false],
+            ['camelCase', '@', 'camel@case', false],
+            ['camelCase', '$1', 'camel$1case', false],
+            ['camelCase', 'asd', 'camelasdcase', false],
+            ['CamelCase', '-', 'camel-case', true],
+            ['CamelCase', '_', 'camel_case', true],
+            ['CamelCase', '\'', 'camel\'case', true],
+            ['CamelCase', '@', 'camel@case', true],
+            ['CamelCase', '$1', 'camel$1case', true],
+            ['CamelCase', 'asd', 'camelasdcase', true],
+        ];
+    }
+
+    /**
+     * @dataProvider dataProvider
+     *
+     * @param string $expected
+     * @param string $separator
+     * @param string $string
+     * @param bool $upperCase
+     *
+     * @return void
+     */
+    public function testWithDifferentSeparator($expected, $separator, $string, $upperCase)
+    {
+        $filter = new SeparatorToCamelCase();
+        $this->assertEquals($expected, $filter->filter($string, $separator, $upperCase));
+    }
+
+}
diff --git a/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Token/TokenTest.php b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Token/TokenTest.php
new file mode 100644
index 0000000..d145a93
--- /dev/null
+++ b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Token/TokenTest.php
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilText\Model\Token;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilText\Model\Token\Token;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilText
+ * @group Model
+ * @group Token
+ * @group TokenTest
+ */
+class TokenTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testGenerateTokenMustReturnString()
+    {
+        $tokenService = new Token();
+        $token = $tokenService->generate('token');
+
+        $this->assertInternalType('string', $token);
+    }
+
+    /**
+     * @return void
+     */
+    public function testCheckTokenMustReturnTrueIfTokenIsValid()
+    {
+        $tokenService = new Token();
+        $rawToken = 'token';
+        $token = $tokenService->generate($rawToken);
+
+        $isValid = $tokenService->check($rawToken, $token);
+        $this->assertTrue($isValid);
+    }
+
+    /**
+     * @return void
+     */
+    public function testCheckTokenMustReturnFalseIfTokenIsInValid()
+    {
+        $tokenService = new Token();
+        $rawToken = 'token';
+        $token = $tokenService->generate($rawToken);
+
+        $isValid = $tokenService->check('wrong' . $rawToken, $token);
+        $this->assertFalse($isValid);
+    }
+
+}
diff --git a/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Url/UrlTest.php b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Url/UrlTest.php
new file mode 100644
index 0000000..c59ca3e
--- /dev/null
+++ b/Bundles/UtilText/tests/Unit/Spryker/Service/UtilText/Model/Url/UrlTest.php
@@ -0,0 +1,203 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Service\UtilText\Model\Url;
+
+use Codeception\TestCase\Test;
+use Spryker\Service\UtilText\Model\Url\Url;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Service
+ * @group UtilText
+ * @group Model
+ * @group Url
+ * @group UrlTest
+ */
+class UrlTest extends Test
+{
+
+    /**
+     * @return void
+     */
+    public function testUrlConstruct()
+    {
+        $url = new Url(['path' => '/foo/bar']);
+
+        $this->assertSame('/foo/bar', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testToString()
+    {
+        $url = new Url(['path' => '/foo/bar']);
+
+        $this->assertSame('/foo/bar', (string)$url);
+    }
+
+    /**
+     * @return void
+     */
+    public function testToArray()
+    {
+        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y'], 'fragment' => 'z']);
+
+        $expected = [
+            'scheme' => null,
+            'user' => null,
+            'pass' => null,
+            'host' => null,
+            'port' => null,
+            'path' => '/foo/bar',
+            'query' => ['x' => 'y'],
+            'fragment' => 'z',
+        ];
+        $result = $url->toArray();
+        $this->assertSame($expected, $result);
+    }
+
+    /**
+     * @return void
+     */
+    public function testBuild()
+    {
+        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y'], 'fragment' => 'z']);
+
+        $this->assertSame('/foo/bar?x=y#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testBuildWithQueryAsString()
+    {
+        $url = new Url(['path' => '/foo/bar', 'query' => 'ö=ä', 'fragment' => 'z']);
+
+        $this->assertSame('/foo/bar?%C3%B6=%C3%A4#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testBuildEscaped()
+    {
+        $url = new Url(['path' => '/foo/bar', 'query' => ['x' => 'y', 'ö' => 'ä'], 'fragment' => 'z']);
+
+        $this->assertSame('/foo/bar?x=y&amp;%C3%B6=%C3%A4#z', $url->buildEscaped());
+    }
+
+    /**
+     * @return void
+     */
+    public function testParse()
+    {
+        $url = Url::parse('/foo/bar?q=a#z');
+
+        $this->assertSame('/foo/bar?q=a#z', (string)$url);
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetPathSegments()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'q=a', 'fragment' => 'x']);
+        $segments = $url->getPathSegments();
+        $this->assertSame(['foo', 'bar', 'baz'], $segments);
+    }
+
+    /**
+     * @return void
+     */
+    public function testNormalizePath()
+    {
+        $url = new Url(['path' => '/foo/bar/baz//abc/', 'query' => ['x' => 'y'], 'fragment' => 'z']);
+        $path = $url->normalizePath()->build();
+        $this->assertSame('/foo/bar/baz/abc?x=y#z', $path);
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetPathAsString()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
+        $url->setPath('/e/f');
+        $this->assertSame('/e/f?x=y#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetPathAsArray()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
+        $url->setPath(['e', 'f']);
+        $this->assertSame('/e/f?x=y#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testAddPathAsString()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
+        $url->addPath('/e/f/');
+
+        $this->assertSame('/foo/bar/baz/e/f?x=y#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testAddPathAsArray()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
+        $url->addPath(['e', 'f']);
+
+        $this->assertSame('/foo/bar/baz/e/f?x=y#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetQuery()
+    {
+        $url = new Url(['path' => '/foo/bar/baz', 'query' => 'x=y', 'fragment' => 'z']);
+        $url->addQuery('c', 'd');
+        $url->addQuery('e', 'f');
+        $this->assertSame('/foo/bar/baz?x=y&c=d&e=f#z', $url->build());
+    }
+
+    /**
+     * @return void
+     */
+    public function testEmpty()
+    {
+        $url = new Url();
+        $this->assertSame('/', $url->build(), 'Empty URL object must return homepage');
+    }
+
+    /**
+     * @return void
+     */
+    public function testFull()
+    {
+        $url = new Url();
+        $url->addQuery('x', 'y');
+
+        $url->setScheme('https');
+        $url->setHost('www.foobar.dev');
+        $url->setPort(81);
+
+        $this->assertSame('https://www.foobar.dev:81/?x=y', $url->build());
+    }
+
+}
diff --git a/Bundles/UtilText/tests/_support/Module/Functional.php b/Bundles/UtilText/tests/_support/Module/Functional.php
index 3f5d4d0..aeecbfb 100644
--- a/Bundles/UtilText/tests/_support/Module/Functional.php
+++ b/Bundles/UtilText/tests/_support/Module/Functional.php
@@ -8,37 +8,11 @@ namespace UtilText\Module;
 
 use Codeception\Module;
 use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
 
 class Functional extends Module
 {
 
     /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
      * @param \Codeception\TestCase $test
      *
      * @return void
@@ -47,8 +21,6 @@ class Functional extends Module
     {
         parent::_after($test);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
@@ -65,8 +37,6 @@ class Functional extends Module
     {
         parent::_failed($test, $fail);
 
-        Propel::getWriteConnection('zed')->rollBack();
-
         if (session_status() === PHP_SESSION_ACTIVE) {
             session_destroy();
         }
diff --git a/Bundles/Wishlist/composer.json b/Bundles/Wishlist/composer.json
index 6492633..af36158 100644
--- a/Bundles/Wishlist/composer.json
+++ b/Bundles/Wishlist/composer.json
@@ -10,11 +10,13 @@
     "spryker/customer": "^2.0.0 || ^3.0.0",
     "spryker/kernel": "^2.0.0",
     "spryker/product": "^4.1.0",
-    "spryker/propel": "^2.0.0",
+    "spryker/propel-orm": "^1.0.0",
     "spryker/zed-request": "^2.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
+    "spryker/silex": "*",
     "spryker/testify": "*"
   },
   "description": "Wishlist bundle",
diff --git a/Bundles/Wishlist/src/Spryker/Zed/Wishlist/Business/Model/Writer.php b/Bundles/Wishlist/src/Spryker/Zed/Wishlist/Business/Model/Writer.php
index 0c7759f..f847236 100644
--- a/Bundles/Wishlist/src/Spryker/Zed/Wishlist/Business/Model/Writer.php
+++ b/Bundles/Wishlist/src/Spryker/Zed/Wishlist/Business/Model/Writer.php
@@ -11,7 +11,7 @@ use Generated\Shared\Transfer\WishlistItemTransfer;
 use Generated\Shared\Transfer\WishlistTransfer;
 use Orm\Zed\Wishlist\Persistence\SpyWishlist;
 use Orm\Zed\Wishlist\Persistence\SpyWishlistQuery;
-use Spryker\Zed\Propel\Business\Runtime\ActiveQuery\Criteria;
+use Spryker\Zed\PropelOrm\Business\Runtime\ActiveQuery\Criteria;
 use Spryker\Zed\Wishlist\Business\Exception\WishlistExistsException;
 use Spryker\Zed\Wishlist\Persistence\WishlistQueryContainerInterface;
 
diff --git a/Bundles/ZedNavigation/.coveralls.yml b/Bundles/ZedNavigation/.coveralls.yml
new file mode 100644
index 0000000..be4561e
--- /dev/null
+++ b/Bundles/ZedNavigation/.coveralls.yml
@@ -0,0 +1,3 @@
+coverage_clover: tests/_output/coverage.xml
+json_path: tests/_output/coveralls-upload.json
+service_name: travis-ci
diff --git a/Bundles/ZedNavigation/.gitattributes b/Bundles/ZedNavigation/.gitattributes
new file mode 100644
index 0000000..3f00241
--- /dev/null
+++ b/Bundles/ZedNavigation/.gitattributes
@@ -0,0 +1,30 @@
+# Set the default behavior, in case people don't have core.autocrlf set.
+* eol=lf
+* text=auto
+
+# Denote all files that are truly binary and should not be modified.
+*.png binary
+*.jpg binary
+*.gif binary
+*.jpeg binary
+*.zip binary
+*.phar binary
+*.ttf binary
+*.woff binary
+*.woff2 binary
+*.eot binary
+*.ico binary
+*.mo binary
+*.pdf binary
+*.xsd binary
+*.ts binary
+*.exe binary
+
+# Remove files for archives generated using `git archive`
+codeception.yml export-ignore
+dependency.json export-ignore
+.coveralls.yml export-ignore
+.travis.yml export-ignore
+.editorconfig export-ignore
+.gitattributes export-ignore
+.gitignore export-ignore
diff --git a/Bundles/ZedNavigation/.gitignore b/Bundles/ZedNavigation/.gitignore
new file mode 100644
index 0000000..1b7fde3
--- /dev/null
+++ b/Bundles/ZedNavigation/.gitignore
@@ -0,0 +1,16 @@
+# IDEs
+/.idea
+/.project
+/nbproject
+/.buildpath
+/.settings
+*.sublime-*
+*.AppleDouble
+*.AppleDB
+*.AppleDesktop
+
+# OS
+.DS_Store
+
+/tests/_output/*
+!/tests/_output/.gitkeep
diff --git a/Bundles/ZedNavigation/.travis.yml b/Bundles/ZedNavigation/.travis.yml
new file mode 100644
index 0000000..e2bfa9e
--- /dev/null
+++ b/Bundles/ZedNavigation/.travis.yml
@@ -0,0 +1,29 @@
+language: php
+
+php:
+  - 5.6
+  - 7.0
+
+cache:
+  directories:
+    - vendor
+    - $HOME/.composer/cache
+
+env:
+  global:
+    - APPLICATION_ENV=development
+    - APPLICATION_STORE=DE
+
+install:
+  - composer self-update && composer --version
+  - composer install --no-interaction --prefer-dist
+
+script:
+  - vendor/bin/phpcs src --standard=vendor/spryker/code-sniffer/Spryker/ruleset.xml -v
+  - vendor/bin/codecept run --env isolated --coverage-xml
+
+after_success:
+  - vendor/bin/coveralls -vvv
+
+notifications:
+  email: false
diff --git a/Bundles/ZedNavigation/CHANGELOG.md b/Bundles/ZedNavigation/CHANGELOG.md
new file mode 100644
index 0000000..0e3d5ab
--- /dev/null
+++ b/Bundles/ZedNavigation/CHANGELOG.md
@@ -0,0 +1,3 @@
+# ZedNavigation Changelog
+
+[Release Changelog](https://github.com/spryker/ZedNavigation/releases)
diff --git a/Bundles/ZedNavigation/LICENSE b/Bundles/ZedNavigation/LICENSE
new file mode 100644
index 0000000..d376fd6
--- /dev/null
+++ b/Bundles/ZedNavigation/LICENSE
@@ -0,0 +1,40 @@
+SPRYKER SYSTEMS GMBH EVALUATION LICENSE AGREEMENT
+
+SPRYKER SYSTEMS GMBH, REGISTERED WITH THE COMMERCIAL REGISTER OF THE LOWER COURT OF HAMBURG UNDER HRB 134310
+(“WE” OR ”SPRYKER”)GRANTS YOU (THE “LICENSEE”) THE RIGHT TO USE THE SOFTWARE (AS DEFINED BELOW)
+UNDER THE PROVISIONS OF THIS EVALUATION LICENSE AGREEMENT (THE “AGREEMENT”).
+
+The “Software” includes any software owned and distributed by Spryker under this Agreement. The Software
+contains elements of open source components, to which different license terms apply respectively.
+These open source components are needed to be installed separately.
+
+Spryker grants to Licensee, during the 45-calendar-day period (the “Evaluation Period”) following the download of the Software,
+the nontransferable, nonexclusive limited, free of charge license to permit Licensee’s employees to internally use the Software
+to test and evaluate the Software in connection with potentially purchasing non-evaluation licenses to the Software.
+
+Licensee shall not (i) use the Software to set up a productive live system, for development purposes or any other purposes apart
+from evaluating the Software; (ii) copy any part of the Software except to make one copy for back-up purposes; (iii) distribute,
+disclose, market, rent, lease, or transfer the Software or act as a service bureau with respect to the Software; (iv) export the
+Software or install it in multiple locations; (v) disclose any confidential information provided by Spryker; (vi) modify or make
+derivative works of the Software; or (vii) allow others to make or obtain copies of the Software.
+
+THE SOFTWARE IS PROVIDED “AS-IS” AND WITHOUT WARRANTY OF ANY KIND. SPRYKER DISCLAIMS ALL WARRANTIES, EXPRESSED OR IMPLIED, INCLUDING
+BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, TITLE, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE. SPRYKER WILL NOT
+BE LIABLE FOR ANY DAMAGES ASSOCIATED WITH THE SOFTWARE, INCLUDING WITHOUT LIMITATION ORDINARY, INCIDENTAL, INDIRECT, OR CONSEQUENTIAL
+DAMAGES OF ANY KIND, INCLUDING BUT NOT LIMITED TO DAMAGES RELATING TO LOST DATA OR LOST PROFITS, EVEN IF SPRYKER HAS BEEN ADVISED OF
+THE POSSIBILITY OF SUCH DAMAGES.
+
+Licensee's license to use the Software shall terminate on the earlier of (i) the expiration of the Evaluation Period, or (ii) the date
+both parties enter into a definitive agreement for the provision by Spryker to Licensee of a non-evaluation license to the Software.
+Upon termination of the license as provided above, Licensee shall promptly destroy the Software and any back-up copy of the Software
+made during the Evaluation Period if Spryker and the Licensee have not agreed a non-evaluation license to the Software.
+
+This Agreement shall be governed by the laws of Germany to the exclusion of IPR (International Law) and the United Nations Convention
+on Contracts for the International Sale of Goods (CISG). The parties consent to the jurisdiction of the courts in Berlin (Germany).
+
+This Agreement is not assignable or transferable by Licensee and any attempt to do so is null and void.
+
+This Agreement constitutes the entire agreement between the parties concerning Licensee’s use of the Software. This Agreement supersedes
+any prior verbal understanding between the parties and any Licensee purchase order or other ordering document, regardless of whether such
+document is received by Spryker before or after execution of this Agreement. This Agreement may be amended only in a writing signed by
+an authorized officer of Spryker.
diff --git a/Bundles/ZedNavigation/README.md b/Bundles/ZedNavigation/README.md
new file mode 100644
index 0000000..e26c3d2
--- /dev/null
+++ b/Bundles/ZedNavigation/README.md
@@ -0,0 +1,14 @@
+# ZedNavigation Bundle
+[![Build Status](https://travis-ci.org/spryker/ZedNavigation.svg)](https://travis-ci.org/spryker/ZedNavigation)
+[![Coverage Status](https://coveralls.io/repos/github/spryker/ZedNavigation/badge.svg)](https://coveralls.io/github/spryker/ZedNavigation)
+[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/spryker/ZedNavigation/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/spryker/ZedNavigation/?branch=master)
+
+## Installation
+
+```
+composer require spryker/zed-navigation
+```
+
+## Documentation
+
+[Spryker Documentation](http://spryker.github.io)
diff --git a/Bundles/ZedNavigation/codeception.yml b/Bundles/ZedNavigation/codeception.yml
new file mode 100644
index 0000000..e56efc6
--- /dev/null
+++ b/Bundles/ZedNavigation/codeception.yml
@@ -0,0 +1,17 @@
+namespace: ZedNavigation
+actor: Tester
+paths:
+    tests: tests
+    log: tests/_output
+    data: tests/_data
+    support: tests/_support
+    envs: tests/_envs
+settings:
+    bootstrap: _bootstrap.php
+    suite_class: \PHPUnit_Framework_TestSuite
+    colors: true
+    memory_limit: 1024M
+    log: true
+coverage:
+    enabled: true
+    whitelist: { include: ['src/*.php'] }
diff --git a/Bundles/ZedNavigation/composer.json b/Bundles/ZedNavigation/composer.json
new file mode 100644
index 0000000..abb5499
--- /dev/null
+++ b/Bundles/ZedNavigation/composer.json
@@ -0,0 +1,45 @@
+{
+  "name": "spryker/zed-navigation",
+  "require": {
+    "spryker/kernel": "^2.0.0",
+    "spryker/symfony": "^2.0.0",
+    "spryker/url": "^2.0.0",
+    "spryker/util-encoding": "^1.0.0",
+    "spryker/zend": "^2.0.0"
+  },
+  "require-dev": {
+    "spryker/code-sniffer": "*",
+    "spryker/testify": "*"
+  },
+  "suggest": {
+    "spryker/silex": "If you want to use ServiceProvider you need to install spryker/silex."
+  },
+  "description": "ZedNavigation bundle",
+  "license": "proprietary",
+  "minimum-stability": "dev",
+  "prefer-stable": true,
+  "extra": {
+    "branch-alias": {
+      "dev-master": "2.0.x-dev"
+    }
+  },
+  "config": {
+    "sort-packages": true
+  },
+  "autoload": {
+    "psr-0": {
+      "Spryker": "src/"
+    }
+  },
+  "autoload-dev": {
+    "psr-0": {
+      "Unit": "tests/"
+    }
+  },
+  "repositories": [
+    {
+      "type": "composer",
+      "url": "https://code.spryker.com/repo/private"
+    }
+  ]
+}
diff --git a/Bundles/ZedNavigation/config/config_default-test.php b/Bundles/ZedNavigation/config/config_default-test.php
new file mode 100755
index 0000000..aa23b6e
--- /dev/null
+++ b/Bundles/ZedNavigation/config/config_default-test.php
@@ -0,0 +1,6 @@
+<?php
+
+use Spryker\Shared\ZedNavigation\ZedNavigationConstants;
+
+$config[ZedNavigationConstants::ZED_NAVIGATION_CACHE_ENABLED] = false;
+$config[ZedNavigationConstants::ZED_NAVIGATION_ENABLED] = false;
diff --git a/Bundles/ZedNavigation/src/Spryker/Shared/ZedNavigation/ZedNavigationConstants.php b/Bundles/ZedNavigation/src/Spryker/Shared/ZedNavigation/ZedNavigationConstants.php
new file mode 100644
index 0000000..c0c9648
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Shared/ZedNavigation/ZedNavigationConstants.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Shared\ZedNavigation;
+
+interface ZedNavigationConstants
+{
+
+    /**
+     * Specification:
+     * - If this is set to true, navigation will be loaded from cache.
+     * - Default is true, can be set to false in development or for testing.
+     *
+     * @api
+     */
+    const ZED_NAVIGATION_CACHE_ENABLED = 'ZED_NAVIGATION_CACHE_ENABLED';
+
+    const ZED_NAVIGATION_ENABLED = 'ZED_NAVIGATION_ENABLED';
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/AbstractZedNavigationCacheException.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/AbstractZedNavigationCacheException.php
new file mode 100644
index 0000000..0551b7e
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/AbstractZedNavigationCacheException.php
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Exception;
+
+use Exception;
+use Spryker\Zed\ZedNavigation\Communication\Console\BuildNavigationConsole;
+
+abstract class AbstractZedNavigationCacheException extends Exception
+{
+
+    const MESSAGE = 'To create a zed-navigation cache run:' . PHP_EOL
+        . PHP_EOL . '$ vendor/bin/console ' . BuildNavigationConsole::COMMAND_NAME;
+
+    /**
+     * @param string $message
+     * @param int $code
+     * @param \Exception|null $previous = null
+     */
+    public function __construct($message = '', $code = 0, Exception $previous = null)
+    {
+        $message .= PHP_EOL . PHP_EOL . self::MESSAGE;
+
+        parent::__construct($message, $code, $previous);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheEmptyException.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheEmptyException.php
new file mode 100644
index 0000000..ca4d797
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheEmptyException.php
@@ -0,0 +1,12 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Exception;
+
+class ZedNavigationCacheEmptyException extends AbstractZedNavigationCacheException
+{
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheFileDoesNotExistException.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheFileDoesNotExistException.php
new file mode 100644
index 0000000..fce094e
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Exception/ZedNavigationCacheFileDoesNotExistException.php
@@ -0,0 +1,12 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Exception;
+
+class ZedNavigationCacheFileDoesNotExistException extends AbstractZedNavigationCacheException
+{
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCache.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCache.php
new file mode 100644
index 0000000..7ffed5b
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCache.php
@@ -0,0 +1,83 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Cache;
+
+use Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheEmptyException;
+use Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheFileDoesNotExistException;
+use Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingInterface;
+
+class ZedNavigationCache implements ZedNavigationCacheInterface
+{
+
+    /**
+     * @var string
+     */
+    protected $cacheFile;
+
+    /**
+     * @var bool
+     */
+    protected $isEnabled;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingInterface
+     */
+    protected $utilEncodingService;
+
+    /**
+     * @param string $cacheFile
+     * @param bool $isEnabled
+     * @param \Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingInterface $utilEncodingService
+     */
+    public function __construct($cacheFile, $isEnabled, ZedNavigationToUtilEncodingInterface $utilEncodingService)
+    {
+        $this->cacheFile = $cacheFile;
+        $this->isEnabled = $isEnabled;
+        $this->utilEncodingService = $utilEncodingService;
+    }
+
+    /**
+     * @return bool
+     */
+    public function isEnabled()
+    {
+        return $this->isEnabled;
+    }
+
+    /**
+     * @param array $navigation
+     *
+     * @return void
+     */
+    public function setNavigation(array $navigation)
+    {
+        file_put_contents($this->cacheFile, $this->utilEncodingService->encodeJson($navigation));
+    }
+
+    /**
+     * @throws \Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheFileDoesNotExistException
+     * @throws \Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheEmptyException
+     *
+     * @return array
+     */
+    public function getNavigation()
+    {
+        if (!file_exists($this->cacheFile)) {
+            throw new ZedNavigationCacheFileDoesNotExistException('Navigation cache is enabled, but there is no cache file.');
+        }
+
+        $content = file_get_contents($this->cacheFile);
+
+        if (empty($content)) {
+            throw new ZedNavigationCacheEmptyException('Navigation cache is enabled, but cache is empty.');
+        }
+
+        return $this->utilEncodingService->decodeJson($content, true);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilder.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilder.php
new file mode 100644
index 0000000..f928d49
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilder.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Cache;
+
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface;
+
+class ZedNavigationCacheBuilder
+{
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface
+     */
+    private $navigationCollector;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface
+     */
+    private $navigationCache;
+
+    /**
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface $navigationCollector
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface $navigationCache
+     */
+    public function __construct(ZedNavigationCollectorInterface $navigationCollector, ZedNavigationCacheInterface $navigationCache)
+    {
+        $this->navigationCollector = $navigationCollector;
+        $this->navigationCache = $navigationCache;
+    }
+
+    /**
+     * @return void
+     */
+    public function writeNavigationCache()
+    {
+        $navigation = $this->navigationCollector->getNavigation();
+        $this->navigationCache->setNavigation($navigation);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheInterface.php
new file mode 100644
index 0000000..d8fc6cf
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheInterface.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Cache;
+
+interface ZedNavigationCacheInterface
+{
+
+    /**
+     * @return bool
+     */
+    public function isEnabled();
+
+    /**
+     * @param array $navigation
+     *
+     * @return void
+     */
+    public function setNavigation(array $navigation);
+
+    /**
+     * @return array
+     */
+    public function getNavigation();
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecorator.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecorator.php
new file mode 100644
index 0000000..5fd4b90
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecorator.php
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Collector\Decorator;
+
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface;
+
+class ZedNavigationCollectorCacheDecorator implements ZedNavigationCollectorInterface
+{
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface
+     */
+    private $navigationCollector;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface
+     */
+    private $navigationCache;
+
+    /**
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface $navigationCollector
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface $navigationCache
+     */
+    public function __construct(ZedNavigationCollectorInterface $navigationCollector, ZedNavigationCacheInterface $navigationCache)
+    {
+        $this->navigationCollector = $navigationCollector;
+        $this->navigationCache = $navigationCache;
+    }
+
+    /**
+     * @return array
+     */
+    public function getNavigation()
+    {
+        if ($this->navigationCache->isEnabled()) {
+            return $this->navigationCache->getNavigation();
+        }
+
+        return $this->navigationCollector->getNavigation();
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollector.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollector.php
new file mode 100644
index 0000000..acc1b5e
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollector.php
@@ -0,0 +1,62 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Collector;
+
+use ErrorException;
+use Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinderInterface;
+use Zend\Config\Config;
+use Zend\Config\Factory;
+
+class ZedNavigationCollector implements ZedNavigationCollectorInterface
+{
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinderInterface
+     */
+    private $navigationSchemaFinder;
+
+    /**
+     * @var string
+     */
+    private $rootNavigationFile;
+
+    /**
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinderInterface $navigationSchemaFinder
+     * @param string $rootNavigationFile
+     */
+    public function __construct(ZedNavigationSchemaFinderInterface $navigationSchemaFinder, $rootNavigationFile)
+    {
+        $this->navigationSchemaFinder = $navigationSchemaFinder;
+        $this->rootNavigationFile = $rootNavigationFile;
+    }
+
+    /**
+     * @throws \ErrorException
+     *
+     * @return array
+     */
+    public function getNavigation()
+    {
+        try {
+            $navigationDefinition = Factory::fromFile($this->rootNavigationFile, true);
+        } catch (\Exception $e) {
+            $navigationDefinition = new Config([]);
+        }
+
+        foreach ($this->navigationSchemaFinder->getSchemaFiles() as $moduleNavigationFile) {
+            if (!file_exists($moduleNavigationFile->getPathname())) {
+                throw new ErrorException('Navigation-File does not exist: ' . $moduleNavigationFile);
+            }
+            $configFromFile = Factory::fromFile($moduleNavigationFile->getPathname(), true);
+            $navigationDefinition->merge($configFromFile);
+        }
+
+        return $navigationDefinition->toArray();
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollectorInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollectorInterface.php
new file mode 100644
index 0000000..59b43c3
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Collector/ZedNavigationCollectorInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Collector;
+
+interface ZedNavigationCollectorInterface
+{
+
+    /**
+     * @return array
+     */
+    public function getNavigation();
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractor.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractor.php
new file mode 100644
index 0000000..e7c96b1
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractor.php
@@ -0,0 +1,69 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Extractor;
+
+use Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatter;
+
+class PathExtractor implements PathExtractorInterface
+{
+
+    const URI = 'uri';
+    const LABEL = 'label';
+    const TITLE = 'title';
+
+    /**
+     * @param array $menu
+     *
+     * @return array
+     */
+    public function extractPathFromMenu(array $menu)
+    {
+        $filteredMenu = array_filter($menu, function ($branch) {
+            return isset($branch[MenuFormatter::IS_ACTIVE]);
+        });
+        $path = [];
+        $this->extractActiveNodes($filteredMenu, $path);
+
+        return $path;
+    }
+
+    /**
+     * @param array $nodes
+     * @param array $path
+     *
+     * @return array
+     */
+    protected function extractActiveNodes(array $nodes, array &$path)
+    {
+        foreach ($nodes as $child) {
+            if (isset($child[MenuFormatter::IS_ACTIVE])) {
+                $activeNode = $child;
+                $path[] = $this->formatNode($activeNode);
+                if (isset($child[MenuFormatter::CHILDREN])) {
+                    $this->extractActiveNodes($child[MenuFormatter::CHILDREN], $path);
+                }
+                break;
+            }
+        }
+    }
+
+    /**
+     * @param array $node
+     *
+     * @return array
+     */
+    protected function formatNode(array $node)
+    {
+        return [
+            self::URI => $node[MenuFormatter::URI],
+            self::LABEL => $node[MenuFormatter::LABEL],
+            self::TITLE => $node[MenuFormatter::TITLE],
+        ];
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractorInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractorInterface.php
new file mode 100644
index 0000000..005b6f2
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Extractor/PathExtractorInterface.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Extractor;
+
+interface PathExtractorInterface
+{
+
+    /**
+     * @param array $menu
+     *
+     * @return array
+     */
+    public function extractPathFromMenu(array $menu);
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatter.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatter.php
new file mode 100644
index 0000000..aca85bb
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatter.php
@@ -0,0 +1,192 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Formatter;
+
+use Spryker\Shared\Url\UrlBuilderInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelValidatorInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueValidatorInterface;
+
+class MenuFormatter implements MenuFormatterInterface
+{
+
+    const VISIBLE = 'visible';
+    const URI = 'uri';
+    const ID = 'id';
+    const ATTRIBUTES = 'attributes';
+    const LABEL = 'label';
+    const PAGES = 'pages';
+    const CONTROLLER = 'controller';
+    const INDEX = 'index';
+    const ACTION = 'action';
+    const BUNDLE = 'bundle';
+    const CHILDREN = 'children';
+    const TITLE = 'title';
+    const ICON = 'icon';
+    const SHORTCUT = 'shortcut';
+    const IS_ACTIVE = 'is_active';
+    const CHILD_IS_ACTIVE = 'child_is_active';
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueValidatorInterface
+     */
+    protected $urlUniqueValidator;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelValidatorInterface
+     */
+    protected $menuLevelValidator;
+
+    /**
+     * @var \Spryker\Shared\Url\UrlBuilderInterface
+     */
+    protected $urlBuilder;
+
+    /**
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueValidatorInterface $urlUniqueValidator
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelValidatorInterface $menuLevelValidator
+     * @param \Spryker\Shared\Url\UrlBuilderInterface $urlBuilder
+     */
+    public function __construct(
+        UrlUniqueValidatorInterface $urlUniqueValidator,
+        MenuLevelValidatorInterface $menuLevelValidator,
+        UrlBuilderInterface $urlBuilder
+    ) {
+        $this->urlUniqueValidator = $urlUniqueValidator;
+        $this->menuLevelValidator = $menuLevelValidator;
+        $this->urlBuilder = $urlBuilder;
+    }
+
+    /**
+     * @param array $pages
+     * @param string $pathInfo
+     * @param bool $includeInvisible
+     *
+     * @return array
+     */
+    public function formatMenu(array $pages, $pathInfo, $includeInvisible = false)
+    {
+        $formattedPages = $this->formatPages($pages, $pathInfo, 1, $includeInvisible);
+        unset($formattedPages[self::CHILD_IS_ACTIVE]);
+
+        return $formattedPages;
+    }
+
+    /**
+     * @param array $pages
+     * @param string $pathInfo
+     * @param int $currentLevel
+     * @param bool $includeInvisible
+     *
+     * @return array
+     */
+    protected function formatPages(array $pages, $pathInfo, $currentLevel = 1, $includeInvisible = false)
+    {
+        $formattedPages = [];
+        $currentLevel++;
+        foreach ($pages as $page) {
+            if (!$includeInvisible && isset($page[self::VISIBLE]) && !$page[self::VISIBLE]) {
+                continue;
+            }
+            $formattedPage = $this->formatPage($page);
+            if (isset($page[self::PAGES]) && !empty($page[self::PAGES])) {
+                $this->menuLevelValidator->validate($currentLevel, $page[self::TITLE]);
+                $children = $this->formatPages($page[self::PAGES], $pathInfo, $currentLevel, $includeInvisible);
+            }
+
+            if (isset($children[self::CHILD_IS_ACTIVE]) || $pathInfo === $formattedPage[self::URI]) {
+                $formattedPages[self::CHILD_IS_ACTIVE] = true;
+                $formattedPage[self::IS_ACTIVE] = true;
+            }
+            if (!empty($children)) {
+                unset($children[self::CHILD_IS_ACTIVE]);
+                $formattedPage[self::CHILDREN] = $children;
+                $children = [];
+            }
+            $formattedPages[$formattedPage[self::TITLE]] = $formattedPage;
+        }
+
+        return $formattedPages;
+    }
+
+    /**
+     * @param array $page
+     *
+     * @return string
+     */
+    protected function getUri(array $page)
+    {
+        if (isset($page[self::URI]) && !empty($page[self::URI])) {
+            return $page[self::URI];
+        }
+
+        $action = $this->getPageAction($page);
+        $controller = $this->getPageController($page, $action);
+
+        return $this->urlBuilder->build($page[self::BUNDLE], $controller, $action);
+    }
+
+    /**
+     * @param array $page
+     *
+     * @return array
+     */
+    protected function formatPage(array $page)
+    {
+        $formattedPage = [];
+
+        $url = $this->getUri($page);
+        $formattedPage[self::URI] = $url;
+        $formattedPage[self::LABEL] = $page[self::LABEL];
+        $formattedPage[self::TITLE] = $page[self::TITLE];
+        if (isset($page[self::ICON])) {
+            $formattedPage[self::ICON] = $page[self::ICON];
+        }
+
+        if (isset($page[self::SHORTCUT]) && strlen($page[self::SHORTCUT]) === 1) {
+            $formattedPage[self::SHORTCUT] = $page[self::SHORTCUT];
+        }
+
+        return $formattedPage;
+    }
+
+    /**
+     * @param array $page
+     *
+     * @return mixed|null
+     */
+    protected function getPageAction(array $page)
+    {
+        $pageAction = null;
+        if (isset($page[self::ACTION]) && self::INDEX !== $page[self::ACTION]) {
+            $pageAction = $page[self::ACTION];
+        }
+
+        return $pageAction;
+    }
+
+    /**
+     * @param array $page
+     * @param mixed|null $action
+     *
+     * @return mixed|null
+     */
+    protected function getPageController(array $page, $action)
+    {
+        $pageController = null;
+        if (isset($page[self::CONTROLLER]) &&
+            (
+                self::INDEX !== $page[self::CONTROLLER] || $action !== null
+            )
+        ) {
+            $pageController = $page[self::CONTROLLER];
+        }
+
+        return $pageController;
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatterInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatterInterface.php
new file mode 100644
index 0000000..7e86de7
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Formatter/MenuFormatterInterface.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Formatter;
+
+interface MenuFormatterInterface
+{
+
+    /**
+     * @param array $pages
+     * @param string $pathInfo
+     * @param bool $includeInvisible
+     *
+     * @return array
+     */
+    public function formatMenu(array $pages, $pathInfo, $includeInvisible = false);
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinder.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinder.php
new file mode 100644
index 0000000..9e86d5f
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinder.php
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder;
+
+use Symfony\Component\Finder\Finder;
+
+class ZedNavigationSchemaFinder implements ZedNavigationSchemaFinderInterface
+{
+
+    /**
+     * @var array
+     */
+    protected $pathPattern;
+
+    /**
+     * @var array
+     */
+    protected $fileNamePattern;
+
+    /**
+     * @param array $pathPattern
+     * @param string $fileNamePattern
+     */
+    public function __construct(array $pathPattern, $fileNamePattern)
+    {
+        $this->pathPattern = $pathPattern;
+        $this->fileNamePattern = $fileNamePattern;
+    }
+
+    /**
+     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
+     */
+    public function getSchemaFiles()
+    {
+        $finder = new Finder();
+        $finder
+            ->in($this->pathPattern)
+            ->name($this->fileNamePattern);
+
+        return $finder;
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderInterface.php
new file mode 100644
index 0000000..d41e06a
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder;
+
+interface ZedNavigationSchemaFinderInterface
+{
+
+    /**
+     * @return \Symfony\Component\Finder\Finder|\Symfony\Component\Finder\SplFileInfo[]
+     */
+    public function getSchemaFiles();
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelException.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelException.php
new file mode 100644
index 0000000..974d16c
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelException.php
@@ -0,0 +1,27 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+use Exception;
+
+class MenuLevelException extends Exception
+{
+
+    const ERROR_MESSAGE = 'The Menu is only allowed to have %s Sub-Levels per branch. More Levels found in "%s"!';
+
+    /**
+     * @param int $maxLevelCount
+     * @param string $pageTitle
+     */
+    public function __construct($maxLevelCount, $pageTitle)
+    {
+        $errorMessage = sprintf(self::ERROR_MESSAGE, $maxLevelCount, $pageTitle);
+        parent::__construct($errorMessage);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidator.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidator.php
new file mode 100644
index 0000000..27a1240
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidator.php
@@ -0,0 +1,41 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+class MenuLevelValidator implements MenuLevelValidatorInterface
+{
+
+    /**
+     * @var int
+     */
+    protected $maxLevelCount;
+
+    /**
+     * @param int $maxLevelCount
+     */
+    public function __construct($maxLevelCount)
+    {
+        $this->maxLevelCount = $maxLevelCount;
+    }
+
+    /**
+     * @param int $currentLevel
+     * @param string $pageTitle
+     *
+     * @throws \Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelException
+     *
+     * @return void
+     */
+    public function validate($currentLevel, $pageTitle)
+    {
+        if ($this->maxLevelCount < $currentLevel) {
+            throw new MenuLevelException($this->maxLevelCount, $pageTitle);
+        }
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidatorInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidatorInterface.php
new file mode 100644
index 0000000..728ff33
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/MenuLevelValidatorInterface.php
@@ -0,0 +1,23 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+interface MenuLevelValidatorInterface
+{
+
+    /**
+     * @param int $currentLevel
+     * @param string $pageTitle
+     *
+     * @throws \Exception
+     *
+     * @return void
+     */
+    public function validate($currentLevel, $pageTitle);
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueException.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueException.php
new file mode 100644
index 0000000..e66ee11
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueException.php
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+use Exception;
+
+class UrlUniqueException extends Exception
+{
+
+    const ERROR_MESSAGE = 'The URL "%s" is already used in the Menu!';
+
+    /**
+     * @param string $url
+     */
+    public function __construct($url)
+    {
+        $errorMessage = sprintf(self::ERROR_MESSAGE, $url);
+        parent::__construct($errorMessage);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidator.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidator.php
new file mode 100644
index 0000000..2df5042
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidator.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+class UrlUniqueValidator implements UrlUniqueValidatorInterface
+{
+
+    /**
+     * @var array
+     */
+    protected $urls = [];
+
+    /**
+     * @param string $url
+     *
+     * @throws \Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueException
+     *
+     * @return void
+     */
+    public function validate($url)
+    {
+        if (in_array($url, $this->urls)) {
+            throw new UrlUniqueException($url);
+        }
+    }
+
+    /**
+     * @param string $url
+     *
+     * @return void
+     */
+    public function addUrl($url)
+    {
+        $this->urls[] = $url;
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidatorInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidatorInterface.php
new file mode 100644
index 0000000..33fdc12
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/Validator/UrlUniqueValidatorInterface.php
@@ -0,0 +1,29 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model\Validator;
+
+interface UrlUniqueValidatorInterface
+{
+
+    /**
+     * @param string $url
+     *
+     * @throws \Exception
+     *
+     * @return void
+     */
+    public function validate($url);
+
+    /**
+     * @param string $url
+     *
+     * @return void
+     */
+    public function addUrl($url);
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/ZedNavigationBuilder.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/ZedNavigationBuilder.php
new file mode 100644
index 0000000..766aca6
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/Model/ZedNavigationBuilder.php
@@ -0,0 +1,69 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business\Model;
+
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Extractor\PathExtractorInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatterInterface;
+
+class ZedNavigationBuilder
+{
+
+    const MENU = 'menu';
+    const PATH = 'path';
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface
+     */
+    private $navigationCollector;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatterInterface
+     */
+    private $menuFormatter;
+
+    /**
+     * @var \Spryker\Zed\ZedNavigation\Business\Model\Extractor\PathExtractorInterface
+     */
+    private $pathExtractor;
+
+    /**
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface $navigationCollector
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatterInterface $menuFormatter
+     * @param \Spryker\Zed\ZedNavigation\Business\Model\Extractor\PathExtractorInterface $pathExtractor
+     */
+    public function __construct(
+        ZedNavigationCollectorInterface $navigationCollector,
+        MenuFormatterInterface $menuFormatter,
+        PathExtractorInterface $pathExtractor
+    ) {
+        $this->navigationCollector = $navigationCollector;
+        $this->menuFormatter = $menuFormatter;
+        $this->pathExtractor = $pathExtractor;
+    }
+
+    /**
+     * @param string $pathInfo
+     *
+     * @return array
+     */
+    public function build($pathInfo)
+    {
+        $navigationPages = $this->navigationCollector->getNavigation();
+
+        $menu = $this->menuFormatter->formatMenu($navigationPages, $pathInfo);
+        $breadcrumb = $this->menuFormatter->formatMenu($navigationPages, $pathInfo, true);
+        $path = $this->pathExtractor->extractPathFromMenu($breadcrumb);
+
+        return [
+            self::MENU => $menu,
+            self::PATH => $path,
+        ];
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactory.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactory.php
new file mode 100644
index 0000000..97dfb5e
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactory.php
@@ -0,0 +1,155 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business;
+
+use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCache;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheBuilder;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\Decorator\ZedNavigationCollectorCacheDecorator;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollector;
+use Spryker\Zed\ZedNavigation\Business\Model\Extractor\PathExtractor;
+use Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatter;
+use Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinder;
+use Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelValidator;
+use Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueValidator;
+use Spryker\Zed\ZedNavigation\Business\Model\ZedNavigationBuilder;
+use Spryker\Zed\ZedNavigation\ZedNavigationDependencyProvider;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\ZedNavigationConfig getConfig()
+ */
+class ZedNavigationBusinessFactory extends AbstractBusinessFactory
+{
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\ZedNavigationBuilder
+     */
+    public function createNavigationBuilder()
+    {
+        return new ZedNavigationBuilder(
+            $this->createCachedNavigationCollector(),
+            $this->createMenuFormatter(),
+            $this->createPathExtractor()
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheBuilder
+     */
+    public function createNavigationCacheBuilder()
+    {
+        return new ZedNavigationCacheBuilder(
+            $this->createNavigationCollector(),
+            $this->createNavigationCache()
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Formatter\MenuFormatter
+     */
+    protected function createMenuFormatter()
+    {
+        $urlBuilder = $this->getUrlBuilder();
+        $urlUniqueValidator = $this->createUrlUniqueValidator();
+        $menuLevelValidator = $this->createMenuLevelValidator();
+
+        return new MenuFormatter(
+            $urlUniqueValidator,
+            $menuLevelValidator,
+            $urlBuilder
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinder
+     */
+    protected function createNavigationSchemaFinder()
+    {
+        return new ZedNavigationSchemaFinder(
+            $this->getConfig()->getNavigationSchemaPathPattern(),
+            $this->getConfig()->getNavigationSchemaFileNamePattern()
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollector
+     */
+    protected function createNavigationCollector()
+    {
+        return new ZedNavigationCollector(
+            $this->createNavigationSchemaFinder(),
+            $this->getConfig()->getRootNavigationSchema()
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Extractor\PathExtractor
+     */
+    protected function createPathExtractor()
+    {
+        return new PathExtractor();
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Validator\MenuLevelValidator
+     */
+    protected function createMenuLevelValidator()
+    {
+        $maxMenuCount = $this->getConfig()->getMaxMenuLevelCount();
+
+        return new MenuLevelValidator($maxMenuCount);
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCache
+     */
+    protected function createNavigationCache()
+    {
+        return new ZedNavigationCache(
+            $this->getConfig()->getCacheFile(),
+            $this->getConfig()->isNavigationCacheEnabled(),
+            $this->getUtilEncodingService()
+        );
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingInterface
+     */
+    protected function getUtilEncodingService()
+    {
+        return $this->getProvidedDependency(ZedNavigationDependencyProvider::SERVICE_ENCODING);
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Collector\Decorator\ZedNavigationCollectorCacheDecorator
+     */
+    protected function createCachedNavigationCollector()
+    {
+        return new ZedNavigationCollectorCacheDecorator(
+            $this->createNavigationCollector(),
+            $this->createNavigationCache()
+        );
+    }
+
+    /**
+     * @return \Spryker\Shared\Url\UrlBuilderInterface
+     */
+    protected function getUrlBuilder()
+    {
+        return $this->getProvidedDependency(ZedNavigationDependencyProvider::URL_BUILDER);
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\Model\Validator\UrlUniqueValidator
+     */
+    protected function createUrlUniqueValidator()
+    {
+        return new UrlUniqueValidator();
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacade.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacade.php
new file mode 100644
index 0000000..cc7350d
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacade.php
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business;
+
+use Spryker\Zed\Kernel\Business\AbstractFacade;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\Business\ZedNavigationBusinessFactory getFactory()
+ */
+class ZedNavigationFacade extends AbstractFacade implements ZedNavigationFacadeInterface
+{
+
+    /**
+     * Specification:
+     * - Returns an array with all navigation entries.
+     * - When navigation cache is enabled it returns cached navigation.
+     *
+     * @api
+     *
+     * @param string $pathInfo
+     *
+     * @return array
+     */
+    public function buildNavigation($pathInfo)
+    {
+        return $this->getFactory()->createNavigationBuilder()->build($pathInfo);
+    }
+
+    /**
+     * Specification:
+     * - Writes generated navigation to a cache file.
+     * - This file is used to return navigation in `buildNavigation` when cache is enabled.
+     *
+     * @api
+     *
+     * @return void
+     */
+    public function writeNavigationCache()
+    {
+        $this->getFactory()->createNavigationCacheBuilder()->writeNavigationCache();
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeInterface.php
new file mode 100644
index 0000000..1116694
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeInterface.php
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Business;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\Business\ZedNavigationBusinessFactory getFactory()
+ */
+interface ZedNavigationFacadeInterface
+{
+
+    /**
+     * Specification:
+     * - Returns an array with all navigation entries.
+     * - When navigation cache is enabled it returns cached navigation.
+     *
+     * @api
+     *
+     * @param string $pathInfo
+     *
+     * @return array
+     */
+    public function buildNavigation($pathInfo);
+
+    /**
+     * Specification:
+     * - Writes generated navigation to a cache file.
+     * - This file is used to return navigation in `buildNavigation` when cache is enabled.
+     *
+     * @api
+     *
+     * @return void
+     */
+    public function writeNavigationCache();
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Console/BuildNavigationConsole.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Console/BuildNavigationConsole.php
new file mode 100644
index 0000000..a783fa7
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Console/BuildNavigationConsole.php
@@ -0,0 +1,57 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Communication\Console;
+
+use Spryker\Zed\Kernel\Communication\Console\Console;
+use Symfony\Component\Console\Input\InputInterface;
+use Symfony\Component\Console\Output\OutputInterface;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\Business\ZedNavigationFacade getFacade()
+ */
+class BuildNavigationConsole extends Console
+{
+
+    const COMMAND_NAME = 'navigation:build-cache';
+    const DESCRIPTION = 'Build the navigation tree and persist it';
+
+    /**
+     * @return void
+     */
+    protected function configure()
+    {
+        $this->setName(self::COMMAND_NAME);
+        $this->addAlias();
+        $this->setDescription(self::DESCRIPTION);
+
+        parent::configure();
+    }
+
+    /**
+     * @param \Symfony\Component\Console\Input\InputInterface $input
+     * @param \Symfony\Component\Console\Output\OutputInterface $output
+     *
+     * @return void
+     */
+    protected function execute(InputInterface $input, OutputInterface $output)
+    {
+        $this->getMessenger()->info('Build navigation cache');
+        $this->getFacade()->writeNavigationCache();
+    }
+
+    /**
+     * @deprecated Remove this in next major. Only for BC reasons. Please use new command name `navigation:build-cache` instead.
+     *
+     * @return void
+     */
+    protected function addAlias()
+    {
+        $this->setAliases(['application:build-navigation-cache']);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ServiceProvider/ZedNavigationServiceProvider.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ServiceProvider/ZedNavigationServiceProvider.php
new file mode 100644
index 0000000..e92a75d
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ServiceProvider/ZedNavigationServiceProvider.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Communication\Plugin\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\ZedNavigation\Communication\Plugin\ZedNavigation;
+use Symfony\Component\HttpFoundation\Request;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\Business\ZedNavigationFacade getFacade()
+ * @method \Spryker\Zed\ZedNavigation\Communication\ZedNavigationCommunicationFactory getFactory()
+ */
+class ZedNavigationServiceProvider extends AbstractPlugin implements ServiceProviderInterface
+{
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $app['twig.global.variables'] = $app->share(
+            $app->extend('twig.global.variables', function (array $variables) {
+                $navigation = $this->getNavigation();
+                $breadcrumbs = $navigation['path'];
+
+                $variables['navigation'] = $navigation;
+                $variables['breadcrumbs'] = $breadcrumbs;
+
+                return $variables;
+            })
+        );
+    }
+
+    /**
+     * @return string
+     */
+    protected function getNavigation()
+    {
+        $request = Request::createFromGlobals();
+
+        return (new ZedNavigation())
+            ->buildNavigation($request->getPathInfo());
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ZedNavigation.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ZedNavigation.php
new file mode 100644
index 0000000..901def2
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/Plugin/ZedNavigation.php
@@ -0,0 +1,35 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Communication\Plugin;
+
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\Business\ZedNavigationFacade getFacade()
+ * @method \Spryker\Zed\ZedNavigation\Communication\ZedNavigationCommunicationFactory getFactory()
+ * @method \Spryker\Zed\ZedNavigation\ZedNavigationConfig getConfig()
+ */
+class ZedNavigation extends AbstractPlugin
+{
+
+    /**
+     * @param string $pathInfo
+     *
+     * @return array
+     */
+    public function buildNavigation($pathInfo)
+    {
+        if (!$this->getConfig()->isNavigationEnabled()) {
+            return [];
+        }
+
+        return $this->getFacade()
+            ->buildNavigation($pathInfo);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/ZedNavigationCommunicationFactory.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/ZedNavigationCommunicationFactory.php
new file mode 100644
index 0000000..1e8dc00
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Communication/ZedNavigationCommunicationFactory.php
@@ -0,0 +1,17 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Communication;
+
+use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+
+/**
+ * @method \Spryker\Zed\ZedNavigation\ZedNavigationConfig getConfig()
+ */
+class ZedNavigationCommunicationFactory extends AbstractCommunicationFactory
+{
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingBridge.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingBridge.php
new file mode 100644
index 0000000..576a209
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingBridge.php
@@ -0,0 +1,51 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Dependency\Util;
+
+class ZedNavigationToUtilEncodingBridge implements ZedNavigationToUtilEncodingInterface
+{
+
+    /**
+     * @var \Spryker\Service\UtilEncoding\UtilEncodingServiceInterface
+     */
+    protected $utilEncodingService;
+
+    /**
+     * @param \Spryker\Service\UtilEncoding\UtilEncodingServiceInterface $utilEncoding
+     */
+    public function __construct($utilEncoding)
+    {
+        $this->utilEncodingService = $utilEncoding;
+    }
+
+    /**
+     * @param string $jsonValue
+     * @param null $options
+     * @param null $depth
+     *
+     * @return string
+     */
+    public function encodeJson($jsonValue, $options = null, $depth = null)
+    {
+        return $this->utilEncodingService->encodeJson($jsonValue, $options, $depth);
+    }
+
+    /**
+     * @param string $jsonValue
+     * @param bool $assoc
+     * @param null $depth
+     * @param null $options
+     *
+     * @return array
+     */
+    public function decodeJson($jsonValue, $assoc = false, $depth = null, $options = null)
+    {
+        return $this->utilEncodingService->decodeJson($jsonValue, $assoc, $depth, $options);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingInterface.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingInterface.php
new file mode 100644
index 0000000..6303ad1
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Dependency/Util/ZedNavigationToUtilEncodingInterface.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation\Dependency\Util;
+
+interface ZedNavigationToUtilEncodingInterface
+{
+
+    /**
+     * @param string $jsonValue
+     * @param int|null $options
+     * @param int|null $depth
+     *
+     * @return string
+     */
+    public function encodeJson($jsonValue, $options = null, $depth = null);
+
+    /**
+     * @param string $jsonValue
+     * @param bool $assoc
+     * @param int|null $depth
+     * @param int|null $options
+     *
+     * @return array
+     */
+    public function decodeJson($jsonValue, $assoc = false, $depth = null, $options = null);
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Presentation/Layout/Partials/menu.twig b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Presentation/Layout/Partials/menu.twig
new file mode 100644
index 0000000..70bd5fe
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/Presentation/Layout/Partials/menu.twig
@@ -0,0 +1,54 @@
+{%- macro leaf(node) -%}
+    {%- if node is defined %}
+        {%- if menu_highlight is defined -%}
+            {%- if menu_highlight == node.uri -%}
+                <li class="item active">
+            {%- else -%}
+                <li class="item">
+            {%- endif -%}
+        {%- else-%}
+        <li class="item{{ node.is_active is defined and node.is_active ? " active" : "" }}">
+        {%- endif -%}
+            <a
+                href="{{ node.uri }}"
+                {% if node.shortcut is defined %}data-hotkey="{{ node.shortcut }}"{% endif %}
+            >{{ node.label }}</a>
+        </li>
+    {% endif -%}
+{%- endmacro -%}
+
+{%- macro branch(node) -%}
+    {%- import _self as menu -%}
+
+    {%- if node is defined %}
+        <li class="group{{ node.is_active is defined and node.is_active ? " active" : "" }}">
+            <span>{{ node.label }}</span>
+
+            <ul>
+                {{ menu.tree(node.children) }}
+            </ul>
+        </li>
+    {% endif -%}
+{%- endmacro -%}
+
+{%- macro tree(root) -%}
+    {%- import _self as menu -%}
+
+    {%- for child in root -%}
+        {%- if child.children is defined and child.children is not empty -%}
+            {{ menu.branch(child) }}
+        {%- else -%}
+            {{ menu.leaf(child) }}
+        {%- endif -%}
+    {%- endfor -%}
+{%- endmacro -%}
+
+
+{%- import _self as menu -%}
+
+
+<nav class="spy-page-nav">
+    <ul tabindex="0">
+        {{ menu.tree(navigation.menu) }}
+    </ul>
+</nav>
\ No newline at end of file
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationConfig.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationConfig.php
new file mode 100644
index 0000000..ff901c4
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationConfig.php
@@ -0,0 +1,85 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation;
+
+use Spryker\Shared\Kernel\KernelConstants;
+use Spryker\Shared\ZedNavigation\ZedNavigationConstants;
+use Spryker\Zed\Kernel\AbstractBundleConfig;
+
+class ZedNavigationConfig extends AbstractBundleConfig
+{
+
+    const MAX_LEVEL_COUNT = 3;
+
+    /**
+     * @return int
+     */
+    public function getMaxMenuLevelCount()
+    {
+        return static::MAX_LEVEL_COUNT;
+    }
+
+    /**
+     * @return array
+     */
+    public function getNavigationSchemaPathPattern()
+    {
+        return [
+            $this->getBundlesDirectory() . '/*/src/*/Zed/*/Communication',
+        ];
+    }
+
+    /**
+     * @return string
+     */
+    public function getNavigationSchemaFileNamePattern()
+    {
+        return 'navigation.xml';
+    }
+
+    /**
+     * @return string
+     */
+    public function getRootNavigationSchema()
+    {
+        return APPLICATION_ROOT_DIR . '/config/Zed/' . $this->getNavigationSchemaFileNamePattern();
+    }
+
+    /**
+     * @return string
+     */
+    public function getCacheFile()
+    {
+        return APPLICATION_ROOT_DIR . '/src/Generated/navigation.cache';
+    }
+
+    /**
+     * @return bool
+     */
+    public function isNavigationCacheEnabled()
+    {
+        return $this->get(ZedNavigationConstants::ZED_NAVIGATION_CACHE_ENABLED, true);
+    }
+
+    /**
+     * @return bool
+     */
+    public function isNavigationEnabled()
+    {
+        return $this->get(ZedNavigationConstants::ZED_NAVIGATION_ENABLED, true);
+    }
+
+    /**
+     * @return string
+     */
+    public function getBundlesDirectory()
+    {
+        return $this->get(KernelConstants::SPRYKER_ROOT);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationDependencyProvider.php b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationDependencyProvider.php
new file mode 100644
index 0000000..ac604e2
--- /dev/null
+++ b/Bundles/ZedNavigation/src/Spryker/Zed/ZedNavigation/ZedNavigationDependencyProvider.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedNavigation;
+
+use Spryker\Shared\Url\UrlBuilder;
+use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Container;
+use Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingBridge;
+
+class ZedNavigationDependencyProvider extends AbstractBundleDependencyProvider
+{
+
+    const URL_BUILDER = 'url builder';
+    const SERVICE_ENCODING = 'util encoding service';
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    public function provideBusinessLayerDependencies(Container $container)
+    {
+        $container = $this->addUrlBuilder($container);
+        $container = $this->addUtilEncodingService($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addUrlBuilder(Container $container)
+    {
+        $container[static::URL_BUILDER] = function () {
+            return new UrlBuilder();
+        };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addUtilEncodingService(Container $container)
+    {
+        $container[static::SERVICE_ENCODING] = function (Container $container) {
+            $navigationToUtilEncodingBridger = new ZedNavigationToUtilEncodingBridge(
+                $container->getLocator()->utilEncoding()->service()
+            );
+
+            return $navigationToUtilEncodingBridger;
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit.suite.yml b/Bundles/ZedNavigation/tests/Unit.suite.yml
new file mode 100644
index 0000000..d227131
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit.suite.yml
@@ -0,0 +1,5 @@
+class_name: UnitTester
+modules:
+    enabled:
+        - \Testify\Module\Environment
+        - \ZedNavigation\Module\Unit
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilderTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilderTest.php
new file mode 100644
index 0000000..e04abda
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheBuilderTest.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business\Model\Cache;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheBuilder;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group Model
+ * @group Cache
+ * @group ZedNavigationCacheBuilderTest
+ */
+class ZedNavigationCacheBuilderTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testWriteNavigationCacheMustReadNavigationFromCollectorAndPassItToTheCache()
+    {
+        $navigationCacheMock = $this->getMockBuilder(ZedNavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
+        $navigationCacheMock->expects($this->once())
+            ->method('setNavigation');
+
+        $navigationCollectorMock = $this->getMockBuilder(ZedNavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
+        $navigationCollectorMock->expects($this->once())
+            ->method('getNavigation')
+            ->will($this->returnValue([]));
+
+        $navigationCacheBuilder = new ZedNavigationCacheBuilder($navigationCollectorMock, $navigationCacheMock);
+        $navigationCacheBuilder->writeNavigationCache();
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheTest.php
new file mode 100644
index 0000000..f6273bb
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Cache/ZedNavigationCacheTest.php
@@ -0,0 +1,169 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business\Model\Cache;
+
+use Application\Module\Zed;
+use PHPUnit_Framework_TestCase;
+use Spryker\Service\UtilEncoding\UtilEncodingService;
+use Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheEmptyException;
+use Spryker\Zed\ZedNavigation\Business\Exception\ZedNavigationCacheFileDoesNotExistException;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCache;
+use Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingBridge;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group Model
+ * @group Cache
+ * @group ZedNavigationCacheTest
+ */
+class ZedNavigationCacheTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function tearDown()
+    {
+        parent::tearDown();
+
+        $cacheFile = $this->getCacheFile();
+        if (file_exists($cacheFile)) {
+            unlink($cacheFile);
+        }
+    }
+
+    /**
+     * @return string
+     */
+    private function getCacheFile()
+    {
+        $pathToFile = __DIR__ . DIRECTORY_SEPARATOR . 'navigation.cache';
+
+        if (!file_exists($pathToFile)) {
+            touch($pathToFile);
+        }
+
+        return $pathToFile;
+    }
+
+    /**
+     * @return void
+     */
+    public function testIsNavigationCacheEnabledMustReturnFalseIfItIsNotEnabled()
+    {
+        $isEnabled = false;
+        $navigationCache = new ZedNavigationCache('', $isEnabled, $this->getUtilEncodingService());
+
+        $this->assertFalse($navigationCache->isEnabled());
+    }
+
+    /**
+     * @return void
+     */
+    public function testIsNavigationCacheEnabledMustReturnTrueIfEnabled()
+    {
+        $isEnabled = true;
+        $navigationCache = new ZedNavigationCache(__FILE__, $isEnabled, $this->getUtilEncodingService());
+
+        $this->assertTrue($navigationCache->isEnabled());
+    }
+
+    /**
+     * @return void
+     */
+    public function testSetMustSerializeGivenNavigationDataIntoFile()
+    {
+        $cacheFile = $this->getCacheFile();
+        $isEnabled = true;
+        $navigationCache = new ZedNavigationCache($cacheFile, $isEnabled, $this->getUtilEncodingService());
+        $navigationData = ['foo' => 'bar'];
+        $navigationCache->setNavigation($navigationData);
+
+        $this->assertTrue($navigationCache->isEnabled());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetMustReturnUnSerializedNavigationDataFromFile()
+    {
+        $cacheFile = $this->getCacheFile();
+        $isEnabled = true;
+
+        $navigationCache = new ZedNavigationCache($cacheFile, $isEnabled, $this->getUtilEncodingService());
+        $navigationData = ['foo' => 'bar'];
+        $navigationCache->setNavigation($navigationData);
+
+        $cachedNavigationData = $navigationCache->getNavigation();
+        $this->assertSame($navigationData, $cachedNavigationData);
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetMustThrowExceptionIfCacheEnabledButCacheFileDoesNotExists()
+    {
+        $this->expectException(ZedNavigationCacheFileDoesNotExistException::class);
+
+        $isEnabled = true;
+        $navigationCache = new ZedNavigationCache('', $isEnabled, $this->getUtilEncodingService());
+        $navigationCache->getNavigation();
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetMustThrowExceptionIfCacheEnabledCacheFileGivenButEmpty()
+    {
+        $this->expectException(ZedNavigationCacheEmptyException::class);
+
+        $cacheFile = $this->getCacheFile();
+        $isEnabled = true;
+        $navigationCache = new ZedNavigationCache($cacheFile, $isEnabled, $this->getUtilEncodingService());
+        $navigationCache->getNavigation();
+    }
+
+    /**
+     * Checks, that JSON serialization is used in the cache.
+     *
+     * @return void
+     */
+    public function testCacheShouldNotUseSerialize()
+    {
+        $cacheFile = $this->getCacheFile();
+        $isEnabled = true;
+
+        $utilEncodingService = $this->getUtilEncodingService();
+
+        $navigationCache = new ZedNavigationCache($cacheFile, $isEnabled, $utilEncodingService);
+
+        $navigationData = ['foo' => 'bar'];
+        $navigationCache->setNavigation($navigationData);
+
+        $rawData = file_get_contents($cacheFile);
+        $this->assertEquals($navigationData, $utilEncodingService->decodeJson($rawData, true));
+        $this->assertEquals($rawData, $utilEncodingService->encodeJson($navigationData));
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Dependency\Util\ZedNavigationToUtilEncodingBridge
+     */
+    protected function getUtilEncodingService()
+    {
+        $navigationToUtilEncodingBridge = new ZedNavigationToUtilEncodingBridge(
+            new UtilEncodingService()
+        );
+
+        return $navigationToUtilEncodingBridge;
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecoratorTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecoratorTest.php
new file mode 100644
index 0000000..12a52a0
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/Collector/Decorator/ZedNavigationCollectorCacheDecoratorTest.php
@@ -0,0 +1,79 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business\Model\Collector\Decorator;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\Business\Model\Cache\ZedNavigationCacheInterface;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\Decorator\ZedNavigationCollectorCacheDecorator;
+use Spryker\Zed\ZedNavigation\Business\Model\Collector\ZedNavigationCollectorInterface;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group Model
+ * @group Collector
+ * @group Decorator
+ * @group ZedNavigationCollectorCacheDecoratorTest
+ */
+class ZedNavigationCollectorCacheDecoratorTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function testIfCacheIsNotEnabledGetNavigationMustReturnNavigationFromCollector()
+    {
+        $navigationCacheMock = $this->getMockBuilder(ZedNavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
+        $navigationCacheMock->expects($this->once())
+            ->method('isEnabled')
+            ->will($this->returnValue(false));
+        $navigationCacheMock->expects($this->never())
+            ->method('getNavigation');
+
+        $navigationCollectorMock = $this->getMockBuilder(ZedNavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
+        $navigationCollectorMock->expects($this->once())
+            ->method('getNavigation')
+            ->will($this->returnValue([]));
+
+        $navigationCollectorCacheDecorator = new ZedNavigationCollectorCacheDecorator($navigationCollectorMock, $navigationCacheMock);
+
+        $this->assertInternalType(
+            'array',
+            $navigationCollectorCacheDecorator->getNavigation()
+        );
+    }
+
+    /**
+     * @return void
+     */
+    public function testIfCacheIsEnabledGetNavigationMustReturnNavigationFromCache()
+    {
+        $navigationCacheMock = $this->getMockBuilder(ZedNavigationCacheInterface::class)->setMethods(['isEnabled', 'setNavigation', 'getNavigation'])->getMock();
+        $navigationCacheMock->expects($this->once())
+            ->method('isEnabled')
+            ->will($this->returnValue(true));
+        $navigationCacheMock->expects($this->once())
+            ->method('getNavigation')
+            ->will($this->returnValue([]));
+
+        $navigationCollectorMock = $this->getMockBuilder(ZedNavigationCollectorInterface::class)->setMethods(['getNavigation'])->getMock();
+        $navigationCollectorMock->expects($this->never())
+            ->method('getNavigation');
+
+        $navigationCollectorCacheDecorator = new ZedNavigationCollectorCacheDecorator($navigationCollectorMock, $navigationCacheMock);
+
+        $this->assertInternalType(
+            'array',
+            $navigationCollectorCacheDecorator->getNavigation()
+        );
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderTest.php
new file mode 100644
index 0000000..5648a56
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/Model/SchemaFinder/ZedNavigationSchemaFinderTest.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\Business\Model\SchemaFinder\ZedNavigationSchemaFinder;
+use Symfony\Component\Filesystem\Filesystem;
+use Symfony\Component\Finder\Finder;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group Model
+ * @group SchemaFinder
+ * @group ZedNavigationSchemaFinderTest
+ */
+class ZedNavigationSchemaFinderTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function setUp()
+    {
+        mkdir($this->getFixtureDirectory());
+    }
+
+    /**
+     * @return void
+     */
+    public function tearDown()
+    {
+        $fileSystem = new Filesystem();
+        $fileSystem->remove($this->getFixtureDirectory());
+    }
+
+    /**
+     * @return string
+     */
+    private function getFixtureDirectory()
+    {
+        return __DIR__ . DIRECTORY_SEPARATOR . 'Fixtures';
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetSchemasShouldReturnIterateableFileCollection()
+    {
+        $schemaFinder = new ZedNavigationSchemaFinder(
+            [$this->getFixtureDirectory()],
+            'file name pattern'
+        );
+
+        $this->assertInstanceOf(Finder::class, $schemaFinder->getSchemaFiles());
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactoryTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactoryTest.php
new file mode 100644
index 0000000..0a62084
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationBusinessFactoryTest.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\Business\Model\ZedNavigationBuilder;
+use Spryker\Zed\ZedNavigation\Business\ZedNavigationBusinessFactory;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group ZedNavigationBusinessFactoryTest
+ */
+class ZedNavigationBusinessFactoryTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\ZedNavigationBusinessFactory
+     */
+    private function getFactory()
+    {
+        return new ZedNavigationBusinessFactory();
+    }
+
+    /**
+     * @return void
+     */
+    public function testCreateNavigationBuilderShouldReturnFullyConfiguredInstance()
+    {
+        $instance = $this->getFactory()->createNavigationBuilder();
+
+        $this->assertInstanceOf(ZedNavigationBuilder::class, $instance);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeTest.php
new file mode 100644
index 0000000..e803964
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/Business/ZedNavigationFacadeTest.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation\Business;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\Business\ZedNavigationFacade;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group Business
+ * @group ZedNavigationFacadeTest
+ */
+class ZedNavigationFacadeTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\Business\ZedNavigationFacadeInterface
+     */
+    protected function getFacade()
+    {
+        return new ZedNavigationFacade();
+    }
+
+    /**
+     * @return void
+     */
+    public function testBuildNavigationShouldReturnArrayWithMenuAsKey()
+    {
+        $navigation = $this->getFacade()->buildNavigation('');
+
+        $this->assertArrayHasKey('menu', $navigation);
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/ZedNavigationConfigTest.php b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/ZedNavigationConfigTest.php
new file mode 100644
index 0000000..162370f
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/Spryker/Zed/ZedNavigation/ZedNavigationConfigTest.php
@@ -0,0 +1,81 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedNavigation;
+
+use PHPUnit_Framework_TestCase;
+use Spryker\Zed\ZedNavigation\ZedNavigationConfig;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedNavigation
+ * @group ZedNavigationConfigTest
+ */
+class ZedNavigationConfigTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return \Spryker\Zed\ZedNavigation\ZedNavigationConfig
+     */
+    private function getConfig()
+    {
+        return new ZedNavigationConfig();
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetMaxMenuLevelCountShouldReturnInteger()
+    {
+        $this->assertInternalType('integer', $this->getConfig()->getMaxMenuLevelCount());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetNavigationSchemaPathPatternShouldReturnArrayWithOneEntry()
+    {
+        $navigationSchemaPathPatterns = $this->getConfig()->getNavigationSchemaPathPattern();
+        $this->assertInternalType('array', $navigationSchemaPathPatterns);
+        $this->assertCount(1, $navigationSchemaPathPatterns);
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetNavigationSchemaFileNamePatternShouldReturnString()
+    {
+        $this->assertInternalType('string', $this->getConfig()->getNavigationSchemaFileNamePattern());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetRootNavigationSchemaShouldReturnString()
+    {
+        $this->assertInternalType('string', $this->getConfig()->getRootNavigationSchema());
+    }
+
+    /**
+     * @return void
+     */
+    public function testGetCacheFileShouldReturnString()
+    {
+        $this->assertInternalType('string', $this->getConfig()->getCacheFile());
+    }
+
+    /**
+     * @return void
+     */
+    public function testIsNavigationCacheEnabledShouldReturnBool()
+    {
+        $this->assertInternalType('bool', $this->getConfig()->isNavigationCacheEnabled());
+    }
+
+}
diff --git a/Bundles/ZedNavigation/tests/Unit/_bootstrap.php b/Bundles/ZedNavigation/tests/Unit/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/Unit/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/ZedNavigation/tests/_bootstrap.php b/Bundles/ZedNavigation/tests/_bootstrap.php
new file mode 100644
index 0000000..b3d9bbc
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/_bootstrap.php
@@ -0,0 +1 @@
+<?php
diff --git a/Bundles/ZedNavigation/tests/_data/dump.sql b/Bundles/ZedNavigation/tests/_data/dump.sql
new file mode 100644
index 0000000..4bc742c
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/_data/dump.sql
@@ -0,0 +1 @@
+/* Replace this file with actual dump of your database */
\ No newline at end of file
diff --git a/Bundles/ZedNavigation/tests/_envs/isolated.yml b/Bundles/ZedNavigation/tests/_envs/isolated.yml
new file mode 100644
index 0000000..19baf33
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/_envs/isolated.yml
@@ -0,0 +1,7 @@
+modules:
+    config:
+        \Testify\Module\Environment:
+            mode: 'isolated'
+
+        \Config\Module\ConfigInit:
+            enabled: true
diff --git a/Bundles/ZedNavigation/tests/_support/Module/Unit.php b/Bundles/ZedNavigation/tests/_support/Module/Unit.php
new file mode 100644
index 0000000..fa2c3ab
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/_support/Module/Unit.php
@@ -0,0 +1,13 @@
+<?php
+
+/**
+ * (c) Spryker Systems GmbH copyright protected
+ */
+
+namespace ZedNavigation\Module;
+
+use Codeception\Module;
+
+class Unit extends Module
+{
+}
diff --git a/Bundles/ZedNavigation/tests/_support/UnitTester.php b/Bundles/ZedNavigation/tests/_support/UnitTester.php
new file mode 100644
index 0000000..4ca7efe
--- /dev/null
+++ b/Bundles/ZedNavigation/tests/_support/UnitTester.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace ZedNavigation;
+
+use Codeception\Actor;
+
+/**
+ * Inherited Methods
+ * @method void wantToTest($text)
+ * @method void wantTo($text)
+ * @method void execute($callable)
+ * @method void expectTo($prediction)
+ * @method void expect($prediction)
+ * @method void amGoingTo($argumentation)
+ * @method void am($role)
+ * @method void lookForwardTo($achieveValue)
+ * @method void comment($description)
+ * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
+ *
+ * @SuppressWarnings(PHPMD)
+ */
+class UnitTester extends Actor
+{
+
+    use _generated\UnitTesterActions;
+
+   /**
+    * Define custom actions here
+    */
+
+}
diff --git a/Bundles/ZedRequest/composer.json b/Bundles/ZedRequest/composer.json
index 8b17c31..1f32660 100644
--- a/Bundles/ZedRequest/composer.json
+++ b/Bundles/ZedRequest/composer.json
@@ -12,19 +12,19 @@
     }
   },
   "require": {
-    "spryker/application": "^2.0.0",
-    "spryker/auth": "^2.0.2",
     "spryker/config": "^2.0.0",
-    "spryker/event-journal": "^2.0.1",
     "spryker/guzzle": "^2.1.0",
     "spryker/kernel": "^2.0.0",
-    "spryker/library": "^2.0.0",
     "spryker/log": "^2.0.0",
+    "spryker/messenger": "^1.0.0 || ^2.0.0",
     "spryker/silex": "^2.0.0",
-    "spryker/transfer": "^2.0.0"
+    "spryker/symfony": "^2.1.8",
+    "spryker/util-text": "^1.0.0",
+    "spryker/util-network": "^1.0.0"
   },
   "require-dev": {
     "spryker/code-sniffer": "*",
+    "spryker/propel": "*",
     "spryker/testify": "*"
   },
   "description": "ZedRequest bundle",
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Client/HttpClient.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Client/HttpClient.php
index 9551776..27d2854 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Client/HttpClient.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Client/HttpClient.php
@@ -7,7 +7,8 @@
 
 namespace Spryker\Client\ZedRequest\Client;
 
-use Spryker\Client\Auth\AuthClientInterface;
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
+use Spryker\Service\UtilText\UtilTextServiceInterface;
 use Spryker\Shared\ZedRequest\Client\AbstractHttpClient;
 
 class HttpClient extends AbstractHttpClient implements HttpClientInterface
@@ -24,20 +25,29 @@ class HttpClient extends AbstractHttpClient implements HttpClientInterface
     protected $isAuthenticationEnabled;
 
     /**
-     * @param \Spryker\Client\Auth\AuthClientInterface $authClient
+     * @var \Spryker\Service\UtilText\UtilTextServiceInterface
+     */
+    protected $utilTextService;
+
+    /**
      * @param string $baseUrl
      * @param string $rawToken
      * @param bool $isAuthenticationEnabled
+     * @param \Spryker\Service\UtilText\UtilTextServiceInterface $utilTextService
+     * @param \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface $utilNetworkService
      */
     public function __construct(
-        AuthClientInterface $authClient,
         $baseUrl,
         $rawToken,
-        $isAuthenticationEnabled = true
+        $isAuthenticationEnabled,
+        UtilTextServiceInterface $utilTextService,
+        UtilNetworkServiceInterface $utilNetworkService
     ) {
-        parent::__construct($authClient, $baseUrl);
+        parent::__construct($baseUrl, $utilNetworkService);
+
         $this->rawToken = $rawToken;
         $this->isAuthenticationEnabled = $isAuthenticationEnabled;
+        $this->utilTextService = $utilTextService;
     }
 
     /**
@@ -49,7 +59,7 @@ class HttpClient extends AbstractHttpClient implements HttpClientInterface
 
         if ($this->isAuthenticationEnabled) {
             $headers = [
-                'Auth-Token' => $this->authClient->generateToken($this->rawToken),
+                'Auth-Token' => $this->utilTextService->generateToken($this->rawToken),
             ];
         }
 
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ServiceProvider/ZedRequestClientServiceProvider.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ServiceProvider/ZedRequestClientServiceProvider.php
new file mode 100644
index 0000000..faef702
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ServiceProvider/ZedRequestClientServiceProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\ZedRequest\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Client\Kernel\Container;
+use Spryker\Shared\Kernel\ContainerGlobals;
+
+class ZedRequestClientServiceProvider implements ServiceProviderInterface
+{
+
+    const CLIENT_ZED_REQUEST = 'zed request client';
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        $containerGlobals = new ContainerGlobals();
+        $containerGlobals[static::CLIENT_ZED_REQUEST] = function () {
+            $container = new Container();
+
+            return $container->getLocator()->zedRequest()->client();
+        };
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/BaseStub.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/BaseStub.php
deleted file mode 100644
index e4be7fc..0000000
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/BaseStub.php
+++ /dev/null
@@ -1,52 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Client\ZedRequest\Stub;
-
-use Spryker\Client\ZedRequest\ZedRequestClient;
-
-class BaseStub
-{
-
-    /**
-     * @var \Spryker\Client\ZedRequest\ZedRequestClient
-     */
-    protected $zedStub;
-
-    /**
-     * @param \Spryker\Client\ZedRequest\ZedRequestClient $zedStub
-     */
-    public function __construct(ZedRequestClient $zedStub)
-    {
-        $this->zedStub = $zedStub;
-    }
-
-    /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getInfoMessages()
-    {
-        return $this->zedStub->getLastResponseInfoMessages();
-    }
-
-    /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getSuccessMessages()
-    {
-        return $this->zedStub->getLastResponseSuccessMessages();
-    }
-
-    /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
-     */
-    public function getErrorMessages()
-    {
-        return $this->zedStub->getLastResponseErrorMessages();
-    }
-
-}
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/ZedRequestStub.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/ZedRequestStub.php
new file mode 100644
index 0000000..3b45f8a
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/Stub/ZedRequestStub.php
@@ -0,0 +1,52 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\ZedRequest\Stub;
+
+use Spryker\Client\ZedRequest\ZedRequestClientInterface;
+
+class ZedRequestStub
+{
+
+    /**
+     * @var \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    protected $zedStub;
+
+    /**
+     * @param \Spryker\Client\ZedRequest\ZedRequestClientInterface $zedStub
+     */
+    public function __construct(ZedRequestClientInterface $zedStub)
+    {
+        $this->zedStub = $zedStub;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
+     */
+    public function getInfoMessages()
+    {
+        return $this->zedStub->getLastResponseInfoMessages();
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
+     */
+    public function getSuccessMessages()
+    {
+        return $this->zedStub->getLastResponseSuccessMessages();
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
+     */
+    public function getErrorMessages()
+    {
+        return $this->zedStub->getLastResponseErrorMessages();
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClient.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClient.php
index bdc5c60..6bcb403 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClient.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClient.php
@@ -10,7 +10,7 @@ namespace Spryker\Client\ZedRequest;
 use Generated\Shared\Transfer\LocaleTransfer;
 use Spryker\Client\Kernel\AbstractClient;
 use Spryker\Shared\Kernel\Store;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 /**
  * @method \Spryker\Client\ZedRequest\ZedRequestFactory getFactory()
@@ -39,10 +39,10 @@ class ZedRequestClient extends AbstractClient implements ZedRequestClientInterfa
      * @api
      *
      * @param string $url
-     * @param \Spryker\Shared\Transfer\TransferInterface $object
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $object
      * @param int|null $timeoutInSeconds
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function call($url, TransferInterface $object, $timeoutInSeconds = null)
     {
@@ -58,7 +58,7 @@ class ZedRequestClient extends AbstractClient implements ZedRequestClientInterfa
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseInfoMessages()
     {
@@ -72,7 +72,7 @@ class ZedRequestClient extends AbstractClient implements ZedRequestClientInterfa
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseErrorMessages()
     {
@@ -86,7 +86,7 @@ class ZedRequestClient extends AbstractClient implements ZedRequestClientInterfa
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseSuccessMessages()
     {
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientFactoryTrait.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientFactoryTrait.php
new file mode 100644
index 0000000..f2a961e
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientFactoryTrait.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Client\ZedRequest;
+
+use Spryker\Client\ZedRequest\ServiceProvider\ZedRequestClientServiceProvider;
+
+trait ZedRequestClientFactoryTrait
+{
+
+    /**
+     * @return \Spryker\Client\ZedRequest\ZedRequestClientInterface
+     */
+    public function getZedRequestClient()
+    {
+        return $this->getProvidedDependency(ZedRequestClientServiceProvider::CLIENT_ZED_REQUEST);
+    }
+
+    /**
+     * @param string $key
+     *
+     * @throws \Spryker\Client\Kernel\Exception\Container\ContainerKeyNotFoundException
+     *
+     * @return mixed
+     */
+    abstract public function getProvidedDependency($key);
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientInterface.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientInterface.php
index 38be835..d1aa35d 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientInterface.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestClientInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Client\ZedRequest;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 interface ZedRequestClientInterface
 {
@@ -16,31 +16,31 @@ interface ZedRequestClientInterface
      * @api
      *
      * @param string $url
-     * @param \Spryker\Shared\Transfer\TransferInterface $object
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $object
      * @param int|null $timeoutInSeconds
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function call($url, TransferInterface $object, $timeoutInSeconds = null);
 
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseInfoMessages();
 
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseErrorMessages();
 
     /**
      * @api
      *
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getLastResponseSuccessMessages();
 
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestConfig.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestConfig.php
index bdd23b9..23f28e6 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestConfig.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestConfig.php
@@ -7,32 +7,18 @@
 
 namespace Spryker\Client\ZedRequest;
 
-use Spryker\Shared\Auth\AuthConstants;
-use Spryker\Shared\Config\Config;
+use Spryker\Client\Kernel\AbstractBundleConfig;
 use Spryker\Shared\ZedRequest\ZedRequestConstants;
 
-class ZedRequestConfig
+class ZedRequestConfig extends AbstractBundleConfig
 {
 
     /**
-     * @var \Spryker\Shared\Config\Config
-     */
-    protected $config;
-
-    /**
-     * @param \Spryker\Shared\Config\Config $config
-     */
-    public function __construct(Config $config)
-    {
-        $this->config = $config;
-    }
-
-    /**
      * @return string
      */
     public function getRawToken()
     {
-        $authConfig = $this->config->get(ZedRequestConstants::AUTH_DEFAULT_CREDENTIALS);
+        $authConfig = $this->getConfig()->get(ZedRequestConstants::AUTH_DEFAULT_CREDENTIALS);
         $rawToken = $authConfig['yves_system']['token'];
 
         return $rawToken;
@@ -43,12 +29,12 @@ class ZedRequestConfig
      */
     public function getZedRequestBaseUrl()
     {
-        $sslEnabled = $this->config->get(ZedRequestConstants::ZED_API_SSL_ENABLED);
+        $sslEnabled = $this->getConfig()->get(ZedRequestConstants::ZED_API_SSL_ENABLED);
 
         if ($sslEnabled === true) {
-            return 'https://' . $this->config->get(ZedRequestConstants::HOST_SSL_ZED_API);
+            return 'https://' . $this->getConfig()->get(ZedRequestConstants::HOST_SSL_ZED_API);
         } else {
-            return 'http://' . $this->config->get(ZedRequestConstants::HOST_ZED_API);
+            return 'http://' . $this->getConfig()->get(ZedRequestConstants::HOST_ZED_API);
         }
     }
 
@@ -57,7 +43,7 @@ class ZedRequestConfig
      */
     public function isAuthenticationEnabled()
     {
-        return $this->config->get(AuthConstants::AUTH_ZED_ENABLED, true);
+        return $this->getConfig()->get(ZedRequestConstants::AUTH_ZED_ENABLED, true);
     }
 
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestDependencyProvider.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestDependencyProvider.php
index a87769a..29236b4 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestDependencyProvider.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestDependencyProvider.php
@@ -13,7 +13,8 @@ use Spryker\Client\Kernel\Container;
 class ZedRequestDependencyProvider extends AbstractDependencyProvider
 {
 
-    const CLIENT_AUTH = 'auth client';
+    const SERVICE_NETWORK = 'util network service';
+    const SERVICE_TEXT = 'util text service';
 
     /**
      * @param \Spryker\Client\Kernel\Container $container
@@ -22,8 +23,35 @@ class ZedRequestDependencyProvider extends AbstractDependencyProvider
      */
     public function provideServiceLayerDependencies(Container $container)
     {
-        $container[self::CLIENT_AUTH] = function (Container $container) {
-            return $container->getLocator()->auth()->client();
+        $container = $this->addUtilNetworkService($container);
+        $container = $this->addUtilTextService($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addUtilNetworkService(Container $container)
+    {
+        $container[static::SERVICE_NETWORK] = function (Container $container) {
+            return $container->getLocator()->utilNetwork()->service();
+        };
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Client\Kernel\Container $container
+     *
+     * @return \Spryker\Client\Kernel\Container
+     */
+    protected function addUtilTextService(Container $container)
+    {
+        $container[static::SERVICE_TEXT] = function (Container $container) {
+            return $container->getLocator()->utilText()->service();
         };
 
         return $container;
diff --git a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestFactory.php b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestFactory.php
index 50e20e4..e944b1f 100644
--- a/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestFactory.php
+++ b/Bundles/ZedRequest/src/Spryker/Client/ZedRequest/ZedRequestFactory.php
@@ -10,8 +10,10 @@ namespace Spryker\Client\ZedRequest;
 use Spryker\Client\Kernel\AbstractFactory;
 use Spryker\Client\ZedRequest\Client\HttpClient;
 use Spryker\Client\ZedRequest\Client\ZedClient;
-use Spryker\Shared\Config\Config;
 
+/**
+ * @method \Spryker\Client\ZedRequest\ZedRequestConfig getConfig()
+ */
 class ZedRequestFactory extends AbstractFactory
 {
 
@@ -31,21 +33,30 @@ class ZedRequestFactory extends AbstractFactory
     protected function createHttpClient()
     {
         $httpClient = new HttpClient(
-            $this->getProvidedDependency(ZedRequestDependencyProvider::CLIENT_AUTH),
             $this->getConfig()->getZedRequestBaseUrl(),
             $this->getConfig()->getRawToken(),
-            $this->getConfig()->isAuthenticationEnabled()
+            $this->getConfig()->isAuthenticationEnabled(),
+            $this->getUtilTextService(),
+            $this->getUtilNetworkService()
         );
 
         return $httpClient;
     }
 
     /**
-     * @return \Spryker\Client\ZedRequest\ZedRequestConfig
+     * @return \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
+     */
+    protected function getUtilNetworkService()
+    {
+        return $this->getProvidedDependency(ZedRequestDependencyProvider::SERVICE_NETWORK);
+    }
+
+    /**
+     * @return \Spryker\Service\UtilText\UtilTextServiceInterface
      */
-    protected function getConfig()
+    protected function getUtilTextService()
     {
-        return new ZedRequestConfig(Config::getInstance());
+        return $this->getProvidedDependency(ZedRequestDependencyProvider::SERVICE_TEXT);
     }
 
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractHttpClient.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractHttpClient.php
index c6c03b4..0584753 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractHttpClient.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractHttpClient.php
@@ -15,15 +15,11 @@ use GuzzleHttp\Psr7\Request as Psr7Request;
 use LogicException;
 use Psr\Http\Message\RequestInterface as MessageRequestInterface;
 use Psr\Http\Message\ResponseInterface as MessageResponseInterface;
-use Spryker\Client\Auth\AuthClientInterface;
 use Spryker\Client\ZedRequest\Client\Request;
 use Spryker\Client\ZedRequest\Client\Response as SprykerResponse;
+use Spryker\Service\UtilNetwork\UtilNetworkServiceInterface;
 use Spryker\Shared\Config\Config;
-use Spryker\Shared\EventJournal\EventJournalConstants;
-use Spryker\Shared\EventJournal\Model\Event;
-use Spryker\Shared\EventJournal\Model\SharedEventJournal;
-use Spryker\Shared\Library\System;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Shared\ZedRequest\Client\Exception\InvalidZedResponseException;
 use Spryker\Shared\ZedRequest\Client\Exception\RequestException;
 use Spryker\Shared\ZedRequest\Client\HandlerStack\HandlerStackContainer;
@@ -91,20 +87,20 @@ abstract class AbstractHttpClient implements HttpClientInterface
     protected static $timeoutInSeconds = 60;
 
     /**
-     * @var \Spryker\Client\Auth\AuthClientInterface
+     * @var \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
      */
-    protected $authClient;
+    protected $utilNetworkService;
 
     /**
-     * @param \Spryker\Client\Auth\AuthClientInterface $authClient
      * @param string $baseUrl
+     * @param \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface $utilNetworkService
      */
     public function __construct(
-        AuthClientInterface $authClient,
-        $baseUrl
+        $baseUrl,
+        UtilNetworkServiceInterface $utilNetworkService
     ) {
-        $this->authClient = $authClient;
         $this->baseUrl = $baseUrl;
+        $this->utilNetworkService = $utilNetworkService;
     }
 
     /**
@@ -124,7 +120,7 @@ abstract class AbstractHttpClient implements HttpClientInterface
 
     /**
      * @param string $pathInfo
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transferObject
      * @param array $metaTransfers
      * @param int|null $timeoutInSeconds
      *
@@ -143,8 +139,6 @@ abstract class AbstractHttpClient implements HttpClientInterface
         $requestTransfer = $this->createRequestTransfer($transferObject, $metaTransfers);
         $request = $this->createGuzzleRequest($pathInfo);
 
-        $this->logRequest($pathInfo, $requestTransfer, (string)$request->getBody());
-
         try {
             $response = $this->sendRequest($request, $requestTransfer, $timeoutInSeconds);
         } catch (GuzzleRequestException $e) {
@@ -159,8 +153,6 @@ abstract class AbstractHttpClient implements HttpClientInterface
         }
         $responseTransfer = $this->getTransferFromResponse($response, $request);
 
-        $this->logResponse($pathInfo, $responseTransfer, (string)$response->getBody());
-
         return $responseTransfer;
     }
 
@@ -181,38 +173,13 @@ abstract class AbstractHttpClient implements HttpClientInterface
             $headers[$header] = $value;
         }
 
-        $pathInfo = $this->addRequestId($pathInfo);
-
         $request = new Psr7Request('POST', $this->baseUrl . $pathInfo, $headers);
 
         return $request;
     }
 
     /**
-     * @deprecated RequestId is added by ZedRequestHeaderMiddleware, when EventJournal is disabled the new Plugin should be added in projects if needed.
-     *
-     * @param string $pathInfo
-     *
-     * @return string
-     */
-    protected function addRequestId($pathInfo)
-    {
-        if (Config::get(EventJournalConstants::DISABLE_EVENT_JOURNAL, false)) {
-            return $pathInfo;
-        }
-
-        $char = (strpos($pathInfo, '?') === false) ? '?' : '&';
-        $eventJournal = new SharedEventJournal();
-        $event = new Event();
-        $eventJournal->applyCollectors($event);
-        $requestId = $event->getFields()['request_id'];
-        $pathInfo .= $char . 'yvesRequestId=' . $requestId;
-
-        return $pathInfo;
-    }
-
-    /**
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transferObject
      * @param array $metaTransfers
      *
      * @throws \LogicException
@@ -224,7 +191,7 @@ abstract class AbstractHttpClient implements HttpClientInterface
         $request = $this->getRequest();
         $request->setSessionId(session_id());
         $request->setTime(time());
-        $request->setHost(System::getHostname() ?: 'n/a');
+        $request->setHost($this->utilNetworkService->getHostname() ?: 'n/a');
 
         foreach ($metaTransfers as $name => $metaTransfer) {
             if (!is_string($name) || is_numeric($name) || !$metaTransfer instanceof TransferInterface) {
@@ -293,66 +260,6 @@ abstract class AbstractHttpClient implements HttpClientInterface
     }
 
     /**
-     * @deprecated Requests logged within GuzzleLogServiceProvider() add this one to your Bootstrap.
-     *
-     * @param string $pathInfo
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $requestTransfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function logRequest($pathInfo, EmbeddedTransferInterface $requestTransfer, $rawBody)
-    {
-        $this->doLog($pathInfo, static::EVENT_NAME_TRANSFER_REQUEST, $requestTransfer, $rawBody);
-    }
-
-    /**
-     * @deprecated Response logged within GuzzleLogServiceProvider() add this one to your Bootstrap.
-     *
-     * @param string $pathInfo
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $responseTransfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function logResponse($pathInfo, EmbeddedTransferInterface $responseTransfer, $rawBody)
-    {
-        $this->doLog($pathInfo, static::EVENT_NAME_TRANSFER_RESPONSE, $responseTransfer, $rawBody);
-    }
-
-    /**
-     * @deprecated This method was used by logRequest() and logResponse(). You can also use the LoggerTrait.
-     *
-     * @param string $pathInfo
-     * @param string $subType
-     * @param \Spryker\Shared\ZedRequest\Client\EmbeddedTransferInterface $transfer
-     * @param string $rawBody
-     *
-     * @return void
-     */
-    protected function doLog($pathInfo, $subType, EmbeddedTransferInterface $transfer, $rawBody)
-    {
-        if (Config::get(EventJournalConstants::DISABLE_EVENT_JOURNAL, false)) {
-            return;
-        }
-
-        $eventJournal = new SharedEventJournal();
-        $event = new Event();
-        $responseTransfer = $transfer->getTransfer();
-        if ($responseTransfer instanceof TransferInterface) {
-            $event->setField(static::EVENT_FIELD_TRANSFER_DATA, $responseTransfer->modifiedToArray(true));
-            $event->setField(static::EVENT_FIELD_TRANSFER_CLASS, get_class($responseTransfer));
-        } else {
-            $event->setField(static::EVENT_FIELD_TRANSFER_DATA, null);
-            $event->setField(static::EVENT_FIELD_TRANSFER_CLASS, null);
-        }
-        $event->setField(Event::FIELD_NAME, 'transfer');
-        $event->setField(static::EVENT_FIELD_PATH_INFO, $pathInfo);
-        $event->setField(static::EVENT_FIELD_SUB_TYPE, $subType);
-        $eventJournal->saveEvent($event);
-    }
-
-    /**
      * Used for debug output
      *
      * @return int
@@ -369,17 +276,20 @@ abstract class AbstractHttpClient implements HttpClientInterface
      */
     protected function addCookiesToForwardDebugSession(array $config)
     {
-        if (!Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_FORWARD_ENABLED)) {
+        $isSessionForwardingEnabled = Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_FORWARD_ENABLED, false);
+
+        if (!$isSessionForwardingEnabled) {
             return $config;
         }
 
-        if (!isset($_COOKIE[Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_NAME)])) {
+        $debugSessionName = Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_NAME, 'XDEBUG_SESSION');
+        if (!isset($_COOKIE[$debugSessionName])) {
             return $config;
         }
 
         $cookie = new SetCookie();
-        $cookie->setName(trim(Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_NAME)));
-        $cookie->setValue($_COOKIE[Config::get(ZedRequestConstants::TRANSFER_DEBUG_SESSION_NAME)]);
+        $cookie->setName($debugSessionName);
+        $cookie->setValue($_COOKIE[$debugSessionName]);
         $cookie->setDomain(Config::get(ZedRequestConstants::HOST_ZED_API));
 
         $cookieJar = new CookieJar();
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractRequest.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractRequest.php
index b4a5cbe..b5f509b 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractRequest.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractRequest.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 abstract class AbstractRequest extends AbstractObject implements EmbeddedTransferInterface, RequestInterface
 {
@@ -57,7 +57,7 @@ abstract class AbstractRequest extends AbstractObject implements EmbeddedTransfe
     /**
      * @param string $name
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface|null
      */
     public function getMetaTransfer($name)
     {
@@ -75,7 +75,7 @@ abstract class AbstractRequest extends AbstractObject implements EmbeddedTransfe
 
     /**
      * @param string $name
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
@@ -150,7 +150,7 @@ abstract class AbstractRequest extends AbstractObject implements EmbeddedTransfe
     }
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface|null
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface|null
      */
     public function getTransfer()
     {
@@ -170,7 +170,7 @@ abstract class AbstractRequest extends AbstractObject implements EmbeddedTransfe
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
@@ -205,7 +205,7 @@ abstract class AbstractRequest extends AbstractObject implements EmbeddedTransfe
     /**
      * @param string $transferClassName
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     private function createTransferObject($transferClassName)
     {
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractResponse.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractResponse.php
index aaae4e6..031a544 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractResponse.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractResponse.php
@@ -7,7 +7,8 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Generated\Shared\Transfer\MessageTransfer;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Shared\ZedRequest\Client\Exception\TransferNotFoundException;
 
 abstract class AbstractResponse extends AbstractObject implements EmbeddedTransferInterface, ResponseInterface
@@ -43,20 +44,32 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
         parent::fromArray($values);
 
         foreach ($this->values[ResponseInterface::INFO_MESSAGES] as $key => $message) {
-            $this->values[ResponseInterface::INFO_MESSAGES][$key] = new Message($message);
+            $messageTransfer = new MessageTransfer();
+            $messageTransfer->setValue($message['value']);
+            $messageTransfer->setParameters($message['parameters']);
+
+            $this->values[ResponseInterface::INFO_MESSAGES][$key] = $messageTransfer;
         }
 
         foreach ($this->values[ResponseInterface::ERROR_MESSAGES] as $key => $message) {
-            $this->values[ResponseInterface::ERROR_MESSAGES][$key] = new Message($message);
+            $messageTransfer = new MessageTransfer();
+            $messageTransfer->setValue($message['value']);
+            $messageTransfer->setParameters($message['parameters']);
+
+            $this->values[ResponseInterface::ERROR_MESSAGES][$key] = $messageTransfer;
         }
 
         foreach ($this->values[ResponseInterface::SUCCESS_MESSAGES] as $key => $message) {
-            $this->values[ResponseInterface::SUCCESS_MESSAGES][$key] = new Message($message);
+            $messageTransfer = new MessageTransfer();
+            $messageTransfer->setValue($message['value']);
+            $messageTransfer->setParameters($message['parameters']);
+
+            $this->values[ResponseInterface::SUCCESS_MESSAGES][$key] = $messageTransfer;
         }
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getErrorMessages()
     {
@@ -72,7 +85,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     {
         $errorMessages = $this->getErrorMessages();
         foreach ($errorMessages as $errorMessage) {
-            if ($errorMessage->getMessage() === $messageString) {
+            if ($errorMessage->getValue() === $messageString) {
                 return true;
             }
         }
@@ -95,11 +108,11 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $errorMessage
+     * @param \Generated\Shared\Transfer\MessageTransfer $errorMessage
      *
      * @return $this
      */
-    public function addErrorMessage(Message $errorMessage)
+    public function addErrorMessage(MessageTransfer $errorMessage)
     {
         $this->values[ResponseInterface::ERROR_MESSAGES][] = $errorMessage;
 
@@ -107,7 +120,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getInfoMessages()
     {
@@ -123,7 +136,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     {
         $messages = $this->getInfoMessages();
         foreach ($messages as $message) {
-            if ($message->getMessage() === $messageString) {
+            if ($message->getValue() === $messageString) {
                 return true;
             }
         }
@@ -132,11 +145,11 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $message
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
      *
      * @return $this
      */
-    public function addInfoMessage(Message $message)
+    public function addInfoMessage(MessageTransfer $message)
     {
         $this->values[ResponseInterface::INFO_MESSAGES][] = $message;
 
@@ -158,7 +171,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getSuccessMessages()
     {
@@ -174,7 +187,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     {
         $successMessages = $this->getSuccessMessages();
         foreach ($successMessages as $successMessage) {
-            if ($successMessage->getMessage() === $messageString) {
+            if ($successMessage->getValue() === $messageString) {
                 return true;
             }
         }
@@ -197,11 +210,11 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $successMessage
+     * @param \Generated\Shared\Transfer\MessageTransfer $successMessage
      *
      * @return $this
      */
-    public function addSuccessMessage(Message $successMessage)
+    public function addSuccessMessage(MessageTransfer $successMessage)
     {
         $this->values[ResponseInterface::SUCCESS_MESSAGES][] = $successMessage;
 
@@ -231,7 +244,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     /**
      * @throws \Spryker\Shared\ZedRequest\Client\Exception\TransferNotFoundException
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getTransfer()
     {
@@ -250,7 +263,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     /**
      * @param string $transferClassName
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     private function createTransferObject($transferClassName)
     {
@@ -260,7 +273,7 @@ abstract class AbstractResponse extends AbstractObject implements EmbeddedTransf
     }
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractZedClient.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractZedClient.php
index 47d3950..92216a9 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractZedClient.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/AbstractZedClient.php
@@ -8,7 +8,7 @@
 namespace Spryker\Shared\ZedRequest\Client;
 
 use BadMethodCallException;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 abstract class AbstractZedClient implements AbstractZedClientInterface
 {
@@ -24,7 +24,7 @@ abstract class AbstractZedClient implements AbstractZedClientInterface
     private static $lastResponse = null;
 
     /**
-     * @var \Spryker\Shared\Transfer\TransferInterface[]|\Closure[]
+     * @var \Spryker\Shared\Kernel\Transfer\TransferInterface[]|\Closure[]
      */
     private $metaTransfers = [
     ];
@@ -51,7 +51,7 @@ abstract class AbstractZedClient implements AbstractZedClientInterface
     }
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface[]
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface[]
      */
     private function prepareAndGetMetaTransfers()
     {
@@ -66,10 +66,10 @@ abstract class AbstractZedClient implements AbstractZedClientInterface
 
     /**
      * @param string $url
-     * @param \Spryker\Shared\Transfer\TransferInterface $object
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $object
      * @param int|null $timeoutInSeconds (optional) default: null
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function call($url, TransferInterface $object, $timeoutInSeconds = null)
     {
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/EmbeddedTransferInterface.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/EmbeddedTransferInterface.php
index 8b63fad..bd599b7 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/EmbeddedTransferInterface.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/EmbeddedTransferInterface.php
@@ -7,20 +7,20 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 interface EmbeddedTransferInterface
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
     public function setTransfer(TransferInterface $transferObject);
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getTransfer();
 
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Exception/RequestException.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Exception/RequestException.php
index 3faec9c..36d0484 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Exception/RequestException.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Exception/RequestException.php
@@ -7,8 +7,8 @@
 
 namespace Spryker\Shared\ZedRequest\Client\Exception;
 
-use Spryker\Shared\Library\Exception\AbstractErrorRendererException;
+use Exception;
 
-class RequestException extends AbstractErrorRendererException
+class RequestException extends Exception
 {
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/HttpClientInterface.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/HttpClientInterface.php
index e944524..8b24735 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/HttpClientInterface.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/HttpClientInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 /**
  * Interface HttpClientInterface
@@ -24,7 +24,7 @@ interface HttpClientInterface
 
     /**
      * @param string $pathInfo
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transferObject
      * @param array $metaTransfers
      * @param int|null $timeoutInSeconds
      *
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Message.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Message.php
deleted file mode 100644
index e2da1c6..0000000
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/Message.php
+++ /dev/null
@@ -1,61 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Spryker\Shared\ZedRequest\Client;
-
-class Message extends AbstractObject
-{
-
-    /**
-     * @var array
-     */
-    protected $values = [
-        'data' => [],
-        'message' => null,
-    ];
-
-    /**
-     * @return array
-     */
-    public function getData()
-    {
-        return $this->values['data'];
-    }
-
-    /**
-     * @param array $data
-     *
-     * @return $this
-     */
-    public function setData($data)
-    {
-        $this->values['data'] = $data;
-
-        return $this;
-    }
-
-    /**
-     * @return string
-     */
-    public function getMessage()
-    {
-        return $this->values['message'];
-    }
-
-    /**
-     * @param string $message
-     *
-     * @return $this
-     */
-    public function setMessage($message)
-    {
-        $this->values['message'] = $message;
-
-        return $this;
-    }
-
-}
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/RequestInterface.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/RequestInterface.php
index 6be4871..b400239 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/RequestInterface.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/RequestInterface.php
@@ -7,7 +7,7 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 interface RequestInterface
 {
@@ -27,13 +27,13 @@ interface RequestInterface
     /**
      * @param string $name
      *
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getMetaTransfer($name);
 
     /**
      * @param string $name
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
@@ -76,12 +76,12 @@ interface RequestInterface
     public function setTime($time);
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getTransfer();
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/ResponseInterface.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/ResponseInterface.php
index d5753e1..81c4479 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/ResponseInterface.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Client/ResponseInterface.php
@@ -7,7 +7,8 @@
 
 namespace Spryker\Shared\ZedRequest\Client;
 
-use Spryker\Shared\Transfer\TransferInterface;
+use Generated\Shared\Transfer\MessageTransfer;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 
 interface ResponseInterface
 {
@@ -27,7 +28,7 @@ interface ResponseInterface
     public function fromArray(array $values);
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getErrorMessages();
 
@@ -46,14 +47,14 @@ interface ResponseInterface
     public function addErrorMessages(array $errorMessages);
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $errorMessage
+     * @param \Generated\Shared\Transfer\MessageTransfer $errorMessage
      *
      * @return $this
      */
-    public function addErrorMessage(Message $errorMessage);
+    public function addErrorMessage(MessageTransfer $errorMessage);
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getInfoMessages();
 
@@ -65,11 +66,11 @@ interface ResponseInterface
     public function hasInfoMessage($messageString);
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $message
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
      *
      * @return $this
      */
-    public function addInfoMessage(Message $message);
+    public function addInfoMessage(MessageTransfer $message);
 
     /**
      * @param array $messages
@@ -79,7 +80,7 @@ interface ResponseInterface
     public function addInfoMessages(array $messages);
 
     /**
-     * @return \Spryker\Shared\ZedRequest\Client\Message[]
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
      */
     public function getSuccessMessages();
 
@@ -98,11 +99,11 @@ interface ResponseInterface
     public function addSuccessMessages(array $successMessages);
 
     /**
-     * @param \Spryker\Shared\ZedRequest\Client\Message $successMessage
+     * @param \Generated\Shared\Transfer\MessageTransfer $successMessage
      *
      * @return $this
      */
-    public function addSuccessMessage(Message $successMessage);
+    public function addSuccessMessage(MessageTransfer $successMessage);
 
     /**
      * @return bool
@@ -117,12 +118,12 @@ interface ResponseInterface
     public function setSuccess($success);
 
     /**
-     * @return \Spryker\Shared\Transfer\TransferInterface
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
      */
     public function getTransfer();
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transferObject
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
      *
      * @return $this
      */
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Transfer/kernel.transfer.xml b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Transfer/kernel.transfer.xml
new file mode 100644
index 0000000..bc7ae3b
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/Transfer/kernel.transfer.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0"?>
+<transfers xmlns="spryker:transfer-01"
+    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+    xsi:schemaLocation="spryker:transfer-01 http://static.spryker.com/transfer-01.xsd">
+
+    <transfer name="Message">
+        <property name="value" type="string"/>
+        <property name="parameters" type="array"/>
+    </transfer>
+
+</transfers>
+
diff --git a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/ZedRequestConstants.php b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/ZedRequestConstants.php
index 205154d..16f468b 100644
--- a/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/ZedRequestConstants.php
+++ b/Bundles/ZedRequest/src/Spryker/Shared/ZedRequest/ZedRequestConstants.php
@@ -7,22 +7,22 @@
 
 namespace Spryker\Shared\ZedRequest;
 
-use Spryker\Shared\Application\ApplicationConstants;
-use Spryker\Shared\Auth\AuthConstants;
-
 interface ZedRequestConstants
 {
 
-    const AUTH_DEFAULT_CREDENTIALS = AuthConstants::AUTH_DEFAULT_CREDENTIALS;
+    const AUTH_ZED_ENABLED = 'AUTH_ZED_ENABLED';
+    const AUTH_DEFAULT_CREDENTIALS = 'AUTH_DEFAULT_CREDENTIALS';
+
+    const HOST_SSL_ZED_API = 'HOST_SSL_ZED_API';
+    const HOST_ZED_API = 'HOST_ZED_API';
 
-    const HOST_SSL_ZED_API = ApplicationConstants::HOST_SSL_ZED_API;
-    const HOST_ZED_API = ApplicationConstants::HOST_ZED_API;
+    const TRANSFER_DEBUG_SESSION_FORWARD_ENABLED = 'TRANSFER_DEBUG_SESSION_FORWARD_ENABLED';
+    const TRANSFER_DEBUG_SESSION_NAME = 'TRANSFER_DEBUG_SESSION_NAME';
+    const TRANSFER_PASSWORD = 'TRANSFER_PASSWORD';
+    const TRANSFER_USERNAME = 'TRANSFER_USERNAME';
 
-    const TRANSFER_DEBUG_SESSION_FORWARD_ENABLED = ApplicationConstants::TRANSFER_DEBUG_SESSION_FORWARD_ENABLED;
-    const TRANSFER_DEBUG_SESSION_NAME = ApplicationConstants::TRANSFER_DEBUG_SESSION_NAME;
-    const TRANSFER_PASSWORD = ApplicationConstants::TRANSFER_PASSWORD;
-    const TRANSFER_USERNAME = ApplicationConstants::TRANSFER_USERNAME;
+    const ZED_API_SSL_ENABLED = 'ZED_API_SSL_ENABLED';
 
-    const ZED_API_SSL_ENABLED = ApplicationConstants::ZED_API_SSL_ENABLED;
+    const SET_REPEAT_DATA = 'SET_REPEAT_DATA';
 
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkBridge.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkBridge.php
new file mode 100644
index 0000000..3f2cb6c
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkBridge.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\ZedRequest\Dependency\Service;
+
+class ZedRequestToUtilNetworkBridge implements ZedRequestToUtilNetworkInterface
+{
+
+    /**
+     * @var \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface
+     */
+    protected $utilNetworkService;
+
+    /**
+     * @param \Spryker\Service\UtilNetwork\UtilNetworkServiceInterface $utilNetworkService
+     */
+    public function __construct($utilNetworkService)
+    {
+        $this->utilNetworkService = $utilNetworkService;
+    }
+
+    /**
+     * @return string
+     */
+    public function getRequestId()
+    {
+        return $this->utilNetworkService->getRequestId();
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkInterface.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkInterface.php
new file mode 100644
index 0000000..c13f19c
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Dependency/Service/ZedRequestToUtilNetworkInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\ZedRequest\Dependency\Service;
+
+interface ZedRequestToUtilNetworkInterface
+{
+
+    /**
+     * @return string
+     */
+    public function getRequestId();
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php
new file mode 100644
index 0000000..a5007c0
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ServiceProvider/ZedRequestHeaderServiceProvider.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\ZedRequest\Plugin\ServiceProvider;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Shared\ZedRequest\Client\HandlerStack\HandlerStackContainer;
+use Spryker\Yves\Kernel\AbstractPlugin;
+
+/**
+ * @method \Spryker\Yves\ZedRequest\ZedRequestFactory getFactory()
+ */
+class ZedRequestHeaderServiceProvider extends AbstractPlugin implements ServiceProviderInterface
+{
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+        $handlerStackContainer = new HandlerStackContainer();
+        $handlerStackContainer->addMiddleware(
+            $this->getFactory()->createZedRequestHeaderMiddleware()
+        );
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ZedRequestHeaderMiddleware.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ZedRequestHeaderMiddleware.php
new file mode 100644
index 0000000..2b810da
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/Plugin/ZedRequestHeaderMiddleware.php
@@ -0,0 +1,53 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\ZedRequest\Plugin;
+
+use GuzzleHttp\Middleware;
+use Psr\Http\Message\RequestInterface;
+use Spryker\Shared\ZedRequest\Client\Middleware\MiddlewareInterface;
+use Spryker\Yves\ZedRequest\Dependency\Service\ZedRequestToUtilNetworkInterface;
+
+class ZedRequestHeaderMiddleware implements MiddlewareInterface
+{
+
+    /**
+     * @var \Spryker\Yves\ZedRequest\Dependency\Service\ZedRequestToUtilNetworkInterface
+     */
+    protected $utilNetworkService;
+
+    /**
+     * @param \Spryker\Yves\ZedRequest\Dependency\Service\ZedRequestToUtilNetworkInterface $utilNetworkService
+     */
+    public function __construct(ZedRequestToUtilNetworkInterface $utilNetworkService)
+    {
+        $this->utilNetworkService = $utilNetworkService;
+    }
+
+    /**
+     * @return string
+     */
+    public function getName()
+    {
+        return static::class;
+    }
+
+    /**
+     * @return callable
+     */
+    public function getCallable()
+    {
+        return Middleware::mapRequest(function (RequestInterface $request) {
+            if ($request->hasHeader('X-Yves-Host')) {
+                $request = $request->withAddedHeader('X-Request-ID', $this->utilNetworkService->getRequestId());
+            }
+
+            return $request;
+        });
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestDependencyProvider.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestDependencyProvider.php
new file mode 100644
index 0000000..0f1c146
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestDependencyProvider.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Yves\ZedRequest;
+
+use Spryker\Yves\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Yves\Kernel\Container;
+use Spryker\Yves\ZedRequest\Dependency\Service\ZedRequestToUtilNetworkBridge;
+
+class ZedRequestDependencyProvider extends AbstractBundleDependencyProvider
+{
+
+    const SERVICE_UTIL_NETWORK = 'util network service';
+
+    /**
+     * @param \Spryker\Yves\Kernel\Container $container
+     *
+     * @return \Spryker\Yves\Kernel\Container
+     */
+    public function provideDependencies(Container $container)
+    {
+        $container = $this->addUtilNetworkService($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Yves\Kernel\Container $container
+     *
+     * @return \Spryker\Yves\Kernel\Container
+     */
+    protected function addUtilNetworkService(Container $container)
+    {
+        $container[self::SERVICE_UTIL_NETWORK] = function (Container $container) {
+            return new ZedRequestToUtilNetworkBridge($container->getLocator()->utilNetwork()->service());
+        };
+
+        return $container;
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestFactory.php b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestFactory.php
index 6c49869..021df07 100644
--- a/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestFactory.php
+++ b/Bundles/ZedRequest/src/Spryker/Yves/ZedRequest/ZedRequestFactory.php
@@ -9,6 +9,7 @@ namespace Spryker\Yves\ZedRequest;
 
 use Spryker\Shared\ZedRequest\Client\HandlerStack\HandlerStackContainer;
 use Spryker\Yves\Kernel\AbstractFactory;
+use Spryker\Yves\ZedRequest\Plugin\ZedRequestHeaderMiddleware;
 use Spryker\Yves\ZedRequest\Plugin\ZedRequestLogPlugin;
 use Spryker\Yves\ZedRequest\Plugin\ZedResponseLogPlugin;
 
@@ -39,4 +40,20 @@ class ZedRequestFactory extends AbstractFactory
         return new ZedResponseLogPlugin();
     }
 
+    /**
+     * @return \Spryker\Yves\ZedRequest\Plugin\ZedRequestHeaderMiddleware
+     */
+    public function createZedRequestHeaderMiddleware()
+    {
+        return new ZedRequestHeaderMiddleware($this->getUtilNetworkService());
+    }
+
+    /**
+     * @return \Spryker\Yves\ZedRequest\Dependency\Service\ZedRequestToUtilNetworkInterface
+     */
+    protected function getUtilNetworkService()
+    {
+        return $this->getProvidedDependency(ZedRequestDependencyProvider::SERVICE_UTIL_NETWORK);
+    }
+
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/Repeater.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/Repeater.php
new file mode 100644
index 0000000..1b1ba28
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/Repeater.php
@@ -0,0 +1,115 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Business\Model;
+
+use Spryker\Shared\Config\Config;
+use Spryker\Shared\Kernel\Store;
+use Spryker\Shared\ZedRequest\Client\RequestInterface;
+use Spryker\Shared\ZedRequest\ZedRequestConstants;
+use Symfony\Component\HttpFoundation\Request as HttpRequest;
+
+class Repeater implements RepeaterInterface
+{
+
+    /**
+     * @var bool
+     */
+    protected $isRepeatInProgress = false;
+
+    /**
+     * @param string|null $mvc
+     *
+     * @return string
+     */
+    public function getRepeatData($mvc = null)
+    {
+        $this->isRepeatInProgress = true;
+        if ($mvc !== null) {
+            return $this->getFlashInFile('last_yves_request_' . $mvc . '.log');
+        } else {
+            return $this->getFlashInFile('last_yves_request.log');
+        }
+    }
+
+    /**
+     * @param \Spryker\Shared\ZedRequest\Client\RequestInterface $transferObject
+     * @param \Symfony\Component\HttpFoundation\Request $httpRequest
+     *
+     * @return void
+     */
+    public function setRepeatData(RequestInterface $transferObject, HttpRequest $httpRequest)
+    {
+        if ($this->isRepeatInProgress) {
+            return;
+        }
+
+        if (Config::get(ZedRequestConstants::SET_REPEAT_DATA, false) === false) {
+            return;
+        }
+
+        $repeatData = [
+            'module' => $httpRequest->attributes->get('module'),
+            'controller' => $httpRequest->attributes->get('controller'),
+            'action' => $httpRequest->attributes->get('action'),
+            'params' => $transferObject->toArray(false),
+        ];
+
+        $mvc = sprintf(
+            '%s_%s_%s',
+            $httpRequest->attributes->get('module'),
+            $httpRequest->attributes->get('controller'),
+            $httpRequest->attributes->get('action')
+        );
+
+        $this->setFlashInFile($repeatData, 'last_yves_request_' . $mvc . '.log');
+        $this->setFlashInFile($repeatData, 'last_yves_request.log');
+    }
+
+    /**
+     * @param array $repeatData
+     * @param string $fileName
+     *
+     * @return void
+     */
+    protected function setFlashInFile(array $repeatData, $fileName)
+    {
+        $filePath = $this->getFilePath($fileName);
+        $string = serialize($repeatData);
+        file_put_contents($filePath, $string);
+    }
+
+    /**
+     * @param string $fileName
+     *
+     * @return array
+     */
+    protected function getFlashInFile($fileName)
+    {
+        $filePath = $this->getFilePath($fileName);
+        if (!file_exists($filePath)) {
+            return [];
+        }
+        $content = file_get_contents($filePath);
+        if (empty($content)) {
+            return [];
+        }
+
+        return unserialize($content);
+    }
+
+    /**
+     * @param string $fileName
+     *
+     * @return string
+     */
+    protected function getFilePath($fileName)
+    {
+        return APPLICATION_ROOT_DIR . '/data/' . Store::getInstance()->getCurrentCountry() . '/logs/ZED/' . $fileName;
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/RepeaterInterface.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/RepeaterInterface.php
new file mode 100644
index 0000000..26f5609
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/Model/RepeaterInterface.php
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Business\Model;
+
+use Spryker\Shared\ZedRequest\Client\RequestInterface;
+use Symfony\Component\HttpFoundation\Request as HttpRequest;
+
+interface RepeaterInterface
+{
+
+    /**
+     * @param string|null $mvc
+     *
+     * @return string
+     */
+    public function getRepeatData($mvc = null);
+
+    /**
+     * @param \Spryker\Shared\ZedRequest\Client\RequestInterface $transferObject
+     * @param \Symfony\Component\HttpFoundation\Request $httpRequest
+     *
+     * @return void
+     */
+    public function setRepeatData(RequestInterface $transferObject, HttpRequest $httpRequest);
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestBusinessFactory.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestBusinessFactory.php
index 48dcbe0..9ae739e 100644
--- a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestBusinessFactory.php
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestBusinessFactory.php
@@ -8,7 +8,17 @@
 namespace Spryker\Zed\ZedRequest\Business;
 
 use Spryker\Zed\Kernel\Business\AbstractBusinessFactory;
+use Spryker\Zed\ZedRequest\Business\Model\Repeater;
 
 class ZedRequestBusinessFactory extends AbstractBusinessFactory
 {
+
+    /**
+     * @return \Spryker\Zed\ZedRequest\Business\Model\Repeater
+     */
+    public function createRepeater()
+    {
+        return new Repeater();
+    }
+
 }
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacade.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacade.php
new file mode 100644
index 0000000..bc7ecc9
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacade.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Business;
+
+use Spryker\Zed\Kernel\Business\AbstractFacade;
+
+/**
+ * @method \Spryker\Zed\ZedRequest\Business\ZedRequestBusinessFactory getFactory()
+ */
+class ZedRequestFacade extends AbstractFacade implements ZedRequestFacadeInterface
+{
+
+    /**
+     * @api
+     *
+     * @param string|null $mvc
+     *
+     * @return string
+     */
+    public function getRepeatData($mvc)
+    {
+        return $this->getFactory()->createRepeater()->getRepeatData($mvc);
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacadeInterface.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacadeInterface.php
new file mode 100644
index 0000000..30ea9a1
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Business/ZedRequestFacadeInterface.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Business;
+
+/**
+ * @method \Spryker\Zed\ZedRequest\Business\ZedRequestBusinessFactory getFactory()
+ */
+interface ZedRequestFacadeInterface
+{
+
+    /**
+     * Specification:
+     * - Returns the request data from last yves to zed request
+     * - If mvc given then it returns the data matching to the mvc argument
+     * - mvc must be like `bundle_controller_action`
+     *
+     * @api
+     *
+     * @param string|null $mvc
+     *
+     * @return string
+     */
+    public function getRepeatData($mvc);
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Controller/TransferController.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Controller/TransferController.php
new file mode 100644
index 0000000..bdc4ec6
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Controller/TransferController.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication\Controller;
+
+use Spryker\Zed\Kernel\Communication\Controller\AbstractController;
+use Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject\TransferServer;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
+use Symfony\Component\HttpKernel\HttpKernelInterface;
+
+/**
+ * @method \Spryker\Zed\ZedRequest\Business\ZedRequestFacade getFacade()
+ */
+class TransferController extends AbstractController
+{
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $request
+     *
+     * @return \Symfony\Component\HttpFoundation\Response|array
+     */
+    public function repeatAction(Request $request)
+    {
+        $repeatData = $this->getFacade()->getRepeatData($request->query->get('mvc', null));
+
+        if (!is_array($repeatData)) {
+            return new Response('No request to repeat.');
+        }
+
+        TransferServer::getInstance()->activateRepeating();
+        $request = Request::createFromGlobals();
+        $request->attributes->set('module', $repeatData['module']);
+        $request->attributes->set('controller', $repeatData['controller']);
+        $request->attributes->set('action', $repeatData['action']);
+
+        $request->request->replace($repeatData);
+
+        return $this->getApplication()->handle($request, HttpKernelInterface::SUB_REQUEST);
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerInterface.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerInterface.php
new file mode 100644
index 0000000..380ba97
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerInterface.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication\Plugin;
+
+use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
+
+interface GatewayControllerListenerInterface
+{
+
+    /**
+     * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+     *
+     * @return callable|null
+     */
+    public function onKernelController(FilterControllerEvent $event);
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPlugin.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPlugin.php
new file mode 100644
index 0000000..3055ee1
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPlugin.php
@@ -0,0 +1,226 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication\Plugin;
+
+use Generated\Shared\Transfer\MessageTransfer;
+use LogicException;
+use ReflectionObject;
+use Spryker\Shared\Kernel\Store;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Shared\Messenger\MessengerConstants;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
+use Spryker\Zed\Messenger\MessengerConfig;
+use Spryker\Zed\ZedRequest\Business\Client\Request;
+use Spryker\Zed\ZedRequest\Business\Client\Response;
+use Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject\TransferServer;
+use Symfony\Component\HttpKernel\Event\FilterControllerEvent;
+
+/**
+ * @method \Spryker\Zed\ZedRequest\Communication\ZedRequestCommunicationFactory getFactory()
+ * @method \Spryker\Zed\ZedRequest\Business\ZedRequestFacade getFacade()
+ */
+class GatewayControllerListenerPlugin extends AbstractPlugin implements GatewayControllerListenerInterface
+{
+
+    /**
+     * @param \Symfony\Component\HttpKernel\Event\FilterControllerEvent $event
+     *
+     * @return callable|null
+     */
+    public function onKernelController(FilterControllerEvent $event)
+    {
+        $currentController = $event->getController();
+        $controller = $currentController[0];
+        $action = $currentController[1];
+
+        if (!($controller instanceof AbstractGatewayController)) {
+            return $currentController;
+        }
+
+        $newController = function () use ($controller, $action) {
+
+            MessengerConfig::setMessageTray(MessengerConstants::IN_MEMORY_TRAY);
+
+            $requestTransfer = $this->getRequestTransfer($controller, $action);
+
+            $this->setCustomersLocaleIfPresent($requestTransfer);
+
+            $result = $controller->$action($requestTransfer->getTransfer(), $requestTransfer);
+            $response = $this->getResponse($controller, $result);
+
+            return TransferServer::getInstance()
+                ->setResponse($response)
+                ->send();
+        };
+
+        $event->setController($newController);
+    }
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
+     *
+     * @return void
+     */
+    protected function setCustomersLocaleIfPresent(Request $request)
+    {
+        $localeTransfer = $this->getLocaleMetaTransfer($request);
+        if ($localeTransfer) {
+            Store::getInstance()->setCurrentLocale($localeTransfer->getLocaleName());
+        }
+    }
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
+     *
+     * @return null|\Generated\Shared\Transfer\LocaleTransfer
+     */
+    protected function getLocaleMetaTransfer(Request $request)
+    {
+        $localeTransfer = $request->getMetaTransfer('locale');
+
+        return $localeTransfer;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
+     * @param string $action
+     *
+     * @throws \LogicException
+     *
+     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
+     */
+    private function getRequestTransfer(AbstractGatewayController $controller, $action)
+    {
+        $classReflection = new ReflectionObject($controller);
+        $methodReflection = $classReflection->getMethod($action);
+        $parameters = $methodReflection->getParameters();
+        $countParameters = count($parameters);
+
+        if ($countParameters >= 2) {
+            throw new LogicException('Only one transfer object can be received in yves-action');
+        }
+
+        /** @var \ReflectionParameter $parameter */
+        $parameter = array_shift($parameters);
+        if ($parameter) {
+            $class = $parameter->getClass();
+            if (empty($class)) {
+                throw new LogicException('You need to specify a class for the parameter in the yves-action.');
+            }
+
+            $this->validateClassIsTransferObject($class->getName());
+        }
+
+        return TransferServer::getInstance()->getRequest();
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $result
+     *
+     * @return \Spryker\Zed\ZedRequest\Business\Client\Response
+     */
+    protected function getResponse(AbstractGatewayController $controller, $result)
+    {
+        $response = new Response();
+
+        if ($result instanceof TransferInterface) {
+            $response->setTransfer($result);
+        }
+
+        $this->setGatewayControllerMessages($controller, $response);
+        $this->setMessengerMessages($response);
+
+        $response->setSuccess($controller->isSuccess());
+
+        return $response;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController $controller
+     * @param \Spryker\Zed\ZedRequest\Business\Client\Response $response
+     *
+     * @return void
+     */
+    protected function setGatewayControllerMessages(AbstractGatewayController $controller, Response $response)
+    {
+        $response->addSuccessMessages($controller->getSuccessMessages());
+        $response->addInfoMessages($controller->getInfoMessages());
+        $response->addErrorMessages($controller->getErrorMessages());
+    }
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Client\Response $response
+     *
+     * @return void
+     */
+    protected function setMessengerMessages(Response $response)
+    {
+        $messengerFacade = $this->getFactory()->getMessengerFacade();
+
+        $messagesTransfer = $messengerFacade->getStoredMessages();
+        if ($messagesTransfer === null) {
+            return;
+        }
+
+        $response->addErrorMessages(
+            $this->createResponseMessages(
+                $messagesTransfer->getErrorMessages()
+            )
+        );
+        $response->addInfoMessages(
+            $this->createResponseMessages(
+                $messagesTransfer->getInfoMessages()
+            )
+        );
+        $response->addSuccessMessages(
+            $this->createResponseMessages(
+                $messagesTransfer->getSuccessMessages()
+            )
+        );
+    }
+
+    /**
+     * @param array $messages
+     * @param \Generated\Shared\Transfer\MessageTransfer[] $storedMessages
+     *
+     * @return \Generated\Shared\Transfer\MessageTransfer[]
+     */
+    protected function createResponseMessages(array $messages, array $storedMessages = [])
+    {
+        foreach ($messages as $message) {
+            $responseMessage = new MessageTransfer();
+            $responseMessage->setValue($message);
+            $storedMessages[] = $responseMessage;
+        }
+
+        return $storedMessages;
+    }
+
+    /**
+     * @param string $className
+     *
+     * @throws \LogicException
+     *
+     * @return bool
+     */
+    protected function validateClassIsTransferObject($className)
+    {
+        if (substr($className, 0, 16) === 'Generated\Shared') {
+            return true;
+        }
+
+        if ($className === 'Spryker\Shared\Kernel\Transfer\TransferInterface') {
+            return true;
+        }
+
+        throw new LogicException('Only transfer classes are allowed in yves action as parameter');
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayServiceProviderPlugin.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayServiceProviderPlugin.php
new file mode 100644
index 0000000..0db8250
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayServiceProviderPlugin.php
@@ -0,0 +1,69 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication\Plugin;
+
+use Silex\Application;
+use Silex\ServiceProviderInterface;
+use Spryker\Zed\Kernel\Communication\AbstractPlugin;
+use Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject\TransferServer;
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpKernel\KernelEvents;
+
+/**
+ * @method \Spryker\Zed\Kernel\Communication\KernelCommunicationFactory getFactory()
+ * @method \Spryker\Zed\ZedRequest\Business\ZedRequestFacade getFacade()
+ */
+class GatewayServiceProviderPlugin extends AbstractPlugin implements ServiceProviderInterface
+{
+
+    /**
+     * @var \Spryker\Zed\ZedRequest\Communication\Plugin\GatewayControllerListenerInterface
+     */
+    protected $controllerListener;
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Communication\Plugin\GatewayControllerListenerInterface $controllerListener
+     *
+     * @return void
+     */
+    public function setControllerListener(GatewayControllerListenerInterface $controllerListener)
+    {
+        $this->controllerListener = $controllerListener;
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function register(Application $app)
+    {
+        /** @var \Symfony\Component\EventDispatcher\EventDispatcher $dispatcher */
+        $dispatcher = $app['dispatcher'];
+        $dispatcher->addListener(
+            KernelEvents::CONTROLLER,
+            [
+                $this->controllerListener,
+                'onKernelController',
+            ]
+        );
+    }
+
+    /**
+     * @param \Silex\Application $app
+     *
+     * @return void
+     */
+    public function boot(Application $app)
+    {
+        $app->before(function (Request $request) {
+            TransferServer::getInstance()->setRequest($request);
+        });
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/TransferObject/TransferServer.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/TransferObject/TransferServer.php
new file mode 100644
index 0000000..ef66cb8
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/Plugin/TransferObject/TransferServer.php
@@ -0,0 +1,158 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject;
+
+use LogicException;
+use Spryker\Shared\ZedRequest\Client\ResponseInterface;
+use Spryker\Zed\ZedRequest\Business\Client\Request;
+use Spryker\Zed\ZedRequest\Business\Model\Repeater;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Symfony\Component\HttpFoundation\Request as HttpRequest;
+use Symfony\Component\HttpFoundation\Response;
+
+class TransferServer
+{
+
+    /**
+     * @var self
+     */
+    protected static $instance;
+
+    /**
+     * @var bool
+     */
+    protected $repeatIsActive = false;
+
+    /**
+     * @var \Spryker\Shared\ZedRequest\Client\RequestInterface
+     */
+    private $request;
+
+    /**
+     * @var \Symfony\Component\HttpFoundation\Request
+     */
+    private $httpRequest;
+
+    /**
+     * @var \Spryker\Shared\ZedRequest\Client\ResponseInterface
+     */
+    protected $response;
+
+    /**
+     * @var \Spryker\Zed\ZedRequest\Business\Model\Repeater
+     */
+    private $repeater;
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Model\Repeater $repeater
+     */
+    private function __construct(Repeater $repeater)
+    {
+        $this->repeater = $repeater;
+    }
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Model\Repeater|null $repeater
+     *
+     * @return $this
+     */
+    public static function getInstance(Repeater $repeater = null)
+    {
+        if (self::$instance) {
+            return self::$instance;
+        }
+
+        if ($repeater === null) {
+            $repeater = new Repeater();
+        }
+
+        self::$instance = new static($repeater);
+
+        return self::$instance;
+    }
+
+    /**
+     * @return void
+     */
+    public function activateRepeating()
+    {
+        $this->repeatIsActive = true;
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
+     */
+    public function getRequest()
+    {
+        if (!$this->request) {
+            if ($this->repeatIsActive) {
+                $this->request = new Request(
+                    $this->repeater->getRepeatData($this->getHttpRequest()->query->get('mvc'))['params']
+                );
+            } else {
+                $transferValues = json_decode($this->getHttpRequest()->getContent(), true);
+                $this->request = new Request($transferValues);
+                $this->repeater->setRepeatData($this->request, $this->httpRequest);
+            }
+        }
+
+        return $this->request;
+    }
+
+    /**
+     * @throws \LogicException
+     *
+     * @return \Symfony\Component\HttpFoundation\Request
+     */
+    private function getHttpRequest()
+    {
+        if ($this->httpRequest === null) {
+            throw new LogicException('No Http Request found in TransferServer. Maybe you try to access data from it before the request object is injected.');
+        }
+
+        return $this->httpRequest;
+    }
+
+    /**
+     * @param \Symfony\Component\HttpFoundation\Request $httpRequest
+     *
+     * @return $this
+     */
+    public function setRequest(HttpRequest $httpRequest)
+    {
+        $this->httpRequest = $httpRequest;
+
+        return $this;
+    }
+
+    /**
+     * @param \Spryker\Shared\ZedRequest\Client\ResponseInterface $response
+     *
+     * @return $this
+     */
+    public function setResponse(ResponseInterface $response)
+    {
+        $this->response = $response;
+
+        return $this;
+    }
+
+    /**
+     * @return \Symfony\Component\HttpFoundation\JsonResponse
+     */
+    public function send()
+    {
+        $jsonResponse = new JsonResponse($this->response->toArray(), Response::HTTP_OK, ['X-Zed-Host' => 1]);
+        if ($this->repeatIsActive) {
+            $jsonResponse->setEncodingOptions(JSON_PRETTY_PRINT);
+        }
+
+        return $jsonResponse;
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/ZedRequestCommunicationFactory.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/ZedRequestCommunicationFactory.php
new file mode 100644
index 0000000..a32136c
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/ZedRequestCommunicationFactory.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Communication;
+
+use Spryker\Zed\Kernel\Communication\AbstractCommunicationFactory;
+use Spryker\Zed\ZedRequest\ZedRequestDependencyProvider;
+
+class ZedRequestCommunicationFactory extends AbstractCommunicationFactory
+{
+
+    /**
+     * @return \Spryker\Zed\ZedRequest\Dependency\Facade\ZedRequestToMessengerInterface
+     */
+    public function getMessengerFacade()
+    {
+        return $this->getProvidedDependency(ZedRequestDependencyProvider::FACADE_MESSENGER);
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/navigation.xml b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/navigation.xml
new file mode 100644
index 0000000..f8f5f9c
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Communication/navigation.xml
@@ -0,0 +1,15 @@
+<?xml version="1.0"?>
+<config>
+    <maintenance>
+        <pages>
+            <repeat>
+                <label>Transfer repeat</label>
+                <title>Transfer repeat</title>
+                <bundle>zed-request</bundle>
+                <controller>transfer</controller>
+                <action>repeat</action>
+                <icon>fa-repeat</icon>
+            </repeat>
+        </pages>
+    </maintenance>
+</config>
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/NullMessenger.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/NullMessenger.php
new file mode 100644
index 0000000..43aff7e
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/NullMessenger.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Dependency\Facade;
+
+use Generated\Shared\Transfer\MessageTransfer;
+
+class NullMessenger implements ZedRequestToMessengerInterface
+{
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addSuccessMessage(MessageTransfer $message)
+    {
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addInfoMessage(MessageTransfer $message)
+    {
+    }
+
+    /**
+     * @param \Generated\Shared\Transfer\MessageTransfer $message
+     *
+     * @return void
+     */
+    public function addErrorMessage(MessageTransfer $message)
+    {
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerBridge.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerBridge.php
new file mode 100644
index 0000000..f6f2eb5
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerBridge.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Dependency\Facade;
+
+class ZedRequestToMessengerBridge implements ZedRequestToMessengerInterface
+{
+
+    /**
+     * @var \Spryker\Zed\Messenger\Business\MessengerFacadeInterface
+     */
+    protected $messengerFacade;
+
+    /**
+     * @param \Spryker\Zed\Messenger\Business\MessengerFacadeInterface $messengerFacade
+     */
+    public function __construct($messengerFacade)
+    {
+        $this->messengerFacade = $messengerFacade;
+    }
+
+    /**
+     * @return \Generated\Shared\Transfer\FlashMessagesTransfer
+     */
+    public function getStoredMessages()
+    {
+        return $this->messengerFacade->getStoredMessages();
+    }
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerInterface.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerInterface.php
new file mode 100644
index 0000000..5918416
--- /dev/null
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/Dependency/Facade/ZedRequestToMessengerInterface.php
@@ -0,0 +1,18 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Spryker\Zed\ZedRequest\Dependency\Facade;
+
+interface ZedRequestToMessengerInterface
+{
+
+    /**
+     * @return \Generated\Shared\Transfer\FlashMessagesTransfer
+     */
+    public function getStoredMessages();
+
+}
diff --git a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/ZedRequestDependencyProvider.php b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/ZedRequestDependencyProvider.php
index 4715002..5375032 100644
--- a/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/ZedRequestDependencyProvider.php
+++ b/Bundles/ZedRequest/src/Spryker/Zed/ZedRequest/ZedRequestDependencyProvider.php
@@ -7,8 +7,48 @@
 
 namespace Spryker\Zed\ZedRequest;
 
+use LogicException;
 use Spryker\Zed\Kernel\AbstractBundleDependencyProvider;
+use Spryker\Zed\Kernel\Container;
+use Spryker\Zed\ZedRequest\Dependency\Facade\NullMessenger;
+use Spryker\Zed\ZedRequest\Dependency\Facade\ZedRequestToMessengerBridge;
 
 class ZedRequestDependencyProvider extends AbstractBundleDependencyProvider
 {
+
+    const FACADE_MESSENGER = 'messenger facade';
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    public function provideCommunicationLayerDependencies(Container $container)
+    {
+        $container = $this->addMessengerFacade($container);
+
+        return $container;
+    }
+
+    /**
+     * @param \Spryker\Zed\Kernel\Container $container
+     *
+     * @return \Spryker\Zed\Kernel\Container
+     */
+    protected function addMessengerFacade(Container $container)
+    {
+        $container[self::FACADE_MESSENGER] = function (Container $container) {
+            try {
+                $messenger = $container->getLocator()->messenger()->facade();
+            } catch (LogicException $exception) {
+                $messenger = new NullMessenger();
+            }
+            $zedRequestToMessengerBridge = new ZedRequestToMessengerBridge($messenger);
+
+            return $zedRequestToMessengerBridge;
+        };
+
+        return $container;
+    }
+
 }
diff --git a/Bundles/ZedRequest/tests/Functional.suite.yml b/Bundles/ZedRequest/tests/Functional.suite.yml
deleted file mode 100644
index 3da8fcc..0000000
--- a/Bundles/ZedRequest/tests/Functional.suite.yml
+++ /dev/null
@@ -1,5 +0,0 @@
-class_name: FunctionalTester
-modules:
-    enabled:
-        - Filesystem
-        - \ZedRequest\Module\Functional
diff --git a/Bundles/ZedRequest/tests/Functional/_bootstrap.php b/Bundles/ZedRequest/tests/Functional/_bootstrap.php
deleted file mode 100644
index 9a4dce2..0000000
--- a/Bundles/ZedRequest/tests/Functional/_bootstrap.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-use Spryker\Shared\Testify\SystemUnderTestBootstrap;
-
-$bootstrap = SystemUnderTestBootstrap::getInstance();
-$bootstrap->bootstrap(SystemUnderTestBootstrap::APPLICATION_ZED);
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/Fixture/TestTransfer.php b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/Fixture/TestTransfer.php
index 2f9cdd6..b0cab8d 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/Fixture/TestTransfer.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/Fixture/TestTransfer.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Client\ZedRequest\Client\Fixture;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class TestTransfer extends AbstractTransfer
 {
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/MessageTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/MessageTest.php
deleted file mode 100644
index 6150835..0000000
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/MessageTest.php
+++ /dev/null
@@ -1,40 +0,0 @@
-<?php
-
-/**
- * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
- * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
- */
-
-namespace Unit\Spryker\Client\ZedRequest\Client;
-
-use PHPUnit_Framework_TestCase;
-use Spryker\Shared\ZedRequest\Client\Message;
-
-/**
- * @group Unit
- * @group Spryker
- * @group Client
- * @group ZedRequest
- * @group Client
- * @group MessageTest
- */
-class MessageTest extends PHPUnit_Framework_TestCase
-{
-
-    /**
-     * @return void
-     */
-    public function testGetterAndSetters()
-    {
-        $message = new Message();
-
-        $message->setData(['test' => 'test']);
-        $message->setMessage('message');
-
-        $this->assertEquals('message', $message->getMessage());
-        $this->assertEquals(['test' => 'test'], $message->getData());
-
-        $this->assertEquals(['message' => 'message', 'data' => ['test' => 'test']], $message->toArray());
-    }
-
-}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/RequestTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/RequestTest.php
index 47dbaf0..8043e84 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/RequestTest.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/RequestTest.php
@@ -9,7 +9,7 @@ namespace Unit\Spryker\Client\ZedRequest\Client;
 
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\ZedRequest\Client\Request;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Unit\Spryker\Client\ZedRequest\Client\Fixture\TestTransfer;
 
 /**
@@ -24,9 +24,9 @@ class RequestTest extends PHPUnit_Framework_TestCase
 {
 
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $metaTransfer1
-     * @param \Spryker\Shared\Transfer\TransferInterface|null $metaTransfer2
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $metaTransfer1
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $metaTransfer2
      *
      * @return \Spryker\Client\ZedRequest\Client\Request
      */
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/ResponseTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/ResponseTest.php
index 6bc696d..92895b6 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/ResponseTest.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Client/ZedRequest/Client/ResponseTest.php
@@ -7,11 +7,11 @@
 
 namespace Unit\Spryker\Client\ZedRequest\Client;
 
+use Generated\Shared\Transfer\MessageTransfer;
 use PHPUnit_Framework_TestCase;
 use Spryker\Client\ZedRequest\Client\Response;
-use Spryker\Shared\Transfer\TransferInterface;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
 use Spryker\Shared\ZedRequest\Client\Exception\TransferNotFoundException;
-use Spryker\Shared\ZedRequest\Client\Message;
 use Unit\Spryker\Client\ZedRequest\Client\Fixture\TestTransfer;
 
 /**
@@ -25,8 +25,12 @@ use Unit\Spryker\Client\ZedRequest\Client\Fixture\TestTransfer;
 class ResponseTest extends PHPUnit_Framework_TestCase
 {
 
+    const MESSAGE_SUCCESS = 'success';
+    const MESSAGE_INFO = 'info';
+    const MESSAGE_ERROR = 'error';
+
     /**
-     * @param \Spryker\Shared\Transfer\TransferInterface $transfer
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transfer
      *
      * @return \Spryker\Client\ZedRequest\Client\Response
      */
@@ -35,15 +39,30 @@ class ResponseTest extends PHPUnit_Framework_TestCase
         $response = new Response();
 
         $response->setSuccess(false);
-        $response->addErrorMessages([new Message(['message' => 'error'])]);
-        $response->addInfoMessages([new Message(['message' => 'info'])]);
-        $response->addSuccessMessages([new Message(['message' => 'success'])]);
+
+        $response->addSuccessMessages([$this->getMessageTransfer(static::MESSAGE_SUCCESS)]);
+        $response->addInfoMessages([$this->getMessageTransfer(static::MESSAGE_INFO)]);
+        $response->addErrorMessages([$this->getMessageTransfer(static::MESSAGE_ERROR)]);
         $response->setTransfer($transfer);
 
         return $response;
     }
 
     /**
+     * @param string $value
+     *
+     * @return \Generated\Shared\Transfer\MessageTransfer
+     */
+    protected function getMessageTransfer($value)
+    {
+        $errorMessage = new MessageTransfer();
+        $errorMessage->setValue($value)
+            ->setParameters([]);
+
+        return $errorMessage;
+    }
+
+    /**
      * @return void
      */
     public function testDefaultSuccessIsTrue()
@@ -75,9 +94,9 @@ class ResponseTest extends PHPUnit_Framework_TestCase
         $response = $this->createFullResponse($transfer);
 
         $this->assertEquals(false, $response->isSuccess());
-        $this->assertEquals([new Message(['message' => 'error'])], $response->getErrorMessages());
-        $this->assertEquals([new Message(['message' => 'info'])], $response->getInfoMessages());
-        $this->assertEquals([new Message(['message' => 'success'])], $response->getSuccessMessages());
+        $this->assertEquals([$this->getMessageTransfer(self::MESSAGE_ERROR)], $response->getErrorMessages());
+        $this->assertEquals([$this->getMessageTransfer(self::MESSAGE_INFO)], $response->getInfoMessages());
+        $this->assertEquals([$this->getMessageTransfer(self::MESSAGE_SUCCESS)], $response->getSuccessMessages());
         $this->assertEquals($transfer, $response->getTransfer());
         $this->assertNotSame($transfer, $response->getTransfer());
         $this->assertNotSame($response->getTransfer(), $response->getTransfer());
@@ -94,7 +113,7 @@ class ResponseTest extends PHPUnit_Framework_TestCase
         $response = $this->createFullResponse($transfer);
 
         $array = $response->toArray();
-        $this->assertTrue(is_array($array), 'toArray does not return array');
+        $this->assertInternalType('array', $array, 'toArray does not return array');
 
         $newResponse = new Response($array);
 
@@ -109,13 +128,14 @@ class ResponseTest extends PHPUnit_Framework_TestCase
     {
         $response = new Response();
 
-        $response->addErrorMessage(new Message(['message' => 'error']));
-        $response->addInfoMessage(new Message(['message' => 'test']));
+        $response->addErrorMessage($this->getMessageTransfer(self::MESSAGE_ERROR));
+        $response->addInfoMessage($this->getMessageTransfer(self::MESSAGE_INFO));
+
+        $this->assertTrue($response->hasErrorMessage(self::MESSAGE_ERROR), 'Error message could not be found in response.');
+        $this->assertFalse($response->hasErrorMessage(self::MESSAGE_INFO), 'Info message was not expected as error in response.');
 
-        $this->assertEquals(true, $response->hasErrorMessage('error'));
-        $this->assertEquals(false, $response->hasErrorMessage('test'));
-        $this->assertEquals(false, $response->hasInfoMessage('error'));
-        $this->assertEquals(true, $response->hasInfoMessage('test'));
+        $this->assertTrue($response->hasInfoMessage(self::MESSAGE_INFO), 'Info message could not be found in response.');
+        $this->assertFalse($response->hasInfoMessage(self::MESSAGE_ERROR), 'Error message was not expected as info in response.');
     }
 
 }
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractHttpClientTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractHttpClientTest.php
index 5e3e4d3..7f255b1 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractHttpClientTest.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractHttpClientTest.php
@@ -9,12 +9,12 @@ namespace Unit\Spryker\Shared\ZedRequest\Client;
 
 use GuzzleHttp\Psr7\Response;
 use PHPUnit_Framework_TestCase;
-use Spryker\Client\Auth\AuthClient;
-use Spryker\Shared\Application\ApplicationConstants;
+use Spryker\Service\UtilNetwork\UtilNetworkService;
 use Spryker\Shared\Config\Config;
 use Spryker\Shared\ZedRequest\Client\ResponseInterface;
-use Unit\Spryker\Shared\Transfer\Fixtures\AbstractTransfer;
+use Spryker\Shared\ZedRequest\ZedRequestConstants;
 use Unit\Spryker\Shared\ZedRequest\Client\Fixture\AbstractHttpClient;
+use Unit\Spryker\Shared\ZedRequest\Client\Fixture\Transfer;
 
 /**
  * @group Unit
@@ -27,6 +27,8 @@ use Unit\Spryker\Shared\ZedRequest\Client\Fixture\AbstractHttpClient;
 class AbstractHttpClientTest extends PHPUnit_Framework_TestCase
 {
 
+    const TRANSFER_VALUE = 'catface';
+
     /**
      * @return void
      */
@@ -35,18 +37,14 @@ class AbstractHttpClientTest extends PHPUnit_Framework_TestCase
         $abstractRequest = $this->getAbstractRequestMock();
 
         $body = json_encode([
-            ResponseInterface::TRANSFER => ['bool' => true],
-            ResponseInterface::TRANSFER_CLASSNAME => AbstractTransfer::class,
+            ResponseInterface::TRANSFER => ['key' => static::TRANSFER_VALUE],
+            ResponseInterface::TRANSFER_CLASSNAME => Transfer::class,
         ]);
         $abstractRequest->expects($this->once())->method('sendRequest')->willReturn(new Response(200, [], $body));
 
         $response = $abstractRequest->request('?foo=bar');
-
-        /*
-         * @var \Unit\Spryker\Shared\Transfer\Fixtures\AbstractTransfer $transfer
-         */
         $transfer = $response->getTransfer();
-        $this->assertTrue($transfer->getBool());
+        $this->assertSame(static::TRANSFER_VALUE, $transfer->getKey());
     }
 
     /**
@@ -54,12 +52,12 @@ class AbstractHttpClientTest extends PHPUnit_Framework_TestCase
      */
     protected function getAbstractRequestMock()
     {
-        $baseUrl = 'http://' . Config::get(ApplicationConstants::HOST_ZED_GUI);
-
-        $client = new AuthClient();
+        $baseUrl = 'http://' . Config::get(ZedRequestConstants::HOST_ZED_API);
         $url = $baseUrl . '/';
 
-        return $this->getMockBuilder(AbstractHttpClient::class)->setMethods(['sendRequest'])->setConstructorArgs([$client, $url])->getMock();
+        $utilNetworkService = new UtilNetworkService();
+
+        return $this->getMockBuilder(AbstractHttpClient::class)->setMethods(['sendRequest'])->setConstructorArgs([$url, $utilNetworkService])->getMock();
     }
 
 }
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractRequestTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractRequestTest.php
index 07e135d..5e2c490 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractRequestTest.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/AbstractRequestTest.php
@@ -43,7 +43,7 @@ class AbstractRequestTest extends PHPUnit_Framework_TestCase
         ];
         $abstractRequest = new AbstractRequest($data);
 
-        $this->assertInstanceOf('Spryker\Shared\Transfer\AbstractTransfer', $abstractRequest->getTransfer());
+        $this->assertInstanceOf('Spryker\Shared\Kernel\Transfer\AbstractTransfer', $abstractRequest->getTransfer());
     }
 
     /**
@@ -56,7 +56,7 @@ class AbstractRequestTest extends PHPUnit_Framework_TestCase
         ];
         $abstractRequest = new AbstractRequest($data);
 
-        $this->assertInstanceOf('Spryker\Shared\Transfer\AbstractTransfer', $abstractRequest->getTransfer());
+        $this->assertInstanceOf('Spryker\Shared\Kernel\Transfer\AbstractTransfer', $abstractRequest->getTransfer());
     }
 
 }
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/Fixture/Transfer.php b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/Fixture/Transfer.php
index e33aec8..62ed3cc 100644
--- a/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/Fixture/Transfer.php
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Shared/ZedRequest/Client/Fixture/Transfer.php
@@ -7,7 +7,7 @@
 
 namespace Unit\Spryker\Shared\ZedRequest\Client\Fixture;
 
-use Spryker\Shared\Transfer\AbstractTransfer;
+use Spryker\Shared\Kernel\Transfer\AbstractTransfer;
 
 class Transfer extends AbstractTransfer
 {
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/FilterControllerEvent.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/FilterControllerEvent.php
new file mode 100644
index 0000000..3342072
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/FilterControllerEvent.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture;
+
+use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpKernel\Event\FilterControllerEvent as SymfonyFilterControllerEvent;
+use Symfony\Component\HttpKernel\HttpKernelInterface;
+
+class FilterControllerEvent extends SymfonyFilterControllerEvent
+{
+
+    /**
+     * @param \Symfony\Component\HttpKernel\HttpKernelInterface|null $kernel
+     * @param callable|null $controller
+     * @param \Symfony\Component\HttpFoundation\Request|null $request
+     * @param int|null $requestType
+     */
+    public function __construct(
+        HttpKernelInterface $kernel = null,
+        $controller = null,
+        Request $request = null,
+        $requestType = null
+    ) {
+        unset($kernel, $controller, $request, $requestType);
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/GatewayController.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/GatewayController.php
new file mode 100644
index 0000000..55a39cb
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/GatewayController.php
@@ -0,0 +1,95 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture;
+
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Zed\Kernel\Communication\Controller\AbstractGatewayController;
+use stdClass;
+
+class GatewayController extends AbstractGatewayController
+{
+
+    /**
+     * @return string
+     */
+    public function badAction()
+    {
+        return 'bad';
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $foo
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    public function goodAction(TransferInterface $foo)
+    {
+        return $foo;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $foo
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $bar
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    public function twoTransferParametersAction(TransferInterface $foo, TransferInterface $bar)
+    {
+        if ($bar) {
+        }
+
+        return $foo;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $foo
+     * @param mixed $bar
+     * @param mixed $baz
+     *
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    public function tooManyParametersAction(TransferInterface $foo, $bar, $baz)
+    {
+        if ($bar && $baz) {
+        }
+
+        return $foo;
+    }
+
+    /**
+     * @param \stdClass $foo
+     *
+     * @return \stdClass
+     */
+    public function notTransferAction(stdClass $foo)
+    {
+        return $foo;
+    }
+
+    /**
+     * @param mixed $foo
+     *
+     * @return mixed
+     */
+    public function noClassParameterAction($foo)
+    {
+        return $foo;
+    }
+
+    /**
+     * @return void
+     */
+    public function transformMessageAction()
+    {
+        $this->addInfoMessage('info');
+        $this->addErrorMessage('error');
+        $this->addSuccessMessage('success');
+        $this->setSuccess(false);
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/NotGatewayController.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/NotGatewayController.php
new file mode 100644
index 0000000..98f923e
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/NotGatewayController.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture;
+
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+
+class NotGatewayController
+{
+
+    public function __construct()
+    {
+    }
+
+    /**
+     * @return string
+     */
+    public function badAction()
+    {
+        return 'bad';
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $foo
+     * @param int $bar
+     *
+     * @return int
+     */
+    public function bazAction(TransferInterface $foo, $bar = 0)
+    {
+        if ($foo) {
+            $bar = 0;
+        }
+
+        return $bar;
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/Request.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/Request.php
new file mode 100644
index 0000000..1cee64c
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/Request.php
@@ -0,0 +1,55 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture;
+
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Zed\ZedRequest\Business\Client\Request as ClientRequest;
+
+class Request extends ClientRequest
+{
+
+    /**
+     * @var \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    private $transfer;
+
+    /**
+     * @return \Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    public function getTransfer()
+    {
+        if ($this->transfer) {
+            return $this->transfer;
+        }
+
+        return parent::getTransfer();
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transfer
+     *
+     * @return $this
+     */
+    public function setTransfer(TransferInterface $transfer)
+    {
+        $this->transfer = $transfer;
+
+        return $this;
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transfer
+     *
+     * @return void
+     */
+    public function setFixtureTransfer($transfer)
+    {
+        $this->transfer = $transfer;
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/TransferServer.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/TransferServer.php
new file mode 100644
index 0000000..3435d58
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/Fixture/TransferServer.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture;
+
+use Spryker\Zed\ZedRequest\Business\Client\Request;
+use Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject\TransferServer as CoreTransferServer;
+
+class TransferServer extends CoreTransferServer
+{
+
+    /**
+     * @var \Spryker\Zed\ZedRequest\Business\Client\Request
+     */
+    private $fixtureRequest;
+
+    /**
+     * @param \Spryker\Zed\ZedRequest\Business\Client\Request $request
+     *
+     * @return $this
+     */
+    public function setFixtureRequest(Request $request)
+    {
+        $this->fixtureRequest = $request;
+
+        return $this;
+    }
+
+    /**
+     * @return \Spryker\Zed\ZedRequest\Business\Client\Request
+     */
+    public function getRequest()
+    {
+        if (isset($this->fixtureRequest)) {
+            return $this->fixtureRequest;
+        }
+
+        return parent::getRequest();
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPluginTest.php b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPluginTest.php
new file mode 100644
index 0000000..b10bc73
--- /dev/null
+++ b/Bundles/ZedRequest/tests/Unit/Spryker/Zed/ZedRequest/Communication/Plugin/GatewayControllerListenerPluginTest.php
@@ -0,0 +1,278 @@
+<?php
+
+/**
+ * Copyright © 2016-present Spryker Systems GmbH. All rights reserved.
+ * Use of this software requires acceptance of the Evaluation License Agreement. See LICENSE file.
+ */
+
+namespace Unit\Spryker\Zed\ZedRequest\Communication\Plugin;
+
+use LogicException;
+use PHPUnit_Framework_TestCase;
+use ReflectionClass;
+use ReflectionObject;
+use Spryker\Shared\Kernel\AbstractLocatorLocator;
+use Spryker\Shared\Kernel\Transfer\TransferInterface;
+use Spryker\Zed\ZedRequest\Business\Model\Repeater;
+use Spryker\Zed\ZedRequest\Communication\Plugin\GatewayControllerListenerPlugin;
+use Spryker\Zed\ZedRequest\Communication\Plugin\TransferObject\TransferServer as CoreTransferServer;
+use stdClass;
+use Symfony\Component\HttpFoundation\JsonResponse;
+use Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture\FilterControllerEvent;
+use Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture\GatewayController;
+use Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture\NotGatewayController;
+use Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture\Request;
+use Unit\Spryker\Zed\ZedRequest\Communication\Plugin\Fixture\TransferServer;
+
+/**
+ * @group Unit
+ * @group Spryker
+ * @group Zed
+ * @group ZedRequest
+ * @group Communication
+ * @group Plugin
+ * @group GatewayControllerListenerPluginTest
+ */
+class GatewayControllerListenerPluginTest extends PHPUnit_Framework_TestCase
+{
+
+    /**
+     * @return void
+     */
+    public function setUp()
+    {
+        parent::setUp();
+        $this->unsetLocator();
+    }
+
+    /**
+     * We need to unset the Locator instance because we are using the Locator for Yves and for Zed
+     * When it first get instantiated by Yves it wont have the proper Proxies configured
+     *
+     * @return void
+     */
+    protected function unsetLocator()
+    {
+        $reflectionClass = new ReflectionClass(AbstractLocatorLocator::class);
+        $reflectedProperty = $reflectionClass->getProperty('instance');
+        $reflectedProperty->setAccessible(true);
+        $reflectedProperty->setValue(null);
+    }
+
+    /**
+     * @return void
+     */
+    protected function tearDown()
+    {
+        parent::tearDown();
+        $this->resetTransferServer();
+    }
+
+    /**
+     * @return void
+     */
+    public function testWhenControllerIsGatewayControllerPluginMustReturnInstanceOfClosure()
+    {
+        $eventMock = new FilterControllerEvent();
+        $controller = new GatewayController();
+        $action = 'goodAction';
+        $eventMock->setController([$controller, $action]);
+
+        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
+        $controllerListenerPlugin->onKernelController($eventMock);
+
+        $controllerCallable = $eventMock->getController();
+        $this->assertTrue(is_callable($controllerCallable));
+        $this->assertInstanceOf('\Closure', $controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testWhenControllerIsNotAGatewayControllerPluginMustReturnPassedCallable()
+    {
+        $action = 'badAction';
+        $eventMock = new FilterControllerEvent();
+        $controller = new NotGatewayController();
+        $eventMock->setController([$controller, $action]);
+
+        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
+        $controllerListenerPlugin->onKernelController($eventMock);
+
+        $controllerCallable = $eventMock->getController();
+        $this->assertTrue(is_callable($controllerCallable));
+        $this->assertNotInstanceOf('\Closure', $controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testIfTwoTransferParameterGivenPluginMustThrowException()
+    {
+        $this->expectException(LogicException::class);
+        $this->expectExceptionMessage('Only one transfer object can be received in yves-action');
+
+        $action = 'twoTransferParametersAction';
+        $controllerCallable = $this->executeMockedListenerTest($action);
+        call_user_func($controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testIfTooManyTransferParameterGivenPluginMustThrowException()
+    {
+        $this->expectException(LogicException::class);
+        $this->expectExceptionMessage('Only one transfer object can be received in yves-action');
+
+        $action = 'tooManyParametersAction';
+        $controllerCallable = $this->executeMockedListenerTest($action);
+        call_user_func($controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testIfPassedParameterIsNotAClassPluginMustThrowException()
+    {
+        $this->expectException(LogicException::class);
+        $this->expectExceptionMessage('You need to specify a class for the parameter in the yves-action.');
+
+        $action = 'noClassParameterAction';
+        $controllerCallable = $this->executeMockedListenerTest($action);
+        call_user_func($controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testWhenObjectIsNotTransferClassPluginMustThrowException()
+    {
+        $this->expectException(LogicException::class);
+        $this->expectExceptionMessage('Only transfer classes are allowed in yves action as parameter');
+
+        $transfer = new stdClass();
+        $controllerCallable = $this->executeMockedListenerTest('notTransferAction', $transfer);
+        call_user_func($controllerCallable);
+    }
+
+    /**
+     * @return void
+     */
+    public function testWhenControllerIsGatewayControllerAndOnlyOneTransferObjectIsGivenActionMustReturnResponse()
+    {
+        $transfer = $this->getTransferMock();
+        $controllerCallable = $this->executeMockedListenerTest('goodAction', $transfer);
+
+        $response = call_user_func($controllerCallable);
+        $this->assertInstanceOf(JsonResponse::class, $response);
+    }
+
+    /**
+     * @return void
+     */
+    public function testTransformMessagesFromController()
+    {
+        $action = 'transformMessageAction';
+
+        $transfer = $this->getTransferMock();
+        $controllerCallable = $this->executeMockedListenerTest($action, $transfer);
+
+        $response = call_user_func($controllerCallable);
+        $this->assertInstanceOf(JsonResponse::class, $response);
+
+        $responseContent = json_decode($response->getContent(), true);
+
+        $this->assertArrayHasKey('infoMessages', $responseContent);
+        $this->assertArrayHasKey('errorMessages', $responseContent);
+        $this->assertArrayHasKey('successMessages', $responseContent);
+        $this->assertArrayHasKey('success', $responseContent);
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Zed\ZedRequest\Business\Model\Repeater
+     */
+    private function createRepeaterMock()
+    {
+        return $this->getMockBuilder(Repeater::class)
+            ->disableOriginalConstructor()
+            ->getMock();
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $transferObject
+     *
+     * @return void
+     */
+    private function initTransferServer($transferObject)
+    {
+        $oldTransferServer = CoreTransferServer::getInstance();
+        $this->resetSingleton($oldTransferServer);
+
+        $request = new Request();
+        $request->setFixtureTransfer($transferObject);
+        TransferServer::getInstance()->setFixtureRequest($request);
+    }
+
+    /**
+     * @return void
+     */
+    private function resetTransferServer()
+    {
+        $fixtureServer = TransferServer::getInstance();
+        $this->resetSingleton($fixtureServer);
+        CoreTransferServer::getInstance(
+            $this->createRepeaterMock()
+        );
+    }
+
+    /**
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface $oldTransferServer
+     *
+     * @return void
+     */
+    private function resetSingleton($oldTransferServer)
+    {
+        $refObject = new ReflectionObject($oldTransferServer);
+        $refProperty = $refObject->getProperty('instance');
+        $refProperty->setAccessible(true);
+        $refProperty->setValue(null);
+    }
+
+    /**
+     * @param string $action
+     * @param \Spryker\Shared\Kernel\Transfer\TransferInterface|null $transfer
+     *
+     * @return callable
+     */
+    private function executeMockedListenerTest($action, $transfer = null)
+    {
+        $eventMock = new FilterControllerEvent();
+        $controller = new GatewayController();
+        $eventMock->setController([$controller, $action]);
+
+        $controllerListenerPlugin = new GatewayControllerListenerPlugin();
+
+        if (!$transfer) {
+            $transfer = $this->getTransferMock();
+        }
+
+        $this->initTransferServer($transfer);
+
+        $controllerListenerPlugin->onKernelController($eventMock);
+        $controllerCallable = $eventMock->getController();
+
+        return $controllerCallable;
+    }
+
+    /**
+     * @return \PHPUnit_Framework_MockObject_MockObject|\Spryker\Shared\Kernel\Transfer\TransferInterface
+     */
+    private function getTransferMock()
+    {
+        $transfer = $this->getMockBuilder(TransferInterface::class)->getMock();
+
+        return $transfer;
+    }
+
+}
diff --git a/Bundles/ZedRequest/tests/_support/FunctionalTester.php b/Bundles/ZedRequest/tests/_support/FunctionalTester.php
deleted file mode 100644
index c3e2537..0000000
--- a/Bundles/ZedRequest/tests/_support/FunctionalTester.php
+++ /dev/null
@@ -1,30 +0,0 @@
-<?php
-namespace ZedRequest;
-
-use Codeception\Actor;
-
-/**
- * Inherited Methods
- * @method void wantToTest($text)
- * @method void wantTo($text)
- * @method void execute($callable)
- * @method void expectTo($prediction)
- * @method void expect($prediction)
- * @method void amGoingTo($argumentation)
- * @method void am($role)
- * @method void lookForwardTo($achieveValue)
- * @method void comment($description)
- * @method \Codeception\Lib\Friend haveFriend($name, $actorClass = null)
- *
- * @SuppressWarnings(PHPMD)
- */
-class FunctionalTester extends Actor
-{
-
-    use _generated\FunctionalTesterActions;
-
-   /**
-    * Define custom actions here
-    */
-
-}
diff --git a/Bundles/ZedRequest/tests/_support/Module/Functional.php b/Bundles/ZedRequest/tests/_support/Module/Functional.php
deleted file mode 100644
index 0930e06..0000000
--- a/Bundles/ZedRequest/tests/_support/Module/Functional.php
+++ /dev/null
@@ -1,74 +0,0 @@
-<?php
-
-/**
- * (c) Spryker Systems GmbH copyright protected
- */
-
-namespace ZedRequest\Module;
-
-use Codeception\Module;
-use Codeception\TestCase;
-use Propel\Runtime\Propel;
-use Silex\Application;
-use Spryker\Zed\Propel\Communication\Plugin\ServiceProvider\PropelServiceProvider;
-
-class Functional extends Module
-{
-
-    /**
-     * @param array|null $config
-     */
-    public function __construct($config = null)
-    {
-        parent::__construct($config);
-
-        $propelServiceProvider = new PropelServiceProvider();
-        $propelServiceProvider->boot(new Application());
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _before(TestCase $test)
-    {
-        parent::_before($test);
-
-        Propel::getWriteConnection('zed')->beginTransaction();
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     *
-     * @return void
-     */
-    public function _after(TestCase $test)
-    {
-        parent::_after($test);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-    /**
-     * @param \Codeception\TestCase $test
-     * @param bool $fail
-     *
-     * @return void
-     */
-    public function _failed(TestCase $test, $fail)
-    {
-        parent::_failed($test, $fail);
-
-        Propel::getWriteConnection('zed')->rollBack();
-
-        if (session_status() === PHP_SESSION_ACTIVE) {
-            session_destroy();
-        }
-    }
-
-}
diff --git a/composer.json b/composer.json
index d7b8aa9..543dd28 100644
--- a/composer.json
+++ b/composer.json
@@ -112,12 +112,18 @@
       "Functional\\Spryker\\Shared\\Cms\\": "Bundles/Cms/tests",
       "Spryker\\Zed\\Cms\\": "Bundles/Cms/src",
       "Functional\\Spryker\\Zed\\Cms\\": "Bundles/Cms/tests",
+
       "Spryker\\Client\\Collector\\": "Bundles/Collector/src",
       "Unit\\Spryker\\Client\\Collector\\": "Bundles/Collector/tests",
       "Spryker\\Shared\\Collector\\": "Bundles/Collector/src",
       "Unit\\Spryker\\Shared\\Collector\\": "Bundles/Collector/tests",
       "Spryker\\Zed\\Collector\\": "Bundles/Collector/src",
       "Unit\\Spryker\\Zed\\Collector\\": "Bundles/Collector/tests",
+
+      "Spryker\\Zed\\CollectorStorageConnector\\": "Bundles/CollectorStorageConnector/src",
+
+      "Spryker\\Zed\\CollectorSearchConnector\\": "Bundles/CollectorSearchConnector/src",
+
       "Spryker\\Shared\\Config\\": "Bundles/Config/src",
       "Unit\\Spryker\\Shared\\Config\\": "Bundles/Config/tests",
       "Spryker\\Zed\\Console\\": "Bundles/Console/src",
@@ -237,15 +243,9 @@
       "Unit\\Spryker\\Zed\\Kernel\\": "Bundles/Kernel/tests",
       "Functional\\Spryker\\Zed\\Kernel\\": "Bundles/Kernel/tests",
 
-      "Spryker\\Shared\\Library\\": "Bundles/Library/src",
-      "Unit\\Spryker\\Shared\\Library\\": "Bundles/Library/tests",
-      "Functional\\Spryker\\Shared\\Library\\": "Bundles/Library/tests",
-      "Spryker\\Yves\\Library\\": "Bundles/Library/src",
-      "Unit\\Spryker\\Yves\\Library\\": "Bundles/Library/tests",
-      "Functional\\Spryker\\Yves\\Library\\": "Bundles/Library/tests",
-      "Spryker\\Zed\\Library\\": "Bundles/Library/src",
-      "Unit\\Spryker\\Zed\\Library\\": "Bundles/Library/tests",
-      "Functional\\Spryker\\Zed\\Library\\": "Bundles/Library/tests",
+      "Spryker\\Shared\\KeyBuilder\\": "Bundles/KeyBuilder/src",
+      "Unit\\Spryker\\Shared\\KeyBuilder\\": "Bundles/KeyBuilder/tests",
+
       "Spryker\\Client\\Locale\\": "Bundles/Locale/src",
       "Unit\\Spryker\\Client\\Locale\\": "Bundles/Locale/tests",
       "Functional\\Spryker\\Client\\Locale\\": "Bundles/Locale/tests",
@@ -284,10 +284,16 @@
       "Unit\\Spryker\\Yves\\Money\\": "Bundles/Money/tests",
       "Unit\\Spryker\\Zed\\Money\\": "Bundles/Money/tests",
 
+      "Spryker\\Shared\\ZedNavigation\\": "Bundles/ZedNavigation/src",
+      "Spryker\\Zed\\ZedNavigation\\": "Bundles/ZedNavigation/src",
+      "Unit\\Spryker\\Zed\\ZedNavigation\\": "Bundles/ZedNavigation/tests",
+
       "Spryker\\Shared\\NewRelic\\": "Bundles/NewRelic/src",
       "Spryker\\Zed\\NewRelic\\": "Bundles/NewRelic/src",
       "Spryker\\Yves\\NewRelic\\": "Bundles/NewRelic/src",
 
+      "Spryker\\Shared\\NewRelicApi\\": "Bundles/NewRelicApi/src",
+
       "Spryker\\Client\\Newsletter\\": "Bundles/Newsletter/src",
       "Functional\\Spryker\\Client\\Newsletter\\": "Bundles/Newsletter/tests",
       "Spryker\\Shared\\Newsletter\\": "Bundles/Newsletter/src",
@@ -407,6 +413,10 @@
       "Unit\\Spryker\\Zed\\Propel\\": "Bundles/Propel/tests",
       "Functional\\Spryker\\Zed\\Propel\\": "Bundles/Propel/tests",
 
+      "Spryker\\Zed\\PropelOrm\\": "Bundles/PropelOrm/src",
+
+      "Spryker\\Client\\Quote\\": "Bundles/Quote/src",
+
       "Spryker\\Shared\\Refund\\": "Bundles/Refund/src",
       "Spryker\\Zed\\Refund\\": "Bundles/Refund/src",
       "Acceptance\\Refund\\": "Bundles/Refund/tests",
@@ -565,8 +575,21 @@
       "Unit\\Spryker\\Zed\\DiscountSalesAggregatorConnector\\": "Bundles/DiscountSalesAggregatorConnector/tests",
       "Functional\\Spryker\\Zed\\DiscountSalesAggregatorConnector\\": "Bundles/DiscountSalesAggregatorConnector/tests",
 
+      "Spryker\\Service\\UtilDataReader\\": "Bundles/UtilDataReader/src",
+      "Unit\\Service\\UtilDataReader\\": "Bundles/UtilDataReader/tests",
+
+      "Spryker\\Service\\UtilDateTime\\": "Bundles/UtilDateTime/src",
+      "Unit\\Service\\UtilDateTime\\": "Bundles/UtilDateTime/tests",
+      "Functional\\Service\\UtilDateTime\\": "Bundles/UtilDateTime/tests",
+
       "Spryker\\Service\\UtilText\\": "Bundles/UtilText/src",
-      "Functional\\Spryker\\Service\\UtilText\\": "Bundles/UtilText/tests",
+      "Unit\\Spryker\\Service\\UtilText\\": "Bundles/UtilText/tests",
+
+      "Spryker\\Service\\UtilDataReader\\": "Bundles/UtilDataReader/src",
+      "Functional\\Spryker\\Service\\UtilText\\": "Bundles/UtilDataReader/tests",
+
+      "Spryker\\Service\\UtilDateTime\\": "Bundles/UtilDateTime/src",
+      "Spryker\\Shared\\UtilDateTime\\": "Bundles/UtilDateTime/src",
 
       "Spryker\\Service\\UtilSanitize\\": "Bundles/UtilSanitize/src",
       "Functional\\Spryker\\Service\\UtilSanitize\\": "Bundles/UtilSanitize/tests",
